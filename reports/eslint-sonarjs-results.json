[{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\app\\error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\app\\global-error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\app\\not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ActionMenuOverlay.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1183,1231],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5163,5207],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\n// Extend CSSProperties to include WebkitAppRegion\r\ndeclare module 'react' {\r\n  interface CSSProperties {\r\n    WebkitAppRegion?: 'drag' | 'no-drag';\r\n  }\r\n}\r\nimport { Input } from './ui/input';\r\n\r\nimport {\r\n  Search,\r\n  Wand2,\r\n  FileText,\r\n  Code,\r\n  MessageSquare,\r\n  Zap,\r\n  Star\r\n} from 'lucide-react';\r\nimport { promptsService, type Prompt } from '../services/promptsService';\r\n\r\ninterface ActionItem {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: 'prompt' | 'action' | 'recent';\r\n  icon: React.ReactNode;\r\n  action: () => void;\r\n  keywords?: string[];\r\n}\r\n\r\nexport function ActionMenuOverlay() {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [prompts, setPrompts] = useState<Prompt[]>([]);\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const searchInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Load prompts when component mounts\r\n  useEffect(() => {\r\n    const loadPrompts = async () => {\r\n      try {\r\n        const allPrompts = await promptsService.getAllPrompts();\r\n        setPrompts(allPrompts || []);\r\n      } catch (error) {\r\n        console.error('Failed to load prompts:', error);\r\n        setPrompts([]);\r\n      }\r\n    };\r\n\r\n    loadPrompts();\r\n\r\n    // Focus search input\r\n    setTimeout(() => {\r\n      searchInputRef.current?.focus();\r\n    }, 100);\r\n  }, []);\r\n\r\n  // Create action items from prompts and built-in actions\r\n  const createActionItems = (): ActionItem[] => {\r\n    const items: ActionItem[] = [];\r\n\r\n    // Add ALL prompts from prompts service\r\n    prompts.forEach(prompt => {\r\n      items.push({\r\n        id: `prompt-${prompt.id}`,\r\n        title: prompt.name,\r\n        description: prompt.description || prompt.prompt.substring(0, 100) + (prompt.prompt.length > 100 ? '...' : ''),\r\n        category: 'prompt',\r\n        icon: <Wand2 className=\"h-4 w-4\" />,\r\n        action: () => {\r\n          handlePromptSelect(prompt.prompt);\r\n        },\r\n        keywords: [prompt.name, prompt.description, prompt.prompt, prompt.category]\r\n      });\r\n    });\r\n\r\n    // Add built-in actions\r\n    const builtInActions: ActionItem[] = [\r\n      {\r\n        id: 'action-summarize',\r\n        title: 'Summarize Text',\r\n        description: 'Summarize the provided text or document',\r\n        category: 'action',\r\n        icon: <FileText className=\"h-4 w-4\" />,\r\n        action: () => {\r\n          handlePromptSelect('Please provide a concise summary of the following text:\\n\\n{content}\\n\\nYour summary should capture the main points, key ideas, and overall message of the text in a clear and concise manner. Aim to keep the summary around 100-200 words, depending on the length and complexity of the original text.');\r\n        },\r\n        keywords: ['summarize', 'summary', 'text', 'document']\r\n      },\r\n      {\r\n        id: 'action-explain',\r\n        title: 'Explain Code',\r\n        description: 'Explain how the provided code works',\r\n        category: 'action',\r\n        icon: <Code className=\"h-4 w-4\" />,\r\n        action: () => {\r\n          handlePromptSelect('Please analyze and explain the functionality of the following code snippet. Break down each part of the code to describe what it does, and explain how the code works as a whole.:\\n\\n{content}');\r\n        },\r\n        keywords: ['explain', 'code', 'programming', 'understand']\r\n      },\r\n      {\r\n        id: 'action-translate',\r\n        title: 'Translate Text',\r\n        description: 'Translate text to another language',\r\n        category: 'action',\r\n        icon: <MessageSquare className=\"h-4 w-4\" />,\r\n        action: () => {\r\n          handlePromptSelect('Please translate the following text to English:\\n\\n{content}\\n\\nIf the original text is not in English, provide the translation along with the original language if possible. Thank you!');\r\n        },\r\n        keywords: ['translate', 'language', 'convert']\r\n      },\r\n      {\r\n        id: 'action-improve',\r\n        title: 'Improve Writing',\r\n        description: 'Improve grammar and style of text',\r\n        category: 'action',\r\n        icon: <Zap className=\"h-4 w-4\" />,\r\n        action: () => {\r\n          handlePromptSelect('Please review and improve the grammar and style of the following text. Ensure that the improved version maintains the original meaning while enhancing clarity, readability, and overall quality.:\\n\\n{content}');\r\n        },\r\n        keywords: ['improve', 'grammar', 'writing', 'style']\r\n      },\r\n      {\r\n        id: 'action-brainstorm',\r\n        title: 'Brainstorm Ideas',\r\n        description: 'Generate creative ideas for a topic',\r\n        category: 'action',\r\n        icon: <Star className=\"h-4 w-4\" />,\r\n        action: () => {\r\n          handlePromptSelect('Please brainstorm creative ideas for:\\n\\n{content}');\r\n        },\r\n        keywords: ['brainstorm', 'ideas', 'creative', 'generate']\r\n      }\r\n    ];\r\n\r\n    return [...items, ...builtInActions];\r\n  };\r\n\r\n  const handlePromptSelect = (promptText: string) => {\r\n    // Send the prompt back to the main window and close overlay\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      console.log('Selected prompt:', promptText);\r\n      // Send the prompt to the main window\r\n      window.electronAPI.sendPromptToMain(promptText);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      window.electronAPI.closeActionMenu();\r\n    }\r\n  };\r\n\r\n  // Filter items based on search query\r\n  const filteredItems = createActionItems().filter(item => {\r\n    if (!searchQuery.trim()) return true;\r\n\r\n    const query = searchQuery.toLowerCase();\r\n    const searchableText = [\r\n      item.title,\r\n      item.description,\r\n      ...(item.keywords || [])\r\n    ].join(' ').toLowerCase();\r\n\r\n    return searchableText.includes(query);\r\n  });\r\n\r\n  // Handle keyboard navigation\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    switch (e.key) {\r\n      case 'ArrowDown':\r\n        e.preventDefault();\r\n        setSelectedIndex(prev => Math.min(prev + 1, filteredItems.length - 1));\r\n        break;\r\n      case 'ArrowUp':\r\n        e.preventDefault();\r\n        setSelectedIndex(prev => Math.max(prev - 1, 0));\r\n        break;\r\n      case 'Enter':\r\n        e.preventDefault();\r\n        if (filteredItems[selectedIndex]) {\r\n          filteredItems[selectedIndex].action();\r\n        }\r\n        break;\r\n      case 'Escape':\r\n        e.preventDefault();\r\n        handleClose();\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Reset selected index when search changes\r\n  useEffect(() => {\r\n    setSelectedIndex(0);\r\n  }, [searchQuery]);\r\n\r\n  return (\r\n    <div className=\"action-menu-overlay h-full w-full flex flex-col overflow-hidden\" style={{ backgroundColor: 'hsl(var(--background))', color: 'hsl(var(--foreground))' }}>\r\n      {/* Draggable Title Bar */}\r\n      <div\r\n        className=\"flex items-center justify-between px-3 py-2 border-b border-border cursor-grab active:cursor-grabbing bg-muted hover:bg-muted/80 transition-colors\"\r\n        style={{\r\n          backgroundColor: 'hsl(var(--muted))',\r\n          borderBottom: '1px solid hsl(var(--border))',\r\n          WebkitAppRegion: 'drag',\r\n          minHeight: '40px'\r\n        }}\r\n        onMouseDown={(e) => {\r\n          // Enable dragging for the entire title bar area\r\n          e.currentTarget.style.cursor = 'grabbing';\r\n        }}\r\n        onMouseUp={(e) => {\r\n          e.currentTarget.style.cursor = 'grab';\r\n        }}\r\n      >\r\n        <div className=\"flex items-center gap-2\">\r\n          <div className=\"flex flex-col gap-0.5\">\r\n            <div className=\"w-1 h-1 bg-muted-foreground rounded-full\"></div>\r\n            <div className=\"w-1 h-1 bg-muted-foreground rounded-full\"></div>\r\n            <div className=\"w-1 h-1 bg-muted-foreground rounded-full\"></div>\r\n          </div>\r\n          <h2 className=\"text-sm font-medium text-foreground select-none\">\r\n            Actions & Prompts\r\n          </h2>\r\n        </div>\r\n        <button\r\n          onClick={handleClose}\r\n          className=\"h-6 w-6 p-0 hover:bg-muted rounded flex items-center justify-center text-muted-foreground hover:text-foreground transition-colors\"\r\n          style={{ WebkitAppRegion: 'no-drag' }}\r\n        >\r\n          <svg className=\"h-3 w-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n\r\n\r\n\r\n\r\n      {/* Search */}\r\n      <div className=\"p-4 border-b border-border\">\r\n        <div className=\"relative\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n          <Input\r\n            ref={searchInputRef}\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n            placeholder=\"Search actions and prompts...\"\r\n            className=\"pl-10 text-base\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Results */}\r\n      <div className=\"flex-1 overflow-y-auto hide-scrollbar overlay-scroll\">\r\n        <div className=\"p-2\">\r\n          {filteredItems.length === 0 ? (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <Search className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n              <p>No actions found</p>\r\n              <p className=\"text-sm\">Try a different search term</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-1\">\r\n              {filteredItems.map((item) => (\r\n                <div\r\n                  key={item.id}\r\n                  onClick={item.action}\r\n                  style={{\r\n                    width: '100%',\r\n                    textAlign: 'left',\r\n                    padding: '12px',\r\n                    cursor: 'pointer',\r\n                    backgroundColor: 'transparent',\r\n                    border: 'none',\r\n                    outline: 'none',\r\n                    boxShadow: 'none',\r\n                    borderRadius: '0',\r\n                    margin: '0'\r\n                  }}\r\n                  onMouseEnter={(e) => {\r\n                    e.currentTarget.style.backgroundColor = 'hsl(var(--muted) / 0.5)';\r\n                  }}\r\n                  onMouseLeave={(e) => {\r\n                    e.currentTarget.style.backgroundColor = 'transparent';\r\n                  }}\r\n                >\r\n                  <div style={{ display: 'flex', alignItems: 'flex-start', gap: '12px', width: '100%' }}>\r\n                    <div style={{ flexShrink: 0, marginTop: '2px' }}>\r\n                      {item.icon}\r\n                    </div>\r\n                    <div style={{ flex: 1, minWidth: 0 }}>\r\n                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '4px' }}>\r\n                        <span style={{ fontWeight: 500, fontSize: '14px', color: 'hsl(var(--foreground))' }}>{item.title}</span>\r\n                        <span style={{ fontSize: '12px', padding: '2px 8px', borderRadius: '9999px', color: 'hsl(var(--muted-foreground))', textTransform: 'capitalize' }}>\r\n                          {item.category}\r\n                        </span>\r\n                      </div>\r\n                      <p style={{ fontSize: '12px', color: 'hsl(var(--muted-foreground))', lineHeight: '1.4' }}>\r\n                        {item.description}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ApiKeySettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":15,"column":21,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":15,"endColumn":63},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 7 times.","line":33,"column":55,"nodeType":"Literal","endLine":33,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2615,2618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2615,2618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2653,2705],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2724,2727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2724,2727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3010,3082],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3289,3357],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3947,4012],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4058,4123],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadApiKeys' and 'onApiKeyChange'. Either include them or remove the dependency array. If 'onApiKeyChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":101,"column":6,"nodeType":"ArrayExpression","endLine":101,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadApiKeys, onApiKeyChange]","fix":{"range":[4175,4177],"text":"[loadApiKeys, onApiKeyChange]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":105,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":39},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":105,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4393,4477],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadApiKeys'. Either include it or remove the dependency array.","line":117,"column":6,"nodeType":"ArrayExpression","endLine":117,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadApiKeys]","fix":{"range":[4902,4904],"text":"[loadApiKeys]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5096,5164],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5225,5278],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5309,5381],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleSave'. Either include it or remove the dependency array.","line":134,"column":6,"nodeType":"ArrayExpression","endLine":134,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [handleSave, hasChanges, onRegisterSaveFunction]","fix":{"range":[5440,5476],"text":"[handleSave, hasChanges, onRegisterSaveFunction]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5574,5640],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5776,5840],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5979,6059],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":160,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":160,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6548,6870],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7066,7166],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7218,7303],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7475,7557],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7824,7890],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8042,8122],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[9693,9769],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.","line":251,"column":31,"nodeType":null,"messageId":"refactorFunction","endLine":251,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":260,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":260,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10151,10219],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10596,10682],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11265,11314],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":307,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":307,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12274,12359],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":310,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":310,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12431,12519],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":314,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":314,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12586,12654],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":316,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":316,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12746,12830],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":321,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":321,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12889,12938],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":328,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":328,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13124,13182],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":332,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":332,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13281,13345],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":337,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":337,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13517,13568],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Button } from './ui/button';\r\nimport type { ProviderApiKeyData } from '../services/secureApiKeyService';\r\nimport { settingsService } from '../services/settingsService';\r\n\r\n// Function to get secure API key service when needed\r\nfunction getSecureApiKeyService() {\r\n  if (typeof window === 'undefined') {\r\n    throw new Error('Secure API key service is only available in browser environment');\r\n  }\r\n\r\n  try {\r\n    const service = require('../services/secureApiKeyService').secureApiKeyService;\r\n    if (!service) {\r\n      throw new Error('Secure API key service not found');\r\n    }\r\n    return service;\r\n  } catch (error) {\r\n    throw new Error(`Failed to load secure API key service: ${error instanceof Error ? error.message : String(error)}`);\r\n  }\r\n}\r\n\r\ninterface ApiKeySettingsProps {\r\n  onApiKeyChange?: (providerId: string, hasKey: boolean) => void;\r\n  onRegisterSaveFunction?: (saveFunction: () => Promise<void>) => void;\r\n}\r\n\r\nconst PROVIDERS = [\r\n  { id: 'openai', name: 'OpenAI', placeholder: 'sk-...' },\r\n  { id: 'anthropic', name: 'Anthropic', placeholder: 'sk-ant-...' },\r\n  { id: 'gemini', name: 'Google Gemini', placeholder: 'API Key...' },\r\n  { id: 'mistral', name: 'Mistral AI', placeholder: 'API Key...' },\r\n  { id: 'deepseek', name: 'DeepSeek', placeholder: 'sk-...' },\r\n  { id: 'deepinfra', name: 'Deepinfra', placeholder: 'API Key...' },\r\n  { id: 'groq', name: 'Groq', placeholder: 'API Key...' },\r\n  { id: 'openrouter', name: 'OpenRouter', placeholder: 'sk-or-...' },\r\n  { id: 'requesty', name: 'Requesty', placeholder: 'API Key...' },\r\n  { id: 'replicate', name: 'Replicate', placeholder: 'r8_...' },\r\n  { id: 'lmstudio', name: 'LM Studio', placeholder: 'Not required', hasBaseUrl: true },\r\n  { id: 'jan', name: 'Jan AI', placeholder: 'API Key...', hasBaseUrl: true },\r\n  { id: 'ollama', name: 'Ollama', placeholder: 'Not required', hasBaseUrl: true },\r\n  { id: 'n8n', name: 'N8N', placeholder: 'API Key...', hasBaseUrl: true },\r\n];\r\n\r\nexport function ApiKeySettings({ onApiKeyChange, onRegisterSaveFunction }: ApiKeySettingsProps) {\r\n  const [apiKeys, setApiKeys] = useState<Record<string, ProviderApiKeyData>>({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\r\n\r\n\r\n  // Load API keys on component mount\r\n  useEffect(() => {\r\n    // Reduce console spam - only log once per session\r\n    if (!(window as any).__apiKeySettingsLogged) {\r\n      console.log('🔐 ApiKeySettings: Component mounted');\r\n      (window as any).__apiKeySettingsLogged = true;\r\n    }\r\n\r\n    const initializeApiKeys = async () => {\r\n      try {\r\n        const service = getSecureApiKeyService();\r\n        // Only log during first initialization attempt to reduce console spam\r\n        if (!service.isInitialized()) {\r\n          console.log('🔐 ApiKeySettings: Waiting for secure API key service...');\r\n\r\n          // Wait for initialization without retrying (service handles its own initialization)\r\n          await service.waitForInitialization();\r\n\r\n          if (!service.isInitialized()) {\r\n            console.warn('🔐 ApiKeySettings: Service initialization timed out');\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (service.isInitialized()) {\r\n          // Service is ready - only log once to reduce console spam\r\n          loadApiKeys(true); // Force reset on initial load\r\n\r\n          // Listen for API key changes\r\n          const handleApiKeyChange = (providerId: string, hasKey: boolean) => {\r\n            onApiKeyChange?.(providerId, hasKey);\r\n          };\r\n\r\n          service.addListener(handleApiKeyChange);\r\n\r\n          return () => {\r\n            service.removeListener(handleApiKeyChange);\r\n          };\r\n        } else {\r\n          console.error('🔐 ApiKeySettings: Service failed to initialize');\r\n        }\r\n      } catch (error) {\r\n        console.error('🔐 ApiKeySettings: Failed to initialize:', error);\r\n      }\r\n    };\r\n\r\n    initializeApiKeys();\r\n  }, []); // Remove onApiKeyChange dependency to prevent re-initialization\r\n\r\n  // Listen for settings saved events to refresh API keys\r\n  useEffect(() => {\r\n    const handleSettingsSaved = (event: CustomEvent) => {\r\n      console.log('🔄 ApiKeySettings: Settings saved event received, reloading API keys');\r\n      // Reload API keys from storage after settings are saved\r\n      setTimeout(() => {\r\n        loadApiKeys(true); // Force reload from storage\r\n      }, 200); // Small delay to ensure save is complete\r\n    };\r\n\r\n    window.addEventListener('settingsSaved', handleSettingsSaved as EventListener);\r\n    return () => {\r\n      window.removeEventListener('settingsSaved', handleSettingsSaved as EventListener);\r\n    };\r\n  }, []);\r\n\r\n  // Register save function with parent component\r\n  useEffect(() => {\r\n    if (onRegisterSaveFunction) {\r\n      const saveFunction = async () => {\r\n        if (hasChanges) {\r\n          console.log('🔐 ApiKeySettings: Executing save via parent request');\r\n          await handleSave();\r\n        } else {\r\n          console.log('🔐 ApiKeySettings: No changes to save');\r\n        }\r\n      };\r\n\r\n      console.log('🔐 ApiKeySettings: Registering save function with parent');\r\n      onRegisterSaveFunction(saveFunction);\r\n    }\r\n  }, [hasChanges, onRegisterSaveFunction]); // Re-register when hasChanges updates\r\n\r\n  const loadApiKeys = (forceReset = false) => {\r\n    console.log('🔍 loadApiKeys called with forceReset:', forceReset);\r\n\r\n    const loadedKeys: Record<string, ProviderApiKeyData> = {};\r\n\r\n    try {\r\n      const service = getSecureApiKeyService();\r\n      console.log('🔍 Service initialized:', service.isInitialized());\r\n\r\n      // Also get settings to merge baseUrl from regular settings\r\n      const currentSettings = settingsService.getSettings();\r\n      console.log('🔍 Current settings providers:', currentSettings?.chat?.providers);\r\n\r\n      PROVIDERS.forEach(provider => {\r\n        try {\r\n          const data = service.getApiKeyData(provider.id);\r\n          const settingsBaseUrl = currentSettings?.chat?.providers?.[provider.id]?.baseUrl || '';\r\n\r\n          if (data) {\r\n            // Merge secure storage data with settings baseUrl if secure storage doesn't have it\r\n            loadedKeys[provider.id] = {\r\n              ...data,\r\n              baseUrl: data.baseUrl || settingsBaseUrl\r\n            };\r\n            console.log(`🔍 Loaded API key for ${provider.id}:`, {\r\n              hasApiKey: !!data.apiKey,\r\n              keyLength: data.apiKey?.length || 0,\r\n              hasBaseUrl: !!(data.baseUrl || settingsBaseUrl),\r\n              baseUrlSource: data.baseUrl ? 'secure' : settingsBaseUrl ? 'settings' : 'none'\r\n            });\r\n          } else {\r\n            loadedKeys[provider.id] = {\r\n              apiKey: '',\r\n              baseUrl: settingsBaseUrl,\r\n              lastSelectedModel: ''\r\n            };\r\n            console.log(`🔍 No API key data for ${provider.id}, using baseUrl from settings:`, settingsBaseUrl);\r\n          }\r\n        } catch (error) {\r\n          console.error(`🔐 ApiKeySettings: Error loading API key for ${provider.id}:`, error);\r\n          // Don't mask the error - let user know service is not ready\r\n          if (error instanceof Error && error.message.includes('not initialized')) {\r\n            console.warn('🔐 ApiKeySettings: Service not initialized, will retry when ready');\r\n          }\r\n          const settingsBaseUrl = currentSettings?.chat?.providers?.[provider.id]?.baseUrl || '';\r\n          loadedKeys[provider.id] = { apiKey: '', baseUrl: settingsBaseUrl, lastSelectedModel: '' };\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('🔐 ApiKeySettings: Service not available:', error);\r\n      PROVIDERS.forEach(provider => {\r\n        loadedKeys[provider.id] = { apiKey: '', baseUrl: '', lastSelectedModel: '' };\r\n      });\r\n    }\r\n\r\n    console.log('🔍 Setting API keys in component state:', Object.keys(loadedKeys));\r\n    setApiKeys(loadedKeys);\r\n\r\n    // Only reset hasChanges if forced (initial load or cancel) or if no changes exist\r\n    if (forceReset || !hasChanges) {\r\n      setHasChanges(false);\r\n    }\r\n\r\n    setValidationErrors({});\r\n\r\n  };\r\n\r\n  const updateApiKey = (providerId: string, field: keyof ProviderApiKeyData, value: string) => {\r\n    setApiKeys(prev => ({\r\n      ...prev,\r\n      [providerId]: {\r\n        ...prev[providerId],\r\n        [field]: value\r\n      }\r\n    }));\r\n\r\n    setHasChanges(true);\r\n\r\n    // Notify parent component that API keys have changed\r\n    if (onApiKeyChange) {\r\n      onApiKeyChange(providerId, value.length > 0);\r\n    }\r\n\r\n    // Clear validation error for this provider\r\n    if (validationErrors[providerId]) {\r\n      setValidationErrors(prev => {\r\n        const newErrors = { ...prev };\r\n        delete newErrors[providerId];\r\n        return newErrors;\r\n      });\r\n    }\r\n\r\n\r\n  };\r\n\r\n  const validateApiKey = (providerId: string, apiKey: string): string | null => {\r\n    if (!apiKey.trim()) {\r\n      // Only validate if the provider requires an API key\r\n      const provider = PROVIDERS.find(p => p.id === providerId);\r\n      if (provider && !['lmstudio', 'ollama'].includes(providerId)) {\r\n        return null; // Allow empty keys, they're optional\r\n      }\r\n      return null;\r\n    }\r\n    \r\n    try {\r\n      const service = getSecureApiKeyService();\r\n      const validation = service.validateApiKey(providerId, apiKey);\r\n      return validation.isValid ? null : validation.error || 'Invalid API key format';\r\n    } catch (error) {\r\n      console.warn('🔐 ApiKeySettings: Validation service not available:', error);\r\n      return null; // No validation if service not available\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    setIsLoading(true);\r\n    const errors: Record<string, string> = {};\r\n\r\n    try {\r\n      // Get service and check if it's available and initialized\r\n      const service = getSecureApiKeyService();\r\n\r\n      // ALWAYS SAVE - No conditions that prevent saving\r\n      console.log('🔐 ApiKeySettings: Executing save (ALWAYS SAVE mode)');\r\n\r\n      // ALWAYS SAVE - No validation that prevents saving\r\n      // Still validate for user feedback, but don't prevent saving\r\n      for (const [providerId, data] of Object.entries(apiKeys)) {\r\n        if (data.apiKey.trim()) {\r\n          const error = validateApiKey(providerId, data.apiKey);\r\n          if (error) {\r\n            errors[providerId] = error;\r\n            console.warn(`⚠️ Validation warning for ${providerId}: ${error} (but saving anyway)`);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Set validation errors for display but continue saving\r\n      setValidationErrors(errors);\r\n\r\n      // ALWAYS SAVE ALL API KEYS - No conditions that prevent saving\r\n      for (const [providerId, data] of Object.entries(apiKeys)) {\r\n        try {\r\n          // Always save, regardless of whether fields are empty or not\r\n          await service.setApiKeyData(providerId, {\r\n            apiKey: data.apiKey.trim(),\r\n            baseUrl: data.baseUrl?.trim(),\r\n            lastSelectedModel: data.lastSelectedModel\r\n          });\r\n          console.log(`✅ Saved API key for ${providerId}`);\r\n\r\n          // Also save baseUrl to regular settings for providers that use it\r\n          if (data.baseUrl?.trim() && (providerId === 'ollama' || providerId === 'lmstudio' || providerId === 'jan' || providerId === 'n8n')) {\r\n            try {\r\n              const currentSettings = settingsService.getSettings();\r\n              if (currentSettings?.chat?.providers) {\r\n                const updatedSettings = {\r\n                  ...currentSettings,\r\n                  chat: {\r\n                    ...currentSettings.chat,\r\n                    providers: {\r\n                      ...currentSettings.chat.providers,\r\n                      [providerId]: {\r\n                        ...currentSettings.chat.providers[providerId],\r\n                        baseUrl: data.baseUrl.trim()\r\n                      }\r\n                    }\r\n                  }\r\n                };\r\n                await settingsService.updateSettings(updatedSettings);\r\n                console.log(`✅ Saved baseUrl to settings for ${providerId}: ${data.baseUrl.trim()}`);\r\n              }\r\n            } catch (settingsError) {\r\n              console.error(`❌ Failed to save baseUrl to settings for ${providerId}:`, settingsError);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(`❌ Failed to save API key for ${providerId}:`, error);\r\n          // Don't throw error - continue saving other keys (ALWAYS SAVE mode)\r\n          console.log(`🔄 Continuing to save other API keys despite error for ${providerId}`);\r\n        }\r\n      }\r\n\r\n      setHasChanges(false);\r\n      console.log('✅ All API keys saved successfully');\r\n\r\n      // Debug: Check API key state after save\r\n      try {\r\n        const service = getSecureApiKeyService();\r\n        service.debugApiKeyState();\r\n      } catch (error) {\r\n        console.error('🔍 Failed to debug API key state:', error);\r\n      }\r\n\r\n      // Force reload API keys from storage to ensure UI reflects saved values\r\n      console.log('🔄 Reloading API keys from storage after save...');\r\n      setTimeout(() => {\r\n        loadApiKeys(true); // Force reload from storage\r\n      }, 100); // Small delay to ensure save is complete\r\n    } catch (error) {\r\n      console.error('❌ Failed to save API keys:', error);\r\n      throw error; // Re-throw so parent can handle the error\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    loadApiKeys(true); // Force reset on cancel\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-3\">\r\n      <div>\r\n        <h3 className=\"text-sm font-medium mb-2\">API Configuration</h3>\r\n        <p className=\"text-xs text-muted-foreground mb-3\">\r\n          API keys are encrypted and stored securely. They are never transmitted in plain text.\r\n        </p>\r\n\r\n        <div className=\"space-y-2\">\r\n          {PROVIDERS.map(provider => (\r\n            <div key={provider.id} className=\"space-y-1\">\r\n              <Label htmlFor={`${provider.id}-key`} className=\"text-xs\">{provider.name} API Key</Label>\r\n              <Input\r\n                id={`${provider.id}-key`}\r\n                type=\"password\"\r\n                value={apiKeys[provider.id]?.apiKey || ''}\r\n                placeholder={provider.placeholder}\r\n                className={`h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors ${\r\n                  validationErrors[provider.id] ? 'border-destructive' : ''\r\n                }`}\r\n                onChange={(e) => updateApiKey(provider.id, 'apiKey', e.target.value)}\r\n              />\r\n              {validationErrors[provider.id] && (\r\n                <p className=\"text-xs text-destructive\">{validationErrors[provider.id]}</p>\r\n              )}\r\n              \r\n              {provider.hasBaseUrl && (\r\n                <div className=\"mt-1\">\r\n                  <Label htmlFor={`${provider.id}-url`} className=\"text-xs\">{provider.name} Base URL</Label>\r\n                  <Input\r\n                    id={`${provider.id}-url`}\r\n                    type=\"url\"\r\n                    value={apiKeys[provider.id]?.baseUrl || ''}\r\n                    placeholder={\r\n                      provider.id === 'lmstudio' ? 'http://localhost:1234/v1' :\r\n                      provider.id === 'jan' ? 'http://127.0.0.1:1337/v1' :\r\n                      provider.id === 'ollama' ? 'http://localhost:11434' :\r\n                      provider.id === 'n8n' ? 'https://your-n8n-instance.com/webhook/your-webhook-id' :\r\n                      'Base URL...'\r\n                    }\r\n                    className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                    onChange={(e) => updateApiKey(provider.id, 'baseUrl', e.target.value)}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        \r\n\r\n\r\n\r\n\r\n        {hasChanges && (\r\n          <div className=\"flex gap-1 mt-3 pt-2 border-t\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={handleCancel}\r\n              disabled={isLoading}\r\n              className=\"h-7 text-xs flex-1\"\r\n            >\r\n              Cancel Changes\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\AttachmentPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ChatOverlay.tsx","messages":[{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"cleanup\".","line":33,"column":23,"nodeType":"CallExpression","messageId":"doImmediateAction","endLine":33,"endColumn":53,"fix":{"range":[1515,1584],"text":"return window.electronAPI.startDrag()"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2682,2739],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2944,3225],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useRef, useEffect, useCallback } from 'react';\r\nimport { Button } from './ui/button';\r\nimport { Card, CardContent } from './ui/card';\r\nimport { X, Minus, MessageSquare, ChevronDown } from 'lucide-react';\r\nimport { MessageWithThinking } from './MessageWithThinking';\r\nimport { UserMessage } from './UserMessage';\r\nimport { ThinkingIndicator } from './ThinkingIndicator';\r\nimport { KnowledgeBaseIndicator } from './KnowledgeBaseIndicator';\r\nimport { sessionService } from '../services/sessionService';\r\nimport type { Message } from '../services/chatService';\r\nimport type { SessionStats } from '../services/sessionService';\r\n\r\nimport './ChatOverlay.css';\r\n\r\ninterface ChatOverlayProps {\r\n  onClose?: () => void;\r\n}\r\n\r\nexport function ChatOverlay({ onClose }: ChatOverlayProps) {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [sessionStats, setSessionStats] = useState<SessionStats>(sessionService.getSessionStats());\r\n  const [showScrollToBottom, setShowScrollToBottom] = useState(false);\r\n  const [isKnowledgeBaseSearching, setIsKnowledgeBaseSearching] = useState(false);\r\n  const [knowledgeBaseSearchQuery, setKnowledgeBaseSearchQuery] = useState<string>('');\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Initialize window dragging using preload script\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined' && window.electronAPI && window.electronAPI.startDrag) {\r\n      const cleanup = window.electronAPI.startDrag();\r\n      return cleanup;\r\n    }\r\n  }, []);\r\n\r\n  const handleClose = () => {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      window.electronAPI.closeChatWindow();\r\n    }\r\n    onClose?.();\r\n  };\r\n\r\n  const handleMinimize = () => {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      window.electronAPI.minimizeWindow();\r\n    }\r\n  };\r\n\r\n  // Listen for messages from the main window and load initial state\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      // Load initial messages from localStorage or request from main window\r\n      const loadInitialMessages = async () => {\r\n        try {\r\n          // First try to get current messages from main window\r\n          const storedMessages = localStorage.getItem('chatWindowMessages');\r\n          if (storedMessages) {\r\n            const parsedMessages = JSON.parse(storedMessages);\r\n            setMessages(parsedMessages);\r\n          }\r\n\r\n          // Request current messages from main window\r\n          window.electronAPI.requestCurrentMessages?.();\r\n        } catch (error) {\r\n          console.error('Failed to load initial messages:', error);\r\n        }\r\n      };\r\n\r\n      // Listen for message updates from main window\r\n      const handleMessagesUpdate = (newMessages: unknown[]) => {\r\n        const messages = newMessages as Message[];\r\n        console.log('📨 ChatOverlay received messages:', messages.map(m => ({\r\n          id: m.id,\r\n          role: m.role,\r\n          hasContent: !!m.content,\r\n          hasSources: !!m.sources,\r\n          sourcesCount: m.sources?.length || 0,\r\n          sources: m.sources\r\n        })));\r\n        setMessages(messages);\r\n        // Store messages in localStorage for persistence\r\n        localStorage.setItem('chatWindowMessages', JSON.stringify(newMessages));\r\n      };\r\n\r\n      // Set up IPC listener for messages\r\n      window.electronAPI.onMessagesUpdate?.(handleMessagesUpdate);\r\n\r\n      // Set up IPC listener for knowledge base search updates\r\n      const handleKnowledgeBaseSearchUpdate = (data: {isSearching: boolean, query?: string}) => {\r\n        setIsKnowledgeBaseSearching(data.isSearching);\r\n        if (data.query) {\r\n          setKnowledgeBaseSearchQuery(data.query);\r\n        }\r\n      };\r\n\r\n      window.electronAPI.onKnowledgeBaseSearchUpdate?.(handleKnowledgeBaseSearchUpdate);\r\n\r\n      // Load initial state\r\n      loadInitialMessages();\r\n\r\n      return () => {\r\n        // Clean up listeners\r\n        window.electronAPI.removeAllListeners?.('messages-update');\r\n        window.electronAPI.removeAllListeners?.('knowledge-base-search-update');\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  // Update session stats when messages change\r\n  useEffect(() => {\r\n    setSessionStats(sessionService.getSessionStats());\r\n  }, [messages]);\r\n\r\n  // Debounced scroll to bottom function using requestAnimationFrame for smooth performance\r\n  const scrollToBottom = useCallback(() => {\r\n    if (!messagesEndRef.current) return;\r\n\r\n    requestAnimationFrame(() => {\r\n      messagesEndRef.current?.scrollIntoView({\r\n        behavior: 'smooth',\r\n        block: 'end'\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  // Check if user is at bottom of scroll container\r\n  const isAtBottom = useCallback(() => {\r\n    if (!scrollContainerRef.current) return false;\r\n\r\n    const { scrollTop, scrollHeight, clientHeight } = scrollContainerRef.current;\r\n    return scrollHeight - scrollTop - clientHeight < 50; // 50px threshold\r\n  }, []);\r\n\r\n  // Unified scroll management - handles all scroll scenarios\r\n  useEffect(() => {\r\n    if (!scrollContainerRef.current || messages.length === 0) return;\r\n\r\n    const wasAtBottom = isAtBottom();\r\n\r\n    // Auto-scroll if user was at bottom or if it's the first message\r\n    if (wasAtBottom || messages.length === 1) {\r\n      // Use a small delay to ensure DOM is updated, but avoid conflicts\r\n      const timeoutId = setTimeout(() => {\r\n        if (isAtBottom() || messages.length === 1) {\r\n          scrollToBottom();\r\n        }\r\n      }, 50);\r\n\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n  }, [messages, scrollToBottom, isAtBottom]);\r\n\r\n  // Add scroll listener\r\n  useEffect(() => {\r\n    const scrollContainer = scrollContainerRef.current;\r\n    if (!scrollContainer) return;\r\n\r\n    const handleScroll = () => {\r\n      if (!scrollContainerRef.current) return;\r\n\r\n      const { scrollTop, scrollHeight, clientHeight } = scrollContainerRef.current;\r\n      const isAtBottom = scrollHeight - scrollTop - clientHeight < 50; // 50px threshold\r\n      setShowScrollToBottom(!isAtBottom && messages.length > 0);\r\n    };\r\n\r\n    scrollContainer.addEventListener('scroll', handleScroll);\r\n\r\n    // Initial check\r\n    handleScroll();\r\n\r\n    return () => {\r\n      scrollContainer.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, [messages.length]);\r\n\r\n  return (\r\n    <div\r\n      className=\"h-screen w-full bg-background overflow-hidden flex flex-col\"\r\n      style={{\r\n        position: 'relative',\r\n        height: '100vh',\r\n        maxHeight: '100vh'\r\n      }}\r\n    >\r\n      {/* Title Bar - Draggable area using preload script */}\r\n      <div\r\n        className=\"flex-none h-10 bg-muted/50 border-b border-border flex items-center justify-between px-3 select-none chat-title-bar-drag-zone\"\r\n        style={{\r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          zIndex: 10000,\r\n          backdropFilter: 'blur(8px)',\r\n          backgroundColor: 'hsl(var(--muted) / 0.98)',\r\n          pointerEvents: 'auto',\r\n          cursor: 'grab'\r\n        }}\r\n      >\r\n        <span className=\"text-sm font-medium\">CHAT WINDOW</span>\r\n\r\n        <div className=\"flex items-center gap-1\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={handleMinimize}\r\n            className=\"h-6 w-6 p-0 hover:bg-muted\"\r\n            data-interactive=\"true\"\r\n          >\r\n            <Minus className=\"h-3 w-3\" />\r\n          </Button>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={handleClose}\r\n            className=\"h-6 w-6 p-0 hover:bg-destructive hover:text-destructive-foreground\"\r\n            data-interactive=\"true\"\r\n          >\r\n            <X className=\"h-3 w-3\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Content Area */}\r\n      <div\r\n        className=\"chat-overlay-content\"\r\n        style={{\r\n          position: 'absolute',\r\n          top: '40px',                    // Start below the fixed title bar\r\n          left: '0',\r\n          right: '0',\r\n          bottom: '0',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          overflow: 'hidden',\r\n          padding: '16px'\r\n        }}\r\n      >\r\n        {/* Knowledge Base Search Indicator */}\r\n        {isKnowledgeBaseSearching && (\r\n          <div className=\"mb-4\">\r\n            <KnowledgeBaseIndicator\r\n              isSearching={isKnowledgeBaseSearching}\r\n              searchQuery={knowledgeBaseSearchQuery}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {messages.length === 0 ? (\r\n          <div className=\"flex-1 flex items-center justify-center text-center text-muted-foreground\">\r\n            <div>\r\n              <MessageSquare className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n              <p>No messages yet</p>\r\n              <p className=\"text-sm\">Send a message from the main window to start chatting</p>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div\r\n            ref={scrollContainerRef}\r\n            className=\"flex-1 overflow-y-auto space-y-4 pr-2 custom-scrollbar\"\r\n            style={{\r\n              height: '100%',                  // Fill the content area\r\n              overflowY: 'auto',\r\n              overflowX: 'hidden'\r\n            }}\r\n          >\r\n            {messages.map((message) => (\r\n              <div\r\n                key={message.id}\r\n                className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\r\n              >\r\n                <Card\r\n                  className={`max-w-[85%] shadow-lg ${\r\n                    message.role === 'user'\r\n                      ? 'bg-primary text-primary-foreground user-message'\r\n                      : 'bg-secondary text-foreground assistant-message'\r\n                  }`}\r\n                >\r\n                  <CardContent className=\"p-3\">\r\n                    {message.role === 'assistant' ? (\r\n                      message.isThinking ? (\r\n                        <ThinkingIndicator />\r\n                      ) : (\r\n                        <MessageWithThinking\r\n                          content={\r\n                            typeof message.content === 'string'\r\n                              ? message.content\r\n                              : Array.isArray(message.content)\r\n                                ? message.content.map((item, idx) =>\r\n                                    item.type === 'text' ? item.text : `[Image ${idx + 1}]`\r\n                                  ).join(' ')\r\n                                : String(message.content)\r\n                          }\r\n                          usage={message.usage}\r\n                          cost={message.cost}\r\n                          timing={message.timing}\r\n                          toolCalls={message.toolCalls}\r\n                          sources={message.sources}\r\n                        />\r\n                      )\r\n                    ) : (\r\n                      <UserMessage\r\n                        content={message.content}\r\n                      />\r\n                    )}\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n            ))}\r\n            {/* Scroll anchor */}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n        )}\r\n\r\n        {/* Scroll to bottom button */}\r\n        {showScrollToBottom && (\r\n          <Button\r\n            onClick={scrollToBottom}\r\n            className=\"absolute bottom-20 right-4 h-10 w-10 rounded-full bg-primary/90 hover:bg-primary shadow-lg transition-all duration-200 z-50 flex items-center justify-center p-0\"\r\n            style={{\r\n              backdropFilter: 'blur(8px)',\r\n            }}\r\n          >\r\n            <ChevronDown className=\"h-5 w-5\" />\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Session Stats Display */}\r\n      {messages.length > 0 && (\r\n        <div className=\"flex-none px-4 pb-2\">\r\n          <div className=\"text-xs text-muted-foreground bg-muted/30 px-2 py-1 rounded text-center\">\r\n            <div className=\"truncate\">\r\n              Session: {sessionStats.totalTokens} tokens • {sessionStats.messagesCount} messages • {sessionService.formatSessionCost()} • {sessionService.formatSessionDuration()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ClientProviders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\CodeBlock.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1966,2011],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2435,2494],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Copy, Check } from 'lucide-react';\r\nimport { Button } from './ui/button';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport './CodeBlock.css';\r\n\r\n\r\ninterface CodeBlockProps {\r\n  code: string;\r\n  language?: string;\r\n  className?: string;\r\n}\r\n\r\n// Map common language aliases to their proper syntax highlighter names\r\nconst languageMap: Record<string, string> = {\r\n  'js': 'javascript',\r\n  'jsx': 'javascript',\r\n  'ts': 'typescript',\r\n  'tsx': 'typescript',\r\n  'py': 'python',\r\n  'rb': 'ruby',\r\n  'sh': 'bash',\r\n  'shell': 'bash',\r\n  'yml': 'yaml',\r\n  'md': 'markdown',\r\n  'htm': 'html',\r\n  'xml': 'markup',\r\n  'svg': 'markup',\r\n  'vue': 'markup',\r\n  'php': 'php',\r\n  'c': 'c',\r\n  'cpp': 'cpp',\r\n  'c++': 'cpp',\r\n  'cs': 'csharp',\r\n  'java': 'java',\r\n  'kt': 'kotlin',\r\n  'swift': 'swift',\r\n  'go': 'go',\r\n  'rs': 'rust',\r\n  'sql': 'sql',\r\n  'json': 'json',\r\n  'jsonc': 'json',\r\n  'toml': 'toml',\r\n  'ini': 'ini',\r\n  'cfg': 'ini',\r\n  'conf': 'ini',\r\n  'dockerfile': 'docker',\r\n  'makefile': 'makefile',\r\n  'r': 'r',\r\n  'scala': 'scala',\r\n  'clj': 'clojure',\r\n  'cljs': 'clojure',\r\n  'elm': 'elm',\r\n  'haskell': 'haskell',\r\n  'hs': 'haskell',\r\n  'lua': 'lua',\r\n  'perl': 'perl',\r\n  'pl': 'perl',\r\n  'powershell': 'powershell',\r\n  'ps1': 'powershell',\r\n  'diff': 'diff',\r\n  'patch': 'diff',\r\n};\r\n\r\nfunction normalizeLanguage(lang?: string): string {\r\n  if (!lang) return 'text';\r\n  const normalized = lang.toLowerCase().trim();\r\n  return languageMap[normalized] || normalized;\r\n}\r\n\r\nexport function CodeBlock({ code, language, className = '' }: CodeBlockProps) {\r\n  const [copied, setCopied] = useState(false);\r\n  const normalizedLanguage = normalizeLanguage(language);\r\n\r\n  const handleCopy = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(code);\r\n      setCopied(true);\r\n      setTimeout(() => setCopied(false), 2000);\r\n    } catch (error) {\r\n      console.error('Failed to copy code:', error);\r\n      // Fallback for older browsers\r\n      try {\r\n        const textArea = document.createElement('textarea');\r\n        textArea.value = code;\r\n        document.body.appendChild(textArea);\r\n        textArea.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(textArea);\r\n        setCopied(true);\r\n        setTimeout(() => setCopied(false), 2000);\r\n      } catch (fallbackError) {\r\n        console.error('Fallback copy also failed:', fallbackError);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`relative group ${className}`}>\r\n      {/* Header with language and copy button */}\r\n      <div className=\"flex items-center justify-between bg-slate-700 px-3 py-2 border-b border-slate-600 rounded-t-lg\">\r\n        <span className=\"text-xs text-slate-300 font-medium\">\r\n          {language || 'code'}\r\n        </span>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={handleCopy}\r\n          className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-slate-600 text-slate-300\"\r\n          style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n          title=\"Copy code\"\r\n        >\r\n          {copied ? (\r\n            <Check className=\"h-3 w-3 text-green-400\" />\r\n          ) : (\r\n            <Copy className=\"h-3 w-3\" />\r\n          )}\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Code content */}\r\n      <div\r\n        className=\"bg-slate-800 rounded-b-lg overflow-x-auto\"\r\n        style={{\r\n          WebkitAppRegion: 'no-drag',\r\n          userSelect: 'text',\r\n          WebkitUserSelect: 'text',\r\n        } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n      >\r\n        <div\r\n          className=\"syntax-highlighter-isolated\"\r\n          style={{\r\n            WebkitAppRegion: 'no-drag',\r\n            userSelect: 'text',\r\n            WebkitUserSelect: 'text',\r\n          } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n        >\r\n          <SyntaxHighlighter\r\n            language={normalizedLanguage}\r\n            style={{}} // Empty style object - we use CSS instead\r\n            customStyle={{\r\n              margin: 0,\r\n              padding: 0,\r\n              background: 'transparent',\r\n              border: 'none',\r\n              outline: 'none',\r\n            }}\r\n            codeTagProps={{\r\n              style: {\r\n                margin: 0,\r\n                padding: 0,\r\n                background: 'transparent',\r\n              }\r\n            }}\r\n            // Render pre at block level to avoid <pre> inside <p> warnings\r\n            PreTag={({ children, ...props }) => (\r\n              <pre\r\n                {...props}\r\n                style={{\r\n                  margin: 0,\r\n                  padding: 0,\r\n                  background: 'transparent',\r\n                }}\r\n              >\r\n                {children}\r\n              </pre>\r\n            )}\r\n          >\r\n            {code}\r\n          </SyntaxHighlighter>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface InlineCodeProps {\r\n  code: string;\r\n  className?: string;\r\n}\r\n\r\nexport function InlineCode({ code, className = '' }: InlineCodeProps) {\r\n  return (\r\n    <code\r\n      className={`bg-slate-700 text-slate-200 px-1.5 py-0.5 rounded text-sm font-mono ${className}`}\r\n      style={{\r\n        WebkitAppRegion: 'no-drag',\r\n        userSelect: 'text',\r\n        WebkitUserSelect: 'text',\r\n      } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n    >\r\n      {code}\r\n    </code>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\HistoryOverlay.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":21,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[771,819],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1343,1398],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1729,1778],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2084,2137],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleLoadConversation'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleLoadConversation]","fix":{"range":[2954,2956],"text":"[handleLoadConversation]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { conversationHistoryService, type Conversation } from '../services/conversationHistoryService';\r\n\r\n// Removed redundant HistoryOverlay component - only keeping the hook\r\n\r\n// Hook to use the history overlay\r\nexport function useHistoryOverlay(onLoadConversation: (conversation: Conversation) => Promise<void>) {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const openHistory = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const allConversations = await conversationHistoryService.getAllConversations();\r\n      \r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        await window.electronAPI.openHistory(allConversations);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to open history:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteConversation = async (conversationId: string) => {\r\n    try {\r\n      await conversationHistoryService.deleteConversation(conversationId);\r\n      \r\n      // Refresh and reopen the window\r\n      const allConversations = await conversationHistoryService.getAllConversations();\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        await window.electronAPI.openHistory(allConversations);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to delete conversation:', error);\r\n    }\r\n  };\r\n\r\n  const handleClearAllHistory = async () => {\r\n    try {\r\n      await conversationHistoryService.clearAllHistory();\r\n      \r\n      // Close the history window\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        await window.electronAPI.closeHistory();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to clear history:', error);\r\n    }\r\n  };\r\n\r\n  const handleLoadConversation = async (conversationId: string) => {\r\n    try {\r\n      const conversation = await conversationHistoryService.getConversation(conversationId);\r\n      if (conversation) {\r\n        await onLoadConversation(conversation);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load conversation:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      // Listen for history events\r\n      window.electronAPI.onHistoryItemSelected(handleLoadConversation);\r\n      window.electronAPI.onHistoryItemDeleted(handleDeleteConversation);\r\n      window.electronAPI.onClearAllHistory(handleClearAllHistory);\r\n\r\n      // Cleanup function to remove listeners on unmount\r\n      return () => {\r\n        // Remove listeners to prevent memory leaks\r\n        if (window.electronAPI && window.electronAPI.removeAllListeners) {\r\n          window.electronAPI.removeAllListeners('history-item-selected');\r\n          window.electronAPI.removeAllListeners('history-item-deleted');\r\n          window.electronAPI.removeAllListeners('clear-all-history');\r\n        }\r\n      };\r\n    }\r\n  }, []); // Remove dependencies to prevent re-adding listeners\r\n\r\n  return {\r\n    openHistory,\r\n    loading\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ImageViewer.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2985,3035],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { X, Download, ExternalLink, ZoomIn, ZoomOut, RotateCw } from 'lucide-react';\nimport { Button } from './ui/button';\n\ninterface ImageViewerProps {\n  src: string;\n  alt?: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\n/**\n * Modal image viewer with zoom, rotate, and download functionality\n */\nexport function ImageViewer({ src, alt = 'Image', isOpen, onClose }: ImageViewerProps) {\n  const [zoom, setZoom] = useState(1);\n  const [rotation, setRotation] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n\n  // Reset state when modal opens/closes\n  useEffect(() => {\n    if (isOpen) {\n      setZoom(1);\n      setRotation(0);\n      setPosition({ x: 0, y: 0 });\n    }\n  }, [isOpen]);\n\n  // Handle keyboard shortcuts\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Escape':\n          onClose();\n          break;\n        case '+':\n        case '=':\n          e.preventDefault();\n          setZoom(prev => Math.min(prev * 1.2, 5));\n          break;\n        case '-':\n          e.preventDefault();\n          setZoom(prev => Math.max(prev / 1.2, 0.1));\n          break;\n        case '0':\n          e.preventDefault();\n          setZoom(1);\n          setPosition({ x: 0, y: 0 });\n          setRotation(0);\n          break;\n        case 'r':\n        case 'R':\n          e.preventDefault();\n          setRotation(prev => (prev + 90) % 360);\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, onClose]);\n\n  // Handle mouse drag\n  const handleMouseDown = (e: React.MouseEvent) => {\n    if (zoom > 1) {\n      setIsDragging(true);\n      setDragStart({\n        x: e.clientX - position.x,\n        y: e.clientY - position.y\n      });\n    }\n  };\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (isDragging && zoom > 1) {\n      setPosition({\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  // Handle download\n  const handleDownload = async () => {\n    try {\n      if (src.startsWith('data:')) {\n        // Handle base64 data URLs\n        const link = document.createElement('a');\n        link.href = src;\n        link.download = alt || 'image';\n        link.click();\n      } else {\n        // Handle regular URLs\n        const response = await fetch(src);\n        const blob = await response.blob();\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = alt || 'image';\n        link.click();\n        URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error('Failed to download image:', error);\n      // Fallback: open in new tab\n      window.open(src, '_blank');\n    }\n  };\n\n  // Handle external link\n  const handleExternalLink = () => {\n    if (typeof window !== 'undefined' && window.electronAPI) {\n      window.electronAPI.openExternal(src);\n    } else {\n      window.open(src, '_blank');\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 bg-black/90 flex items-center justify-center\"\n      onClick={onClose}\n      style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\n    >\n      {/* Controls */}\n      <div className=\"absolute top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={(e) => {\n            e.stopPropagation();\n            setZoom(prev => Math.min(prev * 1.2, 5));\n          }}\n          title=\"Zoom In (+)\"\n        >\n          <ZoomIn className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={(e) => {\n            e.stopPropagation();\n            setZoom(prev => Math.max(prev / 1.2, 0.1));\n          }}\n          title=\"Zoom Out (-)\"\n        >\n          <ZoomOut className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={(e) => {\n            e.stopPropagation();\n            setRotation(prev => (prev + 90) % 360);\n          }}\n          title=\"Rotate (R)\"\n        >\n          <RotateCw className=\"h-4 w-4\" />\n        </Button>\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={(e) => {\n            e.stopPropagation();\n            handleDownload();\n          }}\n          title=\"Download\"\n        >\n          <Download className=\"h-4 w-4\" />\n        </Button>\n        {!src.startsWith('data:') && (\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={(e) => {\n              e.stopPropagation();\n              handleExternalLink();\n            }}\n            title=\"Open in Browser\"\n          >\n            <ExternalLink className=\"h-4 w-4\" />\n          </Button>\n        )}\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={onClose}\n          title=\"Close (Esc)\"\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Zoom indicator */}\n      {zoom !== 1 && (\n        <div className=\"absolute top-4 left-4 bg-black/50 text-white px-2 py-1 rounded text-sm\">\n          {Math.round(zoom * 100)}%\n        </div>\n      )}\n\n      {/* Help text */}\n      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/50 text-white px-3 py-1 rounded text-sm\">\n        Use +/- to zoom, R to rotate, drag to pan, 0 to reset, Esc to close\n      </div>\n\n      {/* Image */}\n      <div\n        className=\"max-w-full max-h-full overflow-hidden cursor-move\"\n        onClick={(e) => e.stopPropagation()}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseUp}\n        style={{\n          cursor: zoom > 1 ? (isDragging ? 'grabbing' : 'grab') : 'default'\n        }}\n      >\n        <img\n          src={src}\n          alt={alt}\n          className=\"max-w-none transition-transform duration-200\"\n          style={{\n            transform: `scale(${zoom}) rotate(${rotation}deg) translate(${position.x / zoom}px, ${position.y / zoom}px)`,\n            transformOrigin: 'center center',\n            userSelect: 'none',\n            WebkitUserSelect: 'none'\n          }}\n          draggable={false}\n        />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\KnowledgeBaseIndicator.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":34,"column":11,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1118,1130],"text":"\n          &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1118,1130],"text":"\n          &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1118,1130],"text":"\n          &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1118,1130],"text":"\n          &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":34,"column":90,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[1208,1218],"text":"&quot;\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[1208,1218],"text":"&ldquo;\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[1208,1218],"text":"&#34;\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[1208,1218],"text":"&rdquo;\n        "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Search, Database, BookOpen } from 'lucide-react';\n\ninterface KnowledgeBaseIndicatorProps {\n  isSearching: boolean;\n  searchQuery?: string;\n  className?: string;\n}\n\nexport const KnowledgeBaseIndicator: React.FC<KnowledgeBaseIndicatorProps> = ({\n  isSearching,\n  searchQuery,\n  className = ''\n}) => {\n  if (!isSearching) return null;\n\n  return (\n    <div className={`flex items-center gap-2 text-sm text-muted-foreground bg-muted/30 px-3 py-2 rounded-lg border border-border/50 ${className}`}>\n      <div className=\"flex items-center gap-2\">\n        <div className=\"relative\">\n          <Database className=\"h-4 w-4\" />\n          <div className=\"absolute -top-1 -right-1\">\n            <Search className=\"h-3 w-3 animate-pulse text-blue-500\" />\n          </div>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <BookOpen className=\"h-3 w-3\" />\n          <span className=\"font-medium\">Searching knowledge base...</span>\n        </div>\n      </div>\n      \n      {searchQuery && (\n        <div className=\"text-xs text-muted-foreground/70 truncate max-w-[200px]\">\n          \"{searchQuery.length > 50 ? searchQuery.substring(0, 50) + '...' : searchQuery}\"\n        </div>\n      )}\n      \n      {/* Animated dots */}\n      <div className=\"flex gap-1\">\n        <div className=\"w-1 h-1 bg-blue-500 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}></div>\n        <div className=\"w-1 h-1 bg-blue-500 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}></div>\n        <div className=\"w-1 h-1 bg-blue-500 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}></div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\KnowledgeBaseSettings.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2080,2137],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2204,2253],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2589,2649],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":213,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":213,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7199,7246],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 7 times.","line":214,"column":95,"nodeType":"Literal","endLine":214,"endColumn":110},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 18 to the 15 allowed.","line":222,"column":44,"nodeType":null,"messageId":"refactorFunction","endLine":222,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9300,9303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9300,9303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10453,10501],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":328,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":328,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12139,12197],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":369,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":369,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13935,13991],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":392,"column":181,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":392,"endColumn":231},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":416,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":416,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16085,16141],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":438,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":438,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16967,17016],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":503,"column":33,"nodeType":"Literal","endLine":503,"endColumn":47},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":507,"column":85,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[19634,19764],"text":"\r\n            Note: The Google Docs document must be publicly accessible (shared with &quot;Anyone with the link can view\")\r\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[19634,19764],"text":"\r\n            Note: The Google Docs document must be publicly accessible (shared with &ldquo;Anyone with the link can view\")\r\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[19634,19764],"text":"\r\n            Note: The Google Docs document must be publicly accessible (shared with &#34;Anyone with the link can view\")\r\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[19634,19764],"text":"\r\n            Note: The Google Docs document must be publicly accessible (shared with &rdquo;Anyone with the link can view\")\r\n          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":507,"column":115,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[19634,19764],"text":"\r\n            Note: The Google Docs document must be publicly accessible (shared with \"Anyone with the link can view&quot;)\r\n          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[19634,19764],"text":"\r\n            Note: The Google Docs document must be publicly accessible (shared with \"Anyone with the link can view&ldquo;)\r\n          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[19634,19764],"text":"\r\n            Note: The Google Docs document must be publicly accessible (shared with \"Anyone with the link can view&#34;)\r\n          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[19634,19764],"text":"\r\n            Note: The Google Docs document must be publicly accessible (shared with \"Anyone with the link can view&rdquo;)\r\n          "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { ProgressLogPanel } from './ProgressLogPanel';\r\nimport { Button } from './ui/button';\r\n\ninterface UploadProgress {\r\n  fileName: string;\r\n  status: 'pending' | 'processing' | 'success' | 'error';\r\n  error?: string;\r\n}\r\n\r\ninterface DocumentWithMetadata {\r\n  source: string;\r\n  metadata: Record<string, unknown>;\r\n  chunkCount: number;\r\n  addedAt?: string;\r\n}\r\n\r\ninterface KnowledgeBaseStats {\r\n  totalRecords: number;\r\n  totalDocuments: number;\r\n  databaseSize: number;\r\n}\r\n\r\nconst KnowledgeBaseSettings = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [documents, setDocuments] = useState<DocumentWithMetadata[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [uploadProgress, setUploadProgress] = useState<UploadProgress[]>([]);\r\n  const [googleDocsUrl, setGoogleDocsUrl] = useState<string>('');\r\n  const [isUrlImporting, setIsUrlImporting] = useState(false);\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [isImporting, setIsImporting] = useState(false);\r\n  const [kbStats, setKbStats] = useState<KnowledgeBaseStats | null>(null);\r\n  const [exportProgress, setExportProgress] = useState<{step: string, current: number, total: number, message: string} | null>(null);\r\n  const [importProgress, setImportProgress] = useState<{step: string, current: number, total: number, message: string} | null>(null);\r\n  const [progressEntries, setProgressEntries] = useState<Array<{\r\n    id: string;\r\n    timestamp: Date;\r\n    level: 'info' | 'warning' | 'error' | 'success';\r\n    operation: string;\r\n    message: string;\r\n    progress?: { current: number; total: number; percentage: number };\r\n    metadata?: Record<string, unknown>;\r\n  }>>([]);\r\n  const [isProgressLogCollapsed, setIsProgressLogCollapsed] = useState(false);\r\n\r\n  const loadDocuments = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const result = await window.electronAPI.getDocumentsWithMetadata();\r\n      if (result.success) {\r\n        setDocuments(result.documents);\r\n      } else {\r\n        console.error('Failed to load documents:', result.error);\r\n        setDocuments([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading documents:', error);\r\n      setDocuments([]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadKnowledgeBaseStats = async () => {\r\n    try {\r\n      const result = await window.electronAPI.getKnowledgeBaseStats();\r\n      if (result.success && result.stats) {\r\n        setKbStats(result.stats);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading knowledge base stats:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDocuments();\r\n    loadKnowledgeBaseStats();\r\n\r\n    // Set up progress listeners\r\n    const exportUnsubscribe = window.electronAPI.onExportProgress((progress) => {\r\n      setExportProgress(progress);\r\n    });\r\n\r\n    const importUnsubscribe = window.electronAPI.onImportProgress((progress) => {\r\n      setImportProgress(progress);\r\n    });\r\n\r\n    const batchUnsubscribe = window.electronAPI.onBatchProgress((progress) => {\r\n      // Add real-time progress entries for batch operations\r\n      const operationId = `batch-upload-${Date.now()}`;\r\n\r\n      if (progress.status === 'processing') {\r\n        addProgressEntry(\r\n          'info',\r\n          operationId,\r\n          progress.message,\r\n          { current: progress.fileIndex, total: progress.totalFiles },\r\n          {\r\n            fileName: progress.fileName,\r\n            step: progress.step,\r\n            chunkCount: progress.chunkCount\r\n          }\r\n        );\r\n      } else if (progress.status === 'success') {\r\n        addProgressEntry(\r\n          'success',\r\n          operationId,\r\n          progress.message,\r\n          { current: progress.fileIndex, total: progress.totalFiles },\r\n          {\r\n            fileName: progress.fileName,\r\n            chunkCount: progress.chunkCount\r\n          }\r\n        );\r\n      } else if (progress.status === 'error') {\r\n        addProgressEntry(\r\n          'error',\r\n          operationId,\r\n          progress.message,\r\n          { current: progress.fileIndex, total: progress.totalFiles },\r\n          {\r\n            fileName: progress.fileName,\r\n            error: progress.error\r\n          }\r\n        );\r\n      }\r\n\r\n      // Update the upload progress state for the UI\r\n      setUploadProgress(prev => {\r\n        const newProgress = [...prev];\r\n        const fileIndex = progress.fileIndex - 1; // Convert to 0-based index\r\n\r\n        if (fileIndex >= 0 && fileIndex < newProgress.length) {\r\n          newProgress[fileIndex] = {\r\n            fileName: progress.fileName,\r\n            status: progress.status === 'success' ? 'success' :\r\n                   progress.status === 'error' ? 'error' : 'processing',\r\n            error: progress.error\r\n          };\r\n        }\r\n\r\n        return newProgress;\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      exportUnsubscribe();\r\n      importUnsubscribe();\r\n      batchUnsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  const addProgressEntry = (\r\n    level: 'info' | 'warning' | 'error' | 'success',\r\n    operation: string,\r\n    message: string,\r\n    progress?: { current: number; total: number },\r\n    metadata?: Record<string, unknown>\r\n  ) => {\r\n    const entry = {\r\n      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n      timestamp: new Date(),\r\n      level,\r\n      operation,\r\n      message,\r\n      progress: progress ? {\r\n        current: progress.current,\r\n        total: progress.total,\r\n        percentage: Math.round((progress.current / progress.total) * 100)\r\n      } : undefined,\r\n      metadata\r\n    };\r\n\r\n    setProgressEntries(prev => {\r\n      const newEntries = [...prev, entry];\r\n      // Limit to last 500 entries to prevent memory issues\r\n      return newEntries.slice(-500);\r\n    });\r\n  };\r\n\r\n  const clearProgressLog = () => {\r\n    setProgressEntries([]);\r\n    addProgressEntry('info', 'system', 'Progress log cleared');\r\n  };\r\n\r\n  const handleAddDocument = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const filePath = await window.electronAPI.openFileDialog();\r\n      if (filePath) {\r\n        const operationId = `single-upload-${Date.now()}`;\r\n        const fileName = filePath.split(/[\\\\/]/).pop() || filePath;\r\n\r\n        addProgressEntry('info', operationId, `Starting upload: ${fileName}`);\r\n        setMessage(`Adding document: ${filePath}...`);\r\n\r\n        const result = await window.electronAPI.addDocument(filePath);\r\n        if (result.success) {\r\n          setMessage(`Successfully added document: ${filePath}`);\r\n          addProgressEntry('success', operationId, `Successfully uploaded: ${fileName}`);\r\n          await loadDocuments(); // Refresh document list\r\n          await loadKnowledgeBaseStats(); // Refresh stats\r\n        } else {\r\n          setMessage(`Failed to add document: ${result.error}`);\r\n          addProgressEntry('error', operationId, `Failed to upload ${fileName}: ${result.error}`);\r\n        }\r\n      } else {\r\n        setMessage('No file selected.');\r\n        addProgressEntry('info', 'single-upload', 'Upload cancelled: No file selected');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding document:', error);\r\n      const errorMessage = `Error adding document: ${error instanceof Error ? error.message : 'Unknown error'}`;\r\n      setMessage(errorMessage);\r\n      addProgressEntry('error', 'single-upload', errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddDocumentsBatch = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setUploadProgress([]);\r\n      const filePaths = await window.electronAPI.openKnowledgebaseFileDialog();\r\n\r\n      if (filePaths && filePaths.length > 0) {\r\n        const operationId = `batch-upload-${Date.now()}`;\r\n        addProgressEntry('info', operationId, `Starting batch upload of ${filePaths.length} documents`);\r\n\r\n        setMessage(`Adding ${filePaths.length} documents...`);\r\n\r\n        // Initialize progress tracking\r\n        const initialProgress = filePaths.map(path => ({\r\n          fileName: path.split(/[\\\\/]/).pop() || path,\r\n          status: 'pending' as const\r\n        }));\r\n        setUploadProgress(initialProgress);\r\n\r\n        if (filePaths.length > 5) {\r\n          setMessage(`Processing ${filePaths.length} documents. This may take several minutes for large documents...`);\r\n          addProgressEntry('warning', operationId, `Large batch detected: ${filePaths.length} files may take several minutes to process`);\r\n        }\r\n\r\n        // The real-time progress updates will be handled by the batch progress listener\r\n        const result = await window.electronAPI.addDocumentsBatch(filePaths);\r\n\r\n        if (result.success) {\r\n          setMessage(result.summary || `Successfully added ${filePaths.length} documents`);\r\n          addProgressEntry('success', operationId, result.summary || `Batch upload completed: ${filePaths.length} documents processed`);\r\n\r\n          // Log summary statistics\r\n          if (result.results) {\r\n            const successCount = result.results.filter(r => r.success).length;\r\n            const errorCount = result.results.length - successCount;\r\n            const totalChunks = result.results.reduce((sum, r) => sum + ((r as any).chunkCount || 0), 0);\r\n\r\n            addProgressEntry('info', operationId, `Final statistics: ${successCount} successful, ${errorCount} failed, ${totalChunks} total chunks generated`, undefined, {\r\n              successCount,\r\n              errorCount,\r\n              totalFiles: result.results.length,\r\n              totalChunks\r\n            });\r\n\r\n            if (errorCount > 0) {\r\n              addProgressEntry('warning', operationId, `${errorCount} files failed to process`, undefined, {\r\n                successCount,\r\n                errorCount,\r\n                totalFiles: result.results.length\r\n              });\r\n            }\r\n          }\r\n\r\n          await loadDocuments(); // Refresh document list\r\n          await loadKnowledgeBaseStats(); // Refresh stats\r\n        } else {\r\n          setMessage(`Failed to add documents: ${result.error}`);\r\n          addProgressEntry('error', operationId, `Batch upload failed: ${result.error}`);\r\n        }\r\n      } else {\r\n        setMessage('No files selected.');\r\n        addProgressEntry('info', 'batch-upload', 'Upload cancelled: No files selected');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding documents:', error);\r\n      setMessage(`Error adding documents: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n\r\n      // Update progress to show error\r\n      const errorProgress = uploadProgress.map(p => ({\r\n        ...p,\r\n        status: 'error' as const,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      }));\r\n      setUploadProgress(errorProgress);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddFromGoogleDocs = async () => {\r\n    if (!googleDocsUrl.trim()) {\r\n      setMessage('Please enter a Google Docs URL.');\r\n      addProgressEntry('warning', 'google-docs-import', 'Import cancelled: No URL provided');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsUrlImporting(true);\r\n      const operationId = `google-docs-import-${Date.now()}`;\r\n\r\n      addProgressEntry('info', operationId, `Starting Google Docs import: ${googleDocsUrl}`);\r\n      setMessage(`Importing document from Google Docs...`);\r\n\r\n      const result = await window.electronAPI.addDocumentFromUrl(googleDocsUrl);\r\n\r\n      if (result.success) {\r\n        setMessage(`Successfully imported document from Google Docs`);\r\n        addProgressEntry('success', operationId, 'Google Docs import completed successfully');\r\n        setGoogleDocsUrl(''); // Clear the URL input\r\n        await loadDocuments(); // Refresh document list\r\n        await loadKnowledgeBaseStats(); // Refresh stats\r\n      } else {\r\n        setMessage(`Failed to import from Google Docs: ${result.error}`);\r\n        addProgressEntry('error', operationId, `Google Docs import failed: ${result.error}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error importing from Google Docs:', error);\r\n      const errorMessage = `Error importing from Google Docs: ${error instanceof Error ? error.message : 'Unknown error'}`;\r\n      setMessage(errorMessage);\r\n      addProgressEntry('error', 'google-docs-import', errorMessage);\r\n    } finally {\r\n      setIsUrlImporting(false);\r\n    }\r\n  };\r\n\r\n  const handleExportKnowledgeBase = async () => {\r\n    try {\r\n      setIsExporting(true);\r\n      setExportProgress(null);\r\n      const operationId = `export-${Date.now()}`;\r\n\r\n      addProgressEntry('info', operationId, 'Starting knowledge base export...');\r\n      setMessage('Starting knowledge base export...');\r\n\r\n      const result = await window.electronAPI.exportKnowledgeBase();\r\n\r\n      if (result.success && result.stats) {\r\n        const sizeInMB = (result.stats.exportSize / (1024 * 1024)).toFixed(2);\r\n        const timeInSeconds = (result.stats.exportTime / 1000).toFixed(1);\r\n        const successMessage = `Export completed: ${result.stats.totalDocuments} documents, ${result.stats.totalRecords} chunks exported. File size: ${sizeInMB}MB, Time: ${timeInSeconds}s`;\r\n\r\n        setMessage(`✅ ${successMessage}`);\r\n        addProgressEntry('success', operationId, successMessage, undefined, {\r\n          totalDocuments: result.stats.totalDocuments,\r\n          totalRecords: result.stats.totalRecords,\r\n          exportSize: result.stats.exportSize,\r\n          exportTime: result.stats.exportTime,\r\n          filePath: result.filePath\r\n        });\r\n\r\n        await loadKnowledgeBaseStats(); // Refresh stats\r\n      } else {\r\n        const errorMessage = `Export failed: ${result.error}`;\r\n        setMessage(`❌ ${errorMessage}`);\r\n        addProgressEntry('error', operationId, errorMessage);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error exporting knowledge base:', error);\r\n      const errorMessage = `Export error: ${error instanceof Error ? error.message : 'Unknown error'}`;\r\n      setMessage(`❌ ${errorMessage}`);\r\n      addProgressEntry('error', 'export', errorMessage);\r\n    } finally {\r\n      setIsExporting(false);\r\n      setExportProgress(null);\r\n    }\r\n  };\r\n\r\n  const handleImportKnowledgeBase = async (mode: 'replace' | 'merge' = 'replace') => {\r\n    try {\r\n      setIsImporting(true);\r\n      setImportProgress(null);\r\n      const operationId = `import-${mode}-${Date.now()}`;\r\n\r\n      addProgressEntry('info', operationId, `Starting knowledge base import (${mode} mode)...`);\r\n      setMessage(`Starting knowledge base import (${mode} mode)...`);\r\n\r\n      const result = await window.electronAPI.importKnowledgeBase({ mode });\r\n\r\n      if (result.success && result.stats) {\r\n        const timeInSeconds = (result.stats.importTime / 1000).toFixed(1);\r\n        const successMessage = `Import completed: ${result.stats.importedDocuments} documents, ${result.stats.importedRecords} chunks imported. ${result.stats.skippedRecords > 0 ? `${result.stats.skippedRecords} records skipped. ` : ''}Time: ${timeInSeconds}s`;\r\n\r\n        setMessage(`✅ ${successMessage}`);\r\n        addProgressEntry('success', operationId, successMessage, undefined, {\r\n          mode,\r\n          importedDocuments: result.stats.importedDocuments,\r\n          importedRecords: result.stats.importedRecords,\r\n          skippedRecords: result.stats.skippedRecords,\r\n          importTime: result.stats.importTime,\r\n          filePath: result.filePath\r\n        });\r\n\r\n        if (result.stats.skippedRecords > 0) {\r\n          addProgressEntry('warning', operationId, `${result.stats.skippedRecords} records were skipped during import`);\r\n        }\r\n\r\n        await loadDocuments(); // Refresh document list\r\n        await loadKnowledgeBaseStats(); // Refresh stats\r\n      } else {\r\n        const errorMessage = `Import failed: ${result.error}`;\r\n        setMessage(`❌ ${errorMessage}`);\r\n        addProgressEntry('error', operationId, errorMessage);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error importing knowledge base:', error);\r\n      const errorMessage = `Import error: ${error instanceof Error ? error.message : 'Unknown error'}`;\r\n      setMessage(`❌ ${errorMessage}`);\r\n      addProgressEntry('error', 'import', errorMessage);\r\n    } finally {\r\n      setIsImporting(false);\r\n      setImportProgress(null);\r\n    }\r\n  };\r\n\r\n  const handleRemoveDocument = async (documentSource: string) => {\r\n    try {\r\n      setIsLoading(true);\r\n      setMessage(`Removing document: ${documentSource}...`);\r\n      const result = await window.electronAPI.removeDocument(documentSource);\r\n      if (result.success) {\r\n        setMessage(`Successfully removed document: ${documentSource}`);\r\n        await loadDocuments(); // Refresh document list\r\n      } else {\r\n        setMessage(`Failed to remove document: ${result.error}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error removing document:', error);\r\n      setMessage(`Error removing document: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-3\">\r\n      <h2 className=\"text-sm font-medium mb-2\">Knowledge Base Management</h2>\r\n\r\n      {/* Add Document Section */}\r\n      <div className=\"space-y-2\">\r\n        <h3 className=\"text-xs font-medium mb-1\">Add Documents</h3>\r\n\r\n        {/* Single Document Upload */}\r\n        <div className=\"flex items-center space-x-2 mb-2\">\r\n          <Button\r\n            onClick={handleAddDocument}\r\n            disabled={isLoading || isUrlImporting}\r\n            size=\"sm\"\r\n            className=\"h-7 text-xs\"\r\n          >\r\n            {isLoading ? 'Processing...' : 'Add Single PDF'}\r\n          </Button>\r\n\r\n          <Button\r\n            onClick={handleAddDocumentsBatch}\r\n            disabled={isLoading || isUrlImporting}\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            className=\"h-7 text-xs\"\r\n          >\r\n            {isLoading ? 'Processing...' : 'Add Multiple Documents'}\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Supported file types info */}\r\n        <div className=\"mb-2 p-2 bg-muted rounded text-xs\">\r\n          <p className=\"font-medium mb-1 text-foreground\">Supported file types:</p>\r\n          <p className=\"text-muted-foreground\">\r\n            • PDF documents (.pdf)<br/>\r\n            • Text files (.txt)<br/>\r\n            • Markdown files (.md)<br/>\r\n            • Word documents (.docx, .doc)\r\n          </p>\r\n        </div>\r\n\r\n        {/* Google Docs Import Section */}\r\n        <div className=\"mb-4 p-4 border border-gray-300 rounded\">\r\n          <h4 className=\"font-medium mb-2\">Import from Google Docs</h4>\r\n          <div className=\"flex items-center space-x-2 mb-2\">\r\n            <input\r\n              type=\"text\"\r\n              value={googleDocsUrl}\r\n              onChange={(e) => setGoogleDocsUrl(e.target.value)}\r\n              placeholder=\"Paste Google Docs URL here...\"\r\n              disabled={isLoading || isUrlImporting}\r\n              className=\"flex-1 px-3 py-2 border border-gray-300 rounded text-black\"\r\n            />\r\n            <button\r\n              onClick={handleAddFromGoogleDocs}\r\n              disabled={isLoading || isUrlImporting || !googleDocsUrl.trim()}\r\n              className=\"bg-purple-500 hover:bg-purple-700 disabled:bg-gray-400 text-white font-bold py-2 px-4 rounded\"\r\n            >\r\n              {isUrlImporting ? 'Importing...' : 'Import'}\r\n            </button>\r\n          </div>\r\n          <p className=\"text-xs text-gray-500\">\r\n            Note: The Google Docs document must be publicly accessible (shared with \"Anyone with the link can view\")\r\n          </p>\r\n        </div>\r\n\r\n        {/* Upload Progress */}\r\n        {uploadProgress.length > 0 && (\r\n          <div className=\"mb-4 p-3 border border-gray-300 rounded\">\r\n            <h4 className=\"font-medium mb-2\">Upload Progress</h4>\r\n            <div className=\"space-y-1 max-h-32 overflow-y-auto\">\r\n              {uploadProgress.map((progress, index) => (\r\n                <div key={index} className=\"flex items-center justify-between text-sm\">\r\n                  <span className=\"truncate flex-1\">{progress.fileName}</span>\r\n                  <span className={`ml-2 px-2 py-1 rounded text-xs ${\r\n                    progress.status === 'success' ? 'bg-green-100 text-green-800' :\r\n                    progress.status === 'error' ? 'bg-red-100 text-red-800' :\r\n                    progress.status === 'processing' ? 'bg-blue-100 text-blue-800' :\r\n                    'bg-gray-100 text-gray-800'\r\n                  }`}>\r\n                    {progress.status === 'success' ? '✓ Success' :\r\n                     progress.status === 'error' ? '✗ Error' :\r\n                     progress.status === 'processing' ? '⏳ Processing' :\r\n                     '⏸ Pending'}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {message && <p className=\"text-sm text-gray-500\">{message}</p>}\r\n      </div>\r\n\r\n      {/* Knowledge Base Management Section */}\r\n      <div className=\"mb-6\">\r\n        <h3 className=\"text-md font-semibold mb-3\">Knowledge Base Management</h3>\r\n\r\n        {/* Statistics Display */}\r\n        {kbStats && (\r\n          <div className=\"mb-4 p-3 bg-muted rounded text-sm\">\r\n            <p className=\"font-medium mb-1 text-foreground\">Current Knowledge Base:</p>\r\n            <div className=\"text-muted-foreground space-y-1\">\r\n              <div className=\"flex justify-between\">\r\n                <span>Documents:</span>\r\n                <span className=\"font-medium\">{kbStats.totalDocuments.toLocaleString()}</span>\r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <span>Chunks:</span>\r\n                <span className=\"font-medium\">{kbStats.totalRecords.toLocaleString()}</span>\r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <span>Estimated Size:</span>\r\n                <span className=\"font-medium\">{(kbStats.databaseSize / (1024 * 1024)).toFixed(1)} MB</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Export/Import Controls */}\r\n        <div className=\"flex items-center space-x-4 mb-4\">\r\n          <button\r\n            onClick={handleExportKnowledgeBase}\r\n            disabled={isLoading || isExporting || isImporting || isUrlImporting}\r\n            className=\"bg-blue-500 hover:bg-blue-700 disabled:bg-gray-400 text-white font-bold py-2 px-4 rounded\"\r\n          >\r\n            {isExporting ? 'Exporting...' : 'Export Knowledge Base'}\r\n          </button>\r\n\r\n          <button\r\n            onClick={() => handleImportKnowledgeBase('replace')}\r\n            disabled={isLoading || isExporting || isImporting || isUrlImporting}\r\n            className=\"bg-orange-500 hover:bg-orange-700 disabled:bg-gray-400 text-white font-bold py-2 px-4 rounded\"\r\n          >\r\n            {isImporting ? 'Importing...' : 'Import (Replace)'}\r\n          </button>\r\n\r\n          <button\r\n            onClick={() => handleImportKnowledgeBase('merge')}\r\n            disabled={isLoading || isExporting || isImporting || isUrlImporting}\r\n            className=\"bg-green-500 hover:bg-green-700 disabled:bg-gray-400 text-white font-bold py-2 px-4 rounded\"\r\n          >\r\n            {isImporting ? 'Importing...' : 'Import (Merge)'}\r\n          </button>\r\n        </div>\r\n\r\n        {/* Export/Import Progress */}\r\n        {(exportProgress || importProgress) && (\r\n          <div className=\"mb-4 p-3 border border-gray-300 rounded\">\r\n            <h4 className=\"font-medium mb-2\">\r\n              {exportProgress ? 'Export Progress' : 'Import Progress'}\r\n            </h4>\r\n            {(exportProgress || importProgress) && (\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex items-center justify-between text-sm\">\r\n                  <span>{(exportProgress || importProgress)?.message}</span>\r\n                  <span className=\"font-medium\">\r\n                    {(exportProgress || importProgress)?.current}% / {(exportProgress || importProgress)?.total}%\r\n                  </span>\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                  <div\r\n                    className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                    style={{ width: `${(exportProgress || importProgress)?.current || 0}%` }}\r\n                  ></div>\r\n                </div>\r\n                <p className=\"text-xs text-gray-500\">\r\n                  Step: {(exportProgress || importProgress)?.step}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Import Mode Information */}\r\n        <div className=\"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded text-sm\">\r\n          <p className=\"font-medium mb-1 text-yellow-800\">Import Modes:</p>\r\n          <div className=\"text-yellow-700 space-y-1\">\r\n            <p><strong>Replace:</strong> Clears existing knowledge base and imports new data</p>\r\n            <p><strong>Merge:</strong> Adds imported data to existing knowledge base</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Progress Log Panel */}\r\n      <div className=\"mb-6\">\r\n        <ProgressLogPanel\r\n          entries={progressEntries}\r\n          isCollapsed={isProgressLogCollapsed}\r\n          onToggleCollapse={() => setIsProgressLogCollapsed(!isProgressLogCollapsed)}\r\n          onClear={clearProgressLog}\r\n          maxHeight=\"250px\"\r\n        />\r\n      </div>\r\n\r\n      {/* Documents List Section */}\r\n      <div>\r\n        <h3 className=\"text-md font-semibold mb-2\">Documents in Knowledge Base</h3>\r\n        {isLoading && uploadProgress.length === 0 ? (\r\n          <p className=\"text-sm text-gray-500\">Loading documents...</p>\r\n        ) : documents.length === 0 ? (\r\n          <div className=\"p-4 bg-gray-50 rounded text-center\">\r\n            <p className=\"text-sm text-gray-500 mb-2\">No documents added yet.</p>\r\n            <p className=\"text-xs text-gray-400\">\r\n              Add documents using the buttons above to start building your knowledge base.\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-2\">\r\n            {documents.map((doc, index) => {\r\n              const fileExtension = doc.source.split('.').pop()?.toLowerCase();\r\n              const format = doc.metadata.format as string || 'Unknown';\r\n              const uploadDate = doc.addedAt ? new Date(doc.addedAt).toLocaleDateString() : 'Unknown';\r\n              const characterCount = doc.metadata.characterCount as number;\r\n              const fileSize = doc.metadata.fileSize as number;\r\n\r\n              const getFileTypeIcon = (ext?: string, format?: string) => {\r\n                if (format === 'Google Docs') return '📄';\r\n                switch (ext) {\r\n                  case 'pdf': return '📄';\r\n                  case 'txt': return '📝';\r\n                  case 'md': return '📋';\r\n                  case 'docx':\r\n                  case 'doc': return '📘';\r\n                  default: return '📄';\r\n                }\r\n              };\r\n\r\n              const formatFileSize = (bytes?: number) => {\r\n                if (!bytes) return '';\r\n                if (bytes < 1024) return `${bytes} B`;\r\n                if (bytes < 1024 * 1024) return `${Math.round(bytes / 1024)} KB`;\r\n                return `${Math.round(bytes / (1024 * 1024))} MB`;\r\n              };\r\n\r\n              return (\r\n                <div key={index} className=\"flex items-center justify-between p-3 bg-muted border border-border rounded\">\r\n                  <div className=\"flex items-center flex-1\">\r\n                    <span className=\"mr-3 text-lg\">{getFileTypeIcon(fileExtension, format)}</span>\r\n                    <div className=\"flex-1\">\r\n                      <span className=\"text-sm font-medium text-foreground block truncate\">{doc.source}</span>\r\n                      <div className=\"text-xs text-gray-500 space-y-1\">\r\n                        <div className=\"flex items-center space-x-4\">\r\n                          <span>{format}</span>\r\n                          <span>•</span>\r\n                          <span>{doc.chunkCount} chunks</span>\r\n                          {fileSize && (\r\n                            <>\r\n                              <span>•</span>\r\n                              <span>{formatFileSize(fileSize)}</span>\r\n                            </>\r\n                          )}\r\n                          {characterCount && (\r\n                            <>\r\n                              <span>•</span>\r\n                              <span>{characterCount.toLocaleString()} chars</span>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                        <div>Added: {uploadDate}</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <button\r\n                    onClick={() => handleRemoveDocument(doc.source)}\r\n                    disabled={isLoading || isUrlImporting}\r\n                    className=\"bg-red-500 hover:bg-red-700 disabled:bg-gray-400 text-white text-xs py-1 px-3 rounded ml-2\"\r\n                  >\r\n                    Remove\r\n                  </button>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KnowledgeBaseSettings;\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\MemoryManagement.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3200,3249],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3626,3679],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4415,4461],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":161,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":161,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4953,5002],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5341,5390],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":215,"column":72,"nodeType":"Literal","endLine":215,"endColumn":87},{"ruleId":"sonarjs/no-identical-functions","severity":2,"message":"Update this function so that its implementation is not identical to the one on line 276.","line":282,"column":73,"nodeType":null,"endLine":282,"endColumn":75}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Textarea } from './ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Badge } from './ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';\nimport {\n  Brain,\n  Search,\n  Plus,\n  Edit,\n  Trash2,\n  Download,\n  Upload,\n  RefreshCw,\n  Tag,\n  Calendar,\n  BarChart3,\n  FileText,\n  Code,\n  Lightbulb,\n  User,\n  MessageSquare,\n  FolderOpen\n} from 'lucide-react';\nimport { memoryService } from '../services/memoryService';\nimport { memoryExportService } from '../services/memoryExportService';\nimport { memoryCleanupService } from '../services/memoryCleanupService';\nimport { automaticMemoryService } from '../services/automaticMemoryService';\nimport { MemoryEntry, MemoryType, SearchQuery, MemoryStats } from '../types/memory';\n\ninterface MemoryManagementProps {\n  className?: string;\n}\n\nexport function MemoryManagement({ className }: MemoryManagementProps) {\n  const [memories, setMemories] = useState<MemoryEntry[]>([]);\n  const [stats, setStats] = useState<MemoryStats | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [exportLoading, setExportLoading] = useState(false);\n  const [importLoading, setImportLoading] = useState(false);\n  const [cleanupLoading, setCleanupLoading] = useState(false);\n  const [autoMemoryConfig, setAutoMemoryConfig] = useState(automaticMemoryService.getConfig());\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedType, setSelectedType] = useState<MemoryType | 'all'>('all');\n  const [showAddMemory, setShowAddMemory] = useState(false);\n  const [editingMemory, setEditingMemory] = useState<MemoryEntry | null>(null);\n  const [newMemory, setNewMemory] = useState({\n    type: 'general' as MemoryType,\n    title: '',\n    content: '',\n    tags: ''\n  });\n\n  // Memory type icons and labels\n  const memoryTypeConfig = {\n    user_preference: { icon: User, label: 'User Preference', color: 'bg-blue-500' },\n    conversation_context: { icon: MessageSquare, label: 'Conversation', color: 'bg-green-500' },\n    project_knowledge: { icon: FolderOpen, label: 'Project Knowledge', color: 'bg-purple-500' },\n    code_snippet: { icon: Code, label: 'Code Snippet', color: 'bg-orange-500' },\n    solution: { icon: Lightbulb, label: 'Solution', color: 'bg-yellow-500' },\n    general: { icon: FileText, label: 'General', color: 'bg-gray-500' }\n  };\n\n  const loadMemories = useCallback(async () => {\n    setLoading(true);\n    try {\n      const query: SearchQuery = {\n        limit: 50,\n        offset: 0\n      };\n\n      if (searchQuery.trim()) {\n        query.text = searchQuery.trim();\n      }\n\n      if (selectedType !== 'all') {\n        query.type = selectedType;\n      }\n\n      const result = await memoryService.searchMemories({ query });\n      if (result.success && result.data) {\n        setMemories(result.data.results.map(r => r.entry));\n      }\n    } catch (error) {\n      console.error('Failed to load memories:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [searchQuery, selectedType]);\n\n  useEffect(() => {\n    loadMemories();\n    loadStats();\n  }, [loadMemories]);\n\n  const loadStats = async () => {\n    try {\n      const result = await memoryService.getMemoryStats();\n      if (result.success && result.data) {\n        setStats(result.data);\n      }\n    } catch (error) {\n      console.error('Failed to load memory stats:', error);\n    }\n  };\n\n  const handleSearch = () => {\n    loadMemories();\n  };\n\n  const handleAddMemory = async () => {\n    if (!newMemory.title.trim() || !newMemory.content.trim()) return;\n\n    try {\n      const tags = newMemory.tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\n      \n      const result = await memoryService.storeMemory({\n        type: newMemory.type,\n        title: newMemory.title.trim(),\n        content: newMemory.content.trim(),\n        tags,\n        source: 'manual_ui'\n      });\n\n      if (result.success) {\n        setNewMemory({ type: 'general', title: '', content: '', tags: '' });\n        setShowAddMemory(false);\n        loadMemories();\n        loadStats();\n      }\n    } catch (error) {\n      console.error('Failed to add memory:', error);\n    }\n  };\n\n  const handleEditMemory = async () => {\n    if (!editingMemory) return;\n\n    try {\n      const tags = editingMemory.metadata.tags;\n      \n      const result = await memoryService.updateMemory({\n        id: editingMemory.id,\n        title: editingMemory.title,\n        content: editingMemory.content,\n        tags,\n        type: editingMemory.type\n      });\n\n      if (result.success) {\n        setEditingMemory(null);\n        loadMemories();\n      }\n    } catch (error) {\n      console.error('Failed to update memory:', error);\n    }\n  };\n\n  const handleDeleteMemory = async (memoryId: string) => {\n    if (!confirm('Are you sure you want to delete this memory?')) return;\n\n    try {\n      const result = await memoryService.deleteMemory({ id: memoryId });\n      if (result.success) {\n        loadMemories();\n        loadStats();\n      }\n    } catch (error) {\n      console.error('Failed to delete memory:', error);\n    }\n  };\n\n  const formatDate = (date: Date) => {\n    return new Date(date).toLocaleDateString() + ' ' + new Date(date).toLocaleTimeString();\n  };\n\n  const getTypeIcon = (type: MemoryType) => {\n    const config = memoryTypeConfig[type];\n    const IconComponent = config.icon;\n    return <IconComponent className=\"h-4 w-4\" />;\n  };\n\n  const getTypeLabel = (type: MemoryType) => {\n    return memoryTypeConfig[type].label;\n  };\n\n  const getTypeBadgeColor = (type: MemoryType) => {\n    return memoryTypeConfig[type].color;\n  };\n\n  const handleExportMemories = async () => {\n    setExportLoading(true);\n    try {\n      const exportResult = await memoryExportService.exportMemories({\n        description: 'Manual export from LiteLLM Memory Management'\n      });\n\n      if (exportResult.success && exportResult.data) {\n        const saveResult = await memoryExportService.saveExportToFile(exportResult.data);\n        if (saveResult.success) {\n          alert(`Memories exported successfully to ${saveResult.filename}`);\n        } else {\n          alert(`Export failed: ${saveResult.error}`);\n        }\n      } else {\n        alert(`Export failed: ${exportResult.error}`);\n      }\n    } catch (error) {\n      alert(`Export failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setExportLoading(false);\n    }\n  };\n\n  const handleImportMemories = async () => {\n    setImportLoading(true);\n    try {\n      const loadResult = await memoryExportService.loadExportFromFile();\n\n      if (loadResult.success && loadResult.data) {\n        const importResult = await memoryExportService.importMemories(loadResult.data, {\n          skipDuplicates: true,\n          validateData: true\n        });\n\n        if (importResult.success) {\n          alert(`Import completed: ${importResult.imported} memories imported, ${importResult.skipped} skipped, ${importResult.duplicates} duplicates found`);\n          loadMemories();\n          loadStats();\n        } else {\n          alert(`Import failed: ${importResult.errors.join(', ')}`);\n        }\n      } else {\n        alert(`Import failed: ${loadResult.error}`);\n      }\n    } catch (error) {\n      alert(`Import failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setImportLoading(false);\n    }\n  };\n\n  const handleCleanupMemories = async () => {\n    if (!confirm('This will clean up old and duplicate memories. Continue?')) return;\n\n    setCleanupLoading(true);\n    try {\n      const cleanupResult = await memoryCleanupService.performCleanup({\n        maxAge: 365, // 1 year\n        archiveOldMemories: true,\n        consolidateDuplicates: true,\n        removeUnusedMemories: false\n      });\n\n      if (cleanupResult.success) {\n        const sizeSaved = cleanupResult.sizeBefore - cleanupResult.sizeAfter;\n        alert(`Cleanup completed: ${cleanupResult.deleted} deleted, ${cleanupResult.archived} archived, ${cleanupResult.consolidated} consolidated. Saved ${Math.round(sizeSaved / 1024)}KB`);\n        loadMemories();\n        loadStats();\n      } else {\n        alert(`Cleanup failed: ${cleanupResult.errors.join(', ')}`);\n      }\n    } catch (error) {\n      alert(`Cleanup failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setCleanupLoading(false);\n    }\n  };\n\n  const handleAutoMemoryToggle = (setting: 'enableAutoSearch' | 'enableAutoSave', value: boolean) => {\n    const newConfig = { ...autoMemoryConfig, [setting]: value };\n    setAutoMemoryConfig(newConfig);\n    automaticMemoryService.updateConfig(newConfig);\n  };\n\n  const handleAutoMemoryConfigChange = (setting: string, value: number) => {\n    const newConfig = { ...autoMemoryConfig, [setting]: value };\n    setAutoMemoryConfig(newConfig);\n    automaticMemoryService.updateConfig(newConfig);\n  };\n\n  return (\n    <div className={className}>\n      <Tabs defaultValue=\"browse\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"browse\" className=\"text-xs\">Browse Memories</TabsTrigger>\n          <TabsTrigger value=\"stats\" className=\"text-xs\">Statistics</TabsTrigger>\n          <TabsTrigger value=\"settings\" className=\"text-xs\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"browse\" className=\"space-y-2\">\n          {/* Search and Filter Controls */}\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"flex items-center gap-2 text-sm\">\n                <Brain className=\"h-4 w-4\" />\n                Memory Browser\n              </CardTitle>\n              <CardDescription className=\"text-xs\">\n                Search and manage your stored memories\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <div className=\"flex gap-1\">\n                <div className=\"flex-1\">\n                  <Input\n                    placeholder=\"Search memories...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    onKeyDown={(e) => e.key === 'Enter' && handleSearch()}\n                    className=\"h-7 text-xs\"\n                  />\n                </div>\n                <Select value={selectedType} onValueChange={(value) => setSelectedType(value as MemoryType | 'all')}>\n                  <SelectTrigger className=\"w-32 h-7 text-xs\">\n                    <SelectValue placeholder=\"Filter by type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    {Object.entries(memoryTypeConfig).map(([type, config]) => (\n                      <SelectItem key={type} value={type}>\n                        <div className=\"flex items-center gap-2\">\n                          {getTypeIcon(type as MemoryType)}\n                          {config.label}\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Button onClick={handleSearch} disabled={loading} size=\"sm\" className=\"h-7 w-7 p-0\">\n                  <Search className=\"h-3 w-3\" />\n                </Button>\n                <Button onClick={() => setShowAddMemory(true)} size=\"sm\" className=\"h-7 w-7 p-0\">\n                  <Plus className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Memory List */}\n          <div className=\"space-y-2\">\n            {loading ? (\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <RefreshCw className=\"h-6 w-6 animate-spin mx-auto mb-2\" />\n                  Loading memories...\n                </CardContent>\n              </Card>\n            ) : memories.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-4 text-center text-muted-foreground\">\n                  No memories found. Try adjusting your search or add a new memory.\n                </CardContent>\n              </Card>\n            ) : (\n              memories.map((memory) => (\n                <Card key={memory.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={`${getTypeBadgeColor(memory.type)} text-white`}>\n                            {getTypeIcon(memory.type)}\n                            <span className=\"ml-1\">{getTypeLabel(memory.type)}</span>\n                          </Badge>\n                          <h3 className=\"font-medium\">{memory.title}</h3>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                          {memory.content}\n                        </p>\n                        <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                          <span className=\"flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3\" />\n                            {formatDate(memory.createdAt)}\n                          </span>\n                          {memory.metadata.tags.length > 0 && (\n                            <span className=\"flex items-center gap-1\">\n                              <Tag className=\"h-3 w-3\" />\n                              {memory.metadata.tags.join(', ')}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-1 ml-4\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => setEditingMemory(memory)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => handleDeleteMemory(memory.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"stats\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Memory Statistics\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {stats ? (\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"text-2xl font-bold\">{stats.totalEntries}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Memories</div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"text-2xl font-bold\">{Math.round(stats.totalSize / 1024)} KB</div>\n                    <div className=\"text-sm text-muted-foreground\">Storage Used</div>\n                  </div>\n                  <div className=\"col-span-2 space-y-2\">\n                    <h4 className=\"font-medium\">Memories by Type</h4>\n                    {Object.entries(stats.entriesByType).map(([type, count]) => (\n                      <div key={type} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          {getTypeIcon(type as MemoryType)}\n                          <span>{getTypeLabel(type as MemoryType)}</span>\n                        </div>\n                        <Badge variant=\"secondary\">{count}</Badge>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center text-muted-foreground\">\n                  Loading statistics...\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          {/* Automatic Memory Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Automatic Memory</CardTitle>\n              <CardDescription>\n                Configure how AI automatically uses and creates memories\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"auto-search\">Auto-Search Memories</Label>\n                    <input\n                      id=\"auto-search\"\n                      type=\"checkbox\"\n                      checked={autoMemoryConfig.enableAutoSearch}\n                      onChange={(e) => handleAutoMemoryToggle('enableAutoSearch', e.target.checked)}\n                      className=\"rounded\"\n                    />\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Automatically include relevant memories in AI prompts\n                  </p>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"auto-save\">Auto-Save Memories</Label>\n                    <input\n                      id=\"auto-save\"\n                      type=\"checkbox\"\n                      checked={autoMemoryConfig.enableAutoSave}\n                      onChange={(e) => handleAutoMemoryToggle('enableAutoSave', e.target.checked)}\n                      className=\"rounded\"\n                    />\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Automatically save useful information from conversations\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"search-threshold\">Search Relevance Threshold</Label>\n                  <Input\n                    id=\"search-threshold\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.1\"\n                    value={autoMemoryConfig.searchThreshold}\n                    onChange={(e) => handleAutoMemoryConfigChange('searchThreshold', parseFloat(e.target.value))}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Minimum relevance score to include memories (0.0 - 1.0)\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"save-threshold\">Auto-Save Confidence Threshold</Label>\n                  <Input\n                    id=\"save-threshold\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.1\"\n                    value={autoMemoryConfig.saveThreshold}\n                    onChange={(e) => handleAutoMemoryConfigChange('saveThreshold', parseFloat(e.target.value))}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Minimum confidence to auto-save information (0.0 - 1.0)\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"max-context\">Max Context Memories</Label>\n                  <Input\n                    id=\"max-context\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"10\"\n                    value={autoMemoryConfig.maxContextMemories}\n                    onChange={(e) => handleAutoMemoryConfigChange('maxContextMemories', parseInt(e.target.value))}\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Maximum memories to include in AI context\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <div className=\"text-sm space-y-2\">\n                  <div className=\"font-medium\">How Automatic Memory Works:</div>\n                  <ul className=\"text-muted-foreground space-y-1 ml-4\">\n                    <li>• <strong>Auto-Search:</strong> AI automatically searches for relevant memories before responding</li>\n                    <li>• <strong>Auto-Save:</strong> AI automatically saves preferences, solutions, and useful information</li>\n                    <li>• <strong>Smart Context:</strong> Only the most relevant memories are included to avoid overwhelming the AI</li>\n                    <li>• <strong>Seamless:</strong> Works transparently without requiring manual memory tool usage</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Manual Memory Management */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Memory Management</CardTitle>\n              <CardDescription>\n                Manual memory operations and maintenance\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div className=\"flex gap-2 flex-wrap\">\n                  <Button onClick={loadStats} disabled={loading}>\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\n                    Refresh Statistics\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleExportMemories}\n                    disabled={exportLoading}\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    {exportLoading ? 'Exporting...' : 'Export Memories'}\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleImportMemories}\n                    disabled={importLoading}\n                  >\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    {importLoading ? 'Importing...' : 'Import Memories'}\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleCleanupMemories}\n                    disabled={cleanupLoading}\n                  >\n                    <RefreshCw className=\"h-4 w-4 mr-2\" />\n                    {cleanupLoading ? 'Cleaning...' : 'Cleanup Memories'}\n                  </Button>\n                </div>\n\n                <div className=\"text-sm space-y-2\">\n                  <div className=\"font-medium\">Memory Management Features:</div>\n                  <ul className=\"text-muted-foreground space-y-1 ml-4\">\n                    <li>• <strong>Export:</strong> Save all memories to a JSON file for backup</li>\n                    <li>• <strong>Import:</strong> Restore memories from a backup file</li>\n                    <li>• <strong>Cleanup:</strong> Remove old memories and consolidate duplicates</li>\n                    <li>• <strong>Auto-Memory:</strong> AI automatically creates memories during conversations</li>\n                  </ul>\n                </div>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Memory system is running and ready to store information from AI conversations.\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Add Memory Dialog */}\n      {showAddMemory && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-md mx-4\">\n            <CardHeader>\n              <CardTitle>Add New Memory</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"memory-type\">Type</Label>\n                <Select value={newMemory.type} onValueChange={(value) => setNewMemory(prev => ({ ...prev, type: value as MemoryType }))}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(memoryTypeConfig).map(([type, config]) => (\n                      <SelectItem key={type} value={type}>\n                        <div className=\"flex items-center gap-2\">\n                          {getTypeIcon(type as MemoryType)}\n                          {config.label}\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"memory-title\">Title</Label>\n                <Input\n                  id=\"memory-title\"\n                  value={newMemory.title}\n                  onChange={(e) => setNewMemory(prev => ({ ...prev, title: e.target.value }))}\n                  placeholder=\"Enter memory title...\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"memory-content\">Content</Label>\n                <Textarea\n                  id=\"memory-content\"\n                  value={newMemory.content}\n                  onChange={(e) => setNewMemory(prev => ({ ...prev, content: e.target.value }))}\n                  placeholder=\"Enter memory content...\"\n                  rows={4}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"memory-tags\">Tags (comma-separated)</Label>\n                <Input\n                  id=\"memory-tags\"\n                  value={newMemory.tags}\n                  onChange={(e) => setNewMemory(prev => ({ ...prev, tags: e.target.value }))}\n                  placeholder=\"tag1, tag2, tag3...\"\n                />\n              </div>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setShowAddMemory(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleAddMemory}>\n                  Add Memory\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Edit Memory Dialog */}\n      {editingMemory && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-md mx-4\">\n            <CardHeader>\n              <CardTitle>Edit Memory</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"edit-memory-type\">Type</Label>\n                <Select value={editingMemory.type} onValueChange={(value) => setEditingMemory(prev => prev ? ({ ...prev, type: value as MemoryType }) : null)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(memoryTypeConfig).map(([type, config]) => (\n                      <SelectItem key={type} value={type}>\n                        <div className=\"flex items-center gap-2\">\n                          {getTypeIcon(type as MemoryType)}\n                          {config.label}\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"edit-memory-title\">Title</Label>\n                <Input\n                  id=\"edit-memory-title\"\n                  value={editingMemory.title}\n                  onChange={(e) => setEditingMemory(prev => prev ? ({ ...prev, title: e.target.value }) : null)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-memory-content\">Content</Label>\n                <Textarea\n                  id=\"edit-memory-content\"\n                  value={editingMemory.content}\n                  onChange={(e) => setEditingMemory(prev => prev ? ({ ...prev, content: e.target.value }) : null)}\n                  rows={4}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-memory-tags\">Tags (comma-separated)</Label>\n                <Input\n                  id=\"edit-memory-tags\"\n                  value={editingMemory.metadata.tags.join(', ')}\n                  onChange={(e) => {\n                    const tags = e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);\n                    setEditingMemory(prev => prev ? ({ \n                      ...prev, \n                      metadata: { ...prev.metadata, tags }\n                    }) : null);\n                  }}\n                />\n              </div>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setEditingMemory(null)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleEditMemory}>\n                  Save Changes\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\MessageContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\MessageWithThinking.tsx","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.","line":51,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":51,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1963,2053],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2105,2239],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2277,2362],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":184,"column":81,"nodeType":null,"messageId":"refactorFunction","endLine":184,"endColumn":83},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 42 to the 15 allowed.","line":225,"column":125,"nodeType":null,"messageId":"refactorFunction","endLine":225,"endColumn":127},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[9870,9933],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11016,11073],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":293,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":293,"endColumn":29,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11784,11851],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":307,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":307,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[12341,12399],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'parseMessage'. Either include it or remove the dependency array.","line":314,"column":55,"nodeType":"ArrayExpression","endLine":314,"endColumn":64,"suggestions":[{"desc":"Update the dependencies array to be: [content, parseMessage]","fix":{"range":[12504,12513],"text":"[content, parseMessage]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":325,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":325,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12890,12936],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":334,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":334,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13146,13176],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":343,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":343,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13472,13507],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":347,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":347,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13549,13629],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":355,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":355,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13870,13901],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":363,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":363,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14080,14129],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":391,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":391,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15020,15081],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'extractToolCallsFromContent'. Either include it or remove the dependency array.","line":410,"column":6,"nodeType":"ArrayExpression","endLine":410,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [content, extractToolCallsFromContent, toolCalls]","fix":{"range":[15751,15771],"text":"[content, extractToolCallsFromContent, toolCalls]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":442,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":442,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17090,17135],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":454,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":454,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17562,17621],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 10 times.","line":499,"column":33,"nodeType":"Literal","endLine":499,"endColumn":45}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useMemo, useEffect, useCallback, useRef } from 'react';\r\nimport { ChevronDown, ChevronRight, Brain, Copy, Check, Wrench, Volume2, VolumeX } from 'lucide-react';\r\nimport { Button } from './ui/button';\r\nimport { parseTextWithContent } from '../lib/contentParser';\r\nimport { SourceAttribution } from './SourceAttribution';\r\nimport type { Source } from '../services/chatService';\r\nimport { debugLogger } from '../services/debugLogger';\r\nimport { getTTSService } from '../services/textToSpeechService';\r\nimport { settingsService } from '../services/settingsService';\r\n\r\ninterface MessageWithThinkingProps {\r\n  content: string;\r\n  className?: string;\r\n  usage?: {\r\n    promptTokens: number;\r\n    completionTokens: number;\r\n    totalTokens: number;\r\n  };\r\n  cost?: {\r\n    inputCost: number;\r\n    outputCost: number;\r\n    totalCost: number;\r\n    currency: string;\r\n    provider: string;\r\n    model: string;\r\n  };\r\n  timing?: {\r\n    startTime: number;\r\n    endTime: number;\r\n    duration: number;\r\n    tokensPerSecond?: number;\r\n  };\r\n  toolCalls?: Array<{\r\n    id: string;\r\n    name: string;\r\n    arguments: Record<string, unknown>;\r\n    result?: string;\r\n    error?: boolean;\r\n  }>;\r\n  sources?: Source[];\r\n}\r\n\r\ninterface ParsedMessage {\r\n  thinking: string[];\r\n  toolExecution: string[];\r\n  response: string;\r\n}\r\n\r\nexport function MessageWithThinking({ content, className = '', usage, cost, timing, toolCalls, sources }: MessageWithThinkingProps) {\r\n  const [showThinking, setShowThinking] = useState(false);\r\n  const [showToolExecution, setShowToolExecution] = useState(false);\r\n  const [showTools, setShowTools] = useState(false);\r\n  const [copied, setCopied] = useState(false);\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  const autoPlayTriggeredRef = useRef(false);\r\n\r\n  // Debug tool calls - now handled in useEffect to prevent spam\r\n  useEffect(() => {\r\n    if (toolCalls && toolCalls.length > 0) {\r\n      console.log(`🔧 MessageWithThinking received ${toolCalls.length} tool calls:`, toolCalls);\r\n      toolCalls.forEach((tc, index) => {\r\n        console.log(`🔧 Tool ${index}: ${tc.name}, has result: ${!!tc.result}, result length: ${tc.result?.length || 0}, error: ${tc.error}`);\r\n        if (tc.result) {\r\n          console.log(`🔧 Tool ${index} result preview:`, tc.result.substring(0, 100) + '...');\r\n        }\r\n      });\r\n    }\r\n  }, [toolCalls]);\r\n\r\n  // Helper function to remove model-specific template tags\r\n  const removeTemplateTags = (text: string): string => {\r\n    let cleanedText = text;\r\n\r\n    // Remove new model format tags: <|start|>, <|message|>, <|channel|>, <|end|>, <|constrain|>\r\n    cleanedText = cleanedText.replace(/<\\|start\\|>/gi, '');\r\n    cleanedText = cleanedText.replace(/<\\|message\\|>/gi, '');\r\n    cleanedText = cleanedText.replace(/<\\|channel\\|>/gi, '');\r\n    cleanedText = cleanedText.replace(/<\\|end\\|>/gi, '');\r\n    cleanedText = cleanedText.replace(/<\\|constrain\\|>/gi, '');\r\n\r\n    // Remove Qwen3 format tags: <|im_start|>, <|im_end|>\r\n    cleanedText = cleanedText.replace(/<\\|im_start\\|>/gi, '');\r\n    cleanedText = cleanedText.replace(/<\\|im_end\\|>/gi, '');\r\n\r\n    // Remove concatenated role and channel indicators (e.g., \"assistantfinal\", \"systemcommentary\")\r\n    cleanedText = cleanedText.replace(/(system|user|assistant)(final|analysis|commentary)/gi, '');\r\n\r\n    // Remove standalone role indicators\r\n    cleanedText = cleanedText.replace(/\\b(system|user|assistant)\\b/gi, '');\r\n\r\n    // Remove standalone channel indicators\r\n    cleanedText = cleanedText.replace(/\\b(final|analysis|commentary)\\b/gi, '');\r\n\r\n    // Remove tool call commands (e.g., \"to=web_search json{...}\", \"to=list_directoryjson{...}\") - handles nested JSON, hyphens, function prefixes, optional space, and multiple calls\r\n    cleanedText = cleanedText.replace(/(?:commentary\\s+)?to=(?:functions\\.)?[a-zA-Z_][a-zA-Z0-9_-]*\\s*json\\{(?:[^{}]|{[^{}]*})*\\}/gi, '');\r\n\r\n    // Clean up any remaining template-like patterns\r\n    cleanedText = cleanedText.replace(/<\\|[^|]*\\|>/gi, '');\r\n\r\n    return cleanedText;\r\n  };\r\n\r\n  // Parse the message content to extract thinking sections, tool execution, and response\r\n  const parseMessage = (text: string): ParsedMessage => {\r\n    const thinking: string[] = [];\r\n    const toolExecution: string[] = [];\r\n    let response = text;\r\n\r\n    // Find all <think>...</think> blocks (structured thinking)\r\n    const thinkRegex = /<think>([\\s\\S]*?)<\\/think>/gi;\r\n    let thinkMatch;\r\n    while ((thinkMatch = thinkRegex.exec(text)) !== null) {\r\n      thinking.push(thinkMatch[1].trim());\r\n    }\r\n\r\n    // Find all <tool_execution>...</tool_execution> blocks\r\n    const toolRegex = /<tool_execution>([\\s\\S]*?)<\\/tool_execution>/gi;\r\n    let toolMatch;\r\n    while ((toolMatch = toolRegex.exec(text)) !== null) {\r\n      toolExecution.push(toolMatch[1].trim());\r\n    }\r\n\r\n    // Enhanced parsing for thinking models - ONLY for explicit thinking patterns\r\n    // Look for content that appears before tool calls AND has strong thinking indicators\r\n    // Support both ```json and new model format (to=tool_name json{...} or to=tool_namejson{...})\r\n    const beforeToolCallMatch = text.match(/^([\\s\\S]*?)(?=```json|(?:commentary\\s+)?to=[a-zA-Z_][a-zA-Z0-9_-]*\\s*json)/);\r\n    if (beforeToolCallMatch) {\r\n      const potentialThinking = beforeToolCallMatch[1].trim();\r\n\r\n      // Very specific thinking indicators - must be explicit reasoning language\r\n      const strongThinkingIndicators = [\r\n        'okay let me think through this', 'let me think through', 'i need to think about',\r\n        'let me analyze this', 'let me break this down', 'thinking through this',\r\n        'let me consider the', 'i should think about', 'let me reason through',\r\n        'okay let me think', 'let me think carefully', 'i need to consider',\r\n        'commentary', 'commentarythe', 'according to developer instruction'\r\n      ];\r\n\r\n      // Check for multiple strong indicators or very explicit thinking language\r\n      const strongIndicatorCount = strongThinkingIndicators.filter(indicator =>\r\n        potentialThinking.toLowerCase().includes(indicator)\r\n      ).length;\r\n\r\n      // Very strict criteria: must have strong thinking language AND be substantial content\r\n      // AND appear before a tool call (not standalone responses)\r\n      const hasToolCall = text.includes('```json') || /(?:commentary\\s+)?to=[a-zA-Z_][a-zA-Z0-9_-]*\\s*json/.test(text);\r\n      const isExplicitThinking = strongIndicatorCount > 0 && potentialThinking.length > 100;\r\n      const startsWithThinking = /^(okay let me think|let me think|i need to think|thinking through|commentary)/i.test(potentialThinking);\r\n\r\n      if (hasToolCall && (isExplicitThinking || startsWithThinking)) {\r\n        thinking.push(potentialThinking);\r\n      }\r\n    }\r\n\r\n    // Clean the response by removing unwanted content\r\n    response = text;\r\n\r\n    // Remove structured thinking and tool execution blocks\r\n    response = response.replace(thinkRegex, '').replace(toolRegex, '');\r\n\r\n    // Remove JSON tool call blocks (these should be in Tools Used section)\r\n    response = response.replace(/```json[\\s\\S]*?```/gi, '');\r\n\r\n    // Remove tool result markers\r\n    response = response.replace(/\\[TOOL_RESULT\\][\\s\\S]*?\\[END_TOOL_RESULT\\]/gi, '');\r\n\r\n    // Remove extracted thinking content from response\r\n    for (const thinkingContent of thinking) {\r\n      response = response.replace(thinkingContent, '');\r\n    }\r\n\r\n    // Remove model-specific template tags\r\n    response = removeTemplateTags(response);\r\n\r\n    // Clean up extra whitespace and empty lines\r\n    response = response.replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n').trim();\r\n\r\n    return { thinking, toolExecution, response };\r\n  };\r\n\r\n  // Helper function to extract complete JSON object from text starting at a given index\r\n  const extractCompleteJSON = (text: string, startIndex: number): string | null => {\r\n    let braceCount = 0;\r\n    let inString = false;\r\n    let escaped = false;\r\n    let jsonStart = -1;\r\n\r\n    for (let i = startIndex; i < text.length; i++) {\r\n      const char = text[i];\r\n\r\n      if (escaped) {\r\n        escaped = false;\r\n        continue;\r\n      }\r\n\r\n      if (char === '\\\\' && inString) {\r\n        escaped = true;\r\n        continue;\r\n      }\r\n\r\n      if (char === '\"') {\r\n        inString = !inString;\r\n        continue;\r\n      }\r\n\r\n      if (!inString) {\r\n        if (char === '{') {\r\n          if (jsonStart === -1) jsonStart = i;\r\n          braceCount++;\r\n        } else if (char === '}') {\r\n          braceCount--;\r\n          if (braceCount === 0 && jsonStart !== -1) {\r\n            return text.substring(jsonStart, i + 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  // Extract tool calls from content if not provided via props\r\n  const extractToolCallsFromContent = (text: string): Array<{id: string, name: string, arguments: Record<string, unknown>}> => {\r\n    const toolCalls: Array<{id: string, name: string, arguments: Record<string, unknown>}> = [];\r\n\r\n    // Pattern 1: JSON-wrapped tool calls (```json wrapper)\r\n    const jsonMatches = text.match(/```json\\s*([\\s\\S]*?)\\s*```/gi);\r\n    if (jsonMatches) {\r\n      for (const match of jsonMatches) {\r\n        try {\r\n          const jsonContent = match.replace(/```json\\s*|\\s*```/gi, '').trim();\r\n          const parsed = JSON.parse(jsonContent);\r\n\r\n          if (parsed.tool_call && parsed.tool_call.name) {\r\n            // Create deterministic ID based on content to prevent re-render loops\r\n            const contentHash = btoa(JSON.stringify(parsed.tool_call)).replace(/[^a-zA-Z0-9]/g, '').substring(0, 16);\r\n            toolCalls.push({\r\n              id: `extracted_json_${contentHash}`,\r\n              name: parsed.tool_call.name,\r\n              arguments: parsed.tool_call.arguments || {}\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.warn('Failed to parse JSON-wrapped tool call:', error);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Pattern 2: Direct tool_call format (without ```json wrapper)\r\n    // Use a more robust approach to find complete JSON objects\r\n    const toolCallPattern = /\\{\\s*\"tool_call\"\\s*:\\s*\\{/gi;\r\n    let match;\r\n    while ((match = toolCallPattern.exec(text)) !== null) {\r\n      try {\r\n        // Find the complete JSON object starting from the match\r\n        const startIndex = match.index;\r\n        const jsonStr = extractCompleteJSON(text, startIndex);\r\n\r\n        if (jsonStr) {\r\n          const parsed = JSON.parse(jsonStr);\r\n          if (parsed.tool_call && parsed.tool_call.name) {\r\n            // Create deterministic ID based on content to prevent re-render loops\r\n            const contentHash = btoa(JSON.stringify(parsed.tool_call)).replace(/[^a-zA-Z0-9]/g, '').substring(0, 16);\r\n            toolCalls.push({\r\n              id: `extracted_direct_${contentHash}`,\r\n              name: parsed.tool_call.name,\r\n              arguments: parsed.tool_call.arguments || {}\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.warn('Failed to parse direct tool call:', error);\r\n      }\r\n    }\r\n\r\n    // Pattern 3: Native OpenAI format (tool_calls array)\r\n    const nativeToolCallRegex = /\"tool_calls\"\\s*:\\s*\\[([\\s\\S]*?)\\]/gi;\r\n    const nativeMatch = nativeToolCallRegex.exec(text);\r\n    if (nativeMatch) {\r\n      try {\r\n        const toolCallsArray = JSON.parse(`[${nativeMatch[1]}]`);\r\n        for (const tc of toolCallsArray) {\r\n          if (tc.function && tc.function.name) {\r\n            let args = {};\r\n            if (tc.function.arguments) {\r\n              try {\r\n                args = typeof tc.function.arguments === 'string'\r\n                  ? JSON.parse(tc.function.arguments)\r\n                  : tc.function.arguments;\r\n              } catch (error) {\r\n                console.warn('Failed to parse native tool call arguments:', error);\r\n              }\r\n            }\r\n\r\n            // Create deterministic ID based on content to prevent re-render loops\r\n            const contentHash = btoa(JSON.stringify({name: tc.function.name, args})).replace(/[^a-zA-Z0-9]/g, '').substring(0, 16);\r\n            toolCalls.push({\r\n              id: tc.id || `extracted_native_${contentHash}`,\r\n              name: tc.function.name,\r\n              arguments: args\r\n            });\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.warn('Failed to parse native tool calls:', error);\r\n      }\r\n    }\r\n\r\n    return toolCalls;\r\n  };\r\n\r\n  const parsed = useMemo(() => parseMessage(content), [content]);\r\n  const hasThinking = parsed.thinking.length > 0;\r\n  const hasToolExecution = parsed.toolExecution.length > 0;\r\n\r\n  // TTS function for speaking the message\r\n  const handleSpeak = useCallback(async () => {\r\n    try {\r\n      const settings = settingsService.getSettings();\r\n      const ttsSettings = settings.ui?.textToSpeech;\r\n\r\n      if (!ttsSettings?.enabled) {\r\n        console.log('🔊 TTS is disabled in settings');\r\n        return;\r\n      }\r\n\r\n      if (isSpeaking) {\r\n        // Stop current speech\r\n        const ttsService = getTTSService(ttsSettings);\r\n        ttsService.stop();\r\n        setIsSpeaking(false);\r\n        console.log('🔊 TTS stopped');\r\n      } else {\r\n        // Start speaking\r\n        const ttsService = getTTSService(ttsSettings);\r\n\r\n        // Use the parsed response text for cleaner speech\r\n        const textToSpeak = parsed.response || content;\r\n\r\n        if (!textToSpeak || textToSpeak.trim().length === 0) {\r\n          console.log('🔊 No text to speak');\r\n          return;\r\n        }\r\n\r\n        console.log('🔊 Starting TTS for text:', textToSpeak.substring(0, 100) + '...');\r\n        setIsSpeaking(true);\r\n        ttsService.speak(textToSpeak);\r\n\r\n        // Monitor speech status\r\n        const checkSpeechStatus = () => {\r\n          if (!ttsService.isSpeaking()) {\r\n            setIsSpeaking(false);\r\n            console.log('🔊 TTS finished');\r\n          } else {\r\n            setTimeout(checkSpeechStatus, 100);\r\n          }\r\n        };\r\n        setTimeout(checkSpeechStatus, 100);\r\n      }\r\n    } catch (error) {\r\n      console.error('🔊 Failed to speak text:', error);\r\n      setIsSpeaking(false);\r\n    }\r\n  }, [content, parsed.response, isSpeaking]);\r\n\r\n  // Auto-play TTS for new AI messages if enabled\r\n  useEffect(() => {\r\n    // Reset auto-play trigger when content changes (new message)\r\n    autoPlayTriggeredRef.current = false;\r\n  }, [content]);\r\n\r\n  useEffect(() => {\r\n    const settings = settingsService.getSettings();\r\n    const ttsSettings = settings.ui?.textToSpeech;\r\n\r\n    // Only auto-play if:\r\n    // 1. TTS is enabled\r\n    // 2. Auto-play is enabled\r\n    // 3. There's content to speak\r\n    // 4. We haven't already triggered auto-play for this message\r\n    // 5. This appears to be an AI response (has parsed response content)\r\n    if (ttsSettings?.enabled &&\r\n        ttsSettings?.autoPlay &&\r\n        content &&\r\n        !autoPlayTriggeredRef.current &&\r\n        parsed.response &&\r\n        parsed.response.trim().length > 0) {\r\n\r\n      console.log('🔊 Auto-play TTS triggered for new AI message');\r\n      autoPlayTriggeredRef.current = true;\r\n\r\n      // Small delay to ensure the message is fully rendered\r\n      const timer = setTimeout(() => {\r\n        handleSpeak();\r\n      }, 1000); // Increased delay to ensure message is complete\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [content, parsed.response, handleSpeak]);\r\n\r\n  // Extract tool calls from content if not provided via props - MEMOIZED to prevent infinite loops\r\n  const extractedToolCalls = useMemo(() => {\r\n    // Only extract if no tool calls provided via props\r\n    if (toolCalls && toolCalls.length > 0) {\r\n      return [];\r\n    }\r\n    return extractToolCallsFromContent(content);\r\n  }, [content, toolCalls]);\r\n\r\n  const allToolCalls = toolCalls && toolCalls.length > 0 ? toolCalls : extractedToolCalls;\r\n  const hasTools = allToolCalls.length > 0;\r\n\r\n  // Ensure we always show tool execution section if we have tool calls\r\n  // This fixes inconsistencies across providers\r\n  const shouldShowToolExecution = hasToolExecution || hasTools;\r\n\r\n  // Log tool calls only once per unique set to prevent spam\r\n  const toolCallsKey = useMemo(() => {\r\n    if (allToolCalls.length === 0) return '';\r\n    return allToolCalls.map(tc => `${tc.name}:${JSON.stringify(tc.arguments)}`).join('|');\r\n  }, [allToolCalls]);\r\n\r\n  const [loggedToolCallsKey, setLoggedToolCallsKey] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    if (toolCallsKey && toolCallsKey !== loggedToolCallsKey && allToolCalls.length > 0) {\r\n      debugLogger.info('MESSAGE', 'MessageWithThinking received toolCalls:', allToolCalls);\r\n      setLoggedToolCallsKey(toolCallsKey);\r\n    }\r\n  }, [toolCallsKey, loggedToolCallsKey, allToolCalls]);\r\n\r\n  // Copy function for the entire message content\r\n  const handleCopy = async () => {\r\n    try {\r\n      // Copy the full original content (including thinking sections)\r\n      await navigator.clipboard.writeText(content);\r\n      setCopied(true);\r\n      setTimeout(() => setCopied(false), 2000);\r\n    } catch (error) {\r\n      console.error('Failed to copy text:', error);\r\n      // Fallback for older browsers\r\n      try {\r\n        const textArea = document.createElement('textarea');\r\n        textArea.value = content;\r\n        document.body.appendChild(textArea);\r\n        textArea.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(textArea);\r\n        setCopied(true);\r\n        setTimeout(() => setCopied(false), 2000);\r\n      } catch (fallbackError) {\r\n        console.error('Fallback copy also failed:', fallbackError);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`relative group ${className}`}>\r\n      {/* Thinking Section - Only show if there are thinking blocks */}\r\n      {hasThinking && (\r\n        <div className=\"mb-3\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => setShowThinking(!showThinking)}\r\n            className=\"flex items-center gap-1 text-xs text-muted-foreground hover:text-foreground p-0.5 h-auto\"\r\n          >\r\n            {showThinking ? (\r\n              <ChevronDown style={{ width: '16px', height: '16px' }} />\r\n            ) : (\r\n              <ChevronRight style={{ width: '16px', height: '16px' }} />\r\n            )}\r\n            <Brain style={{ width: '16px', height: '16px' }} />\r\n            <span>Model Thinking ({parsed.thinking.length} section{parsed.thinking.length !== 1 ? 's' : ''})</span>\r\n          </Button>\r\n          \r\n          {showThinking && (\r\n            <div className=\"mt-1 space-y-1\">\r\n              {parsed.thinking.map((thinkingText, index) => (\r\n                <div\r\n                  key={index}\r\n                  className=\"bg-muted rounded-2xl p-2 text-xs\"\r\n                  style={{ border: 'none' }}\r\n                >\r\n                  <div className=\"flex items-center gap-1 mb-1 text-xs text-muted-foreground\">\r\n                    <Brain style={{ width: '16px', height: '16px' }} />\r\n                    <span>Thinking {parsed.thinking.length > 1 ? `${index + 1}` : ''}</span>\r\n                  </div>\r\n                  {parseTextWithContent(\r\n                    thinkingText,\r\n                    \"whitespace-pre-wrap text-foreground select-text break-words text-sm\",\r\n                    {\r\n                      WebkitAppRegion: 'no-drag',\r\n                      userSelect: 'text',\r\n                      WebkitUserSelect: 'text',\r\n                      textShadow: '0 1px 2px rgba(0, 0, 0, 0.3)',\r\n                      wordWrap: 'break-word',\r\n                      overflowWrap: 'break-word',\r\n                      maxWidth: '100%'\r\n                    } as React.CSSProperties & { WebkitAppRegion?: string }\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Tool Execution Section - Show if there are tool execution blocks OR tool calls */}\r\n      {shouldShowToolExecution && (\r\n        <div className=\"mb-3\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => setShowToolExecution(!showToolExecution)}\r\n            className=\"flex items-center gap-2 text-xs text-muted-foreground hover:text-foreground p-1 h-auto\"\r\n          >\r\n            {showToolExecution ? (\r\n              <ChevronDown className=\"h-3 w-3\" />\r\n            ) : (\r\n              <ChevronRight className=\"h-3 w-3\" />\r\n            )}\r\n            <Wrench className=\"h-3 w-3\" />\r\n            <span>Tool Execution ({Math.max(parsed.toolExecution.length, hasTools ? 1 : 0)} section{(parsed.toolExecution.length !== 1 || hasTools) ? 's' : ''})</span>\r\n          </Button>\r\n\r\n          {showToolExecution && (\r\n            <div className=\"mt-2 space-y-2\">\r\n              {parsed.toolExecution.map((toolText, index) => {\r\n                // Parse the tool execution text to extract structured information\r\n                const parseToolExecution = (text: string) => {\r\n                  const lines = text.split('\\n');\r\n                  const tools: Array<{name: string, result: string, status: 'success' | 'failed', executionTime?: string}> = [];\r\n                  let currentTool: {name: string, result: string, status: 'success' | 'failed', executionTime?: string} | null = null;\r\n                  let inResult = false;\r\n                  let resultLines: string[] = [];\r\n\r\n                  for (const line of lines) {\r\n                    // Check for tool execution summary\r\n                    const summaryMatch = line.match(/🏁.*?(\\d+)\\s*successful,\\s*(\\d+)\\s*failed/);\r\n                    if (summaryMatch) {\r\n                      return {\r\n                        summary: line,\r\n                        tools,\r\n                        successCount: parseInt(summaryMatch[1]),\r\n                        failureCount: parseInt(summaryMatch[2])\r\n                      };\r\n                    }\r\n\r\n                    // Check for tool result headers\r\n                    const toolMatch = line.match(/\\*\\*(.+?)\\s+Result:\\*\\*/);\r\n                    if (toolMatch) {\r\n                      // Save previous tool if exists\r\n                      if (currentTool) {\r\n                        currentTool.result = resultLines.join('\\n').trim();\r\n                        tools.push(currentTool);\r\n                      }\r\n                      // Start new tool\r\n                      currentTool = {\r\n                        name: toolMatch[1],\r\n                        result: '',\r\n                        status: 'success'\r\n                      };\r\n                      resultLines = [];\r\n                      inResult = true;\r\n                      continue;\r\n                    }\r\n\r\n                    // Check for failed tools section\r\n                    if (line.includes('**Failed Tools:**')) {\r\n                      inResult = false;\r\n                      continue;\r\n                    }\r\n\r\n                    // Collect result lines\r\n                    if (inResult && currentTool && line.trim()) {\r\n                      resultLines.push(line);\r\n                    }\r\n                  }\r\n\r\n                  // Save last tool\r\n                  if (currentTool) {\r\n                    currentTool.result = resultLines.join('\\n').trim();\r\n                    tools.push(currentTool);\r\n                  }\r\n\r\n                  return { summary: '', tools, successCount: 0, failureCount: 0 };\r\n                };\r\n\r\n                const executionData = parseToolExecution(toolText);\r\n\r\n                return (\r\n                  <div\r\n                    key={index}\r\n                    className=\"bg-muted border border-border rounded-2xl p-3 text-sm\"\r\n                  >\r\n                    <div className=\"flex items-center gap-2 mb-3 text-xs text-muted-foreground\">\r\n                      <Wrench className=\"h-3 w-3\" />\r\n                      <span>Tool Execution {parsed.toolExecution.length > 1 ? `${index + 1}` : ''}</span>\r\n                      {executionData.summary && (\r\n                        <span className=\"ml-auto text-xs\">\r\n                          ✅ {executionData.successCount} success, ❌ {executionData.failureCount} failed\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n\r\n                    {/* Show individual tool results if parsed */}\r\n                    {executionData.tools.length > 0 ? (\r\n                      <div className=\"space-y-3\">\r\n                        {executionData.tools.map((tool, toolIndex) => (\r\n                          <div key={toolIndex} className={`border rounded-lg p-2 ${\r\n                            tool.status === 'success'\r\n                              ? 'border-border/50'\r\n                              : 'border-red-500/30 bg-red-500/5'\r\n                          }`}>\r\n                            <div className=\"flex items-center gap-2 mb-2\">\r\n                              <span className=\"text-xs font-medium text-foreground\">{tool.name}</span>\r\n                              <span className={`text-xs px-1.5 py-0.5 rounded ${\r\n                                tool.status === 'success'\r\n                                  ? 'bg-green-500/20 text-green-400'\r\n                                  : 'bg-red-500/20 text-red-400'\r\n                              }`}>\r\n                                {tool.status === 'success' ? '✓ Success' : '✗ Failed'}\r\n                              </span>\r\n                              {tool.status === 'failed' && (\r\n                                <span className=\"text-xs text-red-400 ml-auto\">\r\n                                  Error occurred during execution\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                            {parseTextWithContent(\r\n                              tool.result || '(no result)',\r\n                              `text-xs whitespace-pre-wrap select-text rounded p-2 break-words ${\r\n                                tool.status === 'success'\r\n                                  ? 'text-muted-foreground bg-background/50'\r\n                                  : 'text-red-300 bg-red-500/10'\r\n                              }`,\r\n                              {\r\n                                WebkitAppRegion: 'no-drag',\r\n                                userSelect: 'text',\r\n                                WebkitUserSelect: 'text',\r\n                                border: 'none',\r\n                                wordWrap: 'break-word',\r\n                                overflowWrap: 'break-word',\r\n                                maxWidth: '100%'\r\n                              } as React.CSSProperties & { WebkitAppRegion?: string }\r\n                            )}\r\n                            {tool.status === 'failed' && (\r\n                              <div className=\"mt-2 text-xs text-red-400/80\">\r\n                                💡 This error has been reported. You can try again or contact support if the issue persists.\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    ) : (\r\n                      // Fallback to showing raw text if parsing failed\r\n                      <div\r\n                        className=\"whitespace-pre-wrap text-foreground select-text break-words text-sm\"\r\n                        style={{\r\n                          WebkitAppRegion: 'no-drag',\r\n                          userSelect: 'text',\r\n                          WebkitUserSelect: 'text',\r\n                          textShadow: '0 1px 2px rgba(0, 0, 0, 0.3)',\r\n                          wordWrap: 'break-word',\r\n                          overflowWrap: 'break-word',\r\n                          maxWidth: '100%'\r\n                        } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n                      >\r\n                        {toolText}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n\r\n              {/* Fallback: Show tool execution info when we have tool calls but no parsed tool execution blocks */}\r\n              {parsed.toolExecution.length === 0 && hasTools && (\r\n                <div className=\"bg-muted border border-border rounded-2xl p-3 text-sm\">\r\n                  <div className=\"flex items-center gap-2 mb-3 text-xs text-muted-foreground\">\r\n                    <Wrench className=\"h-3 w-3\" />\r\n                    <span>Tool Execution</span>\r\n                    <span className=\"ml-auto text-xs\">\r\n                      ✅ {allToolCalls.length} tool{allToolCalls.length !== 1 ? 's' : ''} executed\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-3\">\r\n                    {allToolCalls.map((tool, toolIndex) => (\r\n                      <div key={toolIndex} className={`border rounded-lg p-3 ${\r\n                        tool.error ? 'border-red-500/30 bg-red-500/5' : 'border-border/50'\r\n                      }`}>\r\n                        <div className=\"flex items-center gap-2 mb-2\">\r\n                          <span className=\"text-xs font-medium text-foreground\">{tool.name}</span>\r\n                          <span className={`text-xs px-1.5 py-0.5 rounded ${\r\n                            tool.error\r\n                              ? 'bg-red-500/20 text-red-400'\r\n                              : 'bg-green-500/20 text-green-400'\r\n                          }`}>\r\n                            {tool.error ? '✗ Failed' : '✓ Success'}\r\n                          </span>\r\n                        </div>\r\n\r\n                        {/* Show actual tool results */}\r\n                        {tool.result !== undefined ? (\r\n                          <div className=\"mt-2\">\r\n                            <div className=\"text-xs font-medium text-muted-foreground mb-1\">Result:</div>\r\n                            <div className=\"bg-muted rounded p-2 text-xs whitespace-pre-wrap text-foreground select-text break-words max-h-40 overflow-y-auto\"\r\n                                 style={{\r\n                                   WebkitAppRegion: 'no-drag',\r\n                                   userSelect: 'text',\r\n                                   WebkitUserSelect: 'text',\r\n                                   wordWrap: 'break-word',\r\n                                   overflowWrap: 'break-word'\r\n                                 } as React.CSSProperties & { WebkitAppRegion?: string }}>\r\n                              {tool.result || '(empty result)'}\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            Tool executed successfully. No detailed results available.\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Tool Usage Section - Only show if there are tool calls */}\r\n      {hasTools && (\r\n        <div className=\"mb-3\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => setShowTools(!showTools)}\r\n            className=\"flex items-center gap-2 text-xs text-muted-foreground hover:text-foreground p-1 h-auto\"\r\n          >\r\n            {showTools ? (\r\n              <ChevronDown className=\"h-3 w-3\" />\r\n            ) : (\r\n              <ChevronRight className=\"h-3 w-3\" />\r\n            )}\r\n            <Wrench className=\"h-3 w-3\" />\r\n            <span>Tools Used ({allToolCalls.length} tool{allToolCalls.length !== 1 ? 's' : ''})</span>\r\n          </Button>\r\n\r\n          {showTools && (\r\n            <div className=\"mt-2 space-y-2\">\r\n              {allToolCalls.map((toolCall, index) => (\r\n                <div\r\n                  key={toolCall.id || index}\r\n                  className=\"bg-card rounded-2xl p-3 text-sm\"\r\n                  style={{\r\n                    backgroundColor: 'rgba(79, 193, 255, 0.1)',\r\n                    border: 'none'\r\n                  }}\r\n                >\r\n                  <div className=\"flex items-center gap-2 mb-2 text-xs\" style={{ color: 'var(--info)' }}>\r\n                    <Wrench className=\"h-3 w-3\" />\r\n                    <span className=\"font-medium\">{toolCall.name}</span>\r\n                    <span className=\"text-muted-foreground\">#{toolCall.id}</span>\r\n                  </div>\r\n\r\n                  {/* Tool Status and Summary */}\r\n                  <div className=\"text-xs text-muted-foreground\">\r\n                    <div className=\"flex items-center gap-1 mb-1\">\r\n                      <span className=\"font-medium\">Status:</span>\r\n                      <span className={toolCall.error ? 'text-red-400' : 'text-green-400'}>\r\n                        {toolCall.error ? '✗ Failed' : '✓ Executed'}\r\n                      </span>\r\n                    </div>\r\n\r\n                    {/* Show arguments summary */}\r\n                    {Object.keys(toolCall.arguments).length > 0 && (\r\n                      <div className=\"mt-1\">\r\n                        <span className=\"font-medium\">Arguments: </span>\r\n                        <span className=\"text-xs\">\r\n                          {Object.entries(toolCall.arguments).map(([key, value]) =>\r\n                            `${key}: ${String(value).substring(0, 50)}${String(value).length > 50 ? '...' : ''}`\r\n                          ).join(', ')}\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n\r\n                    <div className=\"mt-1 text-xs\">\r\n                      Full results are shown in the Tool Execution section above.\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Action Buttons - positioned in top right */}\r\n      <div className=\"absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity flex gap-1\">\r\n        {/* TTS Button */}\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={handleSpeak}\r\n          className=\"h-6 w-6 p-0\"\r\n          style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n          title={isSpeaking ? \"Stop speaking\" : \"Speak text\"}\r\n        >\r\n          {isSpeaking ? (\r\n            <VolumeX className=\"h-3 w-3 text-blue-500\" />\r\n          ) : (\r\n            <Volume2 className=\"h-3 w-3\" />\r\n          )}\r\n        </Button>\r\n\r\n        {/* Copy Button */}\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={handleCopy}\r\n          className=\"h-6 w-6 p-0\"\r\n          style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n          title=\"Copy message\"\r\n        >\r\n          {copied ? (\r\n            <Check className=\"h-3 w-3 text-green-500\" />\r\n          ) : (\r\n            <Copy className=\"h-3 w-3\" />\r\n          )}\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Main Response */}\r\n      {parsed.response && parseTextWithContent(\r\n        parsed.response,\r\n        \"select-text break-words text-sm leading-relaxed\",\r\n        {\r\n          WebkitAppRegion: 'no-drag',\r\n          userSelect: 'text',\r\n          WebkitUserSelect: 'text',\r\n          wordWrap: 'break-word',\r\n          overflowWrap: 'break-word',\r\n          maxWidth: '100%'\r\n        } as React.CSSProperties & { WebkitAppRegion?: string }\r\n      )}\r\n\r\n      {/* Token Usage, Cost, and Performance Info */}\r\n      {(usage || cost || timing) && (\r\n        <div className=\"mt-3 pt-2\">\r\n          <div className=\"flex flex-wrap gap-4 text-xs text-muted-foreground\">\r\n            {timing?.tokensPerSecond && (\r\n              <div className=\"flex items-center gap-1\">\r\n                <span className=\"font-medium\">⚡</span>\r\n                <span>{timing.tokensPerSecond.toFixed(1)} tokens/sec</span>\r\n              </div>\r\n            )}\r\n            {usage && (\r\n              <div className=\"flex items-center gap-1\">\r\n                <span className=\"font-medium\">📊</span>\r\n                <span>{usage.totalTokens} tokens ({usage.promptTokens} in, {usage.completionTokens} out)</span>\r\n              </div>\r\n            )}\r\n            {cost && (\r\n              <div className=\"flex items-center gap-1\">\r\n                <span className=\"font-medium\">💰</span>\r\n                <span>\r\n                  {cost.totalCost < 0.000001 ? '<$0.000001' :\r\n                   cost.totalCost < 0.01 ? `$${cost.totalCost.toFixed(6)}` :\r\n                   `$${cost.totalCost.toFixed(4)}`}\r\n                  {cost.provider && ` (${cost.provider})`}\r\n                </span>\r\n              </div>\r\n            )}\r\n            {timing && (\r\n              <div className=\"flex items-center gap-1\">\r\n                <span className=\"font-medium\">⏱️</span>\r\n                <span>{(timing.duration / 1000).toFixed(2)}s</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Source Attribution */}\r\n      {sources && sources.length > 0 && (\r\n        <SourceAttribution sources={sources} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\OverlayRouter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ProgressLogPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\PromptsContent.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2045,2094],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5634,5684],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Textarea } from './ui/textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Plus, Edit, Trash2, Download, Upload } from 'lucide-react';\r\nimport { promptsService, type Prompt } from '../services/promptsService';\r\n\r\n\r\ninterface PromptsContentProps {\r\n  onPromptSelect: (processedPrompt: string) => void;\r\n  clipboardContent?: string;\r\n}\r\n\r\nexport function PromptsContent({ onPromptSelect, clipboardContent = '' }: PromptsContentProps) {\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\r\n  const [showAddPrompt, setShowAddPrompt] = useState(false);\r\n  const [editingPrompt, setEditingPrompt] = useState<Prompt | null>(null);\r\n  const [isReadingClipboard, setIsReadingClipboard] = useState(false);\r\n  const [newPrompt, setNewPrompt] = useState({\r\n    name: '',\r\n    description: '',\r\n    prompt: '',\r\n    category: 'text',\r\n    icon: '✏️'\r\n  });\r\n\r\n  const allPrompts = promptsService.getAllPrompts();\r\n  const categories = promptsService.getCategories().filter(category => category && typeof category === 'string');\r\n  const filteredPrompts = selectedCategory === 'all' \r\n    ? allPrompts \r\n    : promptsService.getPromptsByCategory(selectedCategory);\r\n\r\n  const handlePromptSelect = async (prompt: Prompt) => {\r\n    setIsReadingClipboard(true);\r\n    let processedPrompt = prompt.prompt;\r\n    let currentClipboardContent = clipboardContent;\r\n\r\n    // If no clipboard content is available, try to read it now\r\n    if (!currentClipboardContent) {\r\n      try {\r\n        if (typeof window !== 'undefined' && window.electronAPI) {\r\n          currentClipboardContent = (await window.electronAPI.readClipboard()).trim();\r\n        } else if (navigator.clipboard) {\r\n          currentClipboardContent = (await navigator.clipboard.readText()).trim();\r\n        }\r\n      } catch (error) {\r\n        console.warn('Failed to read clipboard:', error);\r\n        currentClipboardContent = '';\r\n      }\r\n    }\r\n\r\n    // Replace {content} placeholder with clipboard content\r\n    if (processedPrompt.includes('{content}')) {\r\n      if (currentClipboardContent) {\r\n        processedPrompt = processedPrompt.replace(/{content}/g, currentClipboardContent);\r\n      } else {\r\n        processedPrompt = processedPrompt.replace(/{content}/g, '[No clipboard content available]');\r\n      }\r\n    }\r\n\r\n    setIsReadingClipboard(false);\r\n    onPromptSelect(processedPrompt);\r\n  };\r\n\r\n  const handleAddPrompt = () => {\r\n    if (newPrompt.name && newPrompt.prompt) {\r\n      promptsService.addCustomPrompt({\r\n        name: newPrompt.name,\r\n        description: newPrompt.description,\r\n        prompt: newPrompt.prompt,\r\n        category: newPrompt.category,\r\n        icon: newPrompt.icon\r\n      });\r\n      setNewPrompt({ name: '', description: '', prompt: '', category: 'text', icon: '✏️' });\r\n      setShowAddPrompt(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdatePrompt = () => {\r\n    if (editingPrompt && newPrompt.name && newPrompt.prompt) {\r\n      if (promptsService.isCustomPrompt(editingPrompt.id)) {\r\n        // Update existing custom prompt\r\n        promptsService.updateCustomPrompt(editingPrompt.id, {\r\n          name: newPrompt.name,\r\n          description: newPrompt.description,\r\n          prompt: newPrompt.prompt,\r\n          category: newPrompt.category,\r\n          icon: newPrompt.icon\r\n        });\r\n      } else {\r\n        // Convert built-in prompt to custom prompt by creating a new one\r\n        promptsService.addCustomPrompt({\r\n          name: newPrompt.name,\r\n          description: newPrompt.description,\r\n          prompt: newPrompt.prompt,\r\n          category: newPrompt.category,\r\n          icon: newPrompt.icon\r\n        });\r\n      }\r\n      setEditingPrompt(null);\r\n      setNewPrompt({ name: '', description: '', prompt: '', category: 'text', icon: '✏️' });\r\n      setShowAddPrompt(false);\r\n    }\r\n  };\r\n\r\n  const handleEditPrompt = (prompt: Prompt) => {\r\n    setEditingPrompt(prompt);\r\n    setNewPrompt({\r\n      name: prompt.name,\r\n      description: prompt.description,\r\n      prompt: prompt.prompt,\r\n      category: prompt.category,\r\n      icon: prompt.icon\r\n    });\r\n    setShowAddPrompt(true);\r\n  };\r\n\r\n  const handleDeletePrompt = (promptId: string) => {\r\n    promptsService.deleteCustomPrompt(promptId);\r\n  };\r\n\r\n  const handleExportPrompts = () => {\r\n    const customPrompts = promptsService.getCustomPrompts();\r\n    const dataStr = JSON.stringify(customPrompts, null, 2);\r\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n    const url = URL.createObjectURL(dataBlob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = 'custom-prompts.json';\r\n    link.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const handleImportPrompts = () => {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = '.json';\r\n    input.onchange = (e) => {\r\n      const file = (e.target as HTMLInputElement).files?.[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          try {\r\n            const prompts = JSON.parse(e.target?.result as string);\r\n            if (Array.isArray(prompts)) {\r\n              prompts.forEach(prompt => {\r\n                if (prompt.name && prompt.prompt) {\r\n                  promptsService.addCustomPrompt(prompt);\r\n                }\r\n              });\r\n            }\r\n          } catch (error) {\r\n            console.error('Failed to import prompts:', error);\r\n          }\r\n        };\r\n        reader.readAsText(file);\r\n      }\r\n    };\r\n    input.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      {/* Category Filter */}\r\n      <div className=\"flex items-center gap-2\">\r\n        <Label className=\"text-xs\">Category:</Label>\r\n        <Select value={selectedCategory} onValueChange={setSelectedCategory}>\r\n          <SelectTrigger className=\"w-32 h-7 text-xs\">\r\n            <SelectValue />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectItem value=\"all\">All Categories</SelectItem>\r\n            {categories.map(category => (\r\n              <SelectItem key={category} value={category}>\r\n                {category.charAt(0).toUpperCase() + category.slice(1)}\r\n              </SelectItem>\r\n            ))}\r\n          </SelectContent>\r\n        </Select>\r\n\r\n        <div className=\"flex gap-1 ml-auto\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => setShowAddPrompt(true)}\r\n            className=\"h-7 text-xs bg-primary/20 border-primary/50 text-primary hover:bg-primary/30 hover:border-primary/70\"\r\n          >\r\n            <Plus className=\"h-3 w-3 mr-1\" />\r\n            Add Custom Prompt\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={handleExportPrompts}\r\n            className=\"h-7 text-xs\"\r\n          >\r\n            <Download className=\"h-3 w-3 mr-1\" />\r\n            Export\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={handleImportPrompts}\r\n            className=\"h-7 text-xs\"\r\n          >\r\n            <Upload className=\"h-3 w-3 mr-1\" />\r\n            Import\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Add/Edit Prompt Form */}\r\n      {showAddPrompt && (\r\n        <div className=\"border rounded-lg p-2 space-y-2 bg-muted/50\">\r\n          <h3 className=\"text-xs font-semibold\">\r\n            {editingPrompt\r\n              ? (promptsService.isCustomPrompt(editingPrompt.id)\r\n                  ? 'Edit Custom Prompt'\r\n                  : 'Edit Built-in Prompt (will create custom copy)')\r\n              : 'Add New Custom Prompt'\r\n            }\r\n          </h3>\r\n          <div className=\"grid grid-cols-2 gap-2\">\r\n            <div>\r\n              <Label htmlFor=\"name\" className=\"text-xs\">Name</Label>\r\n              <Input\r\n                id=\"name\"\r\n                value={newPrompt.name}\r\n                onChange={(e) => setNewPrompt(prev => ({ ...prev, name: e.target.value }))}\r\n                placeholder=\"Prompt name\"\r\n                className=\"h-7 text-xs bg-muted border-2 border-border focus:bg-card hover:bg-muted/80 focus:border-ring focus:ring-2 focus:ring-ring/20 transition-all\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"icon\" className=\"text-xs\">Icon</Label>\r\n              <Input\r\n                id=\"icon\"\r\n                value={newPrompt.icon}\r\n                onChange={(e) => setNewPrompt(prev => ({ ...prev, icon: e.target.value }))}\r\n                placeholder=\"📝\"\r\n                className=\"h-7 text-xs bg-muted border-2 border-border focus:bg-card hover:bg-muted/80 focus:border-ring focus:ring-2 focus:ring-ring/20 transition-all\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <Label htmlFor=\"description\" className=\"text-xs\">Description</Label>\r\n            <Input\r\n              id=\"description\"\r\n              value={newPrompt.description}\r\n              onChange={(e) => setNewPrompt(prev => ({ ...prev, description: e.target.value }))}\r\n              placeholder=\"Brief description\"\r\n              className=\"h-7 text-xs bg-slate-900 border-2 border-slate-600 focus:bg-slate-800 hover:bg-slate-850 focus:border-blue-400 focus:ring-2 focus:ring-blue-400/20 transition-all\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <Label htmlFor=\"category\" className=\"text-xs\">Category</Label>\r\n            <Select\r\n              value={newPrompt.category}\r\n              onValueChange={(value) => setNewPrompt(prev => ({ ...prev, category: value }))}\r\n            >\r\n              <SelectTrigger className=\"h-7 text-xs bg-slate-900 border-2 border-slate-600 focus:bg-slate-800 hover:bg-slate-850 focus:border-blue-400 focus:ring-2 focus:ring-blue-400/20 transition-all\">\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {categories.map(category => (\r\n                  <SelectItem key={category} value={category}>\r\n                    {category.charAt(0).toUpperCase() + category.slice(1)}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n          <div>\r\n            <Label htmlFor=\"prompt\" className=\"text-xs\">Prompt Template</Label>\r\n            <Textarea\r\n              id=\"prompt\"\r\n              value={newPrompt.prompt}\r\n              onChange={(e) => setNewPrompt(prev => ({ ...prev, prompt: e.target.value }))}\r\n              placeholder=\"Your prompt template. Use {content} where the clipboard content should be inserted.\"\r\n              rows={3}\r\n              className=\"text-xs bg-muted border-2 border-border focus:bg-card hover:bg-muted/80 focus:border-ring focus:ring-2 focus:ring-ring/20 transition-all\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-end gap-1\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                setShowAddPrompt(false);\r\n                setEditingPrompt(null);\r\n              }}\r\n              className=\"h-7 text-xs\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={editingPrompt ? handleUpdatePrompt : handleAddPrompt}\r\n              size=\"sm\"\r\n              className=\"h-7 text-xs\"\r\n            >\r\n              {editingPrompt\r\n                ? (promptsService.isCustomPrompt(editingPrompt.id)\r\n                    ? 'Update Prompt'\r\n                    : 'Save as Custom Prompt')\r\n                : 'Add Prompt'\r\n              }\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Prompts List */}\r\n      <div className=\"space-y-1 max-h-96 overflow-y-auto\">\r\n        {filteredPrompts.map((prompt) => (\r\n          <div\r\n            key={prompt.id}\r\n            className=\"group flex items-center justify-between p-2 rounded-lg hover:bg-muted/50 cursor-pointer\"\r\n            style={{ border: '1px solid hsl(var(--border))' }}\r\n            onClick={() => handlePromptSelect(prompt)}\r\n          >\r\n            <div className=\"flex items-center gap-2 flex-1\">\r\n              <span className=\"text-sm\">{prompt.icon}</span>\r\n              <div className=\"flex-1\">\r\n                <div className=\"text-xs font-medium text-foreground\">{prompt.name}</div>\r\n                <div className=\"text-xs text-muted-foreground\">{prompt.description}</div>\r\n              </div>\r\n            </div>\r\n            {/* Always show edit button for ALL prompts, delete only for custom prompts */}\r\n            <div className=\"flex gap-1 items-center\">\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  handleEditPrompt(prompt);\r\n                }}\r\n                className=\"h-6 w-6 p-0 text-primary hover:text-primary/80 hover:bg-primary/10 border border-primary/30 opacity-80 hover:opacity-100\"\r\n                title=\"Edit prompt\"\r\n              >\r\n                <Edit className=\"h-3 w-3\" />\r\n              </Button>\r\n\r\n              {/* Only show delete button for custom prompts */}\r\n              {promptsService.isCustomPrompt(prompt.id) && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleDeletePrompt(prompt.id);\r\n                  }}\r\n                  className=\"h-6 w-6 p-0 text-destructive hover:text-destructive/80 hover:bg-destructive/10 border border-destructive/30 opacity-80 hover:opacity-100\"\r\n                  title=\"Delete prompt\"\r\n                >\r\n                  <Trash2 className=\"h-3 w-3\" />\r\n                </Button>\r\n              )}\r\n\r\n              {/* Show indicator for custom prompts */}\r\n              {promptsService.isCustomPrompt(prompt.id) && (\r\n                <div className=\"text-xs text-primary bg-primary/10 px-1 py-0.5 rounded border border-primary/30 ml-1\">\r\n                  CUSTOM\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {isReadingClipboard && (\r\n        <div className=\"text-center text-xs text-muted-foreground\">\r\n          Reading clipboard...\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\PromptsSelector.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2185,2235],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5261,5311],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5612,5670],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":177,"column":20,"nodeType":"Literal","endLine":177,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Button } from './ui/button';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';\r\n\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Textarea } from './ui/textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Wand2, Plus, Edit, Trash2, Download, Upload } from 'lucide-react';\r\nimport { promptsService, type Prompt } from '../services/promptsService';\r\n\r\nimport { renderIcon } from '../utils/iconMapping';\r\n\r\ninterface PromptsSelectorProps {\r\n  onPromptSelect: (processedPrompt: string) => void;\r\n  clipboardContent?: string;\r\n}\r\n\r\nexport function PromptsSelector({ onPromptSelect, clipboardContent = '' }: PromptsSelectorProps) {\r\n  const [showDialog, setShowDialog] = useState(false);\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\r\n  const [showAddPrompt, setShowAddPrompt] = useState(false);\r\n  const [editingPrompt, setEditingPrompt] = useState<Prompt | null>(null);\r\n  const [isReadingClipboard, setIsReadingClipboard] = useState(false);\r\n  const [newPrompt, setNewPrompt] = useState({\r\n    name: '',\r\n    description: '',\r\n    prompt: '',\r\n    category: 'text',\r\n    icon: '✏️'\r\n  });\r\n\r\n  const allPrompts = promptsService.getAllPrompts();\r\n  const categories = promptsService.getCategories();\r\n  const filteredPrompts = selectedCategory === 'all' \r\n    ? allPrompts \r\n    : promptsService.getPromptsByCategory(selectedCategory);\r\n\r\n  const handlePromptSelect = async (prompt: Prompt) => {\r\n    setIsReadingClipboard(true);\r\n    let processedPrompt = prompt.prompt;\r\n    let currentClipboardContent = clipboardContent;\r\n\r\n    // If no clipboard content is available, try to read it now\r\n    if (!currentClipboardContent) {\r\n      try {\r\n        if (typeof window !== 'undefined' && window.electronAPI) {\r\n          currentClipboardContent = (await window.electronAPI.readClipboard()).trim();\r\n        } else if (navigator.clipboard) {\r\n          currentClipboardContent = (await navigator.clipboard.readText()).trim();\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to read clipboard:', error);\r\n        // Continue without clipboard content\r\n      }\r\n    }\r\n\r\n    if (currentClipboardContent) {\r\n      // Use the service to process placeholders\r\n      processedPrompt = promptsService.processPrompt(prompt.id, currentClipboardContent);\r\n\r\n      // If clipboard content exists and prompt doesn't already include it, append it\r\n      if (!processedPrompt.includes(currentClipboardContent)) {\r\n        processedPrompt = `${processedPrompt}\\n\\n--- Clipboard Content ---\\n${currentClipboardContent}`;\r\n      }\r\n    } else {\r\n      // If no clipboard content, show a helpful message\r\n      if (processedPrompt.includes('{content}')) {\r\n        processedPrompt = processedPrompt.replace('{content}', '[No clipboard content available - please copy some text first]');\r\n      }\r\n    }\r\n\r\n    setIsReadingClipboard(false);\r\n    onPromptSelect(processedPrompt);\r\n    setShowDialog(false);\r\n  };\r\n\r\n  const handleAddPrompt = () => {\r\n    if (newPrompt.name && newPrompt.description && newPrompt.prompt) {\r\n      promptsService.addCustomPrompt(newPrompt);\r\n      setNewPrompt({\r\n        name: '',\r\n        description: '',\r\n        prompt: '',\r\n        category: 'text',\r\n        icon: '📝'\r\n      });\r\n      setShowAddPrompt(false);\r\n    }\r\n  };\r\n\r\n  const handleEditPrompt = (prompt: Prompt) => {\r\n    setEditingPrompt(prompt);\r\n    setNewPrompt({\r\n      name: prompt.name,\r\n      description: prompt.description,\r\n      prompt: prompt.prompt,\r\n      category: prompt.category,\r\n      icon: prompt.icon\r\n    });\r\n  };\r\n\r\n  const handleUpdatePrompt = () => {\r\n    if (editingPrompt && newPrompt.name && newPrompt.description && newPrompt.prompt) {\r\n      promptsService.updateCustomPrompt(editingPrompt.id, newPrompt);\r\n      setEditingPrompt(null);\r\n      setNewPrompt({\r\n        name: '',\r\n        description: '',\r\n        prompt: '',\r\n        category: 'text',\r\n        icon: '📝'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeletePrompt = (promptId: string) => {\r\n    if (promptsService.isCustomPrompt(promptId)) {\r\n      promptsService.deleteCustomPrompt(promptId);\r\n    }\r\n  };\r\n\r\n  const handleExportPrompts = () => {\r\n    const data = promptsService.exportPrompts();\r\n    const blob = new Blob([data], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'custom-prompts.json';\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const handleImportPrompts = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        const content = e.target?.result as string;\r\n        try {\r\n          const success = await promptsService.importPrompts(content);\r\n          if (success) {\r\n            alert('Prompts imported successfully!');\r\n          } else {\r\n            alert('Failed to import prompts. Please check the file format.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to import prompts:', error);\r\n          alert('Failed to import prompts. Please check the file format.');\r\n        }\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"outline\"\r\n        size=\"sm\"\r\n        title=\"Use pre-made prompt\"\r\n        onClick={() => {\r\n          console.log('Button clicked, setting showDialog to true');\r\n          setShowDialog(true);\r\n        }}\r\n      >\r\n        <Wand2 className=\"h-4 w-4\" />\r\n      </Button>\r\n\r\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\r\n        <DialogContent\r\n          className=\"max-w-4xl max-h-[80vh] overflow-hidden\"\r\n          style={{\r\n            backgroundColor: 'hsl(var(--background))',\r\n            color: 'hsl(var(--foreground))',\r\n            border: 'none'\r\n          }}\r\n        >\r\n          <DialogHeader>\r\n            <DialogTitle>{`Select a Prompt Template${isReadingClipboard ? ' (Reading clipboard...)' : ''}`}</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4\" style={{ color: 'hsl(var(--foreground))' }}>\r\n            {/* Category Filter */}\r\n            <div className=\"flex items-center gap-2\">\r\n              <Label>Category:</Label>\r\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\r\n                <SelectTrigger className=\"w-40\">\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All</SelectItem>\r\n                  {categories.map(category => (\r\n                    <SelectItem key={category} value={category}>\r\n                      {category.charAt(0).toUpperCase() + category.slice(1)}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n\r\n              <div className=\"ml-auto flex gap-2\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => setShowAddPrompt(true)}\r\n                >\r\n                  <Plus className=\"h-4 w-4 mr-1\" />\r\n                  Add\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={handleExportPrompts}\r\n                >\r\n                  <Download className=\"h-4 w-4 mr-1\" />\r\n                  Export\r\n                </Button>\r\n                <label>\r\n                  <Button variant=\"outline\" size=\"sm\" asChild>\r\n                    <span>\r\n                      <Upload className=\"h-4 w-4 mr-1\" />\r\n                      Import\r\n                    </span>\r\n                  </Button>\r\n                  <input\r\n                    type=\"file\"\r\n                    accept=\".json\"\r\n                    onChange={handleImportPrompts}\r\n                    className=\"hidden\"\r\n                  />\r\n                </label>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Prompts Grid */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 max-h-96 overflow-y-auto\">\r\n              {filteredPrompts.map((prompt) => (\r\n                <div\r\n                  key={prompt.id}\r\n                  className={`p-3 rounded-lg border hover:bg-muted/50 cursor-pointer group ${isReadingClipboard ? 'opacity-50 pointer-events-none' : ''}`}\r\n                  style={{\r\n                    backgroundColor: 'transparent',\r\n                    color: 'hsl(var(--foreground))',\r\n                    borderColor: 'hsl(var(--border))'\r\n                  }}\r\n                  onClick={() => handlePromptSelect(prompt)}\r\n                >\r\n                  <div className=\"flex items-start justify-between\">\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        {renderIcon(prompt.icon, \"h-5 w-5\")}\r\n                        <h3 className=\"font-medium text-sm\" style={{ color: 'hsl(var(--foreground))' }}>{prompt.name}</h3>\r\n                        {prompt.prompt.includes('{content}') && (\r\n                          <span className=\"text-xs bg-primary/20 text-primary px-1 py-0.5 rounded flex items-center gap-1\" title=\"Uses clipboard content\">\r\n                            {renderIcon('📋', \"h-3 w-3\")}\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                      <p className=\"text-xs text-muted-foreground mb-2\" style={{ color: 'hsl(var(--muted-foreground))' }}>{prompt.description}</p>\r\n                      <div className=\"text-xs text-muted-foreground bg-muted p-2 rounded\" style={{ color: 'hsl(var(--muted-foreground))', backgroundColor: 'hsl(var(--muted))' }}>\r\n                        {prompt.prompt.length > 100\r\n                          ? `${prompt.prompt.substring(0, 100)}...`\r\n                          : prompt.prompt}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {promptsService.isCustomPrompt(prompt.id) && (\r\n                      <div className=\"opacity-0 group-hover:opacity-100 flex gap-1 ml-2\">\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleEditPrompt(prompt);\r\n                          }}\r\n                        >\r\n                          <Edit className=\"h-3 w-3\" />\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleDeletePrompt(prompt.id);\r\n                          }}\r\n                        >\r\n                          <Trash2 className=\"h-3 w-3\" />\r\n                        </Button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Add/Edit Prompt Dialog - Separate dialog, not nested */}\r\n      <Dialog open={showAddPrompt || !!editingPrompt} onOpenChange={(open) => {\r\n        if (!open) {\r\n          setShowAddPrompt(false);\r\n          setEditingPrompt(null);\r\n          setNewPrompt({\r\n            name: '',\r\n            description: '',\r\n            prompt: '',\r\n            category: 'text',\r\n            icon: '📝'\r\n          });\r\n        }\r\n      }}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>\r\n              {editingPrompt ? 'Edit Prompt' : 'Add New Prompt'}\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label htmlFor=\"name\">Name</Label>\r\n              <Input\r\n                id=\"name\"\r\n                value={newPrompt.name}\r\n                onChange={(e) => setNewPrompt(prev => ({ ...prev, name: e.target.value }))}\r\n                placeholder=\"Prompt name\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"description\">Description</Label>\r\n              <Input\r\n                id=\"description\"\r\n                value={newPrompt.description}\r\n                onChange={(e) => setNewPrompt(prev => ({ ...prev, description: e.target.value }))}\r\n                placeholder=\"Brief description\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"category\">Category</Label>\r\n              <Select\r\n                value={newPrompt.category}\r\n                onValueChange={(value) => setNewPrompt(prev => ({ ...prev, category: value }))}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"text\">Text</SelectItem>\r\n                  <SelectItem value=\"code\">Code</SelectItem>\r\n                  <SelectItem value=\"email\">Email</SelectItem>\r\n                  <SelectItem value=\"other\">Other</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"icon\">Icon (emoji)</Label>\r\n              <Input\r\n                id=\"icon\"\r\n                value={newPrompt.icon}\r\n                onChange={(e) => setNewPrompt(prev => ({ ...prev, icon: e.target.value }))}\r\n                placeholder=\"✏️\"\r\n                maxLength={2}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"prompt\">Prompt Template</Label>\r\n              <Textarea\r\n                id=\"prompt\"\r\n                value={newPrompt.prompt}\r\n                onChange={(e) => setNewPrompt(prev => ({ ...prev, prompt: e.target.value }))}\r\n                placeholder=\"Your prompt template. Use {content} where the clipboard content should be inserted.\"\r\n                rows={4}\r\n              />\r\n            </div>\r\n            <div className=\"flex justify-end gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  setShowAddPrompt(false);\r\n                  setEditingPrompt(null);\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onClick={editingPrompt ? handleUpdatePrompt : handleAddPrompt}\r\n              >\r\n                {editingPrompt ? 'Update' : 'Add'} Prompt\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\SettingsOverlay.tsx","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 19 to the 15 allowed.","line":26,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":26,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3970,4051],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4318,4367],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4619,4671],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5308,5358],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5642,5695],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":171,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":171,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6052,6105],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7463,7516],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":231,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":231,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7863,7912],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8356,8405],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10131,10349],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":315,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":315,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10453,10522],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":330,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":330,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10867,11196],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":353,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":353,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11926,11982],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":392,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":392,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12941,13227],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":408,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":408,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13386,13452],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":450,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":450,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14575,14659],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":490,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":490,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16201,16257],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":536,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":536,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17508,17594],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 38 to the 15 allowed.","line":558,"column":31,"nodeType":null,"messageId":"refactorFunction","endLine":558,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":575,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":575,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18820,18887],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":577,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":577,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18941,18999],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":579,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":579,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[19038,19107],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":588,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":588,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19480,19539],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":595,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":595,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19757,19830],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":608,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":608,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20316,20382],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":609,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":609,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20394,20435],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":610,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":610,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20447,20552],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":623,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":623,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21166,21239],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":628,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":628,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21403,21456],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":635,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":635,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21637,21716],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":638,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":638,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[21812,21873],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":641,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":641,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21916,21975],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":649,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":649,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22315,22373],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":651,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":651,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22416,22490],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":655,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":655,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22526,22569],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":665,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":665,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22912,22968],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":670,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":670,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[23160,23207],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"unsubscribe\".","line":777,"column":25,"nodeType":"CallExpression","messageId":"doImmediateAction","endLine":784,"endColumn":7,"fix":{"range":[26345,26731],"text":"return settingsService.subscribe((newSettings) => {\r\n      console.log('🔍 SettingsOverlay: Settings changed via subscription:', newSettings);\r\n      setSettings(newSettings);\r\n      // Only update form data if we don't have unsaved changes\r\n      if (!hasChanges) {\r\n        setFormData(JSON.parse(JSON.stringify(newSettings)));\r\n      }\r\n    })"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":778,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":778,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26417,26500],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'hasChanges', 'loadInternalCommandsSettings', and 'loadSettings'. Either include them or remove the dependency array.","line":787,"column":6,"nodeType":"ArrayExpression","endLine":787,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [hasChanges, loadInternalCommandsSettings, loadSettings]","fix":{"range":[26739,26741],"text":"[hasChanges, loadInternalCommandsSettings, loadSettings]"}}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 10 times.","line":827,"column":44,"nodeType":"Literal","endLine":827,"endColumn":85},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 10 times.","line":827,"column":88,"nodeType":"Literal","endLine":827,"endColumn":133},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":865,"column":43,"nodeType":"Literal","endLine":865,"endColumn":62},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":881,"column":43,"nodeType":"Literal","endLine":881,"endColumn":59},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":994,"column":23,"nodeType":"MemberExpression","messageId":"unexpected","endLine":994,"endColumn":34,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36651,36691],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { Label } from './ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { ToggleSwitch } from './ui/toggle-switch';\r\nimport { Textarea } from './ui/textarea';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';\r\nimport { settingsService, type AppSettings, type ColorSettings } from '../services/settingsService';\r\nimport { MemoryManagement } from './MemoryManagement';\r\nimport KnowledgeBaseSettings from './KnowledgeBaseSettings';\r\nimport { mcpService, type MCPServer } from '../services/mcpService';\r\nimport { PromptsContent } from './PromptsContent';\r\nimport { ApiKeySettings } from './ApiKeySettings';\r\nimport { Plus, Trash2, Server, Zap, Edit, FileText, Palette, RotateCcw } from 'lucide-react';\r\nimport { ColorPicker } from './ui/color-picker';\r\nimport { ThemeSelector } from './ui/theme-selector';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\n\r\ninterface SettingsOverlayProps {\r\n  onClose?: () => void;\r\n}\r\n\r\nexport function SettingsOverlay({ onClose }: SettingsOverlayProps = {}) {\r\n  const [activeTab, setActiveTab] = useState('api-keys');\r\n  const [settings, setSettings] = useState<AppSettings | null>(null);\r\n  const [formData, setFormData] = useState<AppSettings | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  const [saveError, setSaveError] = useState<string | null>(null);\r\n  const [saveSuccess, setSaveSuccess] = useState(false);\r\n  const apiKeySaveRef = useRef<(() => Promise<void>) | null>(null);\r\n  const {\r\n    customColors,\r\n    setCustomColors,\r\n    useCustomColors,\r\n    setUseCustomColors,\r\n    resetToDefaults,\r\n    selectedThemePreset,\r\n    setSelectedThemePreset,\r\n    colorMode,\r\n    setColorMode,\r\n    themePresets\r\n  } = useTheme();\r\n  const [mcpServers, setMcpServers] = useState<MCPServer[]>([]);\r\n  const [showAddMcpServer, setShowAddMcpServer] = useState(false);\r\n  const [editingMcpServer, setEditingMcpServer] = useState<MCPServer | null>(null);\r\n  const [showMcpJsonEditor, setShowMcpJsonEditor] = useState(false);\r\n  const [mcpJsonContent, setMcpJsonContent] = useState('');\r\n  const [newMcpServer, setNewMcpServer] = useState({\r\n    name: '',\r\n    command: '',\r\n    args: [] as string[],\r\n    description: '',\r\n    enabled: true,\r\n    env: {} as Record<string, string>\r\n  });\r\n\r\n  // Internal Commands state\r\n  const [internalCommandsEnabled, setInternalCommandsEnabled] = useState(false);\r\n  const [allowedDirectories, setAllowedDirectories] = useState<string[]>([]);\r\n  const [blockedCommands, setBlockedCommands] = useState<string[]>([]);\r\n  const [enabledCommandCategories, setEnabledCommandCategories] = useState({\r\n    terminal: true,\r\n    filesystem: true,\r\n    textEditing: true,\r\n    system: true\r\n  });\r\n  const [enabledTools, setEnabledTools] = useState<Record<string, boolean>>({});\r\n  const [availableTools, setAvailableTools] = useState<Array<{\r\n    name: string;\r\n    description: string;\r\n    category: string;\r\n    inputSchema: Record<string, unknown>;\r\n  }>>([]);\r\n  const [newDirectory, setNewDirectory] = useState('');\r\n  const [newBlockedCommand, setNewBlockedCommand] = useState('');\r\n\r\n  const handleClose = () => {\r\n    if (onClose) {\r\n      onClose();\r\n    } else if (typeof window !== 'undefined' && window.electronAPI) {\r\n      window.electronAPI.closeSettingsOverlay();\r\n    }\r\n  };\r\n\r\n  const handleTitleBarMouseDown = () => {\r\n    // Enable window dragging via CSS\r\n    // The title bar will use -webkit-app-region: drag\r\n  };\r\n\r\n  const loadSettings = async (): Promise<AppSettings | undefined> => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Always use the settings service to ensure consistency\r\n      const loadedSettings = settingsService.getSettings();\r\n      console.log('🔍 SettingsOverlay: Loaded settings from service:', loadedSettings);\r\n\r\n      setSettings(loadedSettings);\r\n      setFormData(JSON.parse(JSON.stringify(loadedSettings))); // Deep copy\r\n      setHasChanges(false);\r\n\r\n      // Load MCP servers\r\n      await loadMcpServers();\r\n\r\n      return loadedSettings;\r\n    } catch (error) {\r\n      console.error('Failed to load settings:', error);\r\n      return undefined;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadMcpServers = async () => {\r\n    try {\r\n      const servers = await mcpService.getServers();\r\n      setMcpServers(servers);\r\n    } catch (error) {\r\n      console.error('Failed to load MCP servers:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddMcpServer = async () => {\r\n    try {\r\n      const server = await mcpService.addServer({\r\n        name: newMcpServer.name,\r\n        command: newMcpServer.command,\r\n        args: newMcpServer.args,\r\n        description: newMcpServer.description,\r\n        enabled: newMcpServer.enabled,\r\n        env: newMcpServer.env\r\n      });\r\n      setMcpServers(prev => [...prev, server]);\r\n      setNewMcpServer({\r\n        name: '',\r\n        command: '',\r\n        args: [],\r\n        description: '',\r\n        enabled: true,\r\n        env: {}\r\n      });\r\n      setShowAddMcpServer(false);\r\n    } catch (error) {\r\n      console.error('Failed to add MCP server:', error);\r\n    }\r\n  };\r\n\r\n  const handleRemoveMcpServer = async (serverId: string) => {\r\n    try {\r\n      const success = await mcpService.removeServer(serverId);\r\n      if (success) {\r\n        setMcpServers(prev => prev.filter(s => s.id !== serverId));\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to remove MCP server:', error);\r\n    }\r\n  };\r\n\r\n  const handleToggleMcpServer = async (serverId: string, enabled: boolean) => {\r\n    try {\r\n      const success = await mcpService.updateServer(serverId, { enabled });\r\n      if (success) {\r\n        setMcpServers(prev => prev.map(s =>\r\n          s.id === serverId ? { ...s, enabled } : s\r\n        ));\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to toggle MCP server:', error);\r\n    }\r\n  };\r\n\r\n  const handleEditMcpServer = (server: MCPServer) => {\r\n    setEditingMcpServer(server);\r\n    setNewMcpServer({\r\n      name: server.name,\r\n      command: server.command,\r\n      args: server.args || [],\r\n      description: server.description || '',\r\n      enabled: server.enabled,\r\n      env: ('env' in server && typeof server.env === 'object' && server.env !== null) ? server.env as Record<string, string> : {}\r\n    });\r\n    setShowAddMcpServer(true);\r\n  };\r\n\r\n  const handleUpdateMcpServer = async () => {\r\n    if (!editingMcpServer) return;\r\n\r\n    try {\r\n      const success = await mcpService.updateServer(editingMcpServer.id, {\r\n        name: newMcpServer.name,\r\n        command: newMcpServer.command,\r\n        args: newMcpServer.args,\r\n        description: newMcpServer.description,\r\n        enabled: newMcpServer.enabled,\r\n        env: newMcpServer.env\r\n      });\r\n\r\n      if (success) {\r\n        setMcpServers(prev => prev.map(s =>\r\n          s.id === editingMcpServer.id\r\n            ? { ...s, ...newMcpServer }\r\n            : s\r\n        ));\r\n        setEditingMcpServer(null);\r\n        setNewMcpServer({\r\n          name: '',\r\n          command: '',\r\n          args: [],\r\n          description: '',\r\n          enabled: true,\r\n          env: {}\r\n        });\r\n        setShowAddMcpServer(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update MCP server:', error);\r\n    }\r\n  };\r\n\r\n  const handleOpenMcpJsonEditor = async () => {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        const mcpData = await window.electronAPI.getMCPServers();\r\n        setMcpJsonContent(JSON.stringify(mcpData, null, 2));\r\n        setShowMcpJsonEditor(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load MCP JSON:', error);\r\n    }\r\n  };\r\n\r\n  const handleSaveMcpJson = async () => {\r\n    try {\r\n      const parsedData = JSON.parse(mcpJsonContent);\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        const success = await window.electronAPI.saveMCPServers(parsedData);\r\n        if (success) {\r\n          setShowMcpJsonEditor(false);\r\n          await loadMcpServers(); // Reload the servers list\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save MCP JSON:', error);\r\n      alert('Invalid JSON format. Please check your syntax.');\r\n    }\r\n  };\r\n\r\n  // Helper functions for managing arguments and environment variables\r\n  const addArgument = () => {\r\n    setNewMcpServer(prev => ({\r\n      ...prev,\r\n      args: [...prev.args, '']\r\n    }));\r\n  };\r\n\r\n  const removeArgument = (index: number) => {\r\n    setNewMcpServer(prev => ({\r\n      ...prev,\r\n      args: prev.args.filter((_, i) => i !== index)\r\n    }));\r\n  };\r\n\r\n  const updateArgument = (index: number, value: string) => {\r\n    setNewMcpServer(prev => ({\r\n      ...prev,\r\n      args: prev.args.map((arg, i) => i === index ? value : arg)\r\n    }));\r\n  };\r\n\r\n  const addEnvVariable = () => {\r\n    const key = `ENV_VAR_${Object.keys(newMcpServer.env).length + 1}`;\r\n    setNewMcpServer(prev => ({\r\n      ...prev,\r\n      env: { ...prev.env, [key]: '' }\r\n    }));\r\n  };\r\n\r\n  const removeEnvVariable = (key: string) => {\r\n    setNewMcpServer(prev => {\r\n      const newEnv = { ...prev.env };\r\n      delete newEnv[key];\r\n      return { ...prev, env: newEnv };\r\n    });\r\n  };\r\n\r\n  const updateEnvVariable = (oldKey: string, newKey: string, value: string) => {\r\n    setNewMcpServer(prev => {\r\n      const newEnv = { ...prev.env };\r\n      if (oldKey !== newKey) {\r\n        delete newEnv[oldKey];\r\n      }\r\n      newEnv[newKey] = value;\r\n      return { ...prev, env: newEnv };\r\n    });\r\n  };\r\n\r\n  // Internal Commands functions\r\n  const loadInternalCommandsSettings = async (loadedSettings?: AppSettings) => {\r\n    // Use the provided settings, current settings state, or fall back to service\r\n    const currentSettings = loadedSettings || settings || settingsService.getSettings();\r\n    const commandSettings = currentSettings.internalCommands;\r\n\r\n    console.log('🔧 Loading internal commands settings:', {\r\n      loadedSettings: !!loadedSettings,\r\n      currentSettings: !!currentSettings,\r\n      commandSettings,\r\n      hasInternalCommands: !!commandSettings\r\n    });\r\n\r\n    // Safety check in case internalCommands is not initialized\r\n    if (!commandSettings) {\r\n      console.warn('Internal commands settings not found, using defaults');\r\n      setInternalCommandsEnabled(false);\r\n      setAllowedDirectories([]);\r\n      setBlockedCommands([]);\r\n      setEnabledCommandCategories({\r\n        terminal: true,\r\n        filesystem: true,\r\n        textEditing: true,\r\n        system: true\r\n      });\r\n      setEnabledTools({});\r\n      setAvailableTools([]);\r\n      return;\r\n    }\r\n\r\n    console.log('🔧 Setting internal commands state:', {\r\n      enabled: commandSettings.enabled,\r\n      allowedDirectories: commandSettings.allowedDirectories,\r\n      blockedCommands: commandSettings.blockedCommands,\r\n      enabledCommands: commandSettings.enabledCommands,\r\n      enabledTools: commandSettings.enabledTools\r\n    });\r\n\r\n    setInternalCommandsEnabled(commandSettings.enabled);\r\n    setAllowedDirectories(commandSettings.allowedDirectories);\r\n    setBlockedCommands(commandSettings.blockedCommands);\r\n    setEnabledCommandCategories(commandSettings.enabledCommands);\r\n\r\n    // Load individual tool settings\r\n    setEnabledTools(commandSettings.enabledTools || {});\r\n\r\n    // Load available tools (service should already be initialized by LLMService)\r\n    try {\r\n      const { internalCommandService } = await import('../services/internalCommandService');\r\n      // Don't re-initialize - service should already be ready\r\n      const tools = internalCommandService.getAvailableTools();\r\n      setAvailableTools(tools);\r\n    } catch (error) {\r\n      console.error('Failed to load available tools:', error);\r\n      setAvailableTools([]);\r\n    }\r\n  };\r\n\r\n  const saveInternalCommandsSettings = () => {\r\n    if (!formData) return;\r\n\r\n    // Ensure internalCommands exists with defaults\r\n    const defaultInternalCommands = {\r\n      enabled: false,\r\n      allowedDirectories: [],\r\n      blockedCommands: [],\r\n      fileReadLineLimit: 1000,\r\n      fileWriteLineLimit: 50,\r\n      defaultShell: 'bash',\r\n      enabledCommands: {\r\n        terminal: true,\r\n        filesystem: true,\r\n        textEditing: true,\r\n        system: true\r\n      },\r\n      terminalSettings: {\r\n        defaultTimeout: 30000,\r\n        maxProcesses: 10,\r\n        allowInteractiveShells: true\r\n      }\r\n    };\r\n\r\n    const updatedInternalCommands = {\r\n      ...defaultInternalCommands,\r\n      ...formData.internalCommands,\r\n      enabled: internalCommandsEnabled,\r\n      allowedDirectories,\r\n      blockedCommands,\r\n      enabledCommands: enabledCommandCategories,\r\n      enabledTools\r\n    };\r\n\r\n    console.log('🔧 Saving internal commands settings:', {\r\n      current: {\r\n        enabled: internalCommandsEnabled,\r\n        allowedDirectories,\r\n        blockedCommands,\r\n        enabledCommandCategories,\r\n        enabledTools\r\n      },\r\n      updated: updatedInternalCommands\r\n    });\r\n\r\n    // Update formData to trigger hasChanges and enable save button\r\n    updateFormData({\r\n      internalCommands: updatedInternalCommands\r\n    });\r\n\r\n    console.log('🔧 Internal commands settings updated in form data');\r\n  };\r\n\r\n  const saveInternalCommandsSettingsWithDirectories = (directories: string[]) => {\r\n    if (!formData) return;\r\n\r\n    // Ensure internalCommands exists with defaults\r\n    const defaultInternalCommands = {\r\n      enabled: false,\r\n      allowedDirectories: [],\r\n      blockedCommands: [],\r\n      fileReadLineLimit: 1000,\r\n      fileWriteLineLimit: 50,\r\n      defaultShell: 'bash',\r\n      enabledCommands: {\r\n        terminal: true,\r\n        filesystem: true,\r\n        textEditing: true,\r\n        system: true\r\n      },\r\n      terminalSettings: {\r\n        defaultTimeout: 30000,\r\n        maxProcesses: 10,\r\n        allowInteractiveShells: true,\r\n      }\r\n    };\r\n\r\n    const updatedInternalCommands = {\r\n      ...defaultInternalCommands,\r\n      ...formData.internalCommands,\r\n      enabled: internalCommandsEnabled,\r\n      allowedDirectories: directories,\r\n      blockedCommands,\r\n      enabledCommands: enabledCommandCategories,\r\n      enabledTools\r\n    };\r\n\r\n    // Update formData to trigger hasChanges and enable save button\r\n    updateFormData({\r\n      internalCommands: updatedInternalCommands\r\n    });\r\n\r\n    console.log('🔧 Internal commands settings updated with directories:', directories);\r\n  };\r\n\r\n  const addAllowedDirectory = () => {\r\n    if (newDirectory.trim() && !allowedDirectories.includes(newDirectory.trim())) {\r\n      const updatedDirectories = [...allowedDirectories, newDirectory.trim()];\r\n      setAllowedDirectories(updatedDirectories);\r\n      setNewDirectory('');\r\n\r\n      // Immediately save the settings with the updated directories\r\n      saveInternalCommandsSettingsWithDirectories(updatedDirectories);\r\n    }\r\n  };\r\n\r\n  const removeAllowedDirectory = (index: number) => {\r\n    const updatedDirectories = allowedDirectories.filter((_, i) => i !== index);\r\n    setAllowedDirectories(updatedDirectories);\r\n\r\n    // Immediately save the settings with the updated directories\r\n    saveInternalCommandsSettingsWithDirectories(updatedDirectories);\r\n  };\r\n\r\n  const browseForDirectory = async () => {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      try {\r\n        // Use the existing file dialog but configure it for directories\r\n        const result = await window.electronAPI.selectFiles({\r\n          multiple: false,\r\n          properties: ['openDirectory']\r\n        });\r\n\r\n        if (result && result.length > 0) {\r\n          const selectedPath = result[0];\r\n          if (!allowedDirectories.includes(selectedPath)) {\r\n            const updatedDirectories = [...allowedDirectories, selectedPath];\r\n            setAllowedDirectories(updatedDirectories);\r\n            saveInternalCommandsSettingsWithDirectories(updatedDirectories);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to browse for directory:', error);\r\n        // Fallback to manual entry\r\n        alert('Directory browser not available. Please enter the path manually.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const saveInternalCommandsSettingsWithCommands = (commands: string[]) => {\r\n    if (!formData) return;\r\n\r\n    // Ensure internalCommands exists with defaults\r\n    const defaultInternalCommands = {\r\n      enabled: false,\r\n      allowedDirectories: [],\r\n      blockedCommands: [],\r\n      fileReadLineLimit: 1000,\r\n      fileWriteLineLimit: 50,\r\n      defaultShell: 'bash',\r\n      enabledCommands: {\r\n        terminal: true,\r\n        filesystem: true,\r\n        textEditing: true,\r\n        system: true\r\n      },\r\n      terminalSettings: {\r\n        defaultTimeout: 30000,\r\n        maxProcesses: 10,\r\n        allowInteractiveShells: true,\r\n      }\r\n    };\r\n\r\n    const updatedInternalCommands = {\r\n      ...defaultInternalCommands,\r\n      ...formData.internalCommands,\r\n      enabled: internalCommandsEnabled,\r\n      allowedDirectories,\r\n      blockedCommands: commands,\r\n      enabledCommands: enabledCommandCategories,\r\n      enabledTools\r\n    };\r\n\r\n    // Update formData to trigger hasChanges and enable save button\r\n    updateFormData({\r\n      internalCommands: updatedInternalCommands\r\n    });\r\n\r\n    console.log('🔧 Internal commands settings updated with blocked commands:', commands);\r\n  };\r\n\r\n  const addBlockedCommand = () => {\r\n    if (newBlockedCommand.trim() && !blockedCommands.includes(newBlockedCommand.trim())) {\r\n      const updatedCommands = [...blockedCommands, newBlockedCommand.trim()];\r\n      setBlockedCommands(updatedCommands);\r\n      setNewBlockedCommand('');\r\n\r\n      // Immediately save the settings with the updated commands\r\n      saveInternalCommandsSettingsWithCommands(updatedCommands);\r\n    }\r\n  };\r\n\r\n  const removeBlockedCommand = (index: number) => {\r\n    const updatedCommands = blockedCommands.filter((_, i) => i !== index);\r\n    setBlockedCommands(updatedCommands);\r\n\r\n    // Immediately save the settings with the updated commands\r\n    saveInternalCommandsSettingsWithCommands(updatedCommands);\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!formData) return;\r\n\r\n    setIsLoading(true);\r\n    setSaveError(null);\r\n    setSaveSuccess(false);\r\n\r\n    try {\r\n      // Save general settings\r\n      const success = await settingsService.updateSettings(formData);\r\n\r\n      // Always save API keys if the save function is available\r\n      let apiKeySaveSuccess = true;\r\n      let apiKeyError: string | null = null;\r\n\r\n      if (apiKeySaveRef.current) {\r\n        try {\r\n          console.log('🔐 SettingsOverlay: Triggering API key save via ref');\r\n          await apiKeySaveRef.current();\r\n          console.log('🔐 SettingsOverlay: API key save completed');\r\n        } catch (error) {\r\n          console.error('🔐 SettingsOverlay: Failed to save API keys:', error);\r\n          apiKeySaveSuccess = false;\r\n          apiKeyError = error instanceof Error ? error.message : 'Unknown API key save error';\r\n        }\r\n      }\r\n\r\n      if (success && apiKeySaveSuccess) {\r\n        // Don't reload settings from disk - this might interfere with API keys\r\n        // API keys are stored separately in secure storage, not in the JSON file\r\n        console.log('🔄 Settings and API keys saved successfully');\r\n\r\n        setSettings(formData);\r\n        // Always reset hasChanges after successful save\r\n        setHasChanges(false);\r\n\r\n        // Trigger model refresh for all components by dispatching a custom event\r\n        console.log('🔄 Settings saved successfully - triggering model refresh');\r\n        window.dispatchEvent(new CustomEvent('settingsSaved', {\r\n          detail: {\r\n            apiKeysSaved: apiKeySaveSuccess,\r\n            provider: formData.chat?.provider\r\n          }\r\n        }));\r\n\r\n        // If any theme-related settings were changed, notify other windows\r\n        if (formData.ui?.customColors ||\r\n            formData.ui?.useCustomColors !== undefined ||\r\n            formData.ui?.selectedThemePreset ||\r\n            formData.ui?.colorMode) {\r\n          console.log('Settings overlay: Preparing to notify theme change');\r\n          console.log('formData.ui:', formData.ui);\r\n          console.log('Current theme context:', { customColors, useCustomColors, selectedThemePreset, colorMode });\r\n\r\n          if (typeof window !== 'undefined' && window.electronAPI) {\r\n            // Determine the actual colors to apply based on the current mode\r\n            let colorsToApply = customColors;\r\n            const currentMode = formData.ui.colorMode || colorMode;\r\n            const currentPreset = formData.ui.selectedThemePreset || selectedThemePreset;\r\n\r\n            if (currentMode === 'preset') {\r\n              // Use preset colors\r\n              const preset = themePresets.find(p => p.id === currentPreset);\r\n              if (preset) {\r\n                colorsToApply = preset.colors;\r\n                console.log('Settings overlay: Using preset colors for:', currentPreset);\r\n              }\r\n            } else {\r\n              // Use custom colors\r\n              colorsToApply = formData.ui.customColors || customColors;\r\n              console.log('Settings overlay: Using custom colors');\r\n            }\r\n\r\n            const themeData = {\r\n              customColors: colorsToApply,\r\n              useCustomColors: currentMode === 'custom'\r\n            };\r\n            console.log('Settings overlay: Sending theme change notification:', themeData);\r\n            window.electronAPI.notifyThemeChange(themeData);\r\n          } else {\r\n            console.error('Settings overlay: electronAPI not available');\r\n          }\r\n        } else {\r\n          console.log('Settings overlay: No theme changes detected');\r\n        }\r\n\r\n        // Update internal commands configuration if it exists\r\n        if (formData.internalCommands) {\r\n          try {\r\n            const { internalCommandService } = await import('../services/internalCommandService');\r\n            await internalCommandService.updateConfiguration(formData.internalCommands);\r\n            console.log('🔧 Internal commands configuration updated');\r\n          } catch (error) {\r\n            console.error('Failed to update internal commands configuration:', error);\r\n          }\r\n        }\r\n\r\n        console.log('Settings saved successfully');\r\n        setSaveSuccess(true);\r\n\r\n        // Clear success message after 3 seconds\r\n        setTimeout(() => setSaveSuccess(false), 3000);\r\n      } else {\r\n        const errorMessage = !success\r\n          ? 'Failed to save general settings'\r\n          : apiKeyError || 'Failed to save API keys';\r\n        setSaveError(errorMessage);\r\n        console.error('Failed to save settings:', errorMessage);\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred while saving settings';\r\n      setSaveError(errorMessage);\r\n      console.error('Error saving settings:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (settings) {\r\n      setFormData(JSON.parse(JSON.stringify(settings))); // Reset to original\r\n      setHasChanges(false);\r\n      setSaveError(null);\r\n      setSaveSuccess(false);\r\n    }\r\n  };\r\n\r\n  const handleReload = async () => {\r\n    await loadSettings();\r\n  };\r\n\r\n  const updateFormData = (updates: Partial<AppSettings>) => {\r\n    if (!formData) return;\r\n    const newFormData = { ...formData, ...updates };\r\n    setFormData(newFormData);\r\n    setHasChanges(true);\r\n\r\n    // Clear any previous save errors when user starts making changes\r\n    if (saveError) setSaveError(null);\r\n    if (saveSuccess) setSaveSuccess(false);\r\n  };\r\n\r\n  // Handle color changes and integrate with save system\r\n  const handleColorChange = (colors: Record<string, string>) => {\r\n    // Update theme immediately for preview (don't save yet)\r\n    if (typeof setCustomColors === 'function') {\r\n      (setCustomColors as unknown as (colors: Record<string, string>, shouldSave: boolean) => void)(colors, false);\r\n    }\r\n\r\n    // Update form data to trigger save system\r\n    if (formData) {\r\n      updateFormData({\r\n        ui: {\r\n          ...formData.ui,\r\n          customColors: colors as unknown as ColorSettings\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleUseCustomColorsChange = (enabled: boolean) => {\r\n    // Update theme immediately for preview (don't save yet)\r\n    if (typeof setUseCustomColors === 'function') {\r\n      (setUseCustomColors as unknown as (enabled: boolean, shouldSave: boolean) => void)(enabled, false);\r\n    }\r\n\r\n    // Update form data to trigger save system\r\n    if (formData) {\r\n      updateFormData({\r\n        ui: {\r\n          ...formData.ui,\r\n          useCustomColors: enabled\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleThemePresetChange = (theme: { id: string; name: string }) => {\r\n    // Update theme immediately for preview (don't save yet)\r\n    if (typeof setSelectedThemePreset === 'function') {\r\n      (setSelectedThemePreset as unknown as (themeId: string, shouldSave: boolean) => void)(theme.id, false);\r\n    }\r\n\r\n    // Update form data to trigger save system\r\n    if (formData) {\r\n      updateFormData({\r\n        ui: {\r\n          ...formData.ui,\r\n          selectedThemePreset: theme.id\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleColorModeChange = (mode: 'preset' | 'custom') => {\r\n    // Update theme immediately for preview (don't save yet)\r\n    if (typeof setColorMode === 'function') {\r\n      (setColorMode as unknown as (mode: 'preset' | 'custom', shouldSave: boolean) => void)(mode, false);\r\n    }\r\n\r\n    // Update form data to trigger save system\r\n    if (formData) {\r\n      updateFormData({\r\n        ui: {\r\n          ...formData.ui,\r\n          colorMode: mode\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initializeSettings = async () => {\r\n      const loadedSettings = await loadSettings();\r\n      await loadInternalCommandsSettings(loadedSettings);\r\n    };\r\n    initializeSettings();\r\n\r\n    // Subscribe to settings changes to keep the overlay in sync\r\n    const unsubscribe = settingsService.subscribe((newSettings) => {\r\n      console.log('🔍 SettingsOverlay: Settings changed via subscription:', newSettings);\r\n      setSettings(newSettings);\r\n      // Only update form data if we don't have unsaved changes\r\n      if (!hasChanges) {\r\n        setFormData(JSON.parse(JSON.stringify(newSettings)));\r\n      }\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []); // Remove hasChanges dependency to prevent re-initialization loop\r\n\r\n  return (\r\n    <div\r\n      style={{ height: '100vh', width: '100vw' }}\r\n      className=\"settings-overlay bg-background flex flex-col overflow-hidden\"\r\n    >\r\n      {/* Custom Title Bar */}\r\n      <div\r\n        className=\"h-10 w-full bg-background/95 backdrop-blur-sm border-b border-border/30 flex items-center justify-center relative flex-none select-none\"\r\n        style={{\r\n          WebkitAppRegion: 'drag',\r\n          borderRadius: '8px 8px 0 0'\r\n        } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n        onMouseDown={handleTitleBarMouseDown}\r\n      >\r\n        <div\r\n          className=\"absolute left-4 flex items-center gap-2\"\r\n          style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n        >\r\n          <div\r\n            className=\"w-3 h-3 rounded-full bg-red-500/80 hover:bg-red-500 cursor-pointer transition-colors\"\r\n            onClick={handleClose}\r\n            style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n          />\r\n          <div className=\"w-3 h-3 rounded-full bg-yellow-500/80\" />\r\n          <div className=\"w-3 h-3 rounded-full bg-green-500/80\" />\r\n        </div>\r\n        <div className=\"text-sm font-medium text-foreground\">Settings</div>\r\n      </div>\r\n\r\n      {/* Settings Content */}\r\n      <div className=\"flex-1 flex flex-col min-h-0\">\r\n        {/* SIMPLE MANUAL TABS - NO RADIX */}\r\n        <div className=\"flex-1 flex flex-col min-h-0 p-6\">\r\n          {/* Tab Navigation */}\r\n          <div className=\"grid w-full grid-cols-9 bg-muted p-1 rounded-md flex-none mb-6\">\r\n            <button\r\n              onClick={() => setActiveTab('api-keys')}\r\n              className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                activeTab === 'api-keys' ? 'bg-background text-foreground shadow-sm' : 'text-muted-foreground hover:text-foreground'\r\n              }`}\r\n            >\r\n              API Keys\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('shortcuts')}\r\n              className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                activeTab === 'shortcuts' ? 'bg-background text-foreground shadow-sm' : 'text-muted-foreground hover:text-foreground'\r\n              }`}\r\n            >\r\n              Shortcuts\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('prompts')}\r\n              className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                activeTab === 'prompts' ? 'bg-background text-foreground shadow-sm' : 'text-muted-foreground hover:text-foreground'\r\n              }`}\r\n            >\r\n              Prompts\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('chat')}\r\n              className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                activeTab === 'chat' ? 'bg-background text-foreground shadow-sm' : 'text-muted-foreground hover:text-foreground'\r\n              }`}\r\n            >\r\n              Chat\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('mcp')}\r\n              className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                activeTab === 'mcp' ? 'bg-background text-foreground shadow-sm' : 'text-muted-foreground hover:text-foreground'\r\n              }`}\r\n            >\r\n              MCP\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('internal-commands')}\r\n              className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                activeTab === 'internal-commands' ? 'bg-background text-foreground shadow-sm' : 'text-muted-foreground hover:text-foreground'\r\n              }`}\r\n            >\r\n              Commands\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('memory')}\r\n              className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                activeTab === 'memory' ? 'bg-background text-foreground shadow-sm' : 'text-muted-foreground hover:text-foreground'\r\n              }`}\r\n            >\r\n              Memory\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('knowledge-base')}\r\n              className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                activeTab === 'knowledge-base' ? 'bg-background text-foreground shadow-sm' : 'text-muted-foreground hover:text-foreground'\r\n              }`}\r\n            >\r\n              Knowledge Base\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('appearance')}\r\n              className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                activeTab === 'appearance' ? 'bg-background text-foreground shadow-sm' : 'text-muted-foreground hover:text-foreground'\r\n              }`}\r\n            >\r\n              Appearance\r\n            </button>\r\n            <button\r\n              onClick={() => setActiveTab('general')}\r\n              className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${\r\n                activeTab === 'general' ? 'bg-background text-foreground shadow-sm' : 'text-muted-foreground hover:text-foreground'\r\n              }`}\r\n            >\r\n              General\r\n            </button>\r\n          </div>\r\n\r\n          {/* Content Area */}\r\n          <div className=\"flex-1 overflow-y-auto min-h-0\">\r\n            {activeTab === 'api-keys' && (\r\n              <ApiKeySettings\r\n                onApiKeyChange={() => {\r\n                  // API keys changed - this is just for tracking, button is always enabled\r\n                  setHasChanges(true);\r\n                }}\r\n                onRegisterSaveFunction={(saveFunction: () => Promise<void>) => {\r\n                  // Register the API key save function so the main save button can use it\r\n                  apiKeySaveRef.current = saveFunction;\r\n                }}\r\n              />\r\n            )}\r\n\r\n\r\n\r\n\r\n\r\n            {activeTab === 'shortcuts' && (\r\n              <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-medium mb-4\">Keyboard Shortcuts</h3>\r\n                  <div className=\"space-y-4\">\r\n                    {formData?.shortcuts && (\r\n                      <>\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"toggle-window\">Toggle Window</Label>\r\n                          <Input\r\n                            id=\"toggle-window\"\r\n                            value={formData.shortcuts.toggleWindow}\r\n                            placeholder=\"CommandOrControl+Shift+L\"\r\n                            className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                            onChange={(e) => updateFormData({\r\n                              shortcuts: { ...formData.shortcuts, toggleWindow: e.target.value }\r\n                            })}\r\n                          />\r\n                        </div>\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"process-clipboard\">Process Clipboard</Label>\r\n                          <Input\r\n                            id=\"process-clipboard\"\r\n                            value={formData.shortcuts.processClipboard}\r\n                            placeholder=\"CommandOrControl+Shift+V\"\r\n                            className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                            onChange={(e) => updateFormData({\r\n                              shortcuts: { ...formData.shortcuts, processClipboard: e.target.value }\r\n                            })}\r\n                          />\r\n                        </div>\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"action-menu\">Action Menu</Label>\r\n                          <Input\r\n                            id=\"action-menu\"\r\n                            value={formData.shortcuts.actionMenu}\r\n                            placeholder=\"CommandOrControl+Shift+Space\"\r\n                            className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                            onChange={(e) => updateFormData({\r\n                              shortcuts: { ...formData.shortcuts, actionMenu: e.target.value }\r\n                            })}\r\n                          />\r\n                        </div>\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"open-shortcuts\">Open Shortcuts</Label>\r\n                          <Input\r\n                            id=\"open-shortcuts\"\r\n                            value={formData.shortcuts.openShortcuts}\r\n                            placeholder=\"CommandOrControl+Shift+K\"\r\n                            className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                            onChange={(e) => updateFormData({\r\n                              shortcuts: { ...formData.shortcuts, openShortcuts: e.target.value }\r\n                            })}\r\n                          />\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {activeTab === 'prompts' && (\r\n              <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-medium mb-4\">Custom Prompts</h3>\r\n                  <PromptsContent\r\n                    onPromptSelect={(prompt) => {\r\n                      // Handle prompt selection if needed\r\n                      console.log('Prompt selected:', prompt);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {activeTab === 'chat' && (\r\n              <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-medium mb-4\">Chat Configuration</h3>\r\n                  <div className=\"space-y-4\">\r\n                    {formData?.chat && (\r\n                      <>\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"system-prompt\">Default System Prompt</Label>\r\n                          <Textarea\r\n                            id=\"system-prompt\"\r\n                            value={formData.chat.systemPrompt || ''}\r\n                            placeholder=\"Enter your default system prompt that will be used for all conversations...\"\r\n                            rows={6}\r\n                            className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                            onChange={(e) => updateFormData({\r\n                              chat: { ...formData.chat, systemPrompt: e.target.value }\r\n                            })}\r\n                          />\r\n                          <p className=\"text-sm text-muted-foreground\">\r\n                            This prompt will be sent with every conversation to set the AI behavior and personality.\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                          <div className=\"space-y-2\">\r\n                            <Label htmlFor=\"temperature\">Temperature</Label>\r\n                            <Input\r\n                              id=\"temperature\"\r\n                              type=\"number\"\r\n                              min=\"0\"\r\n                              max=\"2\"\r\n                              step=\"0.1\"\r\n                              value={formData.chat.temperature}\r\n                              className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                              onChange={(e) => updateFormData({\r\n                                chat: { ...formData.chat, temperature: parseFloat(e.target.value) || 0 }\r\n                              })}\r\n                            />\r\n                            <p className=\"text-xs text-muted-foreground\">\r\n                              Controls randomness (0.0 = focused, 2.0 = creative)\r\n                            </p>\r\n                          </div>\r\n                          <div className=\"space-y-2\">\r\n                            <Label htmlFor=\"max-tokens\">Max Tokens</Label>\r\n                            <Input\r\n                              id=\"max-tokens\"\r\n                              type=\"number\"\r\n                              min=\"1\"\r\n                              max=\"32768\"\r\n                              value={formData.chat.maxTokens}\r\n                              className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                              onChange={(e) => updateFormData({\r\n                                chat: { ...formData.chat, maxTokens: parseInt(e.target.value) || 8192 }\r\n                              })}\r\n                            />\r\n                            <p className=\"text-xs text-muted-foreground\">\r\n                              Maximum response length\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <ToggleSwitch\r\n                            enabled={formData.chat.toolCallingEnabled}\r\n                            onToggle={(enabled: boolean) => updateFormData({\r\n                              chat: { ...formData.chat, toolCallingEnabled: enabled }\r\n                            })}\r\n                          />\r\n                          <div>\r\n                            <Label>Enable Tool Calling</Label>\r\n                            <p className=\"text-sm text-muted-foreground\">\r\n                              Allow the AI to use external tools and functions\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {activeTab === 'mcp' && (\r\n              <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-medium mb-4\">MCP Servers</h3>\r\n                  <div className=\"space-y-4\">\r\n                    <p className=\"text-muted-foreground\">\r\n                      Configure Model Context Protocol (MCP) servers for enhanced functionality.\r\n                    </p>\r\n\r\n                    {/* Add Server Button */}\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        {mcpServers.length} server{mcpServers.length !== 1 ? 's' : ''} configured\r\n                      </div>\r\n                      <div className=\"flex gap-2\">\r\n                        <Button\r\n                          variant=\"outline\"\r\n                          size=\"sm\"\r\n                          onClick={handleOpenMcpJsonEditor}\r\n                          className=\"flex items-center gap-2\"\r\n                        >\r\n                          <FileText className=\"h-4 w-4\" />\r\n                          Edit JSON\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"outline\"\r\n                          size=\"sm\"\r\n                          onClick={() => setShowAddMcpServer(true)}\r\n                          className=\"flex items-center gap-2\"\r\n                        >\r\n                          <Plus className=\"h-4 w-4\" />\r\n                          Add Server\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Add/Edit Server Form */}\r\n                    {showAddMcpServer && (\r\n                      <div className=\"border border-border rounded-lg p-4 space-y-4 bg-background\">\r\n                        <h4 className=\"font-medium\">{editingMcpServer ? 'Edit' : 'Add'} MCP Server</h4>\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                          <div className=\"space-y-2\">\r\n                            <Label htmlFor=\"mcp-name\">Server Name</Label>\r\n                            <Input\r\n                              id=\"mcp-name\"\r\n                              value={newMcpServer.name}\r\n                              placeholder=\"My MCP Server\"\r\n                              className=\"bg-slate-900 border-2 border-slate-600 focus:bg-slate-800 hover:bg-slate-850 focus:border-blue-400 focus:ring-2 focus:ring-blue-400/20 transition-all\"\r\n                              onChange={(e) => setNewMcpServer(prev => ({ ...prev, name: e.target.value }))}\r\n                            />\r\n                          </div>\r\n                          <div className=\"space-y-2\">\r\n                            <Label htmlFor=\"mcp-command\">Command</Label>\r\n                            <Input\r\n                              id=\"mcp-command\"\r\n                              value={newMcpServer.command}\r\n                              placeholder=\"node server.js\"\r\n                              className=\"bg-slate-900 border-2 border-slate-600 focus:bg-slate-800 hover:bg-slate-850 focus:border-blue-400 focus:ring-2 focus:ring-blue-400/20 transition-all\"\r\n                              onChange={(e) => setNewMcpServer(prev => ({ ...prev, command: e.target.value }))}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"mcp-description\">Description (Optional)</Label>\r\n                          <Input\r\n                            id=\"mcp-description\"\r\n                            value={newMcpServer.description}\r\n                            placeholder=\"Description of what this server does\"\r\n                            className=\"bg-slate-900 border-2 border-slate-600 focus:bg-slate-800 hover:bg-slate-850 focus:border-blue-400 focus:ring-2 focus:ring-blue-400/20 transition-all\"\r\n                            onChange={(e) => setNewMcpServer(prev => ({ ...prev, description: e.target.value }))}\r\n                          />\r\n                        </div>\r\n\r\n                        {/* Arguments Section */}\r\n                        <div className=\"space-y-2\">\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <Label>Arguments</Label>\r\n                            <Button\r\n                              type=\"button\"\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={addArgument}\r\n                              className=\"flex items-center gap-1\"\r\n                            >\r\n                              <Plus className=\"h-3 w-3\" />\r\n                              Add Argument\r\n                            </Button>\r\n                          </div>\r\n                          {newMcpServer.args.map((arg, index) => (\r\n                            <div key={index} className=\"flex gap-2\">\r\n                              <Input\r\n                                value={arg}\r\n                                placeholder={`Argument ${index + 1}`}\r\n                                className=\"bg-slate-900 border-2 border-slate-600 focus:bg-slate-800 hover:bg-slate-850 focus:border-blue-400 focus:ring-2 focus:ring-blue-400/20 transition-all\"\r\n                                onChange={(e) => updateArgument(index, e.target.value)}\r\n                              />\r\n                              <Button\r\n                                type=\"button\"\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => removeArgument(index)}\r\n                                className=\"text-destructive hover:text-destructive\"\r\n                              >\r\n                                <Trash2 className=\"h-4 w-4\" />\r\n                              </Button>\r\n                            </div>\r\n                          ))}\r\n                          {newMcpServer.args.length === 0 && (\r\n                            <p className=\"text-sm text-muted-foreground\">No arguments configured</p>\r\n                          )}\r\n                        </div>\r\n\r\n                        {/* Environment Variables Section */}\r\n                        <div className=\"space-y-2\">\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <Label>Environment Variables</Label>\r\n                            <Button\r\n                              type=\"button\"\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={addEnvVariable}\r\n                              className=\"flex items-center gap-1\"\r\n                            >\r\n                              <Plus className=\"h-3 w-3\" />\r\n                              Add Variable\r\n                            </Button>\r\n                          </div>\r\n                          {Object.entries(newMcpServer.env).map(([key, value]) => (\r\n                            <div key={key} className=\"flex gap-2\">\r\n                              <Input\r\n                                value={key}\r\n                                placeholder=\"Variable name\"\r\n                                className=\"bg-muted border-2 border-border focus:bg-card hover:bg-muted/80 focus:border-ring focus:ring-2 focus:ring-ring/20 transition-all\"\r\n                                onChange={(e) => updateEnvVariable(key, e.target.value, value)}\r\n                              />\r\n                              <Input\r\n                                value={value}\r\n                                placeholder=\"Variable value\"\r\n                                className=\"bg-muted border-2 border-border focus:bg-card hover:bg-muted/80 focus:border-ring focus:ring-2 focus:ring-ring/20 transition-all\"\r\n                                onChange={(e) => updateEnvVariable(key, key, e.target.value)}\r\n                              />\r\n                              <Button\r\n                                type=\"button\"\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => removeEnvVariable(key)}\r\n                                className=\"text-destructive hover:text-destructive\"\r\n                              >\r\n                                <Trash2 className=\"h-4 w-4\" />\r\n                              </Button>\r\n                            </div>\r\n                          ))}\r\n                          {Object.keys(newMcpServer.env).length === 0 && (\r\n                            <p className=\"text-sm text-muted-foreground\">No environment variables configured</p>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"flex justify-end gap-2\">\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            onClick={() => {\r\n                              setShowAddMcpServer(false);\r\n                              setEditingMcpServer(null);\r\n                              setNewMcpServer({\r\n                                name: '',\r\n                                command: '',\r\n                                args: [],\r\n                                description: '',\r\n                                enabled: true,\r\n                                env: {}\r\n                              });\r\n                            }}\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                          <Button\r\n                            onClick={editingMcpServer ? handleUpdateMcpServer : handleAddMcpServer}\r\n                            disabled={!newMcpServer.name || !newMcpServer.command}\r\n                          >\r\n                            {editingMcpServer ? 'Update' : 'Add'} Server\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Servers List */}\r\n                    <div className=\"space-y-2\">\r\n                      {mcpServers.length === 0 ? (\r\n                        <div className=\"text-center py-8 text-muted-foreground\">\r\n                          <Server className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n                          <p>No MCP servers configured</p>\r\n                          <p className=\"text-sm\">Add a server to get started</p>\r\n                        </div>\r\n                      ) : (\r\n                        mcpServers.map((server) => (\r\n                          <div\r\n                            key={server.id}\r\n                            className=\"flex items-center justify-between p-3 border border-border rounded-lg bg-background\"\r\n                          >\r\n                            <div className=\"flex items-center gap-3\">\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <Zap className={`h-4 w-4 ${server.enabled ? 'text-green-500' : 'text-muted-foreground'}`} />\r\n                                <div>\r\n                                  <div className=\"font-medium\">{server.name}</div>\r\n                                  <div className=\"text-sm text-muted-foreground\">{server.command}</div>\r\n                                  {server.description && (\r\n                                    <div className=\"text-xs text-muted-foreground\">{server.description}</div>\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <ToggleSwitch\r\n                                enabled={server.enabled}\r\n                                onToggle={(enabled) => handleToggleMcpServer(server.id, enabled)}\r\n                                size=\"sm\"\r\n                              />\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => handleEditMcpServer(server)}\r\n                                className=\"text-muted-foreground hover:text-foreground\"\r\n                              >\r\n                                <Edit className=\"h-4 w-4\" />\r\n                              </Button>\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => handleRemoveMcpServer(server.id)}\r\n                                className=\"text-destructive hover:text-destructive\"\r\n                              >\r\n                                <Trash2 className=\"h-4 w-4\" />\r\n                              </Button>\r\n                            </div>\r\n                          </div>\r\n                        ))\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {activeTab === 'memory' && (\r\n              <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-medium mb-4\">Memory System</h3>\r\n                  <MemoryManagement />\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {activeTab === 'internal-commands' && (\r\n              <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-medium mb-4\">Internal Commands</h3>\r\n                  <p className=\"text-sm text-muted-foreground mb-6\">\r\n                    Configure internal command functionality that provides terminal, filesystem, and text editing capabilities to AI models.\r\n                    These commands run within the application with directory-scoped security restrictions.\r\n                  </p>\r\n\r\n                  {/* Enable/Disable Internal Commands */}\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <Label htmlFor=\"internal-commands-enabled\" className=\"text-sm font-medium\">\r\n                          Enable Internal Commands\r\n                        </Label>\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          Allow AI models to execute terminal, filesystem, and text editing commands\r\n                        </p>\r\n                      </div>\r\n                      <ToggleSwitch\r\n                        enabled={internalCommandsEnabled}\r\n                        onToggle={(enabled) => {\r\n                          setInternalCommandsEnabled(enabled);\r\n                          saveInternalCommandsSettings();\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    {internalCommandsEnabled && (\r\n                      <>\r\n                        {/* Command Categories */}\r\n                        <div className=\"border border-border rounded-lg p-4\">\r\n                          <h4 className=\"text-sm font-medium mb-3\">Enabled Command Categories</h4>\r\n                          <div className=\"space-y-3\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                              <div>\r\n                                <Label className=\"text-sm\">Terminal Commands</Label>\r\n                                <p className=\"text-xs text-muted-foreground\">Process execution, interactive shells, command output</p>\r\n                              </div>\r\n                              <ToggleSwitch\r\n                                enabled={enabledCommandCategories.terminal}\r\n                                onToggle={(enabled) => {\r\n                                  setEnabledCommandCategories(prev => ({ ...prev, terminal: enabled }));\r\n                                  saveInternalCommandsSettings();\r\n                                }}\r\n                              />\r\n                            </div>\r\n                            <div className=\"flex items-center justify-between\">\r\n                              <div>\r\n                                <Label className=\"text-sm\">Filesystem Commands</Label>\r\n                                <p className=\"text-xs text-muted-foreground\">File operations, directory management, search capabilities</p>\r\n                              </div>\r\n                              <ToggleSwitch\r\n                                enabled={enabledCommandCategories.filesystem}\r\n                                onToggle={(enabled) => {\r\n                                  setEnabledCommandCategories(prev => ({ ...prev, filesystem: enabled }));\r\n                                  saveInternalCommandsSettings();\r\n                                }}\r\n                              />\r\n                            </div>\r\n                            <div className=\"flex items-center justify-between\">\r\n                              <div>\r\n                                <Label className=\"text-sm\">Text Editing Commands</Label>\r\n                                <p className=\"text-xs text-muted-foreground\">Surgical text replacements with fuzzy search fallback</p>\r\n                              </div>\r\n                              <ToggleSwitch\r\n                                enabled={enabledCommandCategories.textEditing}\r\n                                onToggle={(enabled) => {\r\n                                  setEnabledCommandCategories(prev => ({ ...prev, textEditing: enabled }));\r\n                                  saveInternalCommandsSettings();\r\n                                }}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* Individual Tools */}\r\n                        {availableTools.length > 0 && (\r\n                          <div className=\"border border-border rounded-lg p-4\">\r\n                            <h4 className=\"text-sm font-medium mb-3\">Individual Tools</h4>\r\n                            <p className=\"text-xs text-muted-foreground mb-4\">\r\n                              Enable or disable specific tools. Tools are grouped by category and only available when their category is enabled.\r\n                            </p>\r\n\r\n                            <div className=\"space-y-4\">\r\n                              {/* Group tools by category */}\r\n                              {['terminal', 'filesystem', 'textEditing'].map(category => {\r\n                                const categoryTools = availableTools.filter(tool =>\r\n                                  tool.category.toLowerCase() === category.toLowerCase()\r\n                                );\r\n\r\n                                if (categoryTools.length === 0) return null;\r\n\r\n                                const categoryEnabled = enabledCommandCategories[category as keyof typeof enabledCommandCategories];\r\n\r\n                                return (\r\n                                  <div key={category} className=\"space-y-2\">\r\n                                    <h5 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\r\n                                      {category === 'textEditing' ? 'Text Editing' : category.charAt(0).toUpperCase() + category.slice(1)} Tools\r\n                                      {!categoryEnabled && <span className=\"ml-2 text-yellow-600\">(Category Disabled)</span>}\r\n                                    </h5>\r\n                                    <div className=\"grid grid-cols-1 gap-2 pl-4\">\r\n                                      {categoryTools.map(tool => (\r\n                                        <div key={tool.name} className={`flex items-center justify-between p-2 rounded ${!categoryEnabled ? 'opacity-50' : ''}`}>\r\n                                          <div className=\"flex-1\">\r\n                                            <div className=\"flex items-center gap-2\">\r\n                                              <code className=\"text-xs bg-muted px-1 py-0.5 rounded font-mono\">{tool.name}</code>\r\n                                            </div>\r\n                                            <p className=\"text-xs text-muted-foreground mt-1\">{tool.description}</p>\r\n                                          </div>\r\n                                          <ToggleSwitch\r\n                                            enabled={categoryEnabled && (enabledTools[tool.name] !== false)}\r\n                                            onToggle={(enabled) => {\r\n                                              setEnabledTools(prev => ({\r\n                                                ...prev,\r\n                                                [tool.name]: enabled\r\n                                              }));\r\n                                              saveInternalCommandsSettings();\r\n                                            }}\r\n                                            disabled={!categoryEnabled}\r\n                                          />\r\n                                        </div>\r\n                                      ))}\r\n                                    </div>\r\n                                  </div>\r\n                                );\r\n                              })}\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n\r\n                        {/* Allowed Directories */}\r\n                        <div className=\"border border-border rounded-lg p-4\">\r\n                          <h4 className=\"text-sm font-medium mb-3\">Allowed Directories</h4>\r\n                          <p className=\"text-xs text-muted-foreground mb-3\">\r\n                            Specify directories where commands can operate. Leave empty to deny all filesystem access.\r\n                          </p>\r\n\r\n                          <div className=\"space-y-2 mb-3\">\r\n                            {allowedDirectories.map((dir, index) => (\r\n                              <div key={index} className=\"flex items-center gap-2 p-2 bg-muted rounded\">\r\n                                <span className=\"flex-1 text-sm font-mono\">{dir}</span>\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => removeAllowedDirectory(index)}\r\n                                  className=\"h-6 w-6 p-0\"\r\n                                >\r\n                                  <Trash2 className=\"h-3 w-3\" />\r\n                                </Button>\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n\r\n                          <div className=\"flex gap-2\">\r\n                            <Input\r\n                              placeholder=\"Enter directory path...\"\r\n                              value={newDirectory}\r\n                              onChange={(e) => setNewDirectory(e.target.value)}\r\n                              onKeyPress={(e) => e.key === 'Enter' && addAllowedDirectory()}\r\n                              className=\"flex-1\"\r\n                            />\r\n                            <Button onClick={browseForDirectory} size=\"sm\" variant=\"outline\">\r\n                              Browse\r\n                            </Button>\r\n                            <Button onClick={addAllowedDirectory} size=\"sm\">\r\n                              <Plus className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* Blocked Commands */}\r\n                        <div className=\"border border-border rounded-lg p-4\">\r\n                          <h4 className=\"text-sm font-medium mb-3\">Blocked Commands</h4>\r\n                          <p className=\"text-xs text-muted-foreground mb-3\">\r\n                            Commands or patterns that are blocked for security. These are checked against all terminal commands.\r\n                          </p>\r\n\r\n                          <div className=\"space-y-2 mb-3 max-h-32 overflow-y-auto\">\r\n                            {blockedCommands.map((cmd, index) => (\r\n                              <div key={index} className=\"flex items-center gap-2 p-2 bg-muted rounded\">\r\n                                <span className=\"flex-1 text-sm font-mono\">{cmd}</span>\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => removeBlockedCommand(index)}\r\n                                  className=\"h-6 w-6 p-0\"\r\n                                >\r\n                                  <Trash2 className=\"h-3 w-3\" />\r\n                                </Button>\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n\r\n                          <div className=\"flex gap-2\">\r\n                            <Input\r\n                              placeholder=\"Enter command pattern to block...\"\r\n                              value={newBlockedCommand}\r\n                              onChange={(e) => setNewBlockedCommand(e.target.value)}\r\n                              onKeyPress={(e) => e.key === 'Enter' && addBlockedCommand()}\r\n                              className=\"flex-1\"\r\n                            />\r\n                            <Button onClick={addBlockedCommand} size=\"sm\">\r\n                              <Plus className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* Security Warning */}\r\n                        <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\r\n                          <h4 className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200 mb-2\">Security Notice</h4>\r\n                          <p className=\"text-xs text-yellow-700 dark:text-yellow-300\">\r\n                            Internal commands provide powerful capabilities to AI models. Only enable them if you trust the AI models you&apos;re using.\r\n                            Always configure allowed directories to limit filesystem access to specific paths.\r\n                          </p>\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {activeTab === 'knowledge-base' && <KnowledgeBaseSettings />}\r\n\r\n\r\n\r\n            {activeTab === 'appearance' && (\r\n              <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-medium mb-4\">Appearance</h3>\r\n                  <div className=\"space-y-4\">\r\n                    {formData?.ui && (\r\n                      <>\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"theme\">Theme</Label>\r\n                          <Select\r\n                            value={formData.ui.theme}\r\n                            onValueChange={(value: 'light' | 'dark' | 'system') => updateFormData({\r\n                              ui: { ...formData.ui, theme: value }\r\n                            })}\r\n                          >\r\n                            <SelectTrigger className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\">\r\n                              <SelectValue placeholder=\"Select theme\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent>\r\n                              <SelectItem value=\"light\">Light</SelectItem>\r\n                              <SelectItem value=\"dark\">Dark</SelectItem>\r\n                              <SelectItem value=\"system\">System</SelectItem>\r\n                            </SelectContent>\r\n                          </Select>\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            Choose your preferred color theme\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"font-size\">Font Size</Label>\r\n                          <Select\r\n                            value={formData.ui.fontSize || 'small'}\r\n                            onValueChange={(value: 'small' | 'medium' | 'large') => updateFormData({\r\n                              ui: { ...formData.ui, fontSize: value }\r\n                            })}\r\n                          >\r\n                            <SelectTrigger className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\">\r\n                              <SelectValue placeholder=\"Select font size\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent>\r\n                              <SelectItem value=\"small\">Small</SelectItem>\r\n                              <SelectItem value=\"medium\">Medium</SelectItem>\r\n                              <SelectItem value=\"large\">Large</SelectItem>\r\n                            </SelectContent>\r\n                          </Select>\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            Adjust the application font size\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"space-y-4\">\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <div>\r\n                              <Label>Always on Top</Label>\r\n                              <p className=\"text-sm text-muted-foreground\">\r\n                                Keep the application window above other windows\r\n                              </p>\r\n                            </div>\r\n                            <ToggleSwitch\r\n                              enabled={formData.ui.alwaysOnTop}\r\n                              onToggle={(enabled: boolean) => updateFormData({\r\n                                ui: { ...formData.ui, alwaysOnTop: enabled }\r\n                              })}\r\n                            />\r\n                          </div>\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <div>\r\n                              <Label>Start Minimized</Label>\r\n                              <p className=\"text-sm text-muted-foreground\">\r\n                                Start the application minimized to system tray\r\n                              </p>\r\n                            </div>\r\n                            <ToggleSwitch\r\n                              enabled={formData.ui.startMinimized}\r\n                              onToggle={(enabled: boolean) => updateFormData({\r\n                                ui: { ...formData.ui, startMinimized: enabled }\r\n                              })}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* Theme Selection Section */}\r\n                        <div className=\"space-y-4 border-t border-border pt-6\">\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <div>\r\n                              <Label className=\"flex items-center gap-2\">\r\n                                <Palette className=\"h-4 w-4\" />\r\n                                Color Themes\r\n                              </Label>\r\n                              <p className=\"text-sm text-muted-foreground\">\r\n                                Choose from preset themes or create your own custom colors\r\n                              </p>\r\n                            </div>\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={resetToDefaults}\r\n                              className=\"flex items-center gap-2\"\r\n                              title=\"Reset to factory defaults\"\r\n                            >\r\n                              <RotateCcw className=\"h-3 w-3\" />\r\n                              Reset\r\n                            </Button>\r\n                          </div>\r\n\r\n                          {/* Color Mode Toggle */}\r\n                          <div className=\"space-y-3\">\r\n                            <div className=\"flex gap-2\">\r\n                              <Button\r\n                                variant={colorMode === 'preset' ? 'default' : 'outline'}\r\n                                size=\"sm\"\r\n                                onClick={() => handleColorModeChange('preset')}\r\n                                className=\"flex-1\"\r\n                              >\r\n                                Preset Themes\r\n                              </Button>\r\n                              <Button\r\n                                variant={colorMode === 'custom' ? 'default' : 'outline'}\r\n                                size=\"sm\"\r\n                                onClick={() => handleColorModeChange('custom')}\r\n                                className=\"flex-1\"\r\n                              >\r\n                                Custom Colors\r\n                              </Button>\r\n                            </div>\r\n                          </div>\r\n\r\n                          {/* Theme Preset Selector */}\r\n                          {colorMode === 'preset' && (\r\n                            <div className=\"space-y-4\">\r\n                              <ThemeSelector\r\n                                selectedThemeId={selectedThemePreset}\r\n                                onThemeSelect={handleThemePresetChange}\r\n                              />\r\n                            </div>\r\n                          )}\r\n\r\n                          {/* Custom Color Pickers */}\r\n                          {colorMode === 'custom' && (\r\n                            <div className=\"space-y-4\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <div>\r\n                                  <Label>Enable Custom Colors</Label>\r\n                                  <p className=\"text-sm text-muted-foreground\">\r\n                                    Use custom colors instead of the default theme\r\n                                  </p>\r\n                                </div>\r\n                                <ToggleSwitch\r\n                                  enabled={useCustomColors}\r\n                                  onToggle={handleUseCustomColorsChange}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n\r\n                          {colorMode === 'custom' && useCustomColors && (\r\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-muted/30 rounded-lg\">\r\n                              <ColorPicker\r\n                                label=\"Main Background\"\r\n                                value={customColors.background}\r\n                                onChange={(color) => handleColorChange({ ...customColors, background: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Main Text Color\"\r\n                                value={customColors.foreground}\r\n                                onChange={(color) => handleColorChange({ ...customColors, foreground: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"System Text Color\"\r\n                                value={customColors.systemText || '#e0e0e0'}\r\n                                onChange={(color) => handleColorChange({ ...customColors, systemText: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Button & Link Color\"\r\n                                value={customColors.primary}\r\n                                onChange={(color) => handleColorChange({ ...customColors, primary: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Button Text Color\"\r\n                                value={customColors.primaryForeground}\r\n                                onChange={(color) => handleColorChange({ ...customColors, primaryForeground: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Secondary Button Color\"\r\n                                value={customColors.secondary}\r\n                                onChange={(color) => handleColorChange({ ...customColors, secondary: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Secondary Button Text\"\r\n                                value={customColors.secondaryForeground}\r\n                                onChange={(color) => handleColorChange({ ...customColors, secondaryForeground: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Highlight Color\"\r\n                                value={customColors.accent}\r\n                                onChange={(color) => handleColorChange({ ...customColors, accent: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Highlight Text Color\"\r\n                                value={customColors.accentForeground}\r\n                                onChange={(color) => handleColorChange({ ...customColors, accentForeground: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Panel Background\"\r\n                                value={customColors.card}\r\n                                onChange={(color) => handleColorChange({ ...customColors, card: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Panel Text Color\"\r\n                                value={customColors.cardForeground}\r\n                                onChange={(color) => handleColorChange({ ...customColors, cardForeground: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Subtle Background\"\r\n                                value={customColors.muted}\r\n                                onChange={(color) => handleColorChange({ ...customColors, muted: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Subtle Text Color\"\r\n                                value={customColors.mutedForeground}\r\n                                onChange={(color) => handleColorChange({ ...customColors, mutedForeground: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Border & Divider Color\"\r\n                                value={customColors.border}\r\n                                onChange={(color) => handleColorChange({ ...customColors, border: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Input Field Background\"\r\n                                value={customColors.input}\r\n                                onChange={(color) => handleColorChange({ ...customColors, input: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Focus Outline Color\"\r\n                                value={customColors.ring}\r\n                                onChange={(color) => handleColorChange({ ...customColors, ring: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Error & Delete Color\"\r\n                                value={customColors.destructive}\r\n                                onChange={(color) => handleColorChange({ ...customColors, destructive: color })}\r\n                              />\r\n                              <ColorPicker\r\n                                label=\"Error Text Color\"\r\n                                value={customColors.destructiveForeground}\r\n                                onChange={(color) => handleColorChange({ ...customColors, destructiveForeground: color })}\r\n                              />\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {activeTab === 'general' && (\r\n              <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-medium mb-4\">General Settings</h3>\r\n                  <div className=\"space-y-4\">\r\n                    {formData?.general && (\r\n                      <>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <ToggleSwitch\r\n                            enabled={formData.general.autoStartWithSystem}\r\n                            onToggle={(enabled: boolean) => updateFormData({\r\n                              general: { ...formData.general, autoStartWithSystem: enabled }\r\n                            })}\r\n                          />\r\n                          <Label>Start with System</Label>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <ToggleSwitch\r\n                            enabled={formData.general.showNotifications}\r\n                            onToggle={(enabled: boolean) => updateFormData({\r\n                              general: { ...formData.general, showNotifications: enabled }\r\n                            })}\r\n                          />\r\n                          <Label>Show Notifications</Label>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <ToggleSwitch\r\n                            enabled={formData.general.saveConversationHistory}\r\n                            onToggle={(enabled: boolean) => updateFormData({\r\n                              general: { ...formData.general, saveConversationHistory: enabled }\r\n                            })}\r\n                          />\r\n                          <Label>Save Conversation History</Label>\r\n                        </div>\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"history-length\">Conversation History Length</Label>\r\n                          <Input\r\n                            id=\"history-length\"\r\n                            type=\"number\"\r\n                            min=\"1\"\r\n                            max=\"100\"\r\n                            value={formData.general.conversationHistoryLength}\r\n                            className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                            onChange={(e) => updateFormData({\r\n                              general: { ...formData.general, conversationHistoryLength: parseInt(e.target.value) }\r\n                            })}\r\n                          />\r\n                          <p className=\"text-sm text-muted-foreground\">\r\n                            Number of previous messages to include in context\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                          <ToggleSwitch\r\n                            enabled={formData.general.debugLogging || false}\r\n                            onToggle={(enabled: boolean) => updateFormData({\r\n                              general: { ...formData.general, debugLogging: enabled }\r\n                            })}\r\n                          />\r\n                          <Label>Debug Logging</Label>\r\n                          <p className=\"text-sm text-muted-foreground ml-2\">\r\n                            Enable detailed console logging for troubleshooting\r\n                          </p>\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"flex-none p-6 pt-4 border-t border-border bg-background/50 backdrop-blur-sm\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={handleReload}\r\n                disabled={isLoading}\r\n                className=\"bg-muted/50 border-input hover:bg-muted/70 transition-colors\"\r\n              >\r\n                {isLoading ? 'Loading...' : 'Reload Settings'}\r\n              </Button>\r\n\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={handleCancel}\r\n                disabled={isLoading}\r\n                className=\"bg-muted/50 border-input hover:bg-muted/70 transition-colors\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onClick={handleSave}\r\n                disabled={isLoading}\r\n                className=\"bg-primary text-primary-foreground\"\r\n              >\r\n                {isLoading ? 'Saving...' : 'Save Settings'}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Error and Success Messages */}\r\n          {saveError && (\r\n            <div className=\"mt-4 p-3 bg-destructive/10 border border-destructive/20 rounded-md\">\r\n              <p className=\"text-sm text-destructive\">❌ {saveError}</p>\r\n            </div>\r\n          )}\r\n\r\n          {saveSuccess && (\r\n            <div className=\"mt-4 p-3 bg-green-500/10 border border-green-500/20 rounded-md\">\r\n              <p className=\"text-sm text-green-600\">✅ Settings saved successfully!</p>\r\n            </div>\r\n          )}\r\n\r\n          {hasChanges && (\r\n            <div className=\"mt-2 text-xs text-muted-foreground\">\r\n              Changes will be applied immediately after saving\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* MCP JSON Editor Dialog */}\r\n      <Dialog open={showMcpJsonEditor} onOpenChange={setShowMcpJsonEditor}>\r\n        <DialogContent className=\"max-w-5xl w-[90vw] max-h-[85vh] h-[85vh] flex flex-col rounded-lg\">\r\n          <DialogHeader className=\"flex-none\">\r\n            <DialogTitle>Edit MCP Configuration JSON</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"flex-1 flex flex-col space-y-4 min-h-0\">\r\n            <p className=\"text-sm text-muted-foreground flex-none\">\r\n              Edit the raw MCP configuration JSON. Be careful with the syntax.\r\n            </p>\r\n            <div className=\"flex-1 min-h-0\">\r\n              <Textarea\r\n                value={mcpJsonContent}\r\n                onChange={(e) => setMcpJsonContent(e.target.value)}\r\n                placeholder=\"MCP JSON configuration...\"\r\n                className=\"w-full h-full resize-none bg-slate-900 border-2 border-slate-600 focus:bg-slate-800 hover:bg-slate-850 focus:border-blue-400 transition-colors font-mono text-sm text-slate-100 custom-scrollbar\"\r\n                style={{ minHeight: '400px' }}\r\n              />\r\n            </div>\r\n            <div className=\"flex justify-end gap-2 flex-none pt-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => setShowMcpJsonEditor(false)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={handleSaveMcpJson}>\r\n                Save JSON\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\SourceAttribution.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ThinkingIndicator.tsx","messages":[{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":20,"column":64,"nodeType":"Literal","endLine":20,"endColumn":83}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Brain } from 'lucide-react';\n\ninterface ThinkingIndicatorProps {\n  className?: string;\n}\n\nexport function ThinkingIndicator({ className = '' }: ThinkingIndicatorProps) {\n  return (\n    <div\n      className={`flex items-center gap-3 p-4 rounded-lg border-2 ${className}`}\n      style={{\n        backgroundColor: 'rgba(55, 65, 81, 0.9)',\n        borderColor: 'rgb(75, 85, 99)',\n        color: 'white'\n      }}\n    >\n      <Brain className=\"h-5 w-5 animate-pulse\" style={{ color: 'rgb(59, 130, 246)' }} />\n      <div className=\"flex items-center gap-2\">\n        <span className=\"text-sm font-medium\" style={{ color: 'white' }}>Thinking</span>\n        <div className=\"flex gap-1\">\n          <div\n            className=\"w-2 h-2 rounded-full thinking-dot\"\n            style={{ backgroundColor: 'rgb(59, 130, 246)' }}\n          />\n          <div\n            className=\"w-2 h-2 rounded-full thinking-dot\"\n            style={{ backgroundColor: 'rgb(59, 130, 246)' }}\n          />\n          <div\n            className=\"w-2 h-2 rounded-full thinking-dot\"\n            style={{ backgroundColor: 'rgb(59, 130, 246)' }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\UserMessage.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1009,1054],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1731,1790],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Copy, Check } from 'lucide-react';\r\nimport { Button } from './ui/button';\r\nimport { MessageContent } from './MessageContent';\r\nimport { ContentItem } from '../services/chatService';\r\n\r\ninterface UserMessageProps {\r\n  content: string | ContentItem[];\r\n  className?: string;\r\n}\r\n\r\nexport function UserMessage({ content, className = '' }: UserMessageProps) {\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  // Copy function for the message content\r\n  const handleCopy = async () => {\r\n    try {\r\n      // Convert content to string for copying\r\n      const textContent = typeof content === 'string'\r\n        ? content\r\n        : Array.isArray(content)\r\n          ? content.map(item => item.type === 'text' ? item.text : `[${item.type}]`).join(' ')\r\n          : String(content);\r\n\r\n      await navigator.clipboard.writeText(textContent);\r\n      setCopied(true);\r\n      setTimeout(() => setCopied(false), 2000);\r\n    } catch (error) {\r\n      console.error('Failed to copy text:', error);\r\n      // Fallback for older browsers\r\n      try {\r\n        const textContent = typeof content === 'string'\r\n          ? content\r\n          : Array.isArray(content)\r\n            ? content.map(item => item.type === 'text' ? item.text : `[${item.type}]`).join(' ')\r\n            : String(content);\r\n\r\n        const textArea = document.createElement('textarea');\r\n        textArea.value = textContent;\r\n        document.body.appendChild(textArea);\r\n        textArea.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(textArea);\r\n        setCopied(true);\r\n        setTimeout(() => setCopied(false), 2000);\r\n      } catch (fallbackError) {\r\n        console.error('Fallback copy also failed:', fallbackError);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`relative group ${className}`}>\r\n      {/* Copy Button - positioned in top right */}\r\n      <Button\r\n        variant=\"ghost\"\r\n        size=\"sm\"\r\n        onClick={handleCopy}\r\n        className=\"absolute top-0.5 right-0.5 opacity-0 group-hover:opacity-100 transition-opacity h-5 w-5 p-0\"\r\n        style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n      >\r\n        {copied ? (\r\n          <Check style={{ width: '16px', height: '16px' }} className=\"text-green-500\" />\r\n        ) : (\r\n          <Copy style={{ width: '16px', height: '16px' }} />\r\n        )}\r\n      </Button>\r\n\r\n      {/* Message Content */}\r\n      <MessageContent\r\n        content={content}\r\n        className=\"select-text break-words text-sm leading-relaxed\"\r\n        style={{\r\n          WebkitAppRegion: 'no-drag',\r\n          userSelect: 'text',\r\n          WebkitUserSelect: 'text',\r\n          wordWrap: 'break-word',\r\n          overflowWrap: 'break-word',\r\n          maxWidth: '100%'\r\n        } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\magicui\\animated-beam.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ref' is defined but never used.","line":48,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":8},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'ref' is defined but never used. Allowed unused args must match /^_/u.","line":48,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'svgWidth' is assigned a value but never used.","line":66,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":25},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'svgWidth' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":66,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'svgHeight' is assigned a value but never used.","line":67,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":26},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'svgHeight' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entries' is defined but never used.","line":87,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":57},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'entries' is defined but never used. Allowed unused args must match /^_/u.","line":87,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":57}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { motion } from \"framer-motion\";\r\nimport React, { forwardRef, useRef } from \"react\";\r\n\r\nexport interface AnimatedBeamProps {\r\n  className?: string;\r\n  containerRef: React.RefObject<HTMLElement>;\r\n  fromRef: React.RefObject<HTMLElement>;\r\n  toRef: React.RefObject<HTMLElement>;\r\n  curvature?: number;\r\n  reverse?: boolean;\r\n  pathColor?: string;\r\n  pathWidth?: number;\r\n  pathOpacity?: number;\r\n  gradientStartColor?: string;\r\n  gradientStopColor?: string;\r\n  delay?: number;\r\n  duration?: number;\r\n  startXOffset?: number;\r\n  startYOffset?: number;\r\n  endXOffset?: number;\r\n  endYOffset?: number;\r\n}\r\n\r\nexport const AnimatedBeam = forwardRef<SVGSVGElement, AnimatedBeamProps>(\r\n  (\r\n    {\r\n      className,\r\n      containerRef,\r\n      fromRef,\r\n      toRef,\r\n      curvature = 0,\r\n      reverse = false,\r\n      duration = Math.random() * 3 + 4,\r\n      delay = 0,\r\n      pathColor = \"gray\",\r\n      pathWidth = 2,\r\n      pathOpacity = 0.2,\r\n      gradientStartColor = \"#ffaa40\",\r\n      gradientStopColor = \"#9c40ff\",\r\n      startXOffset = 0,\r\n      startYOffset = 0,\r\n      endXOffset = 0,\r\n      endYOffset = 0,\r\n    },\r\n    ref,\r\n  ) => {\r\n    const id = React.useId();\r\n    const svgRef = useRef<SVGSVGElement>(null);\r\n    const pathRef = useRef<SVGPathElement>(null);\r\n\r\n    React.useEffect(() => {\r\n      const updatePath = () => {\r\n        if (\r\n          containerRef.current &&\r\n          fromRef.current &&\r\n          toRef.current &&\r\n          pathRef.current\r\n        ) {\r\n          const containerRect = containerRef.current.getBoundingClientRect();\r\n          const rectA = fromRef.current.getBoundingClientRect();\r\n          const rectB = toRef.current.getBoundingClientRect();\r\n\r\n          const svgWidth = containerRect.width;\r\n          const svgHeight = containerRect.height;\r\n          const svgX = containerRect.left;\r\n          const svgY = containerRect.top;\r\n\r\n          const startX =\r\n            rectA.left - svgX + rectA.width / 2 + startXOffset;\r\n          const startY =\r\n            rectA.top - svgY + rectA.height / 2 + startYOffset;\r\n          const endX = rectB.left - svgX + rectB.width / 2 + endXOffset;\r\n          const endY = rectB.top - svgY + rectB.height / 2 + endYOffset;\r\n\r\n          const controlPointX = startX + (endX - startX) / 2;\r\n          const controlPointY = startY - curvature;\r\n\r\n          const d = `M ${startX},${startY} Q ${controlPointX},${controlPointY} ${endX},${endY}`;\r\n          pathRef.current.setAttribute(\"d\", d);\r\n        }\r\n      };\r\n\r\n      // Set up ResizeObserver\r\n      const resizeObserver = new ResizeObserver((entries) => {\r\n        // On the next frame (to ensure elements are rendered)\r\n        requestAnimationFrame(updatePath);\r\n      });\r\n\r\n      // Observe the container element\r\n      if (containerRef.current) {\r\n        resizeObserver.observe(containerRef.current);\r\n      }\r\n\r\n      // Call the updatePath initially\r\n      updatePath();\r\n\r\n      // Clean up the observer on component unmount\r\n      return () => {\r\n        resizeObserver.disconnect();\r\n      };\r\n    }, [\r\n      containerRef,\r\n      fromRef,\r\n      toRef,\r\n      curvature,\r\n      startXOffset,\r\n      startYOffset,\r\n      endXOffset,\r\n      endYOffset,\r\n    ]);\r\n\r\n    return (\r\n      <svg\r\n        ref={svgRef}\r\n        fill=\"none\"\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className={cn(\r\n          \"pointer-events-none absolute left-0 top-0 transform-gpu stroke-2\",\r\n          className,\r\n        )}\r\n        viewBox={`0 0 ${containerRef.current?.getBoundingClientRect().width || 0} ${\r\n          containerRef.current?.getBoundingClientRect().height || 0\r\n        }`}\r\n      >\r\n        <defs>\r\n          <linearGradient\r\n            className={`transform-gpu ${reverse ? \"rotate-180\" : \"\"}`}\r\n            id={`${id}`}\r\n            x1=\"0%\"\r\n            x2=\"100%\"\r\n            y1=\"0%\"\r\n            y2=\"0%\"\r\n          >\r\n            <stop offset=\"0%\" stopColor={gradientStartColor} stopOpacity=\"0\" />\r\n            <stop offset=\"32.5%\" stopColor={gradientStartColor} />\r\n            <stop offset=\"67.5%\" stopColor={gradientStopColor} />\r\n            <stop offset=\"100%\" stopColor={gradientStopColor} stopOpacity=\"0\" />\r\n          </linearGradient>\r\n        </defs>\r\n        <motion.path\r\n          ref={pathRef}\r\n          stroke={pathColor}\r\n          strokeWidth={pathWidth}\r\n          strokeOpacity={pathOpacity}\r\n          fill=\"none\"\r\n        />\r\n        <motion.path\r\n          stroke={`url(#${id})`}\r\n          strokeWidth={pathWidth}\r\n          strokeOpacity=\"1\"\r\n          fill=\"none\"\r\n          pathLength=\"1\"\r\n          initial={{\r\n            strokeDasharray: \"0 1\",\r\n          }}\r\n          animate={{\r\n            strokeDasharray: [\"0 1\", \"1 1\", \"0 1\"],\r\n          }}\r\n          transition={{\r\n            duration,\r\n            repeat: Infinity,\r\n            delay,\r\n            ease: \"linear\",\r\n          }}\r\n        />\r\n      </svg>\r\n    );\r\n  },\r\n);\r\n\r\nAnimatedBeam.displayName = \"AnimatedBeam\";\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\magicui\\blur-fade.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'inView' is assigned a value but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":9},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'inView' is assigned a value but never used. Allowed unused args must match /^_/u.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'inViewMargin' is assigned a value but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":15},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'inViewMargin' is assigned a value but never used. Allowed unused args must match /^_/u.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":15}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { motion } from \"framer-motion\";\r\nimport React from \"react\";\r\n\r\ninterface BlurFadeProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  variant?: {\r\n    hidden: { y: number; opacity: number; filter: string };\r\n    visible: { y: number; opacity: number; filter: string };\r\n  };\r\n  duration?: number;\r\n  delay?: number;\r\n  yOffset?: number;\r\n  inView?: boolean;\r\n  inViewMargin?: string;\r\n  blur?: string;\r\n}\r\n\r\nconst defaultVariant = {\r\n  hidden: { y: 6, opacity: 0, filter: \"blur(6px)\" },\r\n  visible: { y: -6, opacity: 1, filter: \"blur(0px)\" },\r\n};\r\n\r\nexport function BlurFade({\r\n  children,\r\n  className,\r\n  variant = defaultVariant,\r\n  duration = 0.4,\r\n  delay = 0,\r\n  yOffset = 6,\r\n  inView = false,\r\n  inViewMargin = \"-50px\",\r\n  blur = \"6px\",\r\n}: BlurFadeProps) {\r\n  const customVariant = {\r\n    hidden: {\r\n      y: yOffset,\r\n      opacity: 0,\r\n      filter: `blur(${blur})`,\r\n    },\r\n    visible: {\r\n      y: -yOffset,\r\n      opacity: 1,\r\n      filter: \"blur(0px)\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial=\"hidden\"\r\n      animate=\"visible\"\r\n      exit=\"hidden\"\r\n      variants={variant || customVariant}\r\n      transition={{\r\n        delay: 0.04 + delay,\r\n        duration,\r\n        ease: \"easeOut\",\r\n      }}\r\n      className={className}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport function BlurFadeText({\r\n  text,\r\n  className,\r\n  variant,\r\n  characterDelay = 0.03,\r\n  delay = 0,\r\n  yOffset = 8,\r\n  animateByCharacter = false,\r\n}: {\r\n  text: string;\r\n  className?: string;\r\n  variant?: {\r\n    hidden: { y: number; opacity: number; filter: string };\r\n    visible: { y: number; opacity: number; filter: string };\r\n  };\r\n  characterDelay?: number;\r\n  delay?: number;\r\n  yOffset?: number;\r\n  animateByCharacter?: boolean;\r\n}) {\r\n  const defaultVariants = {\r\n    hidden: { y: yOffset, opacity: 0, filter: \"blur(8px)\" },\r\n    visible: { y: -yOffset, opacity: 1, filter: \"blur(0px)\" },\r\n  };\r\n  const selectedVariant = variant || defaultVariants;\r\n  \r\n  if (animateByCharacter) {\r\n    return (\r\n      <div className={className}>\r\n        {text.split(\"\").map((char, i) => (\r\n          <motion.span\r\n            key={i}\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n            exit=\"hidden\"\r\n            variants={selectedVariant}\r\n            transition={{\r\n              delay: delay + i * characterDelay,\r\n              duration: 0.2,\r\n              ease: \"easeOut\",\r\n            }}\r\n            style={{ display: \"inline-block\" }}\r\n          >\r\n            {char === \" \" ? \"\\u00A0\" : char}\r\n          </motion.span>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      initial=\"hidden\"\r\n      animate=\"visible\"\r\n      exit=\"hidden\"\r\n      variants={selectedVariant}\r\n      transition={{\r\n        delay,\r\n        duration: 0.4,\r\n        ease: \"easeOut\",\r\n      }}\r\n      className={className}\r\n    >\r\n      {text}\r\n    </motion.div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\magicui\\border-beam.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\magicui\\dock.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[814,817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[814,817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onDrag' is assigned a value but never used.","line":41,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":11},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'onDrag' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":41,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onDragStart' is assigned a value but never used.","line":42,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":16},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'onDragStart' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":42,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onDragEnd' is assigned a value but never used.","line":43,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":14},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'onDragEnd' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onAnimationStart' is assigned a value but never used.","line":44,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'onAnimationStart' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":44,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onAnimationEnd' is assigned a value but never used.","line":45,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'onAnimationEnd' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onAnimationIteration' is assigned a value but never used.","line":46,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":25},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'onAnimationIteration' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":46,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1780,1783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1780,1783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { motion, useMotionValue, useSpring, useTransform } from \"framer-motion\";\r\nimport React, { useRef } from \"react\";\r\n\r\nexport interface DockProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  className?: string;\r\n  children: React.ReactNode;\r\n  direction?: \"top\" | \"middle\" | \"bottom\";\r\n}\r\n\r\nexport interface DockIconProps {\r\n  size?: number;\r\n  magnification?: number;\r\n  distance?: number;\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst DEFAULT_MAGNIFICATION = 60;\r\nconst DEFAULT_DISTANCE = 140;\r\n\r\nexport function Dock({\r\n  className,\r\n  children,\r\n  direction = \"bottom\",\r\n  ...props\r\n}: DockProps) {\r\n  const mouseX = useMotionValue(Infinity);\r\n\r\n  const renderChildren = () => {\r\n    return React.Children.map(children, (child: any) => {\r\n      return React.cloneElement(child, {\r\n        mouseX: mouseX,\r\n      });\r\n    });\r\n  };\r\n\r\n  const {\r\n    onDrag,\r\n    onDragStart,\r\n    onDragEnd,\r\n    onAnimationStart,\r\n    onAnimationEnd,\r\n    onAnimationIteration,\r\n    ...motionProps\r\n  } = props;\r\n\r\n  return (\r\n    <motion.div\r\n      onMouseMove={(e) => mouseX.set(e.pageX)}\r\n      onMouseLeave={() => mouseX.set(Infinity)}\r\n      {...motionProps}\r\n      className={cn(\r\n        \"mx-auto flex h-16 items-end gap-4 rounded-2xl border bg-gray-50 px-4 pb-3 dark:bg-gray-900\",\r\n        {\r\n          \"items-start pt-3\": direction === \"top\",\r\n          \"items-center py-3\": direction === \"middle\",\r\n        },\r\n        className,\r\n      )}\r\n    >\r\n      {renderChildren()}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport function DockIcon({\r\n  size = 40,\r\n  magnification = DEFAULT_MAGNIFICATION,\r\n  distance = DEFAULT_DISTANCE,\r\n  mouseX,\r\n  className,\r\n  children,\r\n  ...props\r\n}: DockIconProps & { mouseX?: any }) {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  const distanceCalc = useTransform(mouseX, (val: number) => {\r\n    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };\r\n\r\n    return val - bounds.x - bounds.width / 2;\r\n  });\r\n\r\n  const widthSync = useTransform(\r\n    distanceCalc,\r\n    [-distance, 0, distance],\r\n    [size, magnification, size],\r\n  );\r\n\r\n  const width = useSpring(widthSync, {\r\n    mass: 0.1,\r\n    stiffness: 150,\r\n    damping: 12,\r\n  });\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ref}\r\n      style={{ width }}\r\n      className={cn(\r\n        \"flex aspect-square cursor-pointer items-center justify-center rounded-full\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\magicui\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\magicui\\magic-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\AgentManagement.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1812,1863],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":104,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":104,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3244,3292],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3496,3547],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4200,4248],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":148,"column":73,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":148,"endColumn":116},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":153,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":153,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4875,4923],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { \n  Plus, \n  Edit3, \n  Trash2, \n  Copy, \n  Download, \n  Upload, \n  Search,\n  Filter,\n  Bot,\n  Play\n} from 'lucide-react';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { cn } from '@/lib/utils';\nimport { AgentConfiguration, AgentTemplate } from '../../types/agent';\nimport { agentService } from '../../services/agentService';\nimport { CreateAgentDialog } from './CreateAgentDialog';\nimport { EditAgentDialog } from './EditAgentDialog';\n\ninterface AgentManagementProps {\n  className?: string;\n  onAgentSelect?: (agent: AgentConfiguration) => void;\n  onClose?: () => void;\n}\n\nexport function AgentManagement({\n  className,\n  onAgentSelect,\n  onClose\n}: AgentManagementProps) {\n  const [agents, setAgents] = useState<AgentConfiguration[]>([]);\n  const [templates, setTemplates] = useState<AgentTemplate[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [selectedAgent, setSelectedAgent] = useState<AgentConfiguration | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load agents and templates\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const [agentsData, templatesData] = await Promise.all([\n        agentService.getAgents(),\n        agentService.getTemplates()\n      ]);\n      setAgents(agentsData);\n      setTemplates(templatesData);\n    } catch (error) {\n      console.error('Failed to load agent data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Filter agents based on search and category\n  const filteredAgents = agents.filter(agent => {\n    const matchesSearch = agent.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         agent.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         (agent.tags || []).some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    \n    const matchesCategory = selectedCategory === 'all' || \n                           (agent.tags || []).includes(selectedCategory);\n    \n    return matchesSearch && matchesCategory;\n  });\n\n  // Get unique categories from agents\n  const categories = ['all', ...new Set(agents.flatMap(agent => agent.tags || []))];\n\n  const handleCreateAgent = async () => {\n    await loadData();\n    setCreateDialogOpen(false);\n  };\n\n  const handleEditAgent = (agent: AgentConfiguration) => {\n    setSelectedAgent(agent);\n    setEditDialogOpen(true);\n  };\n\n  const handleUpdateAgent = async () => {\n    await loadData();\n    setEditDialogOpen(false);\n    setSelectedAgent(null);\n  };\n\n  const handleDeleteAgent = async (agent: AgentConfiguration) => {\n    if (confirm(`Are you sure you want to delete \"${agent.name}\"?`)) {\n      try {\n        await agentService.deleteAgent(agent.id);\n        await loadData();\n      } catch (error) {\n        console.error('Failed to delete agent:', error);\n      }\n    }\n  };\n\n  const handleDuplicateAgent = async (agent: AgentConfiguration) => {\n    try {\n      await agentService.duplicateAgent(agent.id);\n      await loadData();\n    } catch (error) {\n      console.error('Failed to duplicate agent:', error);\n    }\n  };\n\n  const handleExportAgent = async (agent: AgentConfiguration) => {\n    try {\n      const exportData = await agentService.exportAgent(agent.id);\n      if (exportData) {\n        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${agent.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_agent.json`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error('Failed to export agent:', error);\n    }\n  };\n\n  const handleImportAgent = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    try {\n      const text = await file.text();\n      const exportData = JSON.parse(text);\n      const result = await agentService.importAgent(exportData);\n      \n      if (result.success) {\n        await loadData();\n        alert(`Agent imported successfully! ${result.warnings?.length ? `\\nWarnings: ${result.warnings.join(', ')}` : ''}`);\n      } else {\n        alert(`Failed to import agent: ${result.errors?.join(', ')}`);\n      }\n    } catch (error) {\n      console.error('Failed to import agent:', error);\n      alert('Failed to import agent: Invalid file format');\n    }\n    \n    // Reset file input\n    event.target.value = '';\n  };\n\n  const handleUseAgent = (agent: AgentConfiguration) => {\n    onAgentSelect?.(agent);\n    onClose?.();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-gray-400\">Loading agents...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"flex flex-col h-full bg-gray-950 text-white\", className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-6 border-b border-gray-800\">\n        <div className=\"flex items-center gap-3\">\n          <Bot className=\"w-6 h-6 text-blue-400\" />\n          <h1 className=\"text-xl font-semibold\">Custom Agents</h1>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <input\n            type=\"file\"\n            accept=\".json\"\n            onChange={handleImportAgent}\n            className=\"hidden\"\n            id=\"import-agent\"\n          />\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => document.getElementById('import-agent')?.click()}\n            className=\"text-gray-300 border-gray-600 hover:bg-gray-800\"\n          >\n            <Upload className=\"w-4 h-4 mr-2\" />\n            Import\n          </Button>\n          <Button\n            size=\"sm\"\n            onClick={() => setCreateDialogOpen(true)}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Agent\n          </Button>\n        </div>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"flex items-center gap-4 p-6 border-b border-gray-800\">\n        <div className=\"flex-1 relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n          <Input\n            placeholder=\"Search agents...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 bg-gray-900 border-gray-700 text-white\"\n          />\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Filter className=\"w-4 h-4 text-gray-400\" />\n          <select\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(e.target.value)}\n            className=\"bg-gray-900 border border-gray-700 rounded px-3 py-2 text-white text-sm\"\n          >\n            {categories.map(category => (\n              <option key={category} value={category}>\n                {category === 'all' ? 'All Categories' : category}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Agent Grid */}\n      <div className=\"flex-1 overflow-auto p-6\">\n        {filteredAgents.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-64 text-gray-400\">\n            <Bot className=\"w-12 h-12 mb-4 opacity-50\" />\n            <p className=\"text-lg mb-2\">No agents found</p>\n            <p className=\"text-sm\">Create your first custom agent to get started</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {filteredAgents.map((agent) => (\n              <AgentCard\n                key={agent.id}\n                agent={agent}\n                onEdit={() => handleEditAgent(agent)}\n                onDelete={() => handleDeleteAgent(agent)}\n                onDuplicate={() => handleDuplicateAgent(agent)}\n                onExport={() => handleExportAgent(agent)}\n                onUse={() => handleUseAgent(agent)}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Create Agent Dialog */}\n      <CreateAgentDialog\n        open={createDialogOpen}\n        onOpenChange={setCreateDialogOpen}\n        onSuccess={handleCreateAgent}\n        templates={templates}\n      />\n\n      {/* Edit Agent Dialog */}\n      {selectedAgent && (\n        <EditAgentDialog\n          open={editDialogOpen}\n          onOpenChange={setEditDialogOpen}\n          agent={selectedAgent}\n          onSuccess={handleUpdateAgent}\n        />\n      )}\n    </div>\n  );\n}\n\ninterface AgentCardProps {\n  agent: AgentConfiguration;\n  onEdit: () => void;\n  onDelete: () => void;\n  onDuplicate: () => void;\n  onExport: () => void;\n  onUse: () => void;\n}\n\nfunction AgentCard({ agent, onEdit, onDelete, onDuplicate, onExport, onUse }: AgentCardProps) {\n  return (\n    <Card className=\"bg-gray-900 border-gray-700 hover:border-gray-600 transition-colors\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"text-2xl\">{agent.icon || '🤖'}</div>\n            <div>\n              <CardTitle className=\"text-white text-lg\">{agent.name}</CardTitle>\n              <CardDescription className=\"text-gray-400 text-sm\">\n                {agent.description}\n              </CardDescription>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-3\">\n          {/* Tags */}\n          {agent.tags && agent.tags.length > 0 && (\n            <div className=\"flex flex-wrap gap-1\">\n              {agent.tags.map((tag) => (\n                <Badge key={tag} variant=\"secondary\" className=\"text-xs bg-gray-800 text-gray-300\">\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n          )}\n\n          {/* Stats */}\n          <div className=\"flex items-center gap-4 text-xs text-gray-400\">\n            <span>{agent.selectedTools.length} tools</span>\n            <span>{agent.enabledMCPServers.length} MCP servers</span>\n            <span>{agent.defaultProvider}</span>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex items-center gap-2\">\n            <Button\n              size=\"sm\"\n              onClick={onUse}\n              className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n            >\n              <Play className=\"w-3 h-3 mr-1\" />\n              Use\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onEdit}\n              className=\"border-gray-600 hover:bg-gray-800\"\n            >\n              <Edit3 className=\"w-3 h-3\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onDuplicate}\n              className=\"border-gray-600 hover:bg-gray-800\"\n            >\n              <Copy className=\"w-3 h-3\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onExport}\n              className=\"border-gray-600 hover:bg-gray-800\"\n            >\n              <Download className=\"w-3 h-3\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onDelete}\n              className=\"border-red-600 text-red-400 hover:bg-red-900/20\"\n            >\n              <Trash2 className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\BottomInputArea.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1006,1009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1006,1009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1038,1041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1038,1041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1073,1076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1073,1076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.","line":43,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":43,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedProvider' is assigned a value but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'selectedProvider' is assigned a value but never used. Allowed unused args must match /^_/u.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport {\r\n  Paperclip,\r\n  Camera,\r\n  Database,\r\n  Wrench,\r\n  ChevronDown,\r\n  Plus,\r\n  Send,\r\n  Square\r\n} from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface BottomInputAreaProps {\r\n  className?: string;\r\n  value?: string;\r\n  onChange?: (value: string) => void;\r\n  onSend?: (message: string) => void;\r\n  onStop?: () => void;\r\n  onFileUpload?: (files: FileList) => void;\r\n  onScreenshot?: () => void;\r\n  selectedModel?: string;\r\n  onModelChange?: (model: string) => void;\r\n  availableModels?: string[];\r\n  selectedProvider?: string;\r\n  isLoading?: boolean;\r\n  toolsEnabled?: boolean;\r\n  onToggleTools?: (enabled: boolean) => void;\r\n  mcpEnabled?: boolean;\r\n  onToggleMCP?: (enabled: boolean) => void;\r\n  knowledgeBaseEnabled?: boolean;\r\n  onToggleKnowledgeBase?: (enabled: boolean) => void;\r\n  onStartNewChat?: () => void;\r\n  selectedAgent?: any;\r\n  onAgentChange?: (agent: any) => void;\r\n  availableAgents?: any[];\r\n}\r\n\r\nexport function BottomInputArea({\r\n  className,\r\n  value = '',\r\n  onChange,\r\n  onSend,\r\n  onStop,\r\n  onFileUpload,\r\n  onScreenshot,\r\n  selectedModel = 'gemma3:gpu',\r\n  onModelChange,\r\n  availableModels = [],\r\n  selectedProvider = 'ollama',\r\n  isLoading = false,\r\n  toolsEnabled = false,\r\n  onToggleTools,\r\n  mcpEnabled = false,\r\n  onToggleMCP,\r\n  knowledgeBaseEnabled = false,\r\n  onToggleKnowledgeBase,\r\n  onStartNewChat,\r\n  selectedAgent,\r\n  onAgentChange,\r\n  availableAgents = []\r\n}: BottomInputAreaProps) {\r\n  \r\n  const [inputValue, setInputValue] = useState(value);\r\n  const [isFocused, setIsFocused] = useState(false);\r\n  const [showModelDropdown, setShowModelDropdown] = useState(false);\r\n  const [showAgentDropdown, setShowAgentDropdown] = useState(false);\r\n  const [modelSearchQuery, setModelSearchQuery] = useState('');\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  const modelSearchRef = useRef<HTMLInputElement>(null);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Sync local input value with prop value (for prompt selection)\r\n  useEffect(() => {\r\n    if (value !== undefined && value !== inputValue) {\r\n      setInputValue(value);\r\n      // Reset textarea height when value changes externally\r\n      if (textareaRef.current) {\r\n        textareaRef.current.style.height = '30px';\r\n      }\r\n    }\r\n  }, [value, inputValue]);\r\n\r\n  // Reset textarea height when input is cleared\r\n  useEffect(() => {\r\n    if (!inputValue && textareaRef.current) {\r\n      textareaRef.current.style.height = '30px';\r\n    }\r\n  }, [inputValue]);\r\n\r\n  // Simple fuzzy search function\r\n  const fuzzySearch = (query: string, text: string): number => {\r\n    if (!query) return 1; // No query means perfect match\r\n\r\n    const queryLower = query.toLowerCase();\r\n    const textLower = text.toLowerCase();\r\n\r\n    // Exact match gets highest score\r\n    if (textLower.includes(queryLower)) {\r\n      return 1;\r\n    }\r\n\r\n    // Character-by-character fuzzy matching\r\n    let queryIndex = 0;\r\n    let score = 0;\r\n\r\n    for (let i = 0; i < textLower.length && queryIndex < queryLower.length; i++) {\r\n      if (textLower[i] === queryLower[queryIndex]) {\r\n        score++;\r\n        queryIndex++;\r\n      }\r\n    }\r\n\r\n    // Return score as percentage of query characters found\r\n    return queryIndex === queryLower.length ? score / queryLower.length : 0;\r\n  };\r\n\r\n  // Filter and sort models based on search query\r\n  const filteredModels = availableModels\r\n    .map(model => ({\r\n      model,\r\n      score: fuzzySearch(modelSearchQuery, model)\r\n    }))\r\n    .filter(item => item.score > 0)\r\n    .sort((a, b) => b.score - a.score)\r\n    .map(item => item.model);\r\n\r\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = event.target.files;\r\n    if (files && files.length > 0) {\r\n      onFileUpload?.(files);\r\n    }\r\n  };\r\n\r\n  // Add global \"/\" key listener to focus textarea\r\n  useEffect(() => {\r\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\r\n      // Only focus if no input/textarea is currently focused and the key is \"/\"\r\n      if (event.key === '/' &&\r\n          document.activeElement?.tagName !== 'INPUT' &&\r\n          document.activeElement?.tagName !== 'TEXTAREA' &&\r\n          !event.ctrlKey && !event.metaKey && !event.altKey) {\r\n        event.preventDefault();\r\n        textareaRef.current?.focus();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleGlobalKeyDown);\r\n    return () => document.removeEventListener('keydown', handleGlobalKeyDown);\r\n  }, []);\r\n\r\n  // Focus search input when dropdown opens - simplified\r\n  useEffect(() => {\r\n    if (showModelDropdown && modelSearchRef.current) {\r\n      modelSearchRef.current.focus();\r\n    }\r\n  }, [showModelDropdown]);\r\n\r\n  // Handle input change\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const newValue = e.target.value;\r\n    setInputValue(newValue);\r\n    onChange?.(newValue);\r\n\r\n    // Auto-resize textarea\r\n    const textarea = e.target;\r\n    textarea.style.height = 'auto';\r\n    const scrollHeight = textarea.scrollHeight;\r\n    const minHeight = 30; // 1.25 rows\r\n    const maxHeight = 120; // 5 rows\r\n\r\n    if (scrollHeight <= maxHeight) {\r\n      textarea.style.height = Math.max(minHeight, scrollHeight) + 'px';\r\n    } else {\r\n      textarea.style.height = maxHeight + 'px';\r\n    }\r\n  };\r\n\r\n  // Handle send message\r\n  const handleSend = () => {\r\n    if (inputValue.trim() && !isLoading) {\r\n      onSend?.(inputValue.trim());\r\n      setInputValue('');\r\n      onChange?.('');\r\n    }\r\n  };\r\n\r\n  // Handle stop generation\r\n  const handleStop = () => {\r\n    if (isLoading) {\r\n      onStop?.();\r\n    }\r\n  };\r\n\r\n  // Handle key press\r\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSend();\r\n    }\r\n    \r\n    // Focus on \"/\" key press\r\n    if (e.key === '/' && !isFocused) {\r\n      e.preventDefault();\r\n      textareaRef.current?.focus();\r\n    }\r\n  };\r\n\r\n  // Handle file upload\r\n  const handleFileUpload = () => {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.multiple = true;\r\n    input.accept = 'image/*,.pdf,.txt,.doc,.docx,.xlsx,.xls,.ods,.pptx,.ppt,.csv,.json,.html,.htm,.xml,.ics,.rtf,.jpg,.png,.md,.log';\r\n    input.onchange = (e) => {\r\n      const files = (e.target as HTMLInputElement).files;\r\n      if (files) {\r\n        onFileUpload?.(files);\r\n      }\r\n    };\r\n    input.click();\r\n  };\r\n\r\n  // Auto-resize textarea - moved to input handler to avoid useEffect issues\r\n\r\n  // Focus management removed - was causing input issues\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex flex-col bg-gray-900/50 border-t border-gray-800/50\",\r\n        className\r\n      )}\r\n    >\r\n      {/* Top Row - Model Dropdown Only */}\r\n      <div className=\"flex items-center px-2 py-0.5 border-b border-gray-800/30\">\r\n        <div className=\"relative\">\r\n          {showModelDropdown && (\r\n            <div className=\"absolute bottom-full left-0 mb-1 w-80 bg-gray-800 border border-gray-700 rounded-md shadow-lg z-50 max-h-64 overflow-hidden\">\r\n              <div className=\"p-1 border-b border-gray-700\">\r\n                <Input\r\n                  placeholder=\"Search models...\"\r\n                  value={modelSearchQuery}\r\n                  onChange={(e) => setModelSearchQuery(e.target.value)}\r\n                  className=\"h-6 text-xs bg-gray-700 border-gray-600\"\r\n                  autoFocus\r\n                />\r\n              </div>\r\n              <div className=\"max-h-48 overflow-y-auto\">\r\n                {filteredModels.map((model) => (\r\n                  <div\r\n                    key={model}\r\n                    className={cn(\r\n                      \"px-2 py-1 text-xs cursor-pointer transition-colors\",\r\n                      model === selectedModel\r\n                        ? \"bg-blue-600 text-white\"\r\n                        : \"text-gray-300 hover:bg-gray-700\"\r\n                    )}\r\n                    onClick={() => {\r\n                      onModelChange?.(model);\r\n                      setShowModelDropdown(false);\r\n                      setModelSearchQuery('');\r\n                    }}\r\n                  >\r\n                    {model}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"h-5 px-1.5 text-xs text-gray-400 hover:text-white hover:bg-gray-800/50 transition-colors\"\r\n            onClick={() => {\r\n              setShowModelDropdown(!showModelDropdown);\r\n              if (!showModelDropdown) {\r\n                setModelSearchQuery(''); // Clear search when opening\r\n              }\r\n            }}\r\n            title={`Current Model: ${selectedModel}`}\r\n          >\r\n            <span className=\"text-xs mr-1\">{selectedModel}</span>\r\n            <ChevronDown className=\"w-2.5 h-2.5\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Row - Text Input with Agent and Action Buttons */}\r\n      <div className=\"flex items-center gap-1 p-2\">\r\n        {/* Text Input */}\r\n        <div className=\"flex-1 relative\">\r\n          <textarea\r\n            ref={textareaRef}\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleKeyPress}\r\n            onFocus={() => setIsFocused(true)}\r\n            onBlur={() => setIsFocused(false)}\r\n            placeholder=\"Press / to focus here and start typing...\"\r\n            className={cn(\r\n              \"w-full resize-none rounded-md border border-gray-700 bg-gray-800/50 px-2 py-1 text-sm text-white placeholder-gray-400\",\r\n              \"focus:outline-none focus:ring-1 focus:ring-blue-500/50 focus:border-blue-500/50\",\r\n              \"transition-all duration-200\"\r\n            )}\r\n            style={{\r\n              minHeight: '30px', // 1.25 rows (24px line height + 6px padding)\r\n              maxHeight: '120px', // 5 rows (24px * 5 + padding)\r\n              lineHeight: '24px'\r\n            }}\r\n            rows={1}\r\n            disabled={isLoading}\r\n          />\r\n        </div>\r\n\r\n        {/* Agent Button - Right of text input */}\r\n        <div className=\"relative\">\r\n          {showAgentDropdown && (\r\n            <div className=\"absolute bottom-full right-0 mb-1 w-64 bg-gray-800 border border-gray-700 rounded-md shadow-lg z-50 max-h-48 overflow-y-auto\">\r\n              <div className=\"p-1\">\r\n                <div\r\n                  className=\"px-2 py-1 text-xs text-gray-300 hover:bg-gray-700 rounded cursor-pointer\"\r\n                  onClick={() => {\r\n                    onAgentChange?.(null);\r\n                    setShowAgentDropdown(false);\r\n                  }}\r\n                >\r\n                  No Agent\r\n                </div>\r\n                {availableAgents.map((agent) => (\r\n                  <div\r\n                    key={agent.id}\r\n                    className=\"px-2 py-1 text-xs text-gray-300 hover:bg-gray-700 rounded cursor-pointer flex items-center gap-1\"\r\n                    onClick={() => {\r\n                      onAgentChange?.(agent);\r\n                      setShowAgentDropdown(false);\r\n                    }}\r\n                  >\r\n                    <span>{agent.icon || '🤖'}</span>\r\n                    <span>{agent.name}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"h-7 px-1.5 text-xs text-gray-400 hover:text-white hover:bg-gray-800/50 transition-colors\"\r\n            onClick={() => setShowAgentDropdown(!showAgentDropdown)}\r\n            title={selectedAgent ? `Current Agent: ${selectedAgent.name}` : 'No Agent Selected'}\r\n          >\r\n            <span className=\"text-xs mr-1\">\r\n              {selectedAgent ? `${selectedAgent.icon || '🤖'} ${selectedAgent.name}` : 'No Agent'}\r\n            </span>\r\n            <ChevronDown className=\"w-2.5 h-2.5\" />\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Right side - All action buttons */}\r\n        <div className=\"flex items-center gap-0.5\">\r\n          {/* Tool Calling Toggle */}\r\n          <Button\r\n            variant={(toolsEnabled && mcpEnabled) ? \"default\" : \"ghost\"}\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              const newState = !(toolsEnabled && mcpEnabled);\r\n              onToggleTools?.(newState);\r\n              onToggleMCP?.(newState);\r\n            }}\r\n            className={cn(\r\n              \"h-7 w-7 p-0 transition-colors\",\r\n              (toolsEnabled && mcpEnabled)\r\n                ? \"bg-blue-600 text-white hover:bg-blue-700\"\r\n                : \"text-gray-400 hover:text-white hover:bg-gray-800/50\"\r\n            )}\r\n            title={(toolsEnabled && mcpEnabled) ? \"Disable Tool Calling\" : \"Enable Tool Calling\"}\r\n          >\r\n            <Wrench style={{ width: '16px', height: '16px', color: 'inherit', minWidth: '16px', minHeight: '16px' }} />\r\n          </Button>\r\n\r\n          {/* Knowledge Base Toggle */}\r\n          <Button\r\n            variant={knowledgeBaseEnabled ? \"default\" : \"ghost\"}\r\n            size=\"sm\"\r\n            onClick={() => onToggleKnowledgeBase?.(!knowledgeBaseEnabled)}\r\n            className={cn(\r\n              \"h-7 w-7 p-0 transition-colors\",\r\n              knowledgeBaseEnabled\r\n                ? \"bg-purple-600 text-white hover:bg-purple-700\"\r\n                : \"text-gray-400 hover:text-white hover:bg-gray-800/50\"\r\n            )}\r\n            title={knowledgeBaseEnabled ? \"Disable Knowledge Base\" : \"Enable Knowledge Base\"}\r\n          >\r\n            <Database style={{ width: '16px', height: '16px', color: 'inherit', minWidth: '16px', minHeight: '16px' }} />\r\n          </Button>\r\n\r\n          {/* Screenshot Button */}\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={onScreenshot}\r\n            className=\"h-7 w-7 p-0 text-gray-400 hover:text-white hover:bg-gray-800/50 transition-colors\"\r\n            title=\"Take Screenshot\"\r\n          >\r\n            <Camera style={{ width: '16px', height: '16px', color: 'inherit', minWidth: '16px', minHeight: '16px' }} />\r\n          </Button>\r\n\r\n          {/* File Upload Button */}\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={handleFileUpload}\r\n            className=\"h-7 w-7 p-0 text-gray-400 hover:text-white hover:bg-gray-800/50 transition-colors\"\r\n            title=\"Add Attachment\"\r\n          >\r\n            <Paperclip style={{ width: '16px', height: '16px', color: 'inherit', minWidth: '16px', minHeight: '16px' }} />\r\n          </Button>\r\n\r\n          {/* New Chat Button */}\r\n          <Button\r\n            onClick={() => onStartNewChat?.()}\r\n            className={cn(\r\n              \"h-7 w-7 rounded-md flex-shrink-0 transition-all duration-200\",\r\n              \"bg-green-600 hover:bg-green-700 text-white\"\r\n            )}\r\n            title=\"Start New Chat\"\r\n          >\r\n            <Plus style={{ width: '16px', height: '16px', color: 'white', minWidth: '16px', minHeight: '16px' }} />\r\n          </Button>\r\n\r\n          {/* Send/Stop Button */}\r\n          <Button\r\n            onClick={isLoading ? handleStop : handleSend}\r\n            disabled={!isLoading && !inputValue.trim()}\r\n            className={cn(\r\n              \"h-7 w-7 rounded-md flex-shrink-0 transition-all duration-200\",\r\n              isLoading\r\n                ? \"bg-red-600 hover:bg-red-700 text-white shadow-lg shadow-red-500/25\"\r\n                : inputValue.trim()\r\n                ? \"bg-blue-600 hover:bg-blue-700 text-white\"\r\n                : \"bg-gray-700 text-gray-400 cursor-not-allowed\"\r\n            )}\r\n            title={isLoading ? \"Stop Generation\" : \"Send Message\"}\r\n          >\r\n            {isLoading ? (\r\n              <Square style={{ width: '16px', height: '16px', color: 'white', minWidth: '16px', minHeight: '16px' }} />\r\n            ) : (\r\n              <Send style={{ width: '16px', height: '16px', color: 'white', minWidth: '16px', minHeight: '16px' }} />\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* File input for uploads */}\r\n      <input\r\n        ref={fileInputRef}\r\n        type=\"file\"\r\n        multiple\r\n        accept=\".txt,.md,.pdf,.doc,.docx,.csv,.json,.xml,.html,.js,.ts,.py,.java,.cpp,.c,.h,.css,.scss,.less,.yaml,.yml,.toml,.ini,.cfg,.conf,.log,.sql,.sh,.bat,.ps1,.rb,.php,.go,.rs,.swift,.kt,.scala,.clj,.hs,.elm,.ex,.exs,.erl,.pl,.r,.m,.mm,.f,.f90,.f95,.pas,.ada,.cob,.cobol,.asm,.s,.vb,.vbs,.ps,.psm1,.psd1,.lua,.tcl,.awk,.sed,.vim,.emacs,.org,.tex,.bib,.rtf,.odt,.ods,.odp,.pages,.numbers,.key,.epub,.mobi,.azw,.azw3,.fb2,.lit,.pdb,.prc,.oxps,.xps,.cbr,.cbz,.cb7,.cbt,.cba\"\r\n        onChange={handleFileChange}\r\n        className=\"hidden\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\ChatHistoryPanel.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1231,1290],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1359,1412],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3026,3076],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3107,3154],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3487,3527],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":104,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":104,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3562,3616],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { X, MessageSquare, Clock, Search, Trash2 } from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { conversationHistoryService, type Conversation } from '../../services/conversationHistoryService';\r\nimport { cn } from '@/lib/utils';\r\n\r\n// Use the existing Conversation type from the service\r\n\r\ninterface ChatHistoryPanelProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSelectChat?: (chatId: string) => void;\r\n  className?: string;\r\n}\r\n\r\nexport function ChatHistoryPanel({ \r\n  isOpen, \r\n  onClose, \r\n  onSelectChat,\r\n  className \r\n}: ChatHistoryPanelProps) {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [chatHistory, setChatHistory] = useState<Conversation[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Load chat history when panel opens\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      loadChatHistory();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const loadChatHistory = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Load real conversation history from the service\r\n      const conversations = await conversationHistoryService.getAllConversations();\r\n      console.log('Loaded conversations:', conversations.length);\r\n      setChatHistory(conversations);\r\n    } catch (error) {\r\n      console.error('Failed to load chat history:', error);\r\n      setChatHistory([]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const filteredHistory = chatHistory.filter(chat => {\r\n    const lastMessage = chat.messages.length > 0 ? chat.messages[chat.messages.length - 1].content : '';\r\n    const messageText = typeof lastMessage === 'string' ? lastMessage :\r\n      Array.isArray(lastMessage) ? lastMessage.map(item => item.type === 'text' ? item.text : '').join(' ') : '';\r\n    return chat.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n           messageText.toLowerCase().includes(searchQuery.toLowerCase());\r\n  });\r\n\r\n  const formatTimestamp = (timestamp: Date) => {\r\n    const now = new Date();\r\n    const diffMs = now.getTime() - timestamp.getTime();\r\n    const diffMins = Math.floor(diffMs / (1000 * 60));\r\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\r\n\r\n    if (diffMins < 60) {\r\n      return `${diffMins}m ago`;\r\n    } else if (diffHours < 24) {\r\n      return `${diffHours}h ago`;\r\n    } else if (diffDays < 7) {\r\n      return `${diffDays}d ago`;\r\n    } else {\r\n      return timestamp.toLocaleDateString();\r\n    }\r\n  };\r\n\r\n  const handleChatSelect = (chatId: string) => {\r\n    onSelectChat?.(chatId);\r\n    onClose();\r\n  };\r\n\r\n  const handleDeleteChat = async (chatId: string, event: React.MouseEvent) => {\r\n    // Prevent the chat selection when clicking delete\r\n    event.stopPropagation();\r\n\r\n    try {\r\n      await conversationHistoryService.deleteConversation(chatId);\r\n      // Reload the chat history\r\n      await loadChatHistory();\r\n      console.log('Chat deleted successfully:', chatId);\r\n    } catch (error) {\r\n      console.error('Failed to delete chat:', error);\r\n    }\r\n  };\r\n\r\n  const handleClearAllHistory = async () => {\r\n    if (confirm('Are you sure you want to clear all chat history? This cannot be undone.')) {\r\n      try {\r\n        await conversationHistoryService.clearAllHistory();\r\n        // Reload the chat history (should be empty now)\r\n        await loadChatHistory();\r\n        console.log('All chat history cleared');\r\n      } catch (error) {\r\n        console.error('Failed to clear chat history:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"fixed top-0 right-0 h-full w-96 bg-gray-900/95 border-l border-gray-700/50 shadow-2xl transform transition-transform duration-300 ease-in-out z-40 flex flex-col\",\r\n        isOpen ? \"translate-x-0\" : \"translate-x-full\",\r\n        className\r\n      )}\r\n    >\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between p-2 border-b border-gray-700/50 flex-shrink-0\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <MessageSquare style={{ width: '16px', height: '16px' }} className=\"text-blue-400\" />\r\n          <h2 className=\"text-sm font-semibold text-white\">Chat History</h2>\r\n        </div>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={onClose}\r\n          className=\"h-6 w-6 p-0 text-gray-400 hover:text-white hover:bg-gray-800/50\"\r\n          title=\"Close History\"\r\n        >\r\n          <X style={{ width: '16px', height: '16px' }} />\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Search */}\r\n      <div className=\"p-2 border-b border-gray-700/50\">\r\n        <div className=\"relative\">\r\n          <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2\" style={{ width: '16px', height: '16px' }} />\r\n          <Input\r\n            placeholder=\"Search conversations...\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            className=\"pl-8 h-7 text-xs bg-gray-800/50 border-gray-700/50 text-white placeholder-gray-400\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chat List */}\r\n      <div className=\"flex-1 overflow-y-auto\">\r\n        {isLoading ? (\r\n          <div className=\"flex items-center justify-center p-4\">\r\n            <div className=\"text-gray-400 text-xs\">Loading chat history...</div>\r\n          </div>\r\n        ) : filteredHistory.length === 0 ? (\r\n          <div className=\"flex flex-col items-center justify-center p-4 text-center\">\r\n            <MessageSquare style={{ width: '16px', height: '16px' }} className=\"text-gray-600 mb-1\" />\r\n            <div className=\"text-gray-400 mb-1 text-xs\">\r\n              {searchQuery ? 'No matching conversations' : 'No chat history yet'}\r\n            </div>\r\n            <div className=\"text-xs text-gray-500\">\r\n              {searchQuery ? 'Try a different search term' : 'Start a conversation to see it here'}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"p-1\">\r\n            {filteredHistory.map((chat) => (\r\n              <div\r\n                key={chat.id}\r\n                onClick={() => handleChatSelect(chat.id)}\r\n                className=\"p-2 rounded-lg cursor-pointer transition-colors hover:bg-gray-800/50 mb-1\"\r\n              >\r\n                <div className=\"flex items-start justify-between mb-1\">\r\n                  <h3 className=\"text-white font-medium text-xs truncate flex-1 mr-1\">\r\n                    {chat.title}\r\n                  </h3>\r\n                  <div className=\"flex items-center gap-1 flex-shrink-0\">\r\n                    <div className=\"flex items-center gap-0.5 text-xs text-gray-400\">\r\n                      <Clock style={{ width: '12px', height: '12px' }} />\r\n                      {formatTimestamp(chat.updatedAt)}\r\n                    </div>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={(e) => handleDeleteChat(chat.id, e)}\r\n                      className=\"h-5 w-5 p-0 text-gray-400 hover:text-red-400 hover:bg-red-500/10\"\r\n                      title=\"Delete conversation\"\r\n                    >\r\n                      <Trash2 style={{ width: '12px', height: '12px' }} />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n                <p className=\"text-gray-400 text-xs mb-1 line-clamp-2\">\r\n                  {chat.messages.length > 0 ? (() => {\r\n                    const content = chat.messages[chat.messages.length - 1].content;\r\n                    const text = typeof content === 'string' ? content :\r\n                      Array.isArray(content) ? content.map(item => item.type === 'text' ? item.text : '').join(' ') : '';\r\n                    return text.substring(0, 100) + '...';\r\n                  })() : 'No messages'}\r\n                </p>\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-xs text-gray-500\">\r\n                    {chat.messages.length} messages\r\n                  </span>\r\n                  <div className=\"w-2 h-2 rounded-full bg-blue-500 opacity-60\" />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      <div className=\"p-2 border-t border-gray-700/50 flex-shrink-0\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"w-full text-gray-400 border-gray-700/50 hover:text-white hover:bg-gray-800/50\"\r\n          onClick={handleClearAllHistory}\r\n        >\r\n          Clear History\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\CreateAgentDialog.tsx","messages":[{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":45,"column":19,"nodeType":"Literal","endLine":45,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1971,1974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1971,1974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, open]","fix":{"range":[2312,2318],"text":"[loadData, open]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2759,2804],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3302,3371],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3556,3631],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3821,3894],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4143,4215],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":197,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6389,6446],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6544,6595],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8196,8244],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":278,"column":53,"nodeType":"Literal","endLine":278,"endColumn":92}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  Bot,\n  CheckCircle,\n  Loader2,\n  Sparkles\n} from 'lucide-react';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Label } from '../ui/label';\nimport { Textarea } from '../ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { cn } from '@/lib/utils';\nimport { AgentTemplate, AgentTool, CreateAgentRequest } from '../../types/agent';\nimport { agentService } from '../../services/agentService';\nimport { llmService } from '../../services/llmService';\nimport { chatService } from '../../services/chatService';\nimport { secureApiKeyService } from '../../services/secureApiKeyService';\n\ninterface CreateAgentDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSuccess: () => void;\n  templates: AgentTemplate[];\n}\n\nexport function CreateAgentDialog({\n  open,\n  onOpenChange,\n  onSuccess,\n  templates\n}: CreateAgentDialogProps) {\n  const [step, setStep] = useState<'template' | 'configure' | 'tools' | 'prompt' | 'review'>('template');\n  const [selectedTemplate, setSelectedTemplate] = useState<AgentTemplate | null>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    icon: '🤖',\n    userDescription: '',\n    defaultProvider: 'anthropic',\n    defaultModel: 'claude-3-sonnet-20240229',\n    temperature: 0.7,\n    maxTokens: 4000,\n    tags: [] as string[]\n  });\n  const [availableTools, setAvailableTools] = useState<AgentTool[]>([]);\n  const [selectedTools, setSelectedTools] = useState<string[]>([]);\n  const [generatedPrompt, setGeneratedPrompt] = useState('');\n  const [isGeneratingPrompt, setIsGeneratingPrompt] = useState(false);\n  const [isCreating, setIsCreating] = useState(false);\n  const [providers, setProviders] = useState<any[]>([]);\n  const [availableModels, setAvailableModels] = useState<string[]>([]);\n  const [loadingModels, setLoadingModels] = useState(false);\n  const [expandedTools, setExpandedTools] = useState<Set<string>>(new Set());\n\n  // Load data when dialog opens\n  useEffect(() => {\n    if (open) {\n      loadData();\n      resetForm();\n    }\n  }, [open]);\n\n  const loadData = async () => {\n    try {\n      const [tools, providersData] = await Promise.all([\n        agentService.getAvailableTools(),\n        llmService.getProviders()\n      ]);\n      setAvailableTools(tools);\n      setProviders(providersData);\n\n      // Load models for the default provider\n      if (formData.defaultProvider) {\n        await loadModelsForProvider(formData.defaultProvider);\n      }\n    } catch (error) {\n      console.error('Failed to load data:', error);\n    }\n  };\n\n  // Load models for a specific provider\n  const loadModelsForProvider = async (providerId: string) => {\n    try {\n      setLoadingModels(true);\n      setAvailableModels([]);\n\n      // Get API key and base URL from secure storage\n      let apiKey = '';\n      let baseUrl = '';\n\n      try {\n        const apiKeyData = secureApiKeyService?.getApiKeyData(providerId);\n        apiKey = apiKeyData?.apiKey || '';\n        baseUrl = apiKeyData?.baseUrl || '';\n      } catch (error) {\n        console.warn(`Failed to get API key data for ${providerId}:`, error);\n      }\n\n      // Skip model loading for remote providers without API keys\n      if (!apiKey && providerId !== 'ollama' && providerId !== 'lmstudio' && providerId !== 'n8n') {\n        console.warn(`No API key found for ${providerId}, skipping model loading`);\n        setAvailableModels([]);\n        return;\n      }\n\n      // Fetch models using the chat service\n      const models = await chatService.fetchModels(providerId, apiKey, baseUrl);\n      console.log(`Loaded ${models.length} models for ${providerId}:`, models);\n\n      setAvailableModels(models);\n\n      // Auto-select first model if none selected\n      if (models.length > 0 && !formData.defaultModel) {\n        setFormData(prev => ({ ...prev, defaultModel: models[0] }));\n      }\n    } catch (error) {\n      console.error('Failed to load models for provider:', providerId, error);\n      setAvailableModels([]);\n    } finally {\n      setLoadingModels(false);\n    }\n  };\n\n  const resetForm = () => {\n    setStep('template');\n    setSelectedTemplate(null);\n    setFormData({\n      name: '',\n      description: '',\n      icon: '🤖',\n      userDescription: '',\n      defaultProvider: 'anthropic',\n      defaultModel: 'claude-3-sonnet-20240229',\n      temperature: 0.7,\n      maxTokens: 4000,\n      tags: []\n    });\n    setSelectedTools([]);\n    setGeneratedPrompt('');\n  };\n\n  const handleTemplateSelect = (template: AgentTemplate | null) => {\n    setSelectedTemplate(template);\n    if (template) {\n      setFormData(prev => ({\n        ...prev,\n        name: template.name,\n        description: template.description,\n        icon: template.icon,\n        defaultProvider: template.defaultProvider || 'anthropic',\n        defaultModel: template.defaultModel || 'claude-3-sonnet-20240229',\n        temperature: template.temperature || 0.7,\n        maxTokens: template.maxTokens || 4000,\n        tags: [template.category]\n      }));\n      setSelectedTools(template.suggestedTools);\n    }\n    setStep('configure');\n  };\n\n  const handleGeneratePrompt = async () => {\n    if (!formData.userDescription.trim()) {\n      alert('Please provide a description of what you want the agent to do.');\n      return;\n    }\n\n    if (!formData.defaultModel.trim()) {\n      alert('Please select or enter a model for prompt generation.');\n      return;\n    }\n\n    setIsGeneratingPrompt(true);\n    try {\n      const selectedToolObjects = availableTools.filter(tool =>\n        selectedTools.includes(tool.name)\n      );\n\n      const response = await agentService.generatePrompt({\n        userDescription: formData.userDescription,\n        selectedTools: selectedToolObjects,\n        agentName: formData.name,\n        agentDescription: formData.description,\n        provider: formData.defaultProvider,\n        model: formData.defaultModel\n      });\n\n      if (response.success && response.generatedPrompt) {\n        setGeneratedPrompt(response.generatedPrompt);\n        setStep('review');\n      } else {\n        const errorMessage = response.error || 'Unknown error occurred';\n        console.error('Prompt generation failed:', errorMessage);\n        alert(`Failed to generate prompt: ${errorMessage}`);\n      }\n    } catch (error) {\n      console.error('Failed to generate prompt:', error);\n      alert('Failed to generate prompt. Please try again.');\n    } finally {\n      setIsGeneratingPrompt(false);\n    }\n  };\n\n  // Handle provider change\n  const handleProviderChange = async (providerId: string) => {\n    setFormData(prev => ({ ...prev, defaultProvider: providerId, defaultModel: '' }));\n    await loadModelsForProvider(providerId);\n  };\n\n  // Toggle tool description expansion\n  const toggleToolExpansion = (toolName: string) => {\n    setExpandedTools(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(toolName)) {\n        newSet.delete(toolName);\n      } else {\n        newSet.add(toolName);\n      }\n      return newSet;\n    });\n  };\n\n\n\n  const handleCreateAgent = async () => {\n    setIsCreating(true);\n    try {\n      const request: CreateAgentRequest = {\n        name: formData.name,\n        description: formData.description,\n        icon: formData.icon,\n        userDescription: formData.userDescription,\n        selectedTools,\n        enabledMCPServers: [], // Empty for now - tools are unified\n        defaultProvider: formData.defaultProvider,\n        defaultModel: formData.defaultModel,\n        temperature: formData.temperature,\n        maxTokens: formData.maxTokens,\n        tags: formData.tags\n      };\n\n      const agentId = await agentService.createAgent(request);\n      \n      // Update with generated prompt if available\n      if (generatedPrompt) {\n        await agentService.updateAgent({\n          id: agentId,\n          systemPrompt: generatedPrompt\n        });\n      }\n\n      onSuccess();\n      onOpenChange(false);\n    } catch (error) {\n      console.error('Failed to create agent:', error);\n      alert('Failed to create agent. Please try again.');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const renderTemplateStep = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-lg font-semibold mb-2\">Choose a Template</h3>\n        <p className=\"text-gray-400 text-sm\">Start with a template or create from scratch</p>\n      </div>\n\n      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3\">\n        {/* Custom Agent Option */}\n        <Card\n          className={cn(\n            \"cursor-pointer border-2 transition-colors bg-gray-900\",\n            !selectedTemplate ? \"border-blue-500\" : \"border-gray-700 hover:border-gray-600\"\n          )}\n          onClick={() => handleTemplateSelect(null)}\n        >\n          <CardHeader className=\"text-center p-4\">\n            <div className=\"text-2xl mb-1\">⚡</div>\n            <CardTitle className=\"text-white text-sm\">Custom Agent</CardTitle>\n            <CardDescription className=\"text-xs\">Create from scratch</CardDescription>\n          </CardHeader>\n        </Card>\n\n        {/* Template Options */}\n        {templates.map((template) => (\n          <Card\n            key={template.id}\n            className={cn(\n              \"cursor-pointer border-2 transition-colors bg-gray-900\",\n              selectedTemplate?.id === template.id ? \"border-blue-500\" : \"border-gray-700 hover:border-gray-600\"\n            )}\n            onClick={() => handleTemplateSelect(template)}\n          >\n            <CardHeader className=\"text-center p-4\">\n              <div className=\"text-2xl mb-1\">{template.icon}</div>\n              <CardTitle className=\"text-white text-sm\">{template.name}</CardTitle>\n              <CardDescription className=\"text-xs line-clamp-2\">{template.description}</CardDescription>\n              <Badge variant=\"secondary\" className=\"w-fit mx-auto mt-1 text-xs\">\n                {template.category}\n              </Badge>\n            </CardHeader>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderConfigureStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"name\">Agent Name</Label>\n          <Input\n            id=\"name\"\n            value={formData.name}\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n            placeholder=\"My Custom Agent\"\n            className=\"bg-gray-900 border-gray-700\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"icon\">Icon (Emoji)</Label>\n          <Input\n            id=\"icon\"\n            value={formData.icon}\n            onChange={(e) => setFormData(prev => ({ ...prev, icon: e.target.value }))}\n            placeholder=\"🤖\"\n            className=\"bg-gray-900 border-gray-700\"\n          />\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"description\">Description</Label>\n        <Input\n          id=\"description\"\n          value={formData.description}\n          onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n          placeholder=\"Brief description of what this agent does\"\n          className=\"bg-gray-900 border-gray-700\"\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"userDescription\">Agent Purpose</Label>\n        <Textarea\n          id=\"userDescription\"\n          value={formData.userDescription}\n          onChange={(e) => setFormData(prev => ({ ...prev, userDescription: e.target.value }))}\n          placeholder=\"Describe in detail what you want this agent to do and how it should behave...\"\n          className=\"bg-gray-900 border-gray-700 min-h-[100px]\"\n        />\n        <p className=\"text-xs text-gray-400\">\n          This description will be used to generate a specialized system prompt for your agent.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"provider\">Default Provider</Label>\n          <select\n            id=\"provider\"\n            value={formData.defaultProvider}\n            onChange={(e) => handleProviderChange(e.target.value)}\n            className=\"w-full bg-gray-900 border border-gray-700 rounded px-3 py-2 text-white\"\n          >\n            {providers.map(provider => (\n              <option key={provider.id} value={provider.id}>\n                {provider.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"model\">Default Model</Label>\n          {loadingModels ? (\n            <div className=\"flex items-center gap-2 px-3 py-2 bg-gray-900 border border-gray-700 rounded\">\n              <Loader2 className=\"w-4 h-4 animate-spin\" />\n              <span className=\"text-gray-400\">Loading models...</span>\n            </div>\n          ) : availableModels.length > 0 ? (\n            <select\n              id=\"model\"\n              value={formData.defaultModel}\n              onChange={(e) => setFormData(prev => ({ ...prev, defaultModel: e.target.value }))}\n              className=\"w-full bg-gray-900 border border-gray-700 rounded px-3 py-2 text-white\"\n            >\n              <option value=\"\">Select a model</option>\n              {availableModels.map(model => (\n                <option key={model} value={model}>\n                  {model}\n                </option>\n              ))}\n            </select>\n          ) : (\n            <Input\n              id=\"model\"\n              value={formData.defaultModel}\n              onChange={(e) => setFormData(prev => ({ ...prev, defaultModel: e.target.value }))}\n              placeholder=\"Enter model name manually\"\n              className=\"bg-gray-900 border-gray-700\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderToolsStep = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Select Tools</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3\">\n          {availableTools.map((tool) => (\n            <Card\n              key={tool.name}\n              className={cn(\n                \"border transition-colors bg-gray-900\",\n                selectedTools.includes(tool.name) ? \"border-blue-500 bg-blue-950/20\" : \"border-gray-700 hover:border-gray-600\"\n              )}\n            >\n              <CardContent className=\"p-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium text-white text-sm truncate flex-1\">{tool.name}</h4>\n                    {selectedTools.includes(tool.name) && (\n                      <CheckCircle className=\"w-4 h-4 text-blue-400 flex-shrink-0 ml-1\" />\n                    )}\n                  </div>\n\n                  <div className=\"flex gap-1\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedTools(prev =>\n                          prev.includes(tool.name)\n                            ? prev.filter(t => t !== tool.name)\n                            : [...prev, tool.name]\n                        );\n                      }}\n                      className={cn(\n                        \"text-xs h-6 flex-1\",\n                        selectedTools.includes(tool.name)\n                          ? \"bg-blue-600 border-blue-600 text-white hover:bg-blue-700\"\n                          : \"border-gray-600 text-gray-300 hover:bg-gray-800\"\n                      )}\n                    >\n                      {selectedTools.includes(tool.name) ? 'Selected' : 'Select'}\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => toggleToolExpansion(tool.name)}\n                      className=\"text-xs h-6 px-2 text-gray-400 hover:text-white\"\n                    >\n                      {expandedTools.has(tool.name) ? '−' : '+'}\n                    </Button>\n                  </div>\n\n                  {expandedTools.has(tool.name) && (\n                    <div className=\"space-y-1\">\n                      <p className=\"text-xs text-gray-400\">{tool.description}</p>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {tool.category}\n                      </Badge>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n\n    </div>\n  );\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto bg-gray-950 border-gray-800\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-white\">\n            <Bot className=\"w-5 h-5\" />\n            Create Custom Agent\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Progress Steps */}\n          <div className=\"flex items-center justify-center space-x-4\">\n            {['template', 'configure', 'tools', 'prompt', 'review'].map((stepName, index) => (\n              <div key={stepName} className=\"flex items-center\">\n                <div className={cn(\n                  \"w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium\",\n                  step === stepName ? \"bg-blue-600 text-white\" : \"bg-gray-700 text-gray-400\"\n                )}>\n                  {index + 1}\n                </div>\n                {index < 4 && <div className=\"w-8 h-px bg-gray-700 mx-2\" />}\n              </div>\n            ))}\n          </div>\n\n          {/* Step Content */}\n          {step === 'template' && renderTemplateStep()}\n          {step === 'configure' && renderConfigureStep()}\n          {step === 'tools' && renderToolsStep()}\n          \n          {step === 'prompt' && (\n            <div className=\"space-y-4\">\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold mb-2\">Generate System Prompt</h3>\n                <p className=\"text-gray-400 text-sm\">AI will create a specialized prompt based on your configuration</p>\n              </div>\n\n\n\n              <div className=\"flex justify-center\">\n                <Button\n                  onClick={handleGeneratePrompt}\n                  disabled={isGeneratingPrompt || !formData.userDescription.trim() || !formData.defaultModel.trim()}\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                >\n                  {isGeneratingPrompt ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Generating...\n                    </>\n                  ) : (\n                    <>\n                      <Sparkles className=\"w-4 h-4 mr-2\" />\n                      Generate Prompt\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {step === 'review' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Review & Create</h3>\n              \n              <div className=\"bg-gray-900 rounded-lg p-4 space-y-3\">\n                <div><strong>Name:</strong> {formData.name}</div>\n                <div><strong>Description:</strong> {formData.description}</div>\n                <div><strong>Tools:</strong> {selectedTools.length} selected</div>\n                <div><strong>Provider:</strong> {formData.defaultProvider}</div>\n              </div>\n\n              {generatedPrompt && (\n                <div className=\"space-y-2\">\n                  <Label>Generated System Prompt</Label>\n                  <Textarea\n                    value={generatedPrompt}\n                    onChange={(e) => setGeneratedPrompt(e.target.value)}\n                    className=\"bg-gray-900 border-gray-700 min-h-[150px]\"\n                  />\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Navigation */}\n          <div className=\"flex justify-between pt-4 border-t border-gray-800\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                if (step === 'template') {\n                  onOpenChange(false);\n                } else if (step === 'configure') {\n                  setStep('template');\n                } else if (step === 'tools') {\n                  setStep('configure');\n                } else if (step === 'prompt') {\n                  setStep('tools');\n                } else if (step === 'review') {\n                  setStep('prompt');\n                }\n              }}\n              className=\"border-gray-600 text-gray-300\"\n            >\n              {step === 'template' ? 'Cancel' : 'Back'}\n            </Button>\n\n            <Button\n              onClick={() => {\n                if (step === 'template') {\n                  // Template step requires selection\n                  return;\n                } else if (step === 'configure') {\n                  setStep('tools');\n                } else if (step === 'tools') {\n                  setStep('prompt');\n                } else if (step === 'prompt') {\n                  // Generate prompt step\n                  return;\n                } else if (step === 'review') {\n                  handleCreateAgent();\n                }\n              }}\n              disabled={\n                (step === 'template') ||\n                (step === 'configure' && (!formData.name.trim() || !formData.userDescription.trim())) ||\n                (step === 'prompt') ||\n                (step === 'review' && isCreating)\n              }\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              {step === 'review' ? (\n                isCreating ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Creating...\n                  </>\n                ) : (\n                  'Create Agent'\n                )\n              ) : (\n                'Next'\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\EditAgentDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1737,1740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1737,1740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1998,2001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1998,2001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2202,2205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2202,2205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadData' and 'populateForm'. Either include them or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [open, agent, loadData, populateForm]","fix":{"range":[2344,2357],"text":"[open, agent, loadData, populateForm]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3012,3057],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3555,3624],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3809,3884],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4074,4147],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4211,4283],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6010,6063],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":223,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":223,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7284,7332],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  Bot,\n  Save,\n  CheckCircle,\n  Loader2,\n  Sparkles,\n  AlertTriangle\n} from 'lucide-react';\nimport { Button } from '../ui/button';\nimport { Input } from '../ui/input';\nimport { Label } from '../ui/label';\nimport { Textarea } from '../ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';\nimport { Card, CardContent } from '../ui/card';\nimport { Badge } from '../ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\nimport { cn } from '@/lib/utils';\nimport { AgentConfiguration, AgentTool, UpdateAgentRequest } from '../../types/agent';\nimport { agentService } from '../../services/agentService';\nimport { mcpService } from '../../services/mcpService';\nimport { llmService } from '../../services/llmService';\nimport { chatService } from '../../services/chatService';\nimport { secureApiKeyService } from '../../services/secureApiKeyService';\n\ninterface EditAgentDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  agent: AgentConfiguration;\n  onSuccess: () => void;\n}\n\nexport function EditAgentDialog({\n  open,\n  onOpenChange,\n  agent,\n  onSuccess\n}: EditAgentDialogProps) {\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    icon: '🤖',\n    userDescription: '',\n    systemPrompt: '',\n    defaultProvider: 'anthropic',\n    defaultModel: 'claude-3-sonnet-20240229',\n    temperature: 0.7,\n    maxTokens: 4000,\n    tags: [] as string[]\n  });\n  const [availableTools, setAvailableTools] = useState<AgentTool[]>([]);\n  const [selectedTools, setSelectedTools] = useState<string[]>([]);\n  const [availableMCPServers, setAvailableMCPServers] = useState<any[]>([]);\n  const [selectedMCPServers, setSelectedMCPServers] = useState<string[]>([]);\n  const [isRegeneratingPrompt, setIsRegeneratingPrompt] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [providers, setProviders] = useState<any[]>([]);\n  const [availableModels, setAvailableModels] = useState<string[]>([]);\n  const [loadingModels, setLoadingModels] = useState(false);\n  const [validationResult, setValidationResult] = useState<any>(null);\n\n  // Load data when dialog opens\n  useEffect(() => {\n    if (open && agent) {\n      loadData();\n      populateForm();\n    }\n  }, [open, agent]);\n\n  const loadData = async () => {\n    try {\n      const [tools, mcpServers, providersData] = await Promise.all([\n        agentService.getAvailableTools(),\n        mcpService.getServers(),\n        llmService.getProviders()\n      ]);\n      setAvailableTools(tools);\n      setAvailableMCPServers(mcpServers);\n      setProviders(providersData);\n\n      // Validate agent\n      const validation = await agentService.validateAgent(agent.id);\n      setValidationResult(validation);\n\n      // Load models for the agent's provider\n      if (agent.defaultProvider) {\n        await loadModelsForProvider(agent.defaultProvider);\n      }\n    } catch (error) {\n      console.error('Failed to load data:', error);\n    }\n  };\n\n  // Load models for a specific provider\n  const loadModelsForProvider = async (providerId: string) => {\n    try {\n      setLoadingModels(true);\n      setAvailableModels([]);\n\n      // Get API key and base URL from secure storage\n      let apiKey = '';\n      let baseUrl = '';\n\n      try {\n        const apiKeyData = secureApiKeyService?.getApiKeyData(providerId);\n        apiKey = apiKeyData?.apiKey || '';\n        baseUrl = apiKeyData?.baseUrl || '';\n      } catch (error) {\n        console.warn(`Failed to get API key data for ${providerId}:`, error);\n      }\n\n      // Skip model loading for remote providers without API keys\n      if (!apiKey && providerId !== 'ollama' && providerId !== 'lmstudio' && providerId !== 'n8n') {\n        console.warn(`No API key found for ${providerId}, skipping model loading`);\n        setAvailableModels([]);\n        return;\n      }\n\n      // Fetch models using the chat service\n      const models = await chatService.fetchModels(providerId, apiKey, baseUrl);\n      console.log(`Loaded ${models.length} models for ${providerId}:`, models);\n\n      setAvailableModels(models);\n    } catch (error) {\n      console.error('Failed to load models for provider:', providerId, error);\n      setAvailableModels([]);\n    } finally {\n      setLoadingModels(false);\n    }\n  };\n\n  const populateForm = () => {\n    setFormData({\n      name: agent.name,\n      description: agent.description,\n      icon: agent.icon || '🤖',\n      userDescription: agent.userDescription || '',\n      systemPrompt: agent.systemPrompt,\n      defaultProvider: agent.defaultProvider,\n      defaultModel: agent.defaultModel,\n      temperature: agent.temperature || 0.7,\n      maxTokens: agent.maxTokens || 4000,\n      tags: agent.tags || []\n    });\n    setSelectedTools(agent.selectedTools.map(tool => tool.name));\n    setSelectedMCPServers([...agent.enabledMCPServers]);\n  };\n\n  const handleRegeneratePrompt = async () => {\n    if (!formData.userDescription.trim()) {\n      alert('Please provide a description to regenerate the prompt.');\n      return;\n    }\n\n    if (!formData.defaultModel.trim()) {\n      alert('Please select or enter a model for prompt generation.');\n      return;\n    }\n\n    setIsRegeneratingPrompt(true);\n    try {\n      const selectedToolObjects = availableTools.filter(tool =>\n        selectedTools.includes(tool.name)\n      );\n\n      const response = await agentService.generatePrompt({\n        userDescription: formData.userDescription,\n        selectedTools: selectedToolObjects,\n        agentName: formData.name,\n        agentDescription: formData.description,\n        provider: formData.defaultProvider,\n        model: formData.defaultModel\n      });\n\n      if (response.success && response.generatedPrompt) {\n        setFormData(prev => ({ ...prev, systemPrompt: response.generatedPrompt! }));\n      } else {\n        alert(`Failed to regenerate prompt: ${response.error}`);\n      }\n    } catch (error) {\n      console.error('Failed to regenerate prompt:', error);\n      alert('Failed to regenerate prompt. Please try again.');\n    } finally {\n      setIsRegeneratingPrompt(false);\n    }\n  };\n\n  // Handle provider change\n  const handleProviderChange = async (providerId: string) => {\n    setFormData(prev => ({ ...prev, defaultProvider: providerId, defaultModel: '' }));\n    await loadModelsForProvider(providerId);\n  };\n\n  const handleSave = async () => {\n    setIsSaving(true);\n    try {\n      const request: UpdateAgentRequest = {\n        id: agent.id,\n        name: formData.name,\n        description: formData.description,\n        icon: formData.icon,\n        userDescription: formData.userDescription,\n        systemPrompt: formData.systemPrompt,\n        selectedTools,\n        enabledMCPServers: selectedMCPServers,\n        defaultProvider: formData.defaultProvider,\n        defaultModel: formData.defaultModel,\n        temperature: formData.temperature,\n        maxTokens: formData.maxTokens,\n        tags: formData.tags\n      };\n\n      const success = await agentService.updateAgent(request);\n      if (success) {\n        onSuccess();\n        onOpenChange(false);\n      } else {\n        alert('Failed to update agent. Please try again.');\n      }\n    } catch (error) {\n      console.error('Failed to update agent:', error);\n      alert('Failed to update agent. Please try again.');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const addTag = (tag: string) => {\n    if (tag.trim() && !formData.tags.includes(tag.trim())) {\n      setFormData(prev => ({ ...prev, tags: [...prev.tags, tag.trim()] }));\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setFormData(prev => ({ \n      ...prev, \n      tags: prev.tags.filter(tag => tag !== tagToRemove) \n    }));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-auto bg-gray-950 border-gray-800\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-white\">\n            <Bot className=\"w-5 h-5\" />\n            Edit Agent: {agent.name}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Validation Warnings */}\n          {validationResult && !validationResult.isValid && (\n            <div className=\"bg-red-900/20 border border-red-700 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 text-red-400 mb-2\">\n                <AlertTriangle className=\"w-4 h-4\" />\n                <span className=\"font-medium\">Validation Issues</span>\n              </div>\n              <ul className=\"text-sm text-red-300 space-y-1\">\n                {validationResult.errors.map((error: string, index: number) => (\n                  <li key={index}>• {error}</li>\n                ))}\n                {validationResult.warnings.map((warning: string, index: number) => (\n                  <li key={index} className=\"text-yellow-300\">• {warning}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          <Tabs defaultValue=\"basic\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4 bg-gray-900\">\n              <TabsTrigger value=\"basic\" className=\"text-gray-300\">Basic Info</TabsTrigger>\n              <TabsTrigger value=\"tools\" className=\"text-gray-300\">Tools & MCP</TabsTrigger>\n              <TabsTrigger value=\"prompt\" className=\"text-gray-300\">System Prompt</TabsTrigger>\n              <TabsTrigger value=\"settings\" className=\"text-gray-300\">Settings</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"basic\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Agent Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    className=\"bg-gray-900 border-gray-700\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"icon\">Icon (Emoji)</Label>\n                  <Input\n                    id=\"icon\"\n                    value={formData.icon}\n                    onChange={(e) => setFormData(prev => ({ ...prev, icon: e.target.value }))}\n                    className=\"bg-gray-900 border-gray-700\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Input\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  className=\"bg-gray-900 border-gray-700\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"userDescription\">Agent Purpose</Label>\n                <Textarea\n                  id=\"userDescription\"\n                  value={formData.userDescription}\n                  onChange={(e) => setFormData(prev => ({ ...prev, userDescription: e.target.value }))}\n                  placeholder=\"Describe what this agent should do...\"\n                  className=\"bg-gray-900 border-gray-700 min-h-[100px]\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Tags</Label>\n                <div className=\"flex flex-wrap gap-2 mb-2\">\n                  {formData.tags.map((tag) => (\n                    <Badge \n                      key={tag} \n                      variant=\"secondary\" \n                      className=\"bg-gray-800 text-gray-300 cursor-pointer\"\n                      onClick={() => removeTag(tag)}\n                    >\n                      {tag} ×\n                    </Badge>\n                  ))}\n                </div>\n                <Input\n                  placeholder=\"Add tag and press Enter\"\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      addTag(e.currentTarget.value);\n                      e.currentTarget.value = '';\n                    }\n                  }}\n                  className=\"bg-gray-900 border-gray-700\"\n                />\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"tools\" className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4\">Available Tools</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 max-h-64 overflow-auto\">\n                  {availableTools.map((tool) => (\n                    <Card \n                      key={tool.name}\n                      className={cn(\n                        \"cursor-pointer border transition-colors bg-gray-900\",\n                        selectedTools.includes(tool.name) ? \"border-blue-500 bg-blue-950/20\" : \"border-gray-700 hover:border-gray-600\"\n                      )}\n                      onClick={() => {\n                        setSelectedTools(prev => \n                          prev.includes(tool.name) \n                            ? prev.filter(t => t !== tool.name)\n                            : [...prev, tool.name]\n                        );\n                      }}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h4 className=\"font-medium text-white\">{tool.name}</h4>\n                            <p className=\"text-sm text-gray-400 mt-1\">{tool.description}</p>\n                            <Badge variant=\"outline\" className=\"mt-2 text-xs\">\n                              {tool.category}\n                            </Badge>\n                          </div>\n                          {selectedTools.includes(tool.name) && (\n                            <CheckCircle className=\"w-5 h-5 text-blue-400\" />\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4\">MCP Servers</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 max-h-64 overflow-auto\">\n                  {availableMCPServers.map((server) => (\n                    <Card \n                      key={server.id}\n                      className={cn(\n                        \"cursor-pointer border transition-colors bg-gray-900\",\n                        selectedMCPServers.includes(server.id) ? \"border-blue-500 bg-blue-950/20\" : \"border-gray-700 hover:border-gray-600\"\n                      )}\n                      onClick={() => {\n                        setSelectedMCPServers(prev => \n                          prev.includes(server.id) \n                            ? prev.filter(s => s !== server.id)\n                            : [...prev, server.id]\n                        );\n                      }}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h4 className=\"font-medium text-white\">{server.name}</h4>\n                            <p className=\"text-sm text-gray-400 mt-1\">{server.description || 'MCP Server'}</p>\n                          </div>\n                          {selectedMCPServers.includes(server.id) && (\n                            <CheckCircle className=\"w-5 h-5 text-blue-400\" />\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"prompt\" className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label htmlFor=\"systemPrompt\">System Prompt</Label>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleRegeneratePrompt}\n                  disabled={isRegeneratingPrompt || !formData.userDescription.trim() || !formData.defaultModel.trim()}\n                  className=\"border-purple-600 text-purple-400 hover:bg-purple-900/20\"\n                >\n                  {isRegeneratingPrompt ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Regenerating...\n                    </>\n                  ) : (\n                    <>\n                      <Sparkles className=\"w-4 h-4 mr-2\" />\n                      Regenerate\n                    </>\n                  )}\n                </Button>\n              </div>\n\n\n              <Textarea\n                id=\"systemPrompt\"\n                value={formData.systemPrompt}\n                onChange={(e) => setFormData(prev => ({ ...prev, systemPrompt: e.target.value }))}\n                placeholder=\"Enter the system prompt for this agent...\"\n                className=\"bg-gray-900 border-gray-700 min-h-[300px]\"\n              />\n              <p className=\"text-xs text-gray-400\">\n                This prompt defines how the agent behaves and responds to user requests.\n              </p>\n            </TabsContent>\n\n            <TabsContent value=\"settings\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"provider\">Default Provider</Label>\n                  <select\n                    id=\"provider\"\n                    value={formData.defaultProvider}\n                    onChange={(e) => handleProviderChange(e.target.value)}\n                    className=\"w-full bg-gray-900 border border-gray-700 rounded px-3 py-2 text-white\"\n                  >\n                    {providers.map(provider => (\n                      <option key={provider.id} value={provider.id}>\n                        {provider.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"model\">Default Model</Label>\n                  {loadingModels ? (\n                    <div className=\"flex items-center gap-2 px-3 py-2 bg-gray-900 border border-gray-700 rounded\">\n                      <Loader2 className=\"w-4 h-4 animate-spin\" />\n                      <span className=\"text-gray-400\">Loading models...</span>\n                    </div>\n                  ) : availableModels.length > 0 ? (\n                    <select\n                      id=\"model\"\n                      value={formData.defaultModel}\n                      onChange={(e) => setFormData(prev => ({ ...prev, defaultModel: e.target.value }))}\n                      className=\"w-full bg-gray-900 border border-gray-700 rounded px-3 py-2 text-white\"\n                    >\n                      <option value=\"\">Select a model</option>\n                      {availableModels.map(model => (\n                        <option key={model} value={model}>\n                          {model}\n                        </option>\n                      ))}\n                    </select>\n                  ) : (\n                    <Input\n                      id=\"model\"\n                      value={formData.defaultModel}\n                      onChange={(e) => setFormData(prev => ({ ...prev, defaultModel: e.target.value }))}\n                      placeholder=\"Enter model name manually\"\n                      className=\"bg-gray-900 border-gray-700\"\n                    />\n                  )}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"temperature\">Temperature</Label>\n                  <Input\n                    id=\"temperature\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={formData.temperature}\n                    onChange={(e) => setFormData(prev => ({ ...prev, temperature: parseFloat(e.target.value) }))}\n                    className=\"bg-gray-900 border-gray-700\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"maxTokens\">Max Tokens</Label>\n                  <Input\n                    id=\"maxTokens\"\n                    type=\"number\"\n                    min=\"100\"\n                    max=\"32000\"\n                    value={formData.maxTokens}\n                    onChange={(e) => setFormData(prev => ({ ...prev, maxTokens: parseInt(e.target.value) }))}\n                    className=\"bg-gray-900 border-gray-700\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"bg-gray-900 rounded-lg p-4 space-y-2\">\n                <h4 className=\"font-medium text-white\">Agent Statistics</h4>\n                <div className=\"grid grid-cols-2 gap-4 text-sm text-gray-400\">\n                  <div>Created: {agent.createdAt.toLocaleDateString()}</div>\n                  <div>Updated: {agent.updatedAt.toLocaleDateString()}</div>\n                  <div>Tools: {selectedTools.length}</div>\n                  <div>MCP Servers: {selectedMCPServers.length}</div>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          {/* Actions */}\n          <div className=\"flex justify-between pt-4 border-t border-gray-800\">\n            <Button\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              className=\"border-gray-600 text-gray-300\"\n            >\n              Cancel\n            </Button>\n\n            <Button\n              onClick={handleSave}\n              disabled={isSaving || !formData.name.trim()}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              {isSaving ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Saving...\n                </>\n              ) : (\n                <>\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Save Changes\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\FloatingProviderSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\InlineProviderDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\LeftSidebar.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2491,2535],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport type React from 'react';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n  Server,\r\n  FileText,\r\n  Settings,\r\n  History,\r\n  Terminal,\r\n  Bot,\r\n  Volume2,\r\n  VolumeX\r\n} from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { cn } from '@/lib/utils';\r\nimport { DEFAULT_PROVIDERS } from '../../services/providers/constants';\r\nimport { ProviderLogo } from '../ui/provider-logo';\r\nimport { settingsService } from '../../services/settingsService';\r\n\r\ninterface SidebarItem {\r\n  id: string;\r\n  label: string;\r\n  icon: React.ComponentType<{ className?: string }>;\r\n  isActive?: boolean;\r\n  onClick?: () => void;\r\n  providers?: string[]; // For provider sections\r\n}\r\n\r\ninterface LeftSidebarProps {\r\n  className?: string;\r\n  onItemClick?: (itemId: string) => void;\r\n  selectedProvider?: string;\r\n  onProviderClick?: (element: HTMLElement) => void;\r\n}\r\n\r\nexport function LeftSidebar({\r\n  className,\r\n  onItemClick,\r\n  selectedProvider,\r\n  onProviderClick\r\n}: LeftSidebarProps) {\r\n  const [activeItem, setActiveItem] = useState<string>('');\r\n  const [ttsEnabled, setTtsEnabled] = useState(false);\r\n\r\n  // Load TTS on mount and subscribe to settings changes\r\n  useEffect(() => {\r\n    const loadTtsSettings = () => {\r\n      const settings = settingsService.getSettings();\r\n      const enabled = settings.ui?.textToSpeech?.enabled || false;\r\n      setTtsEnabled(enabled);\r\n    };\r\n    loadTtsSettings();\r\n    const handleSettingsChange = () => loadTtsSettings();\r\n    window.addEventListener('settingsSaved', handleSettingsChange);\r\n    return () => window.removeEventListener('settingsSaved', handleSettingsChange);\r\n  }, []);\r\n\r\n  const handleTtsToggle = async () => {\r\n    try {\r\n      const settings = settingsService.getSettings();\r\n      const newTtsEnabled = !ttsEnabled;\r\n      const updatedSettings = {\r\n        ...settings,\r\n        ui: {\r\n          ...settings.ui,\r\n          textToSpeech: {\r\n            ...settings.ui?.textToSpeech,\r\n            enabled: newTtsEnabled,\r\n            voice: settings.ui?.textToSpeech?.voice || '',\r\n            rate: settings.ui?.textToSpeech?.rate || 1.0,\r\n            pitch: settings.ui?.textToSpeech?.pitch || 1.0,\r\n            volume: settings.ui?.textToSpeech?.volume || 0.8,\r\n            autoPlay: settings.ui?.textToSpeech?.autoPlay || false,\r\n          }\r\n        }\r\n      };\r\n      await settingsService.updateSettings(updatedSettings);\r\n      setTtsEnabled(newTtsEnabled);\r\n    } catch (err) {\r\n      console.error('Failed to toggle TTS:', err);\r\n    }\r\n  };\r\n\r\n  const selectedProviderData = DEFAULT_PROVIDERS.find(p => p.id === selectedProvider);\r\n\r\n  const sidebarItems: SidebarItem[] = [\r\n    {\r\n      id: 'agents',\r\n      label: 'CUSTOM AGENTS',\r\n      icon: Bot,\r\n      onClick: () => handleItemClick('agents')\r\n    },\r\n    {\r\n      id: 'mcp-servers',\r\n      label: 'MCP SERVERS',\r\n      icon: Server,\r\n      onClick: () => handleItemClick('mcp-servers')\r\n    },\r\n    {\r\n      id: 'prompts',\r\n      label: 'PROMPTS',\r\n      icon: FileText,\r\n      onClick: () => handleItemClick('prompts')\r\n    },\r\n    {\r\n      id: 'history',\r\n      label: 'HISTORY',\r\n      icon: History,\r\n      onClick: () => handleItemClick('history')\r\n    },\r\n    {\r\n      id: 'console',\r\n      label: 'CONSOLE',\r\n      icon: Terminal,\r\n      onClick: () => handleItemClick('console')\r\n    },\r\n    {\r\n      id: 'settings',\r\n      label: 'SETTINGS',\r\n      icon: Settings,\r\n      onClick: () => handleItemClick('settings')\r\n    }\r\n  ];\r\n\r\n  const handleItemClick = (itemId: string) => {\r\n    setActiveItem(itemId);\r\n    onItemClick?.(itemId);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex flex-col w-12 h-full bg-gray-900/50 border-r border-gray-800/50\",\r\n        className\r\n      )}\r\n    >\r\n      {/* Top controls: Provider + TTS */}\r\n      <div className=\"p-1 space-y-1\" style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties}>\r\n        {/* Provider selector */}\r\n        <Button\r\n          variant=\"ghost\"\r\n          className=\"w-10 h-10 p-0 text-gray-400 hover:text-white hover:bg-gray-800/50\"\r\n          onClick={(e) => onProviderClick?.(e.currentTarget)}\r\n          title={selectedProviderData ? selectedProviderData.name : 'Select Provider'}\r\n        >\r\n          {selectedProviderData ? (\r\n            <div className=\"w-4 h-4\">\r\n              <ProviderLogo provider={selectedProviderData} size={16} />\r\n            </div>\r\n          ) : (\r\n            <Server className=\"w-4 h-4\" />\r\n          )}\r\n        </Button>\r\n\r\n        {/* TTS toggle */}\r\n        <Button\r\n          variant=\"ghost\"\r\n          className={cn(\r\n            \"w-10 h-10 p-0 transition-colors\",\r\n            ttsEnabled ? \"text-blue-400 hover:text-blue-300 hover:bg-blue-600/20\" : \"text-gray-400 hover:text-white hover:bg-gray-800/50\"\r\n          )}\r\n          onClick={handleTtsToggle}\r\n          title={ttsEnabled ? 'Disable Text to Speech' : 'Enable Text to Speech'}\r\n        >\r\n          {ttsEnabled ? <Volume2 className=\"w-4 h-4\" /> : <VolumeX className=\"w-4 h-4\" />}\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Spacer to push navigation to bottom */}\r\n      <div className=\"flex-1\"></div>\r\n\r\n      {/* Navigation Items - At bottom */}\r\n      <div className=\"p-1 space-y-1\">\r\n        {sidebarItems.map((item) => {\r\n          const Icon = item.icon;\r\n          const isActive = activeItem === item.id;\r\n\r\n          return (\r\n            <Button\r\n              key={item.id}\r\n              variant=\"ghost\"\r\n              className={cn(\r\n                \"w-10 h-10 p-0\",\r\n                \"hover:bg-gray-800/50 transition-colors duration-200\",\r\n                isActive && \"bg-gray-800/70 text-white\",\r\n                !isActive && \"text-gray-400 hover:text-white\"\r\n              )}\r\n              onClick={item.onClick}\r\n              title={item.label}\r\n            >\r\n              <Icon className=\"w-4 h-4\" />\r\n            </Button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\MainChatArea.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1029,1076],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { Edit3, Zap, ChevronDown } from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { MessageWithThinking } from '../MessageWithThinking';\r\nimport { UserMessage } from '../UserMessage';\r\nimport { cn } from '@/lib/utils';\r\nimport type { Message } from '../../services/chatService';\r\n\r\ninterface MainChatAreaProps {\r\n  className?: string;\r\n  selectedModel?: string;\r\n  messages?: Message[];\r\n  isLoading?: boolean;\r\n  onEditModelInstructions?: () => void;\r\n  onQuickPrompts?: () => void;\r\n}\r\n\r\nexport function MainChatArea({\r\n  className,\r\n  selectedModel = 'gemma3:gpu',\r\n  messages = [],\r\n  isLoading = false,\r\n  onEditModelInstructions,\r\n  onQuickPrompts\r\n}: MainChatAreaProps) {\r\n\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\r\n  const [showScrollToBottom, setShowScrollToBottom] = useState(false);\r\n\r\n  const handleEditModelInstructions = () => {\r\n    console.log('Edit Model Instructions clicked');\r\n    onEditModelInstructions?.();\r\n  };\r\n\r\n  // Scroll to bottom function\r\n  const scrollToBottom = useCallback(() => {\r\n    if (!messagesEndRef.current) return;\r\n\r\n    requestAnimationFrame(() => {\r\n      messagesEndRef.current?.scrollIntoView({\r\n        behavior: 'smooth',\r\n        block: 'end'\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  // Check if user is at bottom of scroll container\r\n  const isAtBottom = useCallback(() => {\r\n    if (!scrollContainerRef.current) return false;\r\n\r\n    const { scrollTop, scrollHeight, clientHeight } = scrollContainerRef.current;\r\n    return scrollHeight - scrollTop - clientHeight < 50; // 50px threshold\r\n  }, []);\r\n\r\n  // Auto-scroll when new messages arrive\r\n  useEffect(() => {\r\n    if (!scrollContainerRef.current || messages.length === 0) return;\r\n\r\n    const wasAtBottom = isAtBottom();\r\n\r\n    // Auto-scroll if user was at bottom or if it's the first message\r\n    if (wasAtBottom || messages.length === 1) {\r\n      const timeoutId = setTimeout(() => {\r\n        if (isAtBottom() || messages.length === 1) {\r\n          scrollToBottom();\r\n        }\r\n      }, 50);\r\n\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n  }, [messages, scrollToBottom, isAtBottom]);\r\n\r\n  // Add scroll listener for scroll-to-bottom button\r\n  useEffect(() => {\r\n    const scrollContainer = scrollContainerRef.current;\r\n    if (!scrollContainer) return;\r\n\r\n    const handleScroll = () => {\r\n      if (!scrollContainerRef.current) return;\r\n\r\n      const { scrollTop, scrollHeight, clientHeight } = scrollContainerRef.current;\r\n      const isAtBottom = scrollHeight - scrollTop - clientHeight < 50; // 50px threshold\r\n      setShowScrollToBottom(!isAtBottom && messages.length > 0);\r\n    };\r\n\r\n    scrollContainer.addEventListener('scroll', handleScroll);\r\n\r\n    // Initial check\r\n    handleScroll();\r\n\r\n    return () => {\r\n      scrollContainer.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, [messages.length]);\r\n\r\n  // Show welcome state when no messages\r\n  const showWelcomeState = messages.length === 0;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex-1 flex flex-col bg-gray-950/50 relative overflow-hidden\",\r\n        className\r\n      )}\r\n    >\r\n      {showWelcomeState ? (\r\n        // Welcome State - Centered model selection\r\n        <div className=\"flex-1 flex flex-col items-center justify-center p-8\">\r\n          {/* Model Avatar */}\r\n          <div className=\"mb-6\">\r\n            <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-gray-700 to-gray-800 flex items-center justify-center border border-gray-600/50 shadow-lg\">\r\n              {/* Cute animal face icon - simplified version */}\r\n              <div className=\"text-3xl\">🐷</div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Model Name */}\r\n          <div className=\"text-center mb-4\">\r\n            <h1 className=\"text-2xl font-medium text-white mb-2\">\r\n              {selectedModel}\r\n            </h1>\r\n            \r\n            {/* Action Buttons */}\r\n            <div className=\"flex gap-2\">\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={handleEditModelInstructions}\r\n                className=\"text-gray-400 hover:text-white transition-colors h-auto p-2\"\r\n              >\r\n                <Edit3 className=\"w-4 h-4 mr-2\" />\r\n                <span className=\"text-sm\">Custom Prompt</span>\r\n              </Button>\r\n\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={() => onQuickPrompts?.()}\r\n                className=\"text-gray-400 hover:text-white transition-colors h-auto p-2\"\r\n              >\r\n                <Zap className=\"w-4 h-4 mr-2\" />\r\n                <span className=\"text-sm\">Quick Prompts</span>\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Optional: Model description or status */}\r\n          <div className=\"text-center text-gray-500 text-sm max-w-md\">\r\n            Ready to chat. Type your message below to get started.\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        // Chat Messages Area\r\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\r\n          {/* Messages Container */}\r\n          <div\r\n            ref={scrollContainerRef}\r\n            className=\"flex-1 overflow-y-auto p-2 pt-8 space-y-2 chat-messages\"\r\n            style={\r\n              {\r\n                WebkitAppRegion: 'no-drag',\r\n                // Ensure nothing inside can extend under the sticky title bar\r\n                overflowX: 'hidden',\r\n                overscrollBehaviorY: 'contain',\r\n                // Extra guard to keep content below header area\r\n                scrollPaddingTop: '32px'\r\n              } as React.CSSProperties\r\n            }\r\n          >\r\n            {messages.map((message, index) => (\r\n              <div\r\n                key={message.id || index}\r\n                className={cn(\r\n                  \"flex\",\r\n                  message.role === 'user' ? 'justify-end' : 'justify-start'\r\n                )}\r\n                // Prevent extremely wide content from expanding layout\r\n                style={{ maxWidth: '85vw' } as React.CSSProperties}\r\n              >\r\n                <div\r\n                  className={cn(\r\n                    // Bubble container: enforce cropping and safe wrapping\r\n                    \"max-w-[85%] rounded-lg shadow-sm overflow-hidden break-words\",\r\n                    message.role === 'user'\r\n                      ? 'bg-blue-600 text-white p-3'\r\n                      : 'bg-gray-800 text-gray-100 border border-gray-700 p-3'\r\n                  )}\r\n                  style={{\r\n                    // Ensure long unbroken content (URLs, code, long words) wraps and is clipped\r\n                    overflowWrap: 'anywhere',\r\n                    wordBreak: 'break-word'\r\n                  } as React.CSSProperties}\r\n                >\r\n                  {/* Toolbar area should never extend outside bubble */}\r\n                  <div\r\n                    className=\"relative group\"\r\n                    // Make sure inner toolbar/content stays within cropped bubble\r\n                    style={{ overflow: 'hidden' }}\r\n                  >\r\n                    {message.role === 'assistant' ? (\r\n                      <MessageWithThinking\r\n                        content={\r\n                          typeof message.content === 'string'\r\n                            ? message.content\r\n                            : Array.isArray(message.content)\r\n                              ? message.content\r\n                                  .map((item, idx) =>\r\n                                    item.type === 'text' ? item.text : `[Image ${idx + 1}]`\r\n                                  )\r\n                                  .join(' ')\r\n                              : String(message.content)\r\n                        }\r\n                        usage={message.usage}\r\n                        timing={message.timing}\r\n                        toolCalls={message.toolCalls}\r\n                        sources={message.sources}\r\n                      />\r\n                    ) : (\r\n                      <UserMessage content={message.content} />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n            {/* Loading indicator */}\r\n            {isLoading && (\r\n              <div className=\"flex justify-start\">\r\n                <div className=\"bg-gray-800 border border-gray-700 rounded-lg p-3 shadow-sm\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <div className=\"flex space-x-1\">\r\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\r\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\r\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\r\n                    </div>\r\n                    <span className=\"text-sm text-gray-400\">Thinking...</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Scroll anchor */}\r\n            <div ref={messagesEndRef} />\r\n          </div>\r\n\r\n          {/* Scroll to bottom button */}\r\n          {showScrollToBottom && (\r\n            <Button\r\n              onClick={scrollToBottom}\r\n              className=\"absolute bottom-20 right-4 h-10 w-10 rounded-full bg-blue-600/90 hover:bg-blue-600 shadow-lg transition-all duration-200 z-50 flex items-center justify-center p-0\"\r\n              style={{\r\n                backdropFilter: 'blur(8px)',\r\n              }}\r\n            >\r\n              <ChevronDown className=\"h-5 w-5 text-white\" />\r\n            </Button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\ModernChatInterface.tsx","messages":[{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":37,"column":54,"nodeType":"Literal","endLine":37,"endColumn":66},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 25 to the 15 allowed.","line":110,"column":72,"nodeType":null,"messageId":"refactorFunction","endLine":110,"endColumn":74},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5187,5243],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5634,5703],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5893,5968],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6174,6247],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6397,6511],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7043,7127],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7173,7249],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7419,7499],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7732,7803],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7966,8038],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":224,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":224,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10053,10131],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10716,10809],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10861,10946],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":248,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":248,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11308,11382],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":251,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":251,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11428,11477],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11839,11897],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11932,11979],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12158,12203],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":308,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":308,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13177,13213],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 34 to the 15 allowed.","line":316,"column":77,"nodeType":null,"messageId":"refactorFunction","endLine":316,"endColumn":79},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":324,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":324,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13617,13652],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":392,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":392,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15677,15742],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":411,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":411,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16532,16604],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":438,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":438,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[17500,17579],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":445,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":445,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17862,17963],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":464,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":464,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18682,18761],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":492,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":492,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19808,19905],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":511,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":511,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[20734,20782],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":515,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":515,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20964,21010],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":568,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":568,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24053,24105],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":591,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":591,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24830,24897],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":606,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":606,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25387,25430],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":617,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":617,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25685,25743],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":619,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":619,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[25774,25840],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":638,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":638,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26455,26533],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":641,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":641,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[26573,26646],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":649,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":649,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26922,26976],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":653,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":653,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27130,27169],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":656,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":656,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27219,27263],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":660,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":660,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[27375,27415],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":669,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":669,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27651,27695],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":672,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":672,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27773,27829],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":674,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":674,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27906,28023],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":677,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":677,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28116,28167],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":682,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":682,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28382,28474],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":686,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":686,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28587,28645],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":713,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":713,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[29565,29618],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":747,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":747,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30635,30672],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":757,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":757,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30936,30982],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":775,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":775,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31581,31643],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":802,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":802,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32474,32532],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":804,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":804,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[32563,32626],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":811,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":811,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32775,32849],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":843,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":843,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33927,33978],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":845,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":845,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[34009,34065],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 48 to the 15 allowed.","line":850,"column":39,"nodeType":null,"messageId":"refactorFunction","endLine":850,"endColumn":41},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":852,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":852,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34180,34234],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":855,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":855,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34312,34381],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":870,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":870,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34823,34875],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":877,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":877,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35172,35269],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":880,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":880,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35364,35429],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":884,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":884,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35516,35574],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":890,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":890,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[35667,35729],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":896,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":896,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35888,35949],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":937,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":937,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37527,37575],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":948,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":948,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37797,37891],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":950,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":950,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[37917,37964],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":953,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":953,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[38004,38063],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":984,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":984,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[39098,39201],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":986,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":986,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[39236,39291],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1002,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1002,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[39613,39650],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1004,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1004,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[39681,39736],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1026,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1026,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[40464,40584],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1028,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1028,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[40615,40669],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1036,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1036,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[40786,40824],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1045,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1045,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[41249,41354],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1047,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1047,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[41380,41429],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1050,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1050,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[41469,41522],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1056,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1056,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[41620,41656],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1074,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1074,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42068,42116],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1076,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1076,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[42147,42202],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1090,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1090,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42585,42637],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1095,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1095,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42732,42810],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1099,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1099,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42954,43038],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1106,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1106,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[43257,43323],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1111,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1111,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[43576,43636],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1114,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1114,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[43776,43844],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1117,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1117,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[43902,43955],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1124,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1124,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[44181,44269],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1127,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1127,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[44289,44345],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1131,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1131,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[44447,44503],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1135,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1135,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[44602,44668],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":90,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { LeftSidebar } from './LeftSidebar';\r\nimport { MainChatArea } from './MainChatArea';\r\nimport { BottomInputArea } from './BottomInputArea';\r\nimport { RightPanel } from './RightPanel';\r\nimport { SettingsModal } from './SettingsModal';\r\nimport { ChatHistoryPanel } from './ChatHistoryPanel';\r\nimport { FloatingProviderSelector } from './FloatingProviderSelector';\r\nimport { AttachmentPreview } from '../AttachmentPreview';\r\nimport { AgentManagement } from './AgentManagement';\r\nimport { agentService } from '../../services/agentService';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';\r\nimport { Textarea } from '../ui/textarea';\r\nimport { Label } from '../ui/label';\r\nimport { Button } from '../ui/button';\r\nimport { cn } from '@/lib/utils';\r\n\r\n// Import existing services\r\nimport { chatService, type ChatSettings, type Message, type ContentItem } from '../../services/chatService';\r\nimport type { AgentConfiguration } from '../../types/agent';\r\nimport { settingsService } from '../../services/settingsService';\r\nimport { conversationHistoryService } from '../../services/conversationHistoryService';\r\nimport { secureApiKeyService } from '../../services/secureApiKeyService';\r\n\r\ninterface ModernChatInterfaceProps {\r\n  className?: string;\r\n}\r\n\r\nexport function ModernChatInterface({ className }: ModernChatInterfaceProps) {\r\n  // State management\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isStreaming, setIsStreaming] = useState(false);\r\n  const [selectedModel, setSelectedModel] = useState('gemma3:gpu');\r\n  const [selectedProvider, setSelectedProvider] = useState('ollama');\r\n  const [availableModels, setAvailableModels] = useState<string[]>([]);\r\n  const [attachedFiles, setAttachedFiles] = useState<File[]>([]);\r\n  const [abortController, setAbortController] = useState<AbortController | null>(null);\r\n\r\n  const [rightPanelOpen, setRightPanelOpen] = useState(false);\r\n  const [activePanel, setActivePanel] = useState('');\r\n  const [settingsModalOpen, setSettingsModalOpen] = useState(false);\r\n  const [historyPanelOpen, setHistoryPanelOpen] = useState(false);\r\n  const [providerSelectorOpen, setProviderSelectorOpen] = useState(false);\r\n  const [providerAnchorElement, setProviderAnchorElement] = useState<HTMLElement | null>(null);\r\n  const [agentManagementOpen, setAgentManagementOpen] = useState(false);\r\n  const [selectedAgent, setSelectedAgent] = useState<AgentConfiguration | null>(null);\r\n  const [availableAgents, setAvailableAgents] = useState<AgentConfiguration[]>([]);\r\n\r\n  // Track if user has manually changed provider to avoid init overwrite\r\n  const userChangedProviderRef = useRef(false);\r\n  // Track current provider synchronously for async guards\r\n  const selectedProviderRef = useRef(selectedProvider);\r\n  useEffect(() => {\r\n    selectedProviderRef.current = selectedProvider;\r\n  }, [selectedProvider]);\r\n\r\n  // Model instructions and quick prompts state\r\n  const [modelInstructionsOpen, setModelInstructionsOpen] = useState(false);\r\n  const [quickPromptsOpen, setQuickPromptsOpen] = useState(false);\r\n  const [customSystemPrompt, setCustomSystemPrompt] = useState('');\r\n  const [premadePrompts, setPremadePrompts] = useState<Array<{title: string, content: string}>>([]);\r\n  \r\n  // Settings state\r\n  const [settings, setSettings] = useState<ChatSettings>({\r\n    provider: 'ollama',\r\n    model: 'gemma3:gpu',\r\n    temperature: 0.7,\r\n    maxTokens: 2000,\r\n    systemPrompt: '',\r\n    toolCallingEnabled: false,\r\n    ragEnabled: false,\r\n    providers: {\r\n      openai: { lastSelectedModel: '' },\r\n      anthropic: { lastSelectedModel: '' },\r\n      gemini: { lastSelectedModel: '' },\r\n      mistral: { lastSelectedModel: '' },\r\n      deepseek: { lastSelectedModel: '' },\r\n      deepinfra: { lastSelectedModel: '' },\r\n      groq: { lastSelectedModel: '' },\r\n      lmstudio: { baseUrl: '', lastSelectedModel: '' },\r\n      jan: { baseUrl: '', lastSelectedModel: '' },\r\n      ollama: { baseUrl: '', lastSelectedModel: '' },\r\n      openrouter: { lastSelectedModel: '' },\r\n      requesty: { lastSelectedModel: '' },\r\n      replicate: { lastSelectedModel: '' },\r\n      n8n: { baseUrl: '', lastSelectedModel: '' },\r\n    },\r\n  });\r\n\r\n  // Toggle states\r\n  const [toolsEnabled, setToolsEnabled] = useState(false);\r\n  const [mcpEnabled, setMcpEnabled] = useState(false);\r\n  const [knowledgeBaseEnabled, setKnowledgeBaseEnabled] = useState(false);\r\n\r\n  // Handle settings updates\r\n  const updateSettings = useCallback((newSettings: Partial<ChatSettings>) => {\r\n    setSettings(prevSettings => {\r\n      const updatedSettings = { ...prevSettings, ...newSettings };\r\n      settingsService.updateChatSettingsInMemory(updatedSettings);\r\n      settingsService.saveSettingsToDisk();\r\n      return updatedSettings;\r\n    });\r\n  }, []); // Remove settings dependency to prevent infinite loop\r\n\r\n  // Load models for a specific provider\r\n  const loadModelsForProvider = useCallback(async (providerId: string) => {\r\n    try {\r\n      console.log('Loading models for provider:', providerId);\r\n      setAvailableModels([]); // Clear current models while loading\r\n\r\n      // Get API key and base URL from secure storage\r\n      let apiKey = '';\r\n      let baseUrl = '';\r\n\r\n      try {\r\n        const apiKeyData = secureApiKeyService?.getApiKeyData(providerId);\r\n        apiKey = apiKeyData?.apiKey || '';\r\n        baseUrl = apiKeyData?.baseUrl || '';\r\n      } catch (error) {\r\n        console.warn(`Failed to get API key data for ${providerId}:`, error);\r\n      }\r\n\r\n      // Skip model loading for remote providers without API keys\r\n      if (!apiKey && providerId !== 'ollama' && providerId !== 'lmstudio' && providerId !== 'n8n') {\r\n        console.warn(`No API key found for ${providerId}, skipping model loading`);\r\n        setAvailableModels([]);\r\n        return;\r\n      }\r\n\r\n      // Fetch models using the existing chat service\r\n      const models = await chatService.fetchModels(providerId, apiKey, baseUrl);\r\n      console.log(`Loaded ${models.length} models for ${providerId}:`, models);\r\n\r\n      // If the provider has changed since this request started, ignore results\r\n      if (providerId !== selectedProviderRef.current) {\r\n        console.log('⏭️ Ignoring models for stale provider load:', providerId, 'current is', selectedProviderRef.current);\r\n        return;\r\n      }\r\n\r\n      setAvailableModels(models);\r\n\r\n      // Try to restore the last selected model for this provider\r\n      let modelToSelect = '';\r\n\r\n      // First, check if there's a saved last selected model for this provider\r\n      try {\r\n        const apiKeyData = secureApiKeyService?.getApiKeyData(providerId);\r\n        const lastSelectedModel = apiKeyData?.lastSelectedModel;\r\n\r\n        if (lastSelectedModel && models.includes(lastSelectedModel)) {\r\n          modelToSelect = lastSelectedModel;\r\n          console.log(`✅ Restored last selected model for ${providerId}:`, lastSelectedModel);\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Failed to get last selected model for ${providerId}:`, error);\r\n      }\r\n\r\n      // If no valid last selected model, use first available\r\n      if (!modelToSelect && models.length > 0) {\r\n        modelToSelect = models[0];\r\n        console.log(`🔄 Using first available model for ${providerId}:`, modelToSelect);\r\n      }\r\n\r\n      // Update the selected model if we found one\r\n      if (modelToSelect) {\r\n        // Guard again in case provider changed while computing model\r\n        if (providerId !== selectedProviderRef.current) {\r\n          console.log('⏭️ Skipping model apply for stale provider:', providerId);\r\n          return;\r\n        }\r\n        setSelectedModel(modelToSelect);\r\n        updateSettings({ model: modelToSelect });\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load models for provider:', providerId, error);\r\n      setAvailableModels([]);\r\n\r\n      // Add error message to chat if there are existing messages\r\n      if (messages.length > 0) {\r\n        let errorContent = '🤖 **Model Loading Error**: Failed to load models for the selected provider.';\r\n\r\n        if (error instanceof Error) {\r\n          const errorMessage = error.message.toLowerCase();\r\n\r\n          if (errorMessage.includes('api key') || errorMessage.includes('unauthorized')) {\r\n            errorContent = `🔑 **Provider Setup Required**: Please configure your API key for ${providerId} in Settings to load available models.`;\r\n          } else if (errorMessage.includes('network') || errorMessage.includes('connection')) {\r\n            errorContent = `🌐 **Connection Error**: Unable to connect to ${providerId}. Please check your internet connection and provider settings.`;\r\n          } else if (errorMessage.includes('not found') || errorMessage.includes('404')) {\r\n            errorContent = `❓ **Provider Not Found**: The ${providerId} service is not available. Please check your provider settings.`;\r\n          } else {\r\n            errorContent = `⚠️ **Model Loading Failed**: ${error.message}. Please check your ${providerId} configuration in Settings.`;\r\n          }\r\n        }\r\n\r\n        const errorMessage: Message = {\r\n          id: Date.now().toString(),\r\n          content: errorContent,\r\n          role: 'assistant',\r\n          timestamp: new Date()\r\n        };\r\n\r\n        setMessages(prev => [...prev, errorMessage]);\r\n      }\r\n    }\r\n  }, [messages.length, updateSettings]);\r\n\r\n  // Load settings on mount\r\n  useEffect(() => {\r\n    const loadSettings = async () => {\r\n      try {\r\n        const savedSettings = settingsService.getChatSettings();\r\n        setSettings(savedSettings);\r\n\r\n        const provider = savedSettings.provider || 'ollama';\r\n        // Only apply initial provider if user hasn't changed it yet\r\n        if (!userChangedProviderRef.current) {\r\n          setSelectedProvider(provider);\r\n        } else {\r\n          console.log('🛑 Skipping init provider apply; user already changed provider');\r\n        }\r\n        setToolsEnabled(savedSettings.toolCallingEnabled ?? false); // Use nullish coalescing to respect explicit false\r\n        setKnowledgeBaseEnabled(savedSettings.ragEnabled ?? false);\r\n\r\n        // Try to get the last selected model for this provider\r\n        let modelToUse = savedSettings.model || 'gemma3:gpu';\r\n        try {\r\n          const apiKeyData = secureApiKeyService?.getApiKeyData(provider);\r\n          const lastSelectedModel = apiKeyData?.lastSelectedModel;\r\n          if (lastSelectedModel) {\r\n            modelToUse = lastSelectedModel;\r\n            console.log(`✅ Restored last selected model for ${provider} on startup:`, lastSelectedModel);\r\n          }\r\n        } catch (error) {\r\n          console.warn(`Failed to get last selected model for ${provider} on startup:`, error);\r\n        }\r\n\r\n        // Only apply initial model/load if user hasn't changed provider\r\n        if (!userChangedProviderRef.current) {\r\n          setSelectedModel(modelToUse);\r\n          // Load models for the selected provider (this will validate and potentially update the model)\r\n          await loadModelsForProvider(provider);\r\n        } else {\r\n          console.log('🛑 Skipping init model load; user already changed provider');\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to load settings:', error);\r\n      }\r\n    };\r\n\r\n    loadSettings();\r\n    loadPremadePrompts();\r\n  }, [loadModelsForProvider]); // Add loadModelsForProvider to dependency array\r\n\r\n  // Load available agents on mount\r\n  useEffect(() => {\r\n    const loadAgents = async () => {\r\n      try {\r\n        const agents = await agentService.getAgents();\r\n        setAvailableAgents(agents);\r\n        console.log(`✅ Loaded ${agents.length} available agents`);\r\n      } catch (error) {\r\n        console.error('Failed to load agents:', error);\r\n        setAvailableAgents([]);\r\n      }\r\n    };\r\n\r\n    loadAgents();\r\n  }, []);\r\n\r\n  // Handle sidebar item clicks\r\n  const handleSidebarItemClick = (itemId: string) => {\r\n    console.log('Sidebar item clicked:', itemId);\r\n\r\n    // Handle different sidebar actions\r\n    switch (itemId) {\r\n      case 'agents':\r\n        setAgentManagementOpen(true);\r\n        break;\r\n      case 'settings':\r\n        setSettingsModalOpen(true);\r\n        break;\r\n      case 'prompts':\r\n        // Open the action menu (prompts selector) - same as the old interface\r\n        if (typeof window !== 'undefined' && window.electronAPI) {\r\n          window.electronAPI.openActionMenu();\r\n        }\r\n        break;\r\n      case 'mcp-servers':\r\n        setActivePanel('mcp-servers');\r\n        setRightPanelOpen(true);\r\n        break;\r\n      case 'history':\r\n        // Open the chat history panel (sliding panel from the right)\r\n        setHistoryPanelOpen(true);\r\n        break;\r\n      case 'console':\r\n        // Toggle console window\r\n        if (typeof window !== 'undefined' && window.electronAPI) {\r\n          window.electronAPI.toggleConsoleWindow();\r\n        }\r\n        break;\r\n      case 'add-split-chat':\r\n        console.log('Adding split chat...');\r\n        break;\r\n    }\r\n  };\r\n\r\n\r\n\r\n  // Handle message sending - cloned from VoilaInterface\r\n  const handleSendMessage = async (message: string, providedFiles?: File[]) => {\r\n    if (!message.trim()) return;\r\n\r\n    // Use provided files or current attached files\r\n    const filesToSend = providedFiles || attachedFiles;\r\n\r\n    // Ensure we have a valid model selected\r\n    if (!selectedModel) {\r\n      console.error('No model selected');\r\n      return;\r\n    }\r\n\r\n    // Ensure we have valid settings with the current model and provider\r\n    const currentSettings = {\r\n      ...settings,\r\n      model: selectedModel,\r\n      provider: selectedProvider\r\n    };\r\n\r\n    const messageContent = message.trim();\r\n\r\n    // Create content array that includes both text and files\r\n    const contentArray: Array<ContentItem> = [];\r\n\r\n    // Add text content if present\r\n    if (messageContent) {\r\n      contentArray.push({\r\n        type: 'text',\r\n        text: messageContent\r\n      });\r\n    }\r\n\r\n    // Add file content\r\n    for (const file of filesToSend) {\r\n      if (file.type.startsWith('image/')) {\r\n        // Convert image to base64 for display in chat\r\n        const base64 = await chatService.fileToBase64(file);\r\n        contentArray.push({\r\n          type: 'image_url',\r\n          image_url: {\r\n            url: base64\r\n          }\r\n        });\r\n      } else {\r\n        // For non-image files, add a file reference\r\n        contentArray.push({\r\n          type: 'text',\r\n          text: `\\n\\n[File attached: ${file.name}]`\r\n        });\r\n      }\r\n    }\r\n\r\n    // Add user message to messages array\r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      role: 'user',\r\n      content: contentArray.length === 1 && contentArray[0].type === 'text'\r\n        ? contentArray[0].text || messageContent\r\n        : contentArray,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    const updatedMessages = [...messages, userMessage];\r\n    setMessages(updatedMessages);\r\n\r\n    // Clear input and attached files after sending\r\n    setInputValue('');\r\n    setAttachedFiles([]);\r\n\r\n    // Sync user message to chat window (but don't auto-open it since we're using the modern interface)\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      window.electronAPI.syncMessagesToChat(updatedMessages);\r\n      // Note: Not opening chat window since the modern interface is self-contained\r\n    }\r\n\r\n    setIsLoading(true); // Start thinking indicator\r\n    console.log('🧠 Started thinking indicator - user message sent');\r\n\r\n    // Create abort controller for this request\r\n    const controller = new AbortController();\r\n    setAbortController(controller);\r\n\r\n    // Track when we started processing for timeout detection\r\n    const processingStartTime = Date.now();\r\n\r\n    // Save conversation immediately after user message\r\n    try {\r\n      const currentConversationId = conversationHistoryService.getCurrentConversationId();\r\n      if (currentConversationId) {\r\n        await conversationHistoryService.updateConversation(currentConversationId, updatedMessages);\r\n      } else {\r\n        const newConversationId = await conversationHistoryService.createNewConversation(updatedMessages);\r\n        conversationHistoryService.setCurrentConversationId(newConversationId);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save conversation after user message:', error);\r\n    }\r\n\r\n    try {\r\n      // Create assistant message for streaming\r\n      let assistantContent = '';\r\n      const assistantMessage: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        role: 'assistant',\r\n        content: '',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      // Add the assistant message immediately for streaming\r\n      setMessages(prev => [...prev, assistantMessage]);\r\n\r\n      // Get conversation history (exclude the current user message we just added)\r\n      const conversationHistory = updatedMessages.slice(0, -1); // Exclude the current user message\r\n\r\n      const response = await chatService.sendMessage(\r\n        messageContent,\r\n        filesToSend,\r\n        currentSettings,\r\n        conversationHistory,\r\n        (chunk: string) => {\r\n          // Ensure chunk is a string and handle edge cases\r\n          if (typeof chunk !== 'string') {\r\n            console.warn('⚠️ Received non-string chunk in onStream:', typeof chunk, chunk);\r\n            return;\r\n          }\r\n\r\n          // Log when streaming starts (first chunk received) and update states properly\r\n          if (assistantContent === '' && chunk.trim().length > 0) {\r\n            const processingDuration = Date.now() - processingStartTime;\r\n            console.log(`🤖 Model started streaming after ${processingDuration}ms, switching to streaming mode`);\r\n            setIsLoading(false); // Stop loading indicator (thinking animation)\r\n            setIsStreaming(true); // Start streaming mode (keep stop button active)\r\n          }\r\n\r\n          // Handle streaming response\r\n          assistantContent += chunk;\r\n          setMessages(prev =>\r\n            prev.map(msg =>\r\n              msg.id === assistantMessage.id\r\n                ? { ...msg, content: assistantContent }\r\n                : msg\r\n            )\r\n          );\r\n        },\r\n        controller.signal, // signal\r\n        conversationHistoryService.getCurrentConversationId() || undefined,\r\n        (isSearching: boolean, query?: string) => {\r\n          // Handle knowledge base search indicator\r\n          console.log('🔍 Knowledge base search state changed:', { isSearching, query });\r\n          // TODO: Add knowledge base search indicator to UI\r\n        }\r\n      );\r\n\r\n      // Update final response with usage, toolCalls, and sources\r\n      if (!assistantContent) {\r\n        // No streaming occurred, update with full response\r\n        setMessages(prev =>\r\n          prev.map(msg =>\r\n            msg.id === assistantMessage.id\r\n              ? { ...msg, content: response.content, usage: response.usage, toolCalls: response.toolCalls, sources: response.sources }\r\n              : msg\r\n          )\r\n        );\r\n      } else {\r\n        // Streaming occurred, just update usage, toolCalls, and sources without changing content\r\n        setMessages(prev =>\r\n          prev.map(msg =>\r\n            msg.id === assistantMessage.id\r\n              ? { ...msg, usage: response.usage, toolCalls: response.toolCalls, sources: response.sources }\r\n              : msg\r\n          )\r\n        );\r\n      }\r\n\r\n      // Stop all indicators when final response is complete\r\n      const totalProcessingTime = Date.now() - processingStartTime;\r\n      console.log(`✅ Final response complete after ${totalProcessingTime}ms, stopping all indicators`);\r\n      setIsLoading(false);\r\n      setIsStreaming(false);\r\n\r\n      // Clean up abort controller\r\n      setAbortController(null);\r\n\r\n      // Save conversation to history\r\n      const currentConversationId = conversationHistoryService.getCurrentConversationId();\r\n      const finalMessages = [...updatedMessages, { ...assistantMessage, content: response.content, usage: response.usage, toolCalls: response.toolCalls, sources: response.sources }];\r\n\r\n      if (currentConversationId) {\r\n        await conversationHistoryService.updateConversation(currentConversationId, finalMessages);\r\n      } else {\r\n        const newConversationId = await conversationHistoryService.createNewConversation(finalMessages);\r\n        conversationHistoryService.setCurrentConversationId(newConversationId);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Failed to send message:', error);\r\n\r\n      // Check if this was an abort (user stopped generation)\r\n      if (error instanceof Error && (error.name === 'AbortError' || error.message.includes('aborted'))) {\r\n        console.log('🛑 Request was aborted by user');\r\n        setIsLoading(false);\r\n        setAbortController(null);\r\n        return; // Don't show error message for user-initiated aborts\r\n      }\r\n\r\n      // Create user-friendly error message based on error type\r\n      let errorContent = 'Sorry, I encountered an error while processing your message. Please try again.';\r\n\r\n      if (error instanceof Error) {\r\n        const errorMessage = error.message.toLowerCase();\r\n\r\n        // Provider-specific errors\r\n        if (errorMessage.includes('api key') || errorMessage.includes('unauthorized') || errorMessage.includes('authentication')) {\r\n          errorContent = '🔑 **Authentication Error**: Please check your API key in Settings. The provider may require a valid API key to process requests.';\r\n        } else if (errorMessage.includes('tool calling') || errorMessage.includes('function calling')) {\r\n          errorContent = '🔧 **Tool Calling Error**: This provider doesn\\'t support tool calling. Please disable tools or switch to a compatible provider like OpenAI, Anthropic, or Ollama.';\r\n        } else if (errorMessage.includes('rate limit') || errorMessage.includes('quota')) {\r\n          errorContent = '⏱️ **Rate Limit**: You\\'ve exceeded the API rate limit. Please wait a moment before trying again.';\r\n        } else if (errorMessage.includes('network') || errorMessage.includes('connection') || errorMessage.includes('timeout')) {\r\n          errorContent = '🌐 **Connection Error**: Unable to connect to the provider. Please check your internet connection and try again.';\r\n        } else if (errorMessage.includes('model') || errorMessage.includes('not found')) {\r\n          errorContent = '🤖 **Model Error**: The selected model is not available. Please choose a different model in the dropdown below.';\r\n        } else if (errorMessage.includes('file') || errorMessage.includes('upload')) {\r\n          errorContent = '📁 **File Upload Error**: Failed to process the uploaded file. Please check the file format and try again.';\r\n        } else if (errorMessage.includes('context') || errorMessage.includes('token limit')) {\r\n          errorContent = '📝 **Context Length Error**: Your message is too long for this model. Please try a shorter message or use a model with a larger context window.';\r\n        } else {\r\n          // Generic error with more details\r\n          errorContent = `❌ **Error**: ${error.message}\\n\\nPlease try again or check your settings if the problem persists.`;\r\n        }\r\n      }\r\n\r\n      // Add error message to chat\r\n      const errorMessage: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        content: errorContent,\r\n        role: 'assistant',\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prev => [...prev, errorMessage]);\r\n      setIsLoading(false);\r\n      setIsStreaming(false);\r\n\r\n      // Clean up abort controller\r\n      setAbortController(null);\r\n    }\r\n  };\r\n\r\n  // Handle stopping message generation\r\n  const handleStopGeneration = () => {\r\n    if (abortController && (isLoading || isStreaming)) {\r\n      console.log('🛑 User requested to stop generation');\r\n      abortController.abort();\r\n      setIsLoading(false);\r\n      setIsStreaming(false);\r\n      setAbortController(null);\r\n\r\n      // Add a message indicating the generation was stopped\r\n      setMessages(prev => {\r\n        const lastMessage = prev[prev.length - 1];\r\n        if (lastMessage && lastMessage.role === 'assistant') {\r\n          return prev.map((msg, index) =>\r\n            index === prev.length - 1\r\n              ? { ...msg, content: msg.content + '\\n\\n*[Generation stopped by user]*' }\r\n              : msg\r\n          );\r\n        }\r\n        return prev;\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle file upload - simplified to match original behavior\r\n  const handleFileUpload = async (files: FileList) => {\r\n    console.log('Files uploaded:', Array.from(files).map(f => f.name));\r\n\r\n    // Add files to attached files list - parsing will be handled by chatService\r\n    const newFiles = Array.from(files);\r\n    setAttachedFiles(prev => [...prev, ...newFiles]);\r\n  };\r\n\r\n  // Handle removing attached files\r\n  const handleRemoveFile = (index: number) => {\r\n    setAttachedFiles(prev => prev.filter((_, i) => i !== index));\r\n  };\r\n\r\n  // Handle model change with persistence\r\n  const handleModelChange = async (newModel: string) => {\r\n    setSelectedModel(newModel);\r\n    console.log('Model changed to:', newModel);\r\n\r\n    // Save to general settings\r\n    try {\r\n      const updatedSettings = {\r\n        ...settings,\r\n        model: newModel\r\n      };\r\n\r\n      await settingsService.updateSettings({ chat: updatedSettings });\r\n      setSettings(updatedSettings);\r\n      console.log('Model saved to general settings:', newModel);\r\n    } catch (error) {\r\n      console.error('Failed to save model to general settings:', error);\r\n    }\r\n\r\n    // Also save as last selected model for current provider\r\n    try {\r\n      if (selectedProvider) {\r\n        const currentApiKeyData = secureApiKeyService?.getApiKeyData(selectedProvider);\r\n        if (currentApiKeyData) {\r\n          await secureApiKeyService.setApiKeyData(selectedProvider, {\r\n            ...currentApiKeyData,\r\n            lastSelectedModel: newModel\r\n          });\r\n        } else {\r\n          await secureApiKeyService.setApiKeyData(selectedProvider, {\r\n            apiKey: '',\r\n            baseUrl: '',\r\n            lastSelectedModel: newModel\r\n          });\r\n        }\r\n        console.log(`✅ Saved last selected model for ${selectedProvider}:`, newModel);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save last selected model for provider:', error);\r\n    }\r\n  };\r\n\r\n\r\n  // Test function for screenshot (can be called from console)\r\n  if (typeof window !== 'undefined') {\r\n    (window as unknown as { testScreenshot: () => Promise<{ success: boolean; dataURL?: string; error?: string }> }).testScreenshot = async () => {\r\n    console.log('🧪 Testing screenshot functionality...');\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        const result = await window.electronAPI.takeScreenshot();\r\n        console.log('🧪 Test result:', result);\r\n        return result;\r\n      } else {\r\n        console.log('🧪 electronAPI not available');\r\n        return { success: false, error: 'electronAPI not available' };\r\n      }\r\n    } catch (error) {\r\n      console.error('🧪 Test failed:', error);\r\n      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\r\n    }\r\n  };\r\n  }\r\n\r\n  // Handle screenshot - enhanced with better feedback\r\n  const handleScreenshot = async () => {\r\n    try {\r\n      console.log('📸 Screenshot button clicked');\r\n\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        console.log('📸 Calling electronAPI.takeScreenshot...');\r\n        const result = await window.electronAPI.takeScreenshot();\r\n        console.log('📸 Screenshot result:', { success: result.success, hasDataURL: !!result.dataURL, error: result.error });\r\n\r\n        if (typeof result === 'object' && result.success && result.dataURL) {\r\n          console.log('📸 Converting screenshot to file...');\r\n          const response = await fetch(result.dataURL);\r\n          const blob = await response.blob();\r\n          const file = new File([blob], `screenshot-${Date.now()}.png`, { type: 'image/png' });\r\n\r\n          console.log(`📸 Screenshot file created: ${file.name} (${Math.round(file.size / 1024)}KB)`);\r\n\r\n          // Auto-attach screenshot to chat\r\n          setAttachedFiles(prev => [...prev, file]);\r\n          console.log('✅ Screenshot captured and attached to chat');\r\n\r\n          // Show a brief success indicator\r\n          const successMsg = document.createElement('div');\r\n          successMsg.textContent = '📸 Screenshot captured!';\r\n          successMsg.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            background: #10b981;\r\n            color: white;\r\n            padding: 8px 16px;\r\n            border-radius: 6px;\r\n            z-index: 10000;\r\n            font-size: 14px;\r\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n          `;\r\n          document.body.appendChild(successMsg);\r\n          setTimeout(() => document.body.removeChild(successMsg), 2000);\r\n\r\n        } else {\r\n          throw new Error(result.error || 'Screenshot capture failed');\r\n        }\r\n      } else {\r\n        throw new Error('Screenshot functionality is not available in this environment');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to take screenshot:', error);\r\n\r\n      // Show error notification\r\n      const errorMsg = document.createElement('div');\r\n      errorMsg.textContent = `❌ Screenshot failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\r\n      errorMsg.style.cssText = `\r\n        position: fixed;\r\n        top: 20px;\r\n        right: 20px;\r\n        background: #ef4444;\r\n        color: white;\r\n        padding: 8px 16px;\r\n        border-radius: 6px;\r\n        z-index: 10000;\r\n        font-size: 14px;\r\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n        max-width: 300px;\r\n      `;\r\n      document.body.appendChild(errorMsg);\r\n      setTimeout(() => document.body.removeChild(errorMsg), 4000);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  // Handle toggle states\r\n  const handleToggleTools = (enabled: boolean) => {\r\n    setToolsEnabled(enabled);\r\n    updateSettings({ toolCallingEnabled: enabled });\r\n  };\r\n\r\n  const handleToggleMCP = (enabled: boolean) => {\r\n    setMcpEnabled(enabled);\r\n    // MCP settings are managed separately, not through chat settings\r\n    console.log('MCP toggled:', enabled);\r\n  };\r\n\r\n  const handleToggleKnowledgeBase = (enabled: boolean) => {\r\n    setKnowledgeBaseEnabled(enabled);\r\n    updateSettings({ ragEnabled: enabled });\r\n  };\r\n\r\n  // Handle provider selection\r\n  const handleProviderSelect = async (providerId: string) => {\r\n    console.log('Provider selected:', providerId);\r\n    userChangedProviderRef.current = true;\r\n    setSelectedProvider(providerId);\r\n    updateSettings({ provider: providerId });\r\n\r\n    // Load models for the selected provider (this will restore the last selected model)\r\n    await loadModelsForProvider(providerId);\r\n  };\r\n\r\n  // Handle provider selector opening\r\n  const handleProviderClick = (element: HTMLElement) => {\r\n    setProviderAnchorElement(element);\r\n    setProviderSelectorOpen(true);\r\n  };\r\n\r\n  // Handle agent selection from management interface\r\n  const handleAgentSelect = async (agent: AgentConfiguration) => {\r\n    try {\r\n      console.log('🤖 Agent selected from management:', agent.name);\r\n\r\n      // Set the selected agent\r\n      setSelectedAgent(agent);\r\n\r\n      // Update settings with agent configuration\r\n      setSettings(prev => ({\r\n        ...prev,\r\n        provider: agent.defaultProvider,\r\n        model: agent.defaultModel,\r\n        systemPrompt: agent.systemPrompt,\r\n        temperature: agent.temperature || 0.7,\r\n        maxTokens: agent.maxTokens || 4000,\r\n        toolCallingEnabled: agent.toolCallingEnabled\r\n      }));\r\n\r\n      // Set selected provider and model\r\n      userChangedProviderRef.current = true;\r\n      setSelectedProvider(agent.defaultProvider);\r\n      setSelectedModel(agent.defaultModel);\r\n\r\n      // Load models for the provider\r\n      await loadModelsForProvider(agent.defaultProvider);\r\n\r\n      // Start a new chat with the agent configuration\r\n      handleStartNewChat();\r\n\r\n      console.log('✅ Agent configuration applied successfully');\r\n    } catch (error) {\r\n      console.error('❌ Failed to apply agent configuration:', error);\r\n    }\r\n  };\r\n\r\n  // Handle agent change from dropdown\r\n  const handleAgentChange = async (agent: AgentConfiguration | null) => {\r\n    try {\r\n      console.log('🤖 Agent changed from dropdown:', agent?.name || 'No Agent');\r\n\r\n      setSelectedAgent(agent);\r\n\r\n      if (agent) {\r\n        // Apply agent configuration\r\n        setSettings(prev => ({\r\n          ...prev,\r\n          provider: agent.defaultProvider,\r\n          model: agent.defaultModel,\r\n          systemPrompt: agent.systemPrompt,\r\n          temperature: agent.temperature || 0.7,\r\n          maxTokens: agent.maxTokens || 4000,\r\n          toolCallingEnabled: agent.toolCallingEnabled\r\n        }));\r\n\r\n        userChangedProviderRef.current = true;\r\n        setSelectedProvider(agent.defaultProvider);\r\n        setSelectedModel(agent.defaultModel);\r\n        await loadModelsForProvider(agent.defaultProvider);\r\n      } else {\r\n        // Clear agent configuration - preserve user's tool calling preference\r\n        const savedSettings = settingsService.getChatSettings();\r\n        setSettings(prev => ({\r\n          ...prev,\r\n          systemPrompt: '',\r\n          temperature: 0.7,\r\n          maxTokens: 4000,\r\n          toolCallingEnabled: savedSettings.toolCallingEnabled // Preserve user's preference\r\n        }));\r\n      }\r\n\r\n      console.log('✅ Agent change applied successfully');\r\n    } catch (error) {\r\n      console.error('❌ Failed to apply agent change:', error);\r\n    }\r\n  };\r\n\r\n  // Load premade prompts from file\r\n  const loadPremadePrompts = async () => {\r\n    try {\r\n      console.log('🎯 Starting to load premade prompts...');\r\n\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        console.log('🎯 Electron API available, attempting to read file...');\r\n\r\n        // Try different file path formats\r\n        const possiblePaths = [\r\n          'z:\\\\Python\\\\AI Assistant\\\\littlellm\\\\Premadeprompts.md',\r\n          'Z:\\\\Python\\\\AI Assistant\\\\littlellm\\\\Premadeprompts.md',\r\n          './Premadeprompts.md',\r\n          'Premadeprompts.md'\r\n        ];\r\n\r\n        let promptsContent = '';\r\n        let successfulPath = '';\r\n\r\n        for (const path of possiblePaths) {\r\n          try {\r\n            console.log(`🎯 Trying to read file from: ${path}`);\r\n            const fileData = await window.electronAPI.readFile(path);\r\n\r\n            // Handle the new API response format\r\n            if (fileData && fileData.success && fileData.content) {\r\n              promptsContent = fileData.content;\r\n              successfulPath = path;\r\n              console.log(`🎯 Successfully read file from: ${path}, content length: ${promptsContent.length}`);\r\n              break;\r\n            } else if (fileData && !fileData.success) {\r\n              console.log(`🎯 Failed to read from ${path}: ${fileData.error}`);\r\n              continue;\r\n            }\r\n          } catch (pathError) {\r\n            console.log(`🎯 Failed to read from ${path}:`, pathError);\r\n            continue;\r\n          }\r\n        }\r\n\r\n        if (!promptsContent) {\r\n          console.error('🎯 Failed to read prompts file from any path');\r\n          setPremadePrompts([]);\r\n          return;\r\n        }\r\n\r\n        // Parse prompts from the structured content (title: \"...\" prompt: \"...\")\r\n        console.log('🎯 Parsing prompts from structured content...');\r\n        const lines = promptsContent.split('\\n');\r\n        const prompts: Array<{title: string, content: string}> = [];\r\n\r\n        let currentTitle = '';\r\n        let currentPrompt = '';\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n          const line = lines[i]?.trim();\r\n\r\n          // Skip empty lines\r\n          if (!line) continue;\r\n\r\n          // Check for title line (with or without quotes)\r\n          if (line.startsWith('title')) {\r\n            // Extract title - handle both \"title: Title\" and \"title: \"Title\"\"\r\n            let titleMatch = line.match(/title:?\\s*\"(.+)\"/); // With quotes\r\n            if (!titleMatch) {\r\n              titleMatch = line.match(/title:?\\s*(.+)/); // Without quotes\r\n            }\r\n            if (titleMatch) {\r\n              currentTitle = titleMatch[1].trim();\r\n            }\r\n          }\r\n\r\n          // Check for prompt line (with or without quotes)\r\n          else if (line.startsWith('prompt:')) {\r\n            // Extract prompt - handle both formats\r\n            let promptMatch = line.match(/prompt:\\s*\"(.+)\"/); // With quotes\r\n            if (!promptMatch) {\r\n              promptMatch = line.match(/prompt:\\s*(.+)/); // Without quotes\r\n            }\r\n            if (promptMatch) {\r\n              currentPrompt = promptMatch[1].trim();\r\n\r\n              // If we have both title and prompt, add to prompts array\r\n              if (currentTitle && currentPrompt) {\r\n                prompts.push({\r\n                  title: currentTitle,\r\n                  content: currentPrompt\r\n                });\r\n                console.log(`🎯 Found prompt: ${currentTitle}`);\r\n\r\n                // Reset for next prompt\r\n                currentTitle = '';\r\n                currentPrompt = '';\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        setPremadePrompts(prompts);\r\n        console.log('🎯 Successfully loaded', prompts.length, 'premade prompts from', successfulPath);\r\n      } else {\r\n        console.error('🎯 Electron API not available');\r\n      }\r\n    } catch (error) {\r\n      console.error('🎯 Failed to load premade prompts:', error);\r\n      setPremadePrompts([]);\r\n    }\r\n  };\r\n\r\n  // Handle model instructions editing\r\n  const handleEditModelInstructions = () => {\r\n    setCustomSystemPrompt('');\r\n    setModelInstructionsOpen(true);\r\n  };\r\n\r\n  // Apply custom prompt as system prompt (enhances existing system prompt)\r\n  const handleApplyModelInstructions = async () => {\r\n    if (customSystemPrompt.trim()) {\r\n      try {\r\n        // Combine with existing system prompt if any\r\n        const existingSystemPrompt = settings.systemPrompt || '';\r\n        const combinedSystemPrompt = existingSystemPrompt\r\n          ? `${existingSystemPrompt}\\n\\n## Additional Instructions\\n${customSystemPrompt.trim()}`\r\n          : customSystemPrompt.trim();\r\n\r\n        const updatedSettings = {\r\n          ...settings,\r\n          systemPrompt: combinedSystemPrompt\r\n        };\r\n\r\n        await settingsService.updateSettings({ chat: updatedSettings });\r\n        setSettings(updatedSettings);\r\n        setModelInstructionsOpen(false);\r\n        setCustomSystemPrompt('');\r\n\r\n        console.log('Custom prompt applied as system prompt:', combinedSystemPrompt.substring(0, 100) + '...');\r\n      } catch (error) {\r\n        console.error('Failed to apply custom prompt:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Clear system prompt\r\n  const handleClearSystemPrompt = async () => {\r\n    try {\r\n      const updatedSettings = {\r\n        ...settings,\r\n        systemPrompt: ''\r\n      };\r\n\r\n      await settingsService.updateSettings({ chat: updatedSettings });\r\n      setSettings(updatedSettings);\r\n\r\n      console.log('System prompt cleared');\r\n    } catch (error) {\r\n      console.error('Failed to clear system prompt:', error);\r\n    }\r\n  };\r\n\r\n  // Handle quick prompt selection (apply as system prompt)\r\n  const handleQuickPromptSelect = async (prompt: {title: string, content: string}) => {\r\n    try {\r\n      // Combine with existing system prompt if any\r\n      const existingSystemPrompt = settings.systemPrompt || '';\r\n      const combinedSystemPrompt = existingSystemPrompt\r\n        ? `${existingSystemPrompt}\\n\\n## ${prompt.title} Mode\\n${prompt.content}`\r\n        : prompt.content;\r\n\r\n      const updatedSettings = {\r\n        ...settings,\r\n        systemPrompt: combinedSystemPrompt\r\n      };\r\n\r\n      await settingsService.updateSettings({ chat: updatedSettings });\r\n      setSettings(updatedSettings);\r\n      setQuickPromptsOpen(false);\r\n\r\n      console.log(`Quick prompt \"${prompt.title}\" applied as system prompt:`, combinedSystemPrompt.substring(0, 100) + '...');\r\n    } catch (error) {\r\n      console.error('Failed to apply quick prompt:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  // Handle chat history selection\r\n  const handleChatSelect = async (chatId: string) => {\r\n    console.log('Selected chat:', chatId);\r\n    try {\r\n      // Load the selected conversation from the history service\r\n      const conversation = await conversationHistoryService.getConversation(chatId);\r\n      if (conversation) {\r\n        // Set the messages state to the conversation's messages\r\n        setMessages(conversation.messages);\r\n        // Set the current conversation ID\r\n        conversationHistoryService.setCurrentConversationId(chatId);\r\n        console.log(`Loaded conversation \"${conversation.title}\" with ${conversation.messages.length} messages`);\r\n      } else {\r\n        console.error('Conversation not found:', chatId);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load conversation:', error);\r\n    }\r\n  };\r\n\r\n  // Handle starting a new chat\r\n  const handleStartNewChat = async () => {\r\n    console.log('Starting new chat...');\r\n\r\n    // Clear messages\r\n    setMessages([]);\r\n\r\n    // Clear input and attached files\r\n    setInputValue('');\r\n    setAttachedFiles([]);\r\n\r\n    // Reset system prompt to empty for new chat\r\n    try {\r\n      const updatedSettings = {\r\n        ...settings,\r\n        systemPrompt: ''\r\n      };\r\n\r\n      await settingsService.updateSettings({ chat: updatedSettings });\r\n      setSettings(updatedSettings);\r\n      console.log('System prompt reset for new chat');\r\n    } catch (error) {\r\n      console.error('Failed to reset system prompt:', error);\r\n    }\r\n\r\n    // Clear the current conversation ID\r\n    conversationHistoryService.setCurrentConversationId(null);\r\n\r\n    // Clear localStorage for chat window\r\n    localStorage.removeItem('chatWindowMessages');\r\n\r\n    // Sync empty state to chat window\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      window.electronAPI.syncMessagesToChat([]);\r\n    }\r\n\r\n    console.log('New chat started - all state cleared');\r\n  };\r\n\r\n  // Listen for prompt selections from action menu overlay\r\n  useEffect(() => {\r\n    console.log('🎯 Setting up prompt selection listener in ModernChatInterface');\r\n\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      const handlePromptSelected = async (promptText: string) => {\r\n        console.log('🎯 ModernChatInterface received prompt from action menu:', promptText);\r\n\r\n        let processedPrompt = promptText;\r\n\r\n        // If the prompt contains {content} placeholder, replace it with clipboard content\r\n        if (promptText.includes('{content}')) {\r\n          try {\r\n            console.log('🎯 Prompt contains {content}, reading clipboard...');\r\n            const clipboardContent = await window.electronAPI.readClipboard();\r\n\r\n            if (clipboardContent && clipboardContent.trim()) {\r\n              processedPrompt = promptText.replace('{content}', clipboardContent.trim());\r\n              console.log('🎯 Replaced {content} with clipboard content');\r\n            } else {\r\n              processedPrompt = promptText.replace('{content}', '[No clipboard content available]');\r\n              console.log('🎯 No clipboard content available, using placeholder');\r\n            }\r\n          } catch (error) {\r\n            console.error('🎯 Failed to read clipboard:', error);\r\n            processedPrompt = promptText.replace('{content}', '[Clipboard access failed]');\r\n          }\r\n        }\r\n\r\n        // Set the processed prompt in the input field\r\n        setInputValue(processedPrompt);\r\n        console.log('🎯 ModernChatInterface set input with processed prompt:', processedPrompt);\r\n      };\r\n\r\n      console.log('🎯 Registering onPromptSelected listener');\r\n      window.electronAPI.onPromptSelected?.(handlePromptSelected);\r\n\r\n      return () => {\r\n        console.log('🎯 Cleaning up prompt selection listener');\r\n        window.electronAPI.removeAllListeners('prompt-selected');\r\n      };\r\n    } else {\r\n      console.warn('🎯 electronAPI not available for prompt selection');\r\n    }\r\n  }, []); // Empty dependency array - only setup once\r\n\r\n\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex h-screen bg-gray-950 text-white overflow-hidden modern-chat-interface\",\r\n        className\r\n      )}\r\n      style={{\r\n        borderRadius: '32px',\r\n        overflow: 'hidden'\r\n      }}\r\n    >\r\n      {/* Left Sidebar */}\r\n      <LeftSidebar\r\n        onItemClick={handleSidebarItemClick}\r\n        selectedProvider={selectedProvider}\r\n        onProviderClick={handleProviderClick}\r\n        className=\"flex-shrink-0\"\r\n      />\r\n\r\n      {/* Main Content Area */}\r\n      <div\r\n        className=\"flex-1 flex flex-col overflow-hidden\"\r\n      >\r\n        {/* Native Windows title bar provides drag; no custom header */}\r\n\r\n        {/* Chat Area */}\r\n        <MainChatArea\r\n          selectedModel={selectedModel}\r\n          messages={messages}\r\n          isLoading={isLoading}\r\n          onEditModelInstructions={handleEditModelInstructions}\r\n          onQuickPrompts={() => setQuickPromptsOpen(true)}\r\n          className=\"flex-1\"\r\n        />\r\n\r\n        {/* Attachment Preview */}\r\n        {attachedFiles.length > 0 && (\r\n          <div className=\"px-4 pb-2\">\r\n            <AttachmentPreview\r\n              files={attachedFiles}\r\n              onRemoveFile={handleRemoveFile}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Bottom Input */}\r\n        <BottomInputArea\r\n          value={inputValue}\r\n          onChange={setInputValue}\r\n          onSend={handleSendMessage}\r\n          onStop={handleStopGeneration}\r\n          onFileUpload={handleFileUpload}\r\n          onScreenshot={handleScreenshot}\r\n          selectedModel={selectedModel}\r\n          onModelChange={handleModelChange}\r\n          availableModels={availableModels}\r\n          selectedProvider={selectedProvider}\r\n          isLoading={isLoading || isStreaming}\r\n          toolsEnabled={toolsEnabled}\r\n          onToggleTools={handleToggleTools}\r\n          mcpEnabled={mcpEnabled}\r\n          onToggleMCP={handleToggleMCP}\r\n          knowledgeBaseEnabled={knowledgeBaseEnabled}\r\n          onToggleKnowledgeBase={handleToggleKnowledgeBase}\r\n          onStartNewChat={handleStartNewChat}\r\n          selectedAgent={selectedAgent}\r\n          onAgentChange={handleAgentChange}\r\n          availableAgents={availableAgents}\r\n          className=\"flex-shrink-0\"\r\n        />\r\n      </div>\r\n\r\n      {/* Right Panel */}\r\n      <RightPanel\r\n        isOpen={rightPanelOpen}\r\n        activePanel={activePanel}\r\n        onClose={() => setRightPanelOpen(false)}\r\n        className=\"flex-shrink-0\"\r\n      />\r\n\r\n      {/* Settings Modal Overlay */}\r\n      {settingsModalOpen && (\r\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\r\n          {/* Backdrop with blur */}\r\n          <div\r\n            className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\"\r\n            onClick={() => setSettingsModalOpen(false)}\r\n          />\r\n\r\n          {/* Settings Modal */}\r\n          <div className=\"relative w-[90vw] h-[90vh] max-w-6xl max-h-[800px] bg-background border border-border rounded-2xl shadow-2xl overflow-hidden\">\r\n            <SettingsModal\r\n              isOpen={settingsModalOpen}\r\n              onClose={() => setSettingsModalOpen(false)}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Chat History Panel */}\r\n      <ChatHistoryPanel\r\n        isOpen={historyPanelOpen}\r\n        onClose={() => setHistoryPanelOpen(false)}\r\n        onSelectChat={handleChatSelect}\r\n      />\r\n\r\n      {/* Agent Management Modal */}\r\n      {agentManagementOpen && (\r\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\r\n          {/* Backdrop with blur */}\r\n          <div\r\n            className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\"\r\n            onClick={() => setAgentManagementOpen(false)}\r\n          />\r\n\r\n          {/* Agent Management Modal */}\r\n          <div className=\"relative w-[95vw] h-[95vh] max-w-7xl max-h-[900px] bg-background border border-border rounded-2xl shadow-2xl overflow-hidden\">\r\n            <AgentManagement\r\n              onAgentSelect={handleAgentSelect}\r\n              onClose={() => setAgentManagementOpen(false)}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Floating Provider Selector */}\r\n      <FloatingProviderSelector\r\n        isOpen={providerSelectorOpen}\r\n        onClose={() => setProviderSelectorOpen(false)}\r\n        onProviderSelect={handleProviderSelect}\r\n        selectedProvider={selectedProvider}\r\n        anchorElement={providerAnchorElement}\r\n      />\r\n\r\n      {/* Model Instructions Dialog */}\r\n      <Dialog open={modelInstructionsOpen} onOpenChange={setModelInstructionsOpen}>\r\n        <DialogContent className=\"max-w-2xl\">\r\n          <DialogHeader>\r\n            <DialogTitle>Create Custom Prompt</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"system-prompt\">Custom Prompt</Label>\r\n              <Textarea\r\n                id=\"system-prompt\"\r\n                value={customSystemPrompt}\r\n                onChange={(e) => setCustomSystemPrompt(e.target.value)}\r\n                placeholder=\"Enter your custom prompt here...\"\r\n                rows={8}\r\n                className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n              />\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                This prompt will be applied as a system prompt to enhance the AI&apos;s behavior. It will be combined with existing system prompts and tool instructions.\r\n              </p>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={handleClearSystemPrompt}\r\n                className=\"text-red-400 hover:text-red-300\"\r\n              >\r\n                Clear System Prompt\r\n              </Button>\r\n              <div className=\"flex gap-2\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={() => {\r\n                    setModelInstructionsOpen(false);\r\n                    setCustomSystemPrompt('');\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={handleApplyModelInstructions}>\r\n                  Apply Prompt\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Quick Prompts Dialog */}\r\n      <Dialog open={quickPromptsOpen} onOpenChange={setQuickPromptsOpen}>\r\n        <DialogContent className=\"max-w-4xl max-h-[80vh]\">\r\n          <DialogHeader>\r\n            <DialogTitle>Quick Prompts</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4\">\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              Select a pre-made prompt to enhance the AI&apos;s behavior as a system prompt. These will be combined with existing system prompts and tool instructions.\r\n            </p>\r\n            <div className=\"max-h-96 overflow-y-auto space-y-2\">\r\n              {premadePrompts.map((prompt, index) => (\r\n                <div\r\n                  key={index}\r\n                  className=\"p-3 border border-border rounded-lg hover:bg-muted/50 cursor-pointer transition-colors\"\r\n                  onClick={() => handleQuickPromptSelect(prompt)}\r\n                >\r\n                  <div className=\"font-medium text-sm mb-1\">{prompt.title}</div>\r\n                  <div className=\"text-xs text-muted-foreground line-clamp-2\">\r\n                    {prompt.content}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              {premadePrompts.length === 0 && (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  Loading prompts...\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={handleClearSystemPrompt}\r\n                className=\"text-red-400 hover:text-red-300\"\r\n              >\r\n                Clear System Prompt\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => setQuickPromptsOpen(false)}\r\n              >\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\RightPanel.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1218,1270],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1702,1755],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { X } from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { mcpService, type MCPServer } from '../../services/mcpService';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface RightPanelProps {\r\n  className?: string;\r\n  isOpen?: boolean;\r\n  onClose?: () => void;\r\n  activePanel?: string;\r\n}\r\n\r\nexport function RightPanel({\r\n  className,\r\n  isOpen = false,\r\n  onClose,\r\n  activePanel\r\n}: RightPanelProps) {\r\n  const [mcpServers, setMcpServers] = useState<MCPServer[]>([]);\r\n  const [connectedServers, setConnectedServers] = useState<Set<string>>(new Set());\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Load MCP servers when panel opens\r\n  useEffect(() => {\r\n    if (isOpen && activePanel === 'mcp-servers') {\r\n      loadMCPServers();\r\n    }\r\n  }, [isOpen, activePanel]);\r\n\r\n  const loadMCPServers = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const servers = await mcpService.getServers();\r\n      setMcpServers(servers);\r\n\r\n      // Get connection status\r\n      const connectedIds = await mcpService.getConnectedServerIds();\r\n      setConnectedServers(new Set(connectedIds));\r\n    } catch (error) {\r\n      console.error('Failed to load MCP servers:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleToggleServer = async (serverId: string, currentEnabled: boolean) => {\r\n    try {\r\n      // Update server enabled status\r\n      const success = await mcpService.updateServer(serverId, { enabled: !currentEnabled });\r\n      if (success) {\r\n        // Reload servers to get updated state\r\n        await loadMCPServers();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to toggle MCP server:', error);\r\n    }\r\n  };\r\n\r\n\r\n  const renderPanelContent = () => {\r\n    switch (activePanel) {\r\n      case 'chat-history':\r\n        return (\r\n          <div className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">Chat History</h2>\r\n            <div className=\"text-gray-400\">\r\n              <p>Your conversation history will appear here.</p>\r\n              <p className=\"text-sm mt-2\">Select a conversation to load it in the main chat area.</p>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'mcp-servers':\r\n        return (\r\n          <div className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">MCP Servers</h2>\r\n            {isLoading ? (\r\n              <div className=\"flex items-center justify-center p-8\">\r\n                <div className=\"text-gray-400\">Loading MCP servers...</div>\r\n              </div>\r\n            ) : mcpServers.length === 0 ? (\r\n              <div className=\"text-gray-400 text-center p-8\">\r\n                <p>No MCP servers configured.</p>\r\n                <p className=\"text-sm mt-2\">Configure servers in Settings → MCP.</p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"space-y-3\">\r\n                {mcpServers.map((server) => {\r\n                  const isConnected = connectedServers.has(server.id);\r\n                  return (\r\n                    <div\r\n                      key={server.id}\r\n                      className=\"flex items-center justify-between p-3 rounded-lg bg-gray-800/50 border border-gray-700/50\"\r\n                    >\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <div className={cn(\r\n                          \"w-3 h-3 rounded-full\",\r\n                          server.enabled && isConnected ? \"bg-green-500\" :\r\n                          server.enabled ? \"bg-yellow-500\" : \"bg-gray-500\"\r\n                        )} />\r\n                        <div>\r\n                          <span className=\"font-medium text-white\">{server.name}</span>\r\n                          {server.description && (\r\n                            <p className=\"text-xs text-gray-400 mt-1\">{server.description}</p>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <button\r\n                        onClick={() => handleToggleServer(server.id, server.enabled)}\r\n                        className={cn(\r\n                          \"px-3 py-1 text-xs rounded-md transition-colors\",\r\n                          server.enabled\r\n                            ? \"bg-green-600/20 text-green-400 hover:bg-green-600/30\"\r\n                            : \"bg-gray-600/20 text-gray-400 hover:bg-gray-600/30\"\r\n                        )}\r\n                      >\r\n                        {server.enabled ? 'Enabled' : 'Disabled'}\r\n                      </button>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n\r\n      case 'prompts':\r\n        return (\r\n          <div className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">Prompts</h2>\r\n            <div className=\"text-gray-400\">\r\n              <p>Manage your custom prompts and templates here.</p>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'history':\r\n        return (\r\n          <div className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">Chat History</h2>\r\n            <div className=\"text-gray-400\">\r\n              <p>View and manage your conversation history here.</p>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'console':\r\n        return (\r\n          <div className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">Console</h2>\r\n            <div className=\"text-gray-400\">\r\n              <p>Debug console and logs will appear here.</p>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'settings':\r\n        return (\r\n          <div className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">Settings</h2>\r\n            <div className=\"space-y-6\">\r\n              {/* General Settings */}\r\n              <div>\r\n                <h3 className=\"text-lg font-medium text-white mb-3\">General</h3>\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-gray-300\">Language</span>\r\n                    <select className=\"bg-gray-800 border border-gray-700 rounded px-3 py-1 text-white\">\r\n                      <option>English</option>\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-gray-300\">Theme</span>\r\n                    <select className=\"bg-gray-800 border border-gray-700 rounded px-3 py-1 text-white\">\r\n                      <option>Dark</option>\r\n                      <option>Light</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Model Settings */}\r\n              <div>\r\n                <h3 className=\"text-lg font-medium text-white mb-3\">Model Settings</h3>\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-gray-300\">Local Models</span>\r\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                      <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked />\r\n                      <div className=\"w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-gray-300\">Remote Models</span>\r\n                    <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                      <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked />\r\n                      <div className=\"w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return (\r\n          <div className=\"p-6\">\r\n            <div className=\"text-gray-400 text-center\">\r\n              <p>Select an item from the sidebar to view its settings.</p>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div \r\n      className={cn(\r\n        \"w-96 bg-gray-900/50 border-l border-gray-800/50 flex flex-col\",\r\n        className\r\n      )}\r\n    >\r\n      {/* Panel Header */}\r\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-800/50\">\r\n        <h2 className=\"text-lg font-semibold text-white\">\r\n          {activePanel?.replace('-', ' ').toUpperCase() || 'Panel'}\r\n        </h2>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={onClose}\r\n          className=\"h-8 w-8 p-0 text-gray-400 hover:text-white hover:bg-gray-800/50\"\r\n          title=\"Close Panel\"\r\n        >\r\n          <X className=\"w-4 h-4\" />\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Panel Content */}\r\n      <div className=\"flex-1 overflow-y-auto\">\r\n        {renderPanelContent()}\r\n      </div>\r\n\r\n      {/* Panel Footer - Action buttons */}\r\n      <div className=\"p-4 border-t border-gray-800/50\">\r\n        <div className=\"flex items-center gap-2 justify-end\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"text-gray-400 hover:text-white\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"text-gray-400 hover:text-white\"\r\n          >\r\n            Reload\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\SettingsModal.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5680,5729],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6140,6189],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6371,6423],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":176,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":176,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6895,6945],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7064,7138],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7486,7536],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7847,7925],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7965,8021],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":271,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":271,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9556,9609],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9724,9797],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":279,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":279,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9882,9935],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":281,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":281,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9967,10023],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10082,10160],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":287,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":287,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10200,10256],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":295,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":295,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10440,10529],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":328,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":328,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11760,11827],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":348,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":348,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12383,12444],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":350,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":350,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12475,12542],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":370,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":370,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13185,13260],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":372,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":372,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13291,13372],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 33 to the 15 allowed.","line":496,"column":31,"nodeType":null,"messageId":"refactorFunction","endLine":496,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":498,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":498,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17329,17369],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":502,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":502,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17399,17464],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":503,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":503,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17470,17525],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":511,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":511,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17658,17718],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":513,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":513,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17797,17846],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":521,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":521,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18061,18126],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":523,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":523,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18180,18236],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":525,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":525,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[18275,18342],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":532,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":532,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18551,18610],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":537,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":537,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18738,18811],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":550,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":550,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19297,19361],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":566,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":566,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20005,20071],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":588,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":588,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[20669,20718],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":604,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":604,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[21133,21182],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":620,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":620,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21542,21609],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":621,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":621,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21621,21699],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":622,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":622,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21711,21836],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":626,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":626,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21991,22086],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":631,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":631,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22316,22438],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":631,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":631,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22376,22379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22376,22379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":639,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":639,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22689,22747],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":642,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":642,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22793,22849],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":687,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":687,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24125,24190],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":688,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":688,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24200,24280],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":689,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":689,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24290,24369],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":690,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":690,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24379,24556],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":705,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":705,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25043,25175],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":706,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":706,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25187,25293],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":725,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":725,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[25921,25979],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":780,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":780,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27946,28033],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1039,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1039,"endColumn":44,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[40738,40787],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1049,"column":35,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1049,"endColumn":46,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[41336,41401],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1055,"column":35,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1055,"endColumn":46,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[41670,41746],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1058,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1058,"endColumn":46,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[41864,41917],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":1089,"column":78,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[43741,43801],"text":" Download &quot;Voice Recorder\" app which installs premium voices"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[43741,43801],"text":" Download &ldquo;Voice Recorder\" app which installs premium voices"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[43741,43801],"text":" Download &#34;Voice Recorder\" app which installs premium voices"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[43741,43801],"text":" Download &rdquo;Voice Recorder\" app which installs premium voices"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":1089,"column":93,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[43741,43801],"text":" Download \"Voice Recorder&quot; app which installs premium voices"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[43741,43801],"text":" Download \"Voice Recorder&ldquo; app which installs premium voices"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[43741,43801],"text":" Download \"Voice Recorder&#34; app which installs premium voices"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[43741,43801],"text":" Download \"Voice Recorder&rdquo; app which installs premium voices"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":1096,"column":87,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[44223,44456],"text":" Electron apps are limited to locally installed voices. For the best voice selection,\r\n                              consider running this app in Chrome browser where Google&apos;s cloud voices are available.\r\n                            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[44223,44456],"text":" Electron apps are limited to locally installed voices. For the best voice selection,\r\n                              consider running this app in Chrome browser where Google&lsquo;s cloud voices are available.\r\n                            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[44223,44456],"text":" Electron apps are limited to locally installed voices. For the best voice selection,\r\n                              consider running this app in Chrome browser where Google&#39;s cloud voices are available.\r\n                            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[44223,44456],"text":" Electron apps are limited to locally installed voices. For the best voice selection,\r\n                              consider running this app in Chrome browser where Google&rsquo;s cloud voices are available.\r\n                            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1214,"column":31,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1214,"endColumn":44,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[50028,50072],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1440,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1440,"endColumn":44,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[61430,61527],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1448,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1448,"endColumn":44,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[61876,61924],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1722,"column":35,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1722,"endColumn":48,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[76952,77004],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1879,"column":27,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1879,"endColumn":38,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[84317,84388],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1921,"column":27,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1921,"endColumn":38,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[86156,86221],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1964,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1964,"endColumn":44,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[88300,88372],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1995,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1995,"endColumn":44,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[89891,89963],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2026,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2026,"endColumn":44,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[91473,91542],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2057,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2057,"endColumn":44,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[93058,93129],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":64,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { ToggleSwitch } from '../ui/toggle-switch';\r\nimport { Textarea } from '../ui/textarea';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';\r\nimport { settingsService, type AppSettings } from '../../services/settingsService';\r\nimport { MemoryManagement } from '../MemoryManagement';\r\nimport KnowledgeBaseSettings from '../KnowledgeBaseSettings';\r\nimport { mcpService, type MCPServer } from '../../services/mcpService';\r\nimport { PromptsContent } from '../PromptsContent';\r\nimport { ApiKeySettings } from '../ApiKeySettings';\r\nimport { getTTSService, type TTSVoice } from '../../services/textToSpeechService';\r\nimport type { TextToSpeechSettings } from '../../types/settings';\r\nimport { Plus, Trash2, Server, FileText, Palette, RotateCcw, X, Key, Keyboard, MessageSquare, Terminal, Brain, Database, Settings, Edit, Volume2 } from 'lucide-react';\r\nimport { ColorPicker } from '../ui/color-picker';\r\nimport { ThemeSelector } from '../ui/theme-selector';\r\nimport { useTheme } from '../../contexts/ThemeContext';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface SettingsModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  className?: string;\r\n}\r\n\r\ninterface SidebarItem {\r\n  id: string;\r\n  label: string;\r\n  icon: React.ReactNode;\r\n}\r\n\r\nconst sidebarItems: SidebarItem[] = [\r\n  { id: 'api-keys', label: 'API Keys', icon: <Key style={{ width: '16px', height: '16px' }} /> },\r\n  { id: 'shortcuts', label: 'Shortcuts', icon: <Keyboard style={{ width: '16px', height: '16px' }} /> },\r\n  { id: 'prompts', label: 'Prompts', icon: <FileText style={{ width: '16px', height: '16px' }} /> },\r\n  { id: 'chat', label: 'Chat', icon: <MessageSquare style={{ width: '16px', height: '16px' }} /> },\r\n  { id: 'text-to-speech', label: 'Text to Speech', icon: <Volume2 style={{ width: '16px', height: '16px' }} /> },\r\n  { id: 'mcp', label: 'MCP', icon: <Server style={{ width: '16px', height: '16px' }} /> },\r\n  { id: 'internal-commands', label: 'Commands', icon: <Terminal style={{ width: '16px', height: '16px' }} /> },\r\n  { id: 'memory', label: 'Memory', icon: <Brain style={{ width: '16px', height: '16px' }} /> },\r\n  { id: 'knowledge-base', label: 'Knowledge Base', icon: <Database style={{ width: '16px', height: '16px' }} /> },\r\n  { id: 'appearance', label: 'Appearance', icon: <Palette className=\"w-4 h-4\" /> },\r\n  { id: 'general', label: 'General', icon: <Settings className=\"w-4 h-4\" /> },\r\n];\r\n\r\nexport function SettingsModal({ isOpen, onClose, className }: SettingsModalProps) {\r\n  // Copy all state from SettingsOverlay\r\n  const [activeTab, setActiveTab] = useState('api-keys');\r\n  const [formData, setFormData] = useState<AppSettings | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n  const [saveError, setSaveError] = useState<string | null>(null);\r\n  const [saveSuccess, setSaveSuccess] = useState(false);\r\n  const apiKeySaveRef = useRef<(() => Promise<void>) | null>(null);\r\n  const {\r\n    customColors,\r\n    setCustomColors,\r\n    resetToDefaults,\r\n    selectedThemePreset,\r\n    setSelectedThemePreset,\r\n    colorMode,\r\n    setColorMode,\r\n    themePresets\r\n  } = useTheme();\r\n  const [mcpServers, setMcpServers] = useState<MCPServer[]>([]);\r\n  const [showAddMcpServer, setShowAddMcpServer] = useState(false);\r\n  const [editingMcpServer, setEditingMcpServer] = useState<MCPServer | null>(null);\r\n  const [showMcpJsonEditor, setShowMcpJsonEditor] = useState(false);\r\n  const [mcpJsonContent, setMcpJsonContent] = useState('');\r\n  const [newMcpServer, setNewMcpServer] = useState({\r\n    name: '',\r\n    command: '',\r\n    args: [] as string[],\r\n    description: '',\r\n    enabled: true,\r\n    env: {} as Record<string, string>\r\n  });\r\n\r\n  // Internal Commands state\r\n  const [internalCommandsEnabled, setInternalCommandsEnabled] = useState(false);\r\n  const [allowedDirectories, setAllowedDirectories] = useState<string[]>([]);\r\n  const [blockedCommands, setBlockedCommands] = useState<string[]>([]);\r\n  const [enabledCommandCategories, setEnabledCommandCategories] = useState({\r\n    terminal: true,\r\n    filesystem: true,\r\n    textEditing: true,\r\n    system: true\r\n  });\r\n  const [enabledTools, setEnabledTools] = useState<Record<string, boolean>>({});\r\n  const [availableTools, setAvailableTools] = useState<Array<{\r\n    name: string;\r\n    description: string;\r\n    category: string;\r\n    inputSchema: Record<string, unknown>;\r\n  }>>([]);\r\n\r\n\r\n\r\n  // TTS state\r\n  const [availableVoices, setAvailableVoices] = useState<TTSVoice[]>([]);\r\n  const [ttsSettings, setTtsSettings] = useState<TextToSpeechSettings>({\r\n    enabled: false,\r\n    voice: '',\r\n    rate: 1.0,\r\n    pitch: 1.0,\r\n    volume: 0.8,\r\n    autoPlay: false,\r\n  });\r\n  const [newDirectory, setNewDirectory] = useState('');\r\n  const [newBlockedCommand, setNewBlockedCommand] = useState('');\r\n\r\n  // Copy all utility functions from SettingsOverlay\r\n  const updateFormData = (updates: Partial<AppSettings>) => {\r\n    setFormData(prev => prev ? { ...prev, ...updates } : null);\r\n    setHasChanges(true);\r\n  };\r\n\r\n  const loadMcpJson = async () => {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        const jsonData = await window.electronAPI.getMCPServers();\r\n        setMcpJsonContent(JSON.stringify(jsonData, null, 2));\r\n        setShowMcpJsonEditor(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load MCP JSON:', error);\r\n    }\r\n  };\r\n\r\n  const handleSaveMcpJson = async () => {\r\n    try {\r\n      const parsedData = JSON.parse(mcpJsonContent);\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        const success = await window.electronAPI.saveMCPServers(parsedData);\r\n        if (success) {\r\n          setShowMcpJsonEditor(false);\r\n          loadMcpServers();\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save MCP JSON:', error);\r\n    }\r\n  };\r\n\r\n  const loadMcpServers = async () => {\r\n    try {\r\n      const servers = await mcpService.getServers();\r\n      setMcpServers(servers);\r\n    } catch (error) {\r\n      console.error('Failed to load MCP servers:', error);\r\n      setMcpServers([]);\r\n    }\r\n  };\r\n\r\n  const handleAddMcpServer = async () => {\r\n    try {\r\n      const success = await mcpService.addServer(newMcpServer);\r\n      if (success) {\r\n        setNewMcpServer({\r\n          name: '',\r\n          command: '',\r\n          args: [],\r\n          description: '',\r\n          enabled: true,\r\n          env: {}\r\n        });\r\n        setShowAddMcpServer(false);\r\n        await loadMcpServers();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to add MCP server:', error);\r\n    }\r\n  };\r\n\r\n  const handleUpdateMcpServer = async () => {\r\n    if (!editingMcpServer) return;\r\n\r\n    try {\r\n      console.log('🔧 Updating MCP server:', editingMcpServer.id, newMcpServer);\r\n      const success = await mcpService.updateServer(editingMcpServer.id, {\r\n        name: newMcpServer.name,\r\n        command: newMcpServer.command,\r\n        args: newMcpServer.args,\r\n        description: newMcpServer.description,\r\n        enabled: newMcpServer.enabled,\r\n        env: newMcpServer.env\r\n      });\r\n\r\n      if (success) {\r\n        console.log('🔧 MCP server updated successfully');\r\n        setEditingMcpServer(null);\r\n        setNewMcpServer({\r\n          name: '',\r\n          command: '',\r\n          args: [],\r\n          description: '',\r\n          enabled: true,\r\n          env: {}\r\n        });\r\n        setShowAddMcpServer(false);\r\n        await loadMcpServers();\r\n      } else {\r\n        console.error('🔧 Failed to update MCP server - updateServer returned false');\r\n      }\r\n    } catch (error) {\r\n      console.error('🔧 Failed to update MCP server:', error);\r\n    }\r\n  };\r\n\r\n  // Helper functions for managing arguments and environment variables\r\n  const addArgument = () => {\r\n    setNewMcpServer(prev => ({\r\n      ...prev,\r\n      args: [...prev.args, '']\r\n    }));\r\n  };\r\n\r\n  const removeArgument = (index: number) => {\r\n    setNewMcpServer(prev => ({\r\n      ...prev,\r\n      args: prev.args.filter((_, i) => i !== index)\r\n    }));\r\n  };\r\n\r\n  const updateArgument = (index: number, value: string) => {\r\n    setNewMcpServer(prev => ({\r\n      ...prev,\r\n      args: prev.args.map((arg, i) => i === index ? value : arg)\r\n    }));\r\n  };\r\n\r\n  const addEnvVariable = () => {\r\n    const key = `ENV_VAR_${Object.keys(newMcpServer.env).length + 1}`;\r\n    setNewMcpServer(prev => ({\r\n      ...prev,\r\n      env: { ...prev.env, [key]: '' }\r\n    }));\r\n  };\r\n\r\n  const removeEnvVariable = (key: string) => {\r\n    setNewMcpServer(prev => {\r\n      const newEnv = { ...prev.env };\r\n      delete newEnv[key];\r\n      return { ...prev, env: newEnv };\r\n    });\r\n  };\r\n\r\n  const updateEnvVariable = (oldKey: string, newKey: string, value: string) => {\r\n    setNewMcpServer(prev => {\r\n      const newEnv = { ...prev.env };\r\n      if (oldKey !== newKey) {\r\n        delete newEnv[oldKey];\r\n      }\r\n      newEnv[newKey] = value;\r\n      return { ...prev, env: newEnv };\r\n    });\r\n  };\r\n\r\n  const handleDeleteMcpServer = async (serverId: string) => {\r\n    try {\r\n      const success = await mcpService.removeServer(serverId);\r\n      if (success) {\r\n        await loadMcpServers();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to delete MCP server:', error);\r\n    }\r\n  };\r\n\r\n  const handleToggleMcpServer = async (serverId: string, enabled: boolean) => {\r\n    try {\r\n      console.log('🔧 Toggling MCP server:', serverId, 'to enabled:', enabled);\r\n      const success = await mcpService.updateServer(serverId, { enabled });\r\n      console.log('🔧 MCP server toggle result:', success);\r\n      if (success) {\r\n        console.log('🔧 Reloading MCP servers after toggle...');\r\n        await loadMcpServers();\r\n      } else {\r\n        console.error('🔧 Failed to toggle MCP server - updateServer returned false');\r\n      }\r\n    } catch (error) {\r\n      console.error('🔧 Failed to toggle MCP server:', error);\r\n    }\r\n  };\r\n\r\n  // Internal Commands functions\r\n  const loadInternalCommandsSettings = async () => {\r\n    try {\r\n      const currentSettings = settingsService.getSettings();\r\n      console.log('🔧 Loading internal commands settings:', currentSettings?.internalCommands);\r\n      if (currentSettings?.internalCommands) {\r\n        const enabled = currentSettings.internalCommands.enabled || false;\r\n        const directories = currentSettings.internalCommands.allowedDirectories || [];\r\n        const blocked = currentSettings.internalCommands.blockedCommands || [];\r\n        const commands = currentSettings.internalCommands.enabledCommands || {\r\n          terminal: true,\r\n          filesystem: true,\r\n          textEditing: true,\r\n          system: true\r\n        };\r\n        const tools = currentSettings.internalCommands.enabledTools || {};\r\n\r\n        setInternalCommandsEnabled(enabled);\r\n        setAllowedDirectories(directories);\r\n        setBlockedCommands(blocked);\r\n        setEnabledCommandCategories(commands);\r\n        setEnabledTools(tools);\r\n\r\n        // Also update formData to ensure it's in sync\r\n        setFormData(prev => prev ? {\r\n          ...prev,\r\n          internalCommands: {\r\n            ...prev.internalCommands,\r\n            enabled: enabled,\r\n            allowedDirectories: directories,\r\n            blockedCommands: blocked,\r\n            enabledCommands: commands,\r\n            enabledTools: tools\r\n          }\r\n        } : null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load internal commands settings:', error);\r\n    }\r\n  };\r\n\r\n  const saveInternalCommandsSettings = async () => {\r\n    try {\r\n      const currentSettings = settingsService.getSettings();\r\n      const updatedSettings = {\r\n        ...currentSettings,\r\n        internalCommands: {\r\n          ...currentSettings.internalCommands,\r\n          enabled: internalCommandsEnabled,\r\n          allowedDirectories,\r\n          blockedCommands,\r\n          enabledCommands: enabledCommandCategories,\r\n          enabledTools\r\n        }\r\n      };\r\n\r\n      await settingsService.updateSettings(updatedSettings);\r\n      console.log('Internal commands settings saved successfully');\r\n    } catch (error) {\r\n      console.error('Failed to save internal commands settings:', error);\r\n    }\r\n  };\r\n\r\n  const saveInternalCommandsSettingsWithCommands = async (commands: { terminal: boolean; filesystem: boolean; textEditing: boolean; system: boolean }) => {\r\n    try {\r\n      const currentSettings = settingsService.getSettings();\r\n      const updatedSettings = {\r\n        ...currentSettings,\r\n        internalCommands: {\r\n          ...currentSettings.internalCommands,\r\n          enabled: internalCommandsEnabled,\r\n          allowedDirectories,\r\n          blockedCommands,\r\n          enabledCommands: commands,\r\n          enabledTools\r\n        }\r\n      };\r\n\r\n      await settingsService.updateSettings(updatedSettings);\r\n      console.log('Internal commands settings with commands saved successfully');\r\n    } catch (error) {\r\n      console.error('Failed to save internal commands settings with commands:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddDirectory = () => {\r\n    if (newDirectory.trim() && !allowedDirectories.includes(newDirectory.trim())) {\r\n      const updatedDirectories = [...allowedDirectories, newDirectory.trim()];\r\n      setAllowedDirectories(updatedDirectories);\r\n      setNewDirectory('');\r\n      setHasChanges(true);\r\n\r\n      // Update formData with directory changes\r\n      setFormData(prev => prev ? {\r\n        ...prev,\r\n        internalCommands: {\r\n          ...prev.internalCommands,\r\n          enabled: internalCommandsEnabled,\r\n          allowedDirectories: updatedDirectories,\r\n          blockedCommands: blockedCommands,\r\n          enabledCommands: enabledCommandCategories,\r\n          enabledTools: enabledTools\r\n        }\r\n      } : null);\r\n\r\n      saveInternalCommandsSettings();\r\n    }\r\n  };\r\n\r\n  const handleRemoveDirectory = (directory: string) => {\r\n    const updatedDirectories = allowedDirectories.filter(d => d !== directory);\r\n    setAllowedDirectories(updatedDirectories);\r\n    setHasChanges(true);\r\n\r\n    // Update formData with directory changes\r\n    setFormData(prev => prev ? {\r\n      ...prev,\r\n      internalCommands: {\r\n        ...prev.internalCommands,\r\n        enabled: internalCommandsEnabled,\r\n        allowedDirectories: updatedDirectories,\r\n        blockedCommands: blockedCommands,\r\n        enabledCommands: enabledCommandCategories,\r\n        enabledTools: enabledTools\r\n      }\r\n    } : null);\r\n\r\n    saveInternalCommandsSettings();\r\n  };\r\n\r\n  const handleAddBlockedCommand = () => {\r\n    if (newBlockedCommand.trim() && !blockedCommands.includes(newBlockedCommand.trim())) {\r\n      const updatedCommands = [...blockedCommands, newBlockedCommand.trim()];\r\n      setBlockedCommands(updatedCommands);\r\n      setNewBlockedCommand('');\r\n      setHasChanges(true);\r\n\r\n      // Update formData with blocked command changes\r\n      setFormData(prev => prev ? {\r\n        ...prev,\r\n        internalCommands: {\r\n          ...prev.internalCommands,\r\n          enabled: internalCommandsEnabled,\r\n          allowedDirectories: allowedDirectories,\r\n          blockedCommands: updatedCommands,\r\n          enabledCommands: enabledCommandCategories,\r\n          enabledTools: enabledTools\r\n        }\r\n      } : null);\r\n\r\n      saveInternalCommandsSettings();\r\n    }\r\n  };\r\n\r\n  const handleRemoveBlockedCommand = (command: string) => {\r\n    const updatedCommands = blockedCommands.filter(c => c !== command);\r\n    setBlockedCommands(updatedCommands);\r\n    setHasChanges(true);\r\n\r\n    // Update formData with blocked command changes\r\n    setFormData(prev => prev ? {\r\n      ...prev,\r\n      internalCommands: {\r\n        ...prev.internalCommands,\r\n        enabled: internalCommandsEnabled,\r\n        allowedDirectories: allowedDirectories,\r\n        blockedCommands: updatedCommands,\r\n        enabledCommands: enabledCommandCategories,\r\n        enabledTools: enabledTools\r\n      }\r\n    } : null);\r\n\r\n    saveInternalCommandsSettings();\r\n  };\r\n\r\n  const handleCommandCategoryToggle = (category: string, enabled: boolean) => {\r\n    const updatedCommands = {\r\n      ...enabledCommandCategories,\r\n      [category]: enabled\r\n    };\r\n    setEnabledCommandCategories(updatedCommands);\r\n    setHasChanges(true);\r\n\r\n    // Update formData with command category changes\r\n    setFormData(prev => prev ? {\r\n      ...prev,\r\n      internalCommands: {\r\n        ...prev.internalCommands,\r\n        enabled: internalCommandsEnabled,\r\n        allowedDirectories: allowedDirectories,\r\n        blockedCommands: blockedCommands,\r\n        enabledCommands: updatedCommands,\r\n        enabledTools: enabledTools\r\n      }\r\n    } : null);\r\n\r\n    // Immediately save the settings with the updated commands\r\n    saveInternalCommandsSettingsWithCommands(updatedCommands);\r\n  };\r\n\r\n  const handleOpenMcpJsonEditor = () => {\r\n    loadMcpJson();\r\n  };\r\n\r\n  // Main save function (copied from SettingsOverlay)\r\n  const handleSave = async () => {\r\n    if (!formData) {\r\n      console.error('🔧 No formData to save');\r\n      return;\r\n    }\r\n\r\n    console.log('🔧 Starting save process with formData:', formData);\r\n    console.log('🔧 Theme data being saved:', formData.ui);\r\n\r\n    setIsLoading(true);\r\n    setSaveError(null);\r\n    setSaveSuccess(false);\r\n\r\n    try {\r\n      // Save general settings\r\n      console.log('🔧 Calling settingsService.updateSettings...');\r\n      const success = await settingsService.updateSettings(formData);\r\n      console.log('🔧 Settings save result:', success);\r\n\r\n      // Always save API keys if the save function is available\r\n      let apiKeySaveSuccess = true;\r\n      let apiKeyError: string | null = null;\r\n\r\n      if (apiKeySaveRef.current) {\r\n        try {\r\n          console.log('🔐 SettingsModal: Triggering API key save via ref');\r\n          await apiKeySaveRef.current();\r\n          console.log('🔐 SettingsModal: API key save completed');\r\n        } catch (error) {\r\n          console.error('🔐 SettingsModal: Failed to save API keys:', error);\r\n          apiKeySaveSuccess = false;\r\n          apiKeyError = error instanceof Error ? error.message : 'Unknown API key save error';\r\n        }\r\n      }\r\n\r\n      if (success && apiKeySaveSuccess) {\r\n        console.log('🔄 Settings and API keys saved successfully');\r\n\r\n        setHasChanges(false);\r\n\r\n        // Trigger model refresh for all components by dispatching a custom event\r\n        console.log('🔄 Settings saved successfully - triggering model refresh');\r\n        window.dispatchEvent(new CustomEvent('settingsSaved', {\r\n          detail: {\r\n            apiKeysSaved: apiKeySaveSuccess,\r\n            provider: formData.chat?.provider\r\n          }\r\n        }));\r\n\r\n        // If any theme-related settings were changed, notify other windows\r\n        if (formData.ui?.customColors ||\r\n            formData.ui?.useCustomColors !== undefined ||\r\n            formData.ui?.selectedThemePreset ||\r\n            formData.ui?.colorMode) {\r\n          console.log('Settings modal: Preparing to notify theme change');\r\n\r\n          if (typeof window !== 'undefined' && window.electronAPI) {\r\n            // Determine the actual colors to apply based on the current mode\r\n            let colorsToApply = customColors;\r\n            const currentMode = formData.ui.colorMode || colorMode;\r\n            const currentPreset = formData.ui.selectedThemePreset || selectedThemePreset;\r\n\r\n            if (currentMode === 'preset') {\r\n              // Use preset colors\r\n              const preset = themePresets.find(p => p.id === currentPreset);\r\n              if (preset) {\r\n                colorsToApply = preset.colors;\r\n              }\r\n            }\r\n\r\n            console.log('Notifying theme change with colors:', colorsToApply);\r\n            window.electronAPI.notifyThemeChange({\r\n              customColors: colorsToApply,\r\n              useCustomColors: currentMode === 'custom'\r\n            });\r\n          }\r\n        }\r\n\r\n        setSaveSuccess(true);\r\n        setTimeout(() => setSaveSuccess(false), 3000);\r\n\r\n        // Close the modal after successful save\r\n        onClose();\r\n      } else {\r\n        if (!success) {\r\n          setSaveError('Failed to save settings');\r\n        }\r\n        if (!apiKeySaveSuccess && apiKeyError) {\r\n          setSaveError(apiKeyError);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save settings:', error);\r\n      setSaveError(error instanceof Error ? error.message : 'Unknown error occurred');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Initialization (copied from SettingsOverlay)\r\n  useEffect(() => {\r\n    const loadSettings = async () => {\r\n      try {\r\n        const currentSettings = settingsService.getSettings();\r\n        setFormData(currentSettings);\r\n\r\n\r\n      } catch (error) {\r\n        console.error('Failed to load settings:', error);\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      loadSettings();\r\n      loadMcpServers();\r\n      loadInternalCommandsSettings();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Load available internal command tools only\r\n  useEffect(() => {\r\n    const loadAvailableTools = async () => {\r\n      try {\r\n        if (typeof window !== 'undefined' && window.electronAPI) {\r\n          console.log('🔧 SettingsModal: Loading internal command tools...');\r\n          console.log('🔧 SettingsModal: electronAPI available:', !!window.electronAPI);\r\n          console.log('🔧 SettingsModal: getInternalCommandsTools method exists:', typeof window.electronAPI.getInternalCommandsTools);\r\n\r\n          // First, ensure configuration is sent to Electron main process\r\n          const currentSettings = settingsService.getSettings();\r\n          console.log('🔧 SettingsModal: Sending config to Electron:', currentSettings.internalCommands);\r\n          await window.electronAPI.setInternalCommandsConfig(currentSettings.internalCommands);\r\n\r\n          // Now load the tools\r\n          const internalTools = await window.electronAPI.getInternalCommandsTools();\r\n          console.log(`🔧 SettingsModal: Received ${(internalTools as any[])?.length || 0} internal command tools:`, internalTools);\r\n          setAvailableTools((internalTools as Array<{\r\n            name: string;\r\n            description: string;\r\n            category: string;\r\n            inputSchema: Record<string, unknown>;\r\n          }>) || []);\r\n        } else {\r\n          console.log('🔧 SettingsModal: No electronAPI available');\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to load available tools:', error);\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      loadAvailableTools();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Initialize TTS and load voices\r\n  useEffect(() => {\r\n    if (isOpen && formData?.ui) {\r\n      // Ensure TTS settings exist with defaults\r\n      const defaultTtsSettings = {\r\n        enabled: false,\r\n        voice: '',\r\n        rate: 1.0,\r\n        pitch: 1.0,\r\n        volume: 0.8,\r\n        autoPlay: false,\r\n      };\r\n\r\n      const ttsSettings = formData.ui.textToSpeech || defaultTtsSettings;\r\n      setTtsSettings(ttsSettings);\r\n\r\n      // If TTS settings don't exist in formData, add them\r\n      if (!formData.ui.textToSpeech) {\r\n        updateFormData({\r\n          ui: {\r\n            ...formData.ui,\r\n            textToSpeech: defaultTtsSettings\r\n          }\r\n        });\r\n      }\r\n\r\n      // Initialize TTS service and load voices\r\n      try {\r\n        const ttsService = getTTSService(ttsSettings);\r\n        const allVoices = ttsService.getAvailableVoices();\r\n        const highQualityVoices = ttsService.getHighQualityVoices();\r\n        const sortedVoices = ttsService.getAllVoicesWithQualityInfo();\r\n\r\n        // Show all voices sorted by quality (don't filter too strictly)\r\n        const voicesToShow = sortedVoices.length > 0 ? sortedVoices : allVoices;\r\n\r\n        console.log('🔊 SettingsModal: Total voices:', allVoices.length);\r\n        console.log('🔊 SettingsModal: High-quality voices:', highQualityVoices.length);\r\n        console.log('🔊 SettingsModal: Showing voices (sorted):', voicesToShow.length);\r\n        console.log('🔊 SettingsModal: Voice details:', voicesToShow.map(v => ({\r\n          name: v.name,\r\n          lang: v.lang,\r\n          localService: v.localService\r\n        })));\r\n\r\n        setAvailableVoices(voicesToShow);\r\n\r\n        // Set up voice change listener\r\n        ttsService.onVoicesChanged(() => {\r\n          const allUpdatedVoices = ttsService.getAvailableVoices();\r\n          const highQualityUpdatedVoices = ttsService.getHighQualityVoices();\r\n          const sortedUpdatedVoices = ttsService.getAllVoicesWithQualityInfo();\r\n          const updatedVoicesToShow = sortedUpdatedVoices.length > 0 ? sortedUpdatedVoices : allUpdatedVoices;\r\n\r\n          console.log('🔊 SettingsModal: Voices updated - Total:', allUpdatedVoices.length, 'High-quality:', highQualityUpdatedVoices.length);\r\n          console.log('🔊 SettingsModal: Updated voice details:', updatedVoicesToShow.slice(0, 5).map(v => v.name));\r\n          setAvailableVoices(updatedVoicesToShow);\r\n\r\n          // If no voice is selected and voices are available, select the first high-quality one\r\n          if (!ttsSettings.voice && updatedVoicesToShow.length > 0) {\r\n            const newTtsSettings = {\r\n              ...ttsSettings,\r\n              voice: updatedVoicesToShow[0].name\r\n            };\r\n            setTtsSettings(newTtsSettings);\r\n            updateFormData({\r\n              ui: {\r\n                ...formData.ui,\r\n                textToSpeech: newTtsSettings\r\n              }\r\n            });\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Failed to initialize TTS service:', error);\r\n      }\r\n    }\r\n  }, [isOpen, formData?.ui]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className={cn(\"flex h-full bg-background text-foreground\", className)}>\r\n      {/* Left Sidebar */}\r\n      <div className=\"w-64 bg-muted/30 border-r border-border flex flex-col flex-shrink-0\">\r\n        {/* Header */}\r\n        <div className=\"p-4 border-b border-border flex items-center justify-between flex-shrink-0\">\r\n          <h2 className=\"text-sm font-semibold\">Settings</h2>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={onClose}\r\n            className=\"h-8 w-8 p-0 hover:bg-muted\"\r\n          >\r\n            <X style={{ width: '16px', height: '16px' }} />\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Navigation */}\r\n        <div className=\"flex-1 overflow-y-auto p-1\">\r\n          <div className=\"space-y-0.5\">\r\n            {sidebarItems.map((item) => (\r\n              <button\r\n                key={item.id}\r\n                onClick={() => setActiveTab(item.id)}\r\n                className={cn(\r\n                  \"w-full flex items-center gap-2 px-2 py-1.5 text-xs rounded-md transition-colors text-left\",\r\n                  activeTab === item.id\r\n                    ? \"bg-primary text-primary-foreground\"\r\n                    : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"\r\n                )}\r\n              >\r\n                {item.icon}\r\n                {item.label}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Save/Cancel Buttons */}\r\n        <div className=\"p-2 border-t border-border space-y-1 flex-shrink-0\">\r\n          {saveError && (\r\n            <div className=\"text-xs text-destructive mb-1\">{saveError}</div>\r\n          )}\r\n          {saveSuccess && (\r\n            <div className=\"text-xs text-green-600 mb-1\">Settings saved successfully!</div>\r\n          )}\r\n          <Button\r\n            onClick={() => {\r\n              console.log('🔧 Save button clicked - hasChanges:', hasChanges, 'formData:', formData);\r\n              handleSave();\r\n            }}\r\n            disabled={isLoading || !hasChanges}\r\n            className=\"w-full h-7 text-xs\"\r\n          >\r\n            {isLoading ? 'Saving...' : 'Save Settings'}\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={onClose}\r\n            className=\"w-full h-7 text-xs\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content Area */}\r\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\r\n        {/* Content */}\r\n        <div className=\"flex-1 overflow-y-auto p-2\">\r\n          {/* API Keys Tab */}\r\n          {activeTab === 'api-keys' && (\r\n            <ApiKeySettings\r\n              onApiKeyChange={() => setHasChanges(true)}\r\n              onRegisterSaveFunction={(saveFunction: () => Promise<void>) => {\r\n                apiKeySaveRef.current = saveFunction;\r\n              }}\r\n            />\r\n          )}\r\n\r\n          {/* Shortcuts Tab */}\r\n          {activeTab === 'shortcuts' && formData?.shortcuts && (\r\n            <div className=\"space-y-3\">\r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2\">Keyboard Shortcuts</h3>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"space-y-1\">\r\n                    <Label htmlFor=\"toggle-window\" className=\"text-xs\">Toggle Window</Label>\r\n                    <Input\r\n                      id=\"toggle-window\"\r\n                      value={formData.shortcuts.toggleWindow}\r\n                      placeholder=\"CommandOrControl+Shift+L\"\r\n                      className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                      onChange={(e) => updateFormData({\r\n                        shortcuts: { ...formData.shortcuts, toggleWindow: e.target.value }\r\n                      })}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    <Label htmlFor=\"process-clipboard\" className=\"text-xs\">Process Clipboard</Label>\r\n                    <Input\r\n                      id=\"process-clipboard\"\r\n                      value={formData.shortcuts.processClipboard}\r\n                      placeholder=\"CommandOrControl+Shift+V\"\r\n                      className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                      onChange={(e) => updateFormData({\r\n                        shortcuts: { ...formData.shortcuts, processClipboard: e.target.value }\r\n                      })}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    <Label htmlFor=\"action-menu\" className=\"text-xs\">Action Menu</Label>\r\n                    <Input\r\n                      id=\"action-menu\"\r\n                      value={formData.shortcuts.actionMenu}\r\n                      placeholder=\"CommandOrControl+Shift+Space\"\r\n                      className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                      onChange={(e) => updateFormData({\r\n                        shortcuts: { ...formData.shortcuts, actionMenu: e.target.value }\r\n                      })}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    <Label htmlFor=\"open-shortcuts\" className=\"text-xs\">Open Shortcuts</Label>\r\n                    <Input\r\n                      id=\"open-shortcuts\"\r\n                      value={formData.shortcuts.openShortcuts}\r\n                      placeholder=\"CommandOrControl+Shift+K\"\r\n                      className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                      onChange={(e) => updateFormData({\r\n                        shortcuts: { ...formData.shortcuts, openShortcuts: e.target.value }\r\n                      })}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Prompts Tab */}\r\n          {activeTab === 'prompts' && (\r\n            <div className=\"space-y-3\">\r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2\">Prompts Management</h3>\r\n                <PromptsContent onPromptSelect={() => {}} />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Chat Tab */}\r\n          {activeTab === 'chat' && (\r\n            <div className=\"space-y-3\">\r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2\">Chat Configuration</h3>\r\n                <div className=\"space-y-2\">\r\n                  {formData?.chat && (\r\n                    <>\r\n                      <div className=\"space-y-1\">\r\n                        <Label htmlFor=\"system-prompt\" className=\"text-xs\">Default System Prompt</Label>\r\n                        <Textarea\r\n                          id=\"system-prompt\"\r\n                          value={formData.chat.systemPrompt || ''}\r\n                          placeholder=\"Enter your default system prompt that will be used for all conversations...\"\r\n                          rows={3}\r\n                          className=\"text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                          onChange={(e) => updateFormData({\r\n                            chat: { ...formData.chat, systemPrompt: e.target.value }\r\n                          })}\r\n                        />\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          This prompt will be sent with every conversation to set the AI behavior and personality.\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"grid grid-cols-2 gap-2\">\r\n                        <div className=\"space-y-1\">\r\n                          <Label htmlFor=\"temperature\" className=\"text-xs\">Temperature</Label>\r\n                          <Input\r\n                            id=\"temperature\"\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            max=\"2\"\r\n                            step=\"0.1\"\r\n                            value={formData.chat.temperature}\r\n                            className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                            onChange={(e) => updateFormData({\r\n                              chat: { ...formData.chat, temperature: parseFloat(e.target.value) || 0 }\r\n                            })}\r\n                          />\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            Controls randomness (0.0 = focused, 2.0 = creative)\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"space-y-1\">\r\n                          <Label htmlFor=\"max-tokens\" className=\"text-xs\">Max Tokens</Label>\r\n                          <Input\r\n                            id=\"max-tokens\"\r\n                            type=\"number\"\r\n                            min=\"1\"\r\n                            max=\"32768\"\r\n                            value={formData.chat.maxTokens}\r\n                            className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                            onChange={(e) => updateFormData({\r\n                              chat: { ...formData.chat, maxTokens: parseInt(e.target.value) || 8192 }\r\n                            })}\r\n                          />\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            Maximum response length\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <ToggleSwitch\r\n                          size=\"sm\"\r\n                          enabled={formData.chat.toolCallingEnabled}\r\n                          onToggle={(enabled: boolean) => updateFormData({\r\n                            chat: { ...formData.chat, toolCallingEnabled: enabled }\r\n                          })}\r\n                        />\r\n                        <div>\r\n                          <Label className=\"text-xs\">Enable Tool Calling</Label>\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            Allow the AI to use external tools and functions\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Text to Speech Tab */}\r\n          {activeTab === 'text-to-speech' && formData?.ui?.textToSpeech && (\r\n            <div className=\"space-y-3\">\r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2\">Text to Speech</h3>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <ToggleSwitch\r\n                      size=\"sm\"\r\n                      enabled={ttsSettings.enabled}\r\n                      onToggle={(enabled: boolean) => {\r\n                        const newTtsSettings = { ...ttsSettings, enabled };\r\n                        setTtsSettings(newTtsSettings);\r\n                        updateFormData({\r\n                          ui: {\r\n                            ...formData.ui,\r\n                            textToSpeech: newTtsSettings\r\n                          }\r\n                        });\r\n                      }}\r\n                    />\r\n                    <div>\r\n                      <Label className=\"text-xs\">Enable Text to Speech</Label>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        Enable voice synthesis for AI responses\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {ttsSettings.enabled && (\r\n                    <>\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"voice-select\">Voice</Label>\r\n                        <Select\r\n                          value={ttsSettings.voice}\r\n                          onValueChange={(value) => {\r\n                            const newTtsSettings = { ...ttsSettings, voice: value };\r\n                            setTtsSettings(newTtsSettings);\r\n                            updateFormData({\r\n                              ui: {\r\n                                ...formData.ui,\r\n                                textToSpeech: newTtsSettings\r\n                              }\r\n                            });\r\n                          }}\r\n                        >\r\n                          <SelectTrigger className=\"bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\">\r\n                            <SelectValue placeholder=\"Select a voice\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {availableVoices.map((voice) => (\r\n                              <SelectItem key={voice.name} value={voice.name}>\r\n                                <div className=\"flex flex-col\">\r\n                                  <span className=\"font-medium\">\r\n                                    {voice.name}\r\n                                    {voice.name.toLowerCase().includes('google') && ' 🎯'}\r\n                                    {voice.name.toLowerCase().includes('neural') && ' ⚡'}\r\n                                  </span>\r\n                                  <span className=\"text-xs text-muted-foreground\">\r\n                                    {voice.lang} • {voice.localService ? 'Local' : 'Remote/Cloud'}\r\n                                  </span>\r\n                                </div>\r\n                              </SelectItem>\r\n                            ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            Choose a voice for speech synthesis. 🎯 = Google voices, ⚡ = Neural voices. Remote/Cloud voices typically offer the best quality.\r\n                          </p>\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={() => {\r\n                              try {\r\n                                console.log('🔊 Manual voice refresh triggered');\r\n                                const ttsService = getTTSService(ttsSettings);\r\n\r\n                                // Force voice reload\r\n                                if (typeof window !== 'undefined' && window.speechSynthesis) {\r\n                                  // Cancel any ongoing speech\r\n                                  window.speechSynthesis.cancel();\r\n\r\n                                  // Trigger voice loading\r\n                                  const voices = window.speechSynthesis.getVoices();\r\n                                  console.log('🔊 Manual refresh: Found', voices.length, 'voices');\r\n\r\n                                  // Update available voices\r\n                                  const sortedVoices = ttsService.getAllVoicesWithQualityInfo();\r\n                                  setAvailableVoices(sortedVoices);\r\n\r\n                                  console.log('🔊 Manual refresh: Updated to', sortedVoices.length, 'voices');\r\n                                }\r\n                              } catch (error) {\r\n                                console.error('🔊 Failed to refresh voices:', error);\r\n                              }\r\n                            }}\r\n                            className=\"text-xs\"\r\n                          >\r\n                            Refresh Voices\r\n                          </Button>\r\n                        </div>\r\n\r\n                        {/* Voice count and help */}\r\n                        <div className=\"text-xs text-muted-foreground bg-muted/30 p-3 rounded-lg\">\r\n                          <div className=\"flex items-center justify-between mb-2\">\r\n                            <span>Available voices: {availableVoices.length}</span>\r\n                            <span>\r\n                              {availableVoices.filter(v => !v.localService).length} remote voices\r\n                            </span>\r\n                          </div>\r\n\r\n                          {availableVoices.filter(v => v.name.toLowerCase().includes('google')).length === 0 && (\r\n                            <div className=\"mb-3 p-2 bg-yellow-500/10 border border-yellow-500/20 rounded\">\r\n                              <p className=\"font-medium text-yellow-400 mb-1\">🚨 No Google Voices Found</p>\r\n                              <p className=\"text-yellow-300\">\r\n                                Google voices (including Whisper-quality voices) are only available in Chrome browser, not in Electron apps.\r\n                              </p>\r\n                            </div>\r\n                          )}\r\n\r\n                          <div className=\"space-y-2\">\r\n                            <p className=\"font-medium\">💡 To get Google voices:</p>\r\n                            <ul className=\"space-y-1 ml-4\">\r\n                              <li>• <strong>Chrome Browser:</strong> Open this app in Chrome for Google cloud voices</li>\r\n                              <li>• <strong>Windows Store:</strong> Download \"Voice Recorder\" app which installs premium voices</li>\r\n                              <li>• <strong>Windows Settings:</strong> Settings → Time & Language → Speech → Manage voices</li>\r\n                              <li>• <strong>Speech Platform:</strong> Download Microsoft Speech Platform Runtime + voices</li>\r\n                            </ul>\r\n\r\n                            <p className=\"mt-2 text-xs opacity-75\">\r\n                              <strong>Note:</strong> Electron apps are limited to locally installed voices. For the best voice selection,\r\n                              consider running this app in Chrome browser where Google's cloud voices are available.\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"grid grid-cols-2 gap-4\">\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"speech-rate\">Rate: {ttsSettings.rate.toFixed(1)}</Label>\r\n                          <input\r\n                            id=\"speech-rate\"\r\n                            type=\"range\"\r\n                            min=\"0.1\"\r\n                            max=\"3.0\"\r\n                            step=\"0.1\"\r\n                            value={ttsSettings.rate}\r\n                            className=\"w-full\"\r\n                            onChange={(e) => {\r\n                              const newTtsSettings = { ...ttsSettings, rate: parseFloat(e.target.value) };\r\n                              setTtsSettings(newTtsSettings);\r\n                              updateFormData({\r\n                                ui: {\r\n                                  ...formData.ui,\r\n                                  textToSpeech: newTtsSettings\r\n                                }\r\n                              });\r\n                            }}\r\n                          />\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            Speech speed (0.1 = very slow, 3.0 = very fast)\r\n                          </p>\r\n                        </div>\r\n\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"speech-pitch\">Pitch: {ttsSettings.pitch.toFixed(1)}</Label>\r\n                          <input\r\n                            id=\"speech-pitch\"\r\n                            type=\"range\"\r\n                            min=\"0\"\r\n                            max=\"2\"\r\n                            step=\"0.1\"\r\n                            value={ttsSettings.pitch}\r\n                            className=\"w-full\"\r\n                            onChange={(e) => {\r\n                              const newTtsSettings = { ...ttsSettings, pitch: parseFloat(e.target.value) };\r\n                              setTtsSettings(newTtsSettings);\r\n                              updateFormData({\r\n                                ui: {\r\n                                  ...formData.ui,\r\n                                  textToSpeech: newTtsSettings\r\n                                }\r\n                              });\r\n                            }}\r\n                          />\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            Voice pitch (0 = low, 2 = high)\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"speech-volume\">Volume: {Math.round(ttsSettings.volume * 100)}%</Label>\r\n                        <input\r\n                          id=\"speech-volume\"\r\n                          type=\"range\"\r\n                          min=\"0\"\r\n                          max=\"1\"\r\n                          step=\"0.1\"\r\n                          value={ttsSettings.volume}\r\n                          className=\"w-full\"\r\n                          onChange={(e) => {\r\n                            const newTtsSettings = { ...ttsSettings, volume: parseFloat(e.target.value) };\r\n                            setTtsSettings(newTtsSettings);\r\n                            updateFormData({\r\n                              ui: {\r\n                                ...formData.ui,\r\n                                textToSpeech: newTtsSettings\r\n                              }\r\n                            });\r\n                          }}\r\n                        />\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          Speech volume level\r\n                        </p>\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <ToggleSwitch\r\n                          size=\"sm\"\r\n                          enabled={ttsSettings.autoPlay}\r\n                          onToggle={(enabled: boolean) => {\r\n                            const newTtsSettings = { ...ttsSettings, autoPlay: enabled };\r\n                            setTtsSettings(newTtsSettings);\r\n                            updateFormData({\r\n                              ui: {\r\n                                ...formData.ui,\r\n                                textToSpeech: newTtsSettings\r\n                              }\r\n                            });\r\n                          }}\r\n                        />\r\n                        <div>\r\n                          <Label className=\"text-xs\">Auto-play AI Responses</Label>\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            Automatically speak AI responses when they arrive\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/* Test Voice Button */}\r\n                      <div className=\"pt-4 border-t border-border\">\r\n                        <Button\r\n                          variant=\"outline\"\r\n                          onClick={() => {\r\n                            try {\r\n                              const ttsService = getTTSService(ttsSettings);\r\n                              ttsService.speak(\"Hello! This is a test of the text to speech functionality. How does it sound?\");\r\n                            } catch (error) {\r\n                              console.error('Failed to test TTS:', error);\r\n                            }\r\n                          }}\r\n                          className=\"w-full\"\r\n                        >\r\n                          <Volume2 className=\"w-4 h-4 mr-2\" />\r\n                          Test Voice\r\n                        </Button>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* MCP Tab */}\r\n          {activeTab === 'mcp' && (\r\n            <div className=\"space-y-3\">\r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2\">MCP Servers</h3>\r\n                <div className=\"space-y-2\">\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    Configure Model Context Protocol (MCP) servers for enhanced functionality.\r\n                  </p>\r\n\r\n                  {/* Add Server Button */}\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <div className=\"text-xs text-muted-foreground\">\r\n                      {mcpServers.length} server{mcpServers.length !== 1 ? 's' : ''} configured\r\n                    </div>\r\n                    <div className=\"flex gap-2\">\r\n                      <Button\r\n                        variant=\"outline\"\r\n                        size=\"sm\"\r\n                        onClick={handleOpenMcpJsonEditor}\r\n                        className=\"flex items-center gap-2\"\r\n                      >\r\n                        <FileText className=\"h-4 w-4\" />\r\n                        Edit JSON\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"outline\"\r\n                        size=\"sm\"\r\n                        onClick={() => setShowAddMcpServer(true)}\r\n                        className=\"flex items-center gap-2\"\r\n                      >\r\n                        <Plus className=\"h-4 w-4\" />\r\n                        Add Server\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Add New Server Form */}\r\n                  {showAddMcpServer && !editingMcpServer && (\r\n                    <div className=\"border border-border rounded-lg p-2 space-y-2 bg-background\">\r\n                      <h4 className=\"text-xs font-medium\">Add New MCP Server</h4>\r\n                      <div className=\"grid grid-cols-2 gap-2\">\r\n                        <div className=\"space-y-1\">\r\n                          <Label htmlFor=\"mcp-name\" className=\"text-xs\">Server Name</Label>\r\n                          <Input\r\n                            id=\"mcp-name\"\r\n                            value={newMcpServer.name}\r\n                            placeholder=\"My MCP Server\"\r\n                            className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                            onChange={(e) => setNewMcpServer(prev => ({ ...prev, name: e.target.value }))}\r\n                          />\r\n                        </div>\r\n                        <div className=\"space-y-1\">\r\n                          <Label htmlFor=\"mcp-command\" className=\"text-xs\">Command</Label>\r\n                          <Input\r\n                            id=\"mcp-command\"\r\n                            value={newMcpServer.command}\r\n                            placeholder=\"node server.js\"\r\n                            className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                            onChange={(e) => setNewMcpServer(prev => ({ ...prev, command: e.target.value }))}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"space-y-1\">\r\n                        <Label htmlFor=\"mcp-description\" className=\"text-xs\">Description (Optional)</Label>\r\n                        <Input\r\n                          id=\"mcp-description\"\r\n                          value={newMcpServer.description}\r\n                          placeholder=\"Description of what this server does\"\r\n                          className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                          onChange={(e) => setNewMcpServer(prev => ({ ...prev, description: e.target.value }))}\r\n                        />\r\n                      </div>\r\n\r\n                      {/* Arguments Section */}\r\n                      <div className=\"space-y-1\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <Label className=\"text-xs\">Arguments</Label>\r\n                          <Button\r\n                            type=\"button\"\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={addArgument}\r\n                            className=\"h-6 text-xs flex items-center gap-1\"\r\n                          >\r\n                            <Plus className=\"h-3 w-3\" />\r\n                            Add Argument\r\n                          </Button>\r\n                        </div>\r\n                        {newMcpServer.args.map((arg, index) => (\r\n                          <div key={index} className=\"flex gap-1\">\r\n                            <Input\r\n                              value={arg}\r\n                              placeholder={`Argument ${index + 1}`}\r\n                              className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                              onChange={(e) => updateArgument(index, e.target.value)}\r\n                            />\r\n                            <Button\r\n                              type=\"button\"\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => removeArgument(index)}\r\n                              className=\"h-7 w-7 p-0 text-destructive hover:text-destructive\"\r\n                            >\r\n                              <Trash2 className=\"h-3 w-3\" />\r\n                            </Button>\r\n                          </div>\r\n                        ))}\r\n                        {newMcpServer.args.length === 0 && (\r\n                          <p className=\"text-xs text-muted-foreground\">No arguments configured</p>\r\n                        )}\r\n                      </div>\r\n\r\n                      {/* Environment Variables Section */}\r\n                      <div className=\"space-y-1\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <Label className=\"text-xs\">Environment Variables</Label>\r\n                          <Button\r\n                            type=\"button\"\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={addEnvVariable}\r\n                            className=\"h-6 text-xs flex items-center gap-1\"\r\n                          >\r\n                            <Plus className=\"h-3 w-3\" />\r\n                            Add Variable\r\n                          </Button>\r\n                        </div>\r\n                        {Object.entries(newMcpServer.env).map(([key, value]) => (\r\n                          <div key={key} className=\"flex gap-1\">\r\n                            <Input\r\n                              value={key}\r\n                              placeholder=\"Variable name\"\r\n                              className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                              onChange={(e) => updateEnvVariable(key, e.target.value, value)}\r\n                            />\r\n                            <Input\r\n                              value={value}\r\n                              placeholder=\"Variable value\"\r\n                              className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                              onChange={(e) => updateEnvVariable(key, key, e.target.value)}\r\n                            />\r\n                            <Button\r\n                              type=\"button\"\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => removeEnvVariable(key)}\r\n                              className=\"h-7 w-7 p-0 text-destructive hover:text-destructive\"\r\n                            >\r\n                              <Trash2 className=\"h-3 w-3\" />\r\n                            </Button>\r\n                          </div>\r\n                        ))}\r\n                        {Object.keys(newMcpServer.env).length === 0 && (\r\n                          <p className=\"text-xs text-muted-foreground\">No environment variables configured</p>\r\n                        )}\r\n                      </div>\r\n\r\n                      <div className=\"flex justify-end gap-1\">\r\n                        <Button\r\n                          variant=\"outline\"\r\n                          size=\"sm\"\r\n                          onClick={() => {\r\n                            setShowAddMcpServer(false);\r\n                            setEditingMcpServer(null);\r\n                            setNewMcpServer({\r\n                              name: '',\r\n                              command: '',\r\n                              args: [],\r\n                              description: '',\r\n                              enabled: true,\r\n                              env: {}\r\n                            });\r\n                          }}\r\n                          className=\"h-7 text-xs\"\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                        <Button\r\n                          onClick={handleAddMcpServer}\r\n                          size=\"sm\"\r\n                          className=\"h-7 text-xs\"\r\n                        >\r\n                          Add Server\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Server List */}\r\n                  <div className=\"space-y-2\">\r\n                    {mcpServers.map((server) => (\r\n                      <div key={server.name}>\r\n                        <div className=\"flex items-center justify-between p-2 border border-border rounded-lg bg-background\">\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Server className=\"h-3 w-3 text-muted-foreground\" />\r\n                            <div>\r\n                              <div className=\"text-xs font-medium\">{server.name}</div>\r\n                              <div className=\"text-xs text-muted-foreground\">{server.command}</div>\r\n                              {server.description && (\r\n                                <div className=\"text-xs text-muted-foreground\">{server.description}</div>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <ToggleSwitch\r\n                              size=\"sm\"\r\n                              enabled={server.enabled}\r\n                              onToggle={(enabled) => {\r\n                                console.log('🔧 MCP Server toggle clicked:', server.name, 'id:', server.id, 'enabled:', enabled);\r\n                                handleToggleMcpServer(server.id, enabled);\r\n                              }}\r\n                            />\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                console.log('🔧 Edit MCP server:', server.name);\r\n                                if (editingMcpServer?.id === server.id) {\r\n                                  // If already editing this server, close the form\r\n                                  setEditingMcpServer(null);\r\n                                  setShowAddMcpServer(false);\r\n                                } else {\r\n                                  // Edit this server\r\n                                  setEditingMcpServer(server);\r\n                                  setNewMcpServer({\r\n                                    name: server.name,\r\n                                    command: server.command,\r\n                                    args: server.args || [],\r\n                                    description: server.description || '',\r\n                                    enabled: server.enabled,\r\n                                    env: server.env || {}\r\n                                  });\r\n                                  setShowAddMcpServer(true);\r\n                                }\r\n                              }}\r\n                              className=\"h-6 w-6 p-0 text-muted-foreground hover:text-foreground\"\r\n                            >\r\n                              <Edit className=\"h-3 w-3\" />\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => handleDeleteMcpServer(server.id)}\r\n                              className=\"h-6 w-6 p-0 text-destructive hover:text-destructive\"\r\n                            >\r\n                              <Trash2 className=\"h-3 w-3\" />\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* Inline Edit Form - appears right below the server being edited */}\r\n                        {editingMcpServer?.id === server.id && showAddMcpServer && (\r\n                          <div className=\"mt-1 border border-border rounded-lg p-2 space-y-2 bg-muted/30\">\r\n                            <h4 className=\"text-xs font-medium\">Edit MCP Server</h4>\r\n                            <div className=\"grid grid-cols-2 gap-2\">\r\n                              <div className=\"space-y-1\">\r\n                                <Label htmlFor=\"mcp-name\" className=\"text-xs\">Server Name</Label>\r\n                                <Input\r\n                                  id=\"mcp-name\"\r\n                                  value={newMcpServer.name}\r\n                                  placeholder=\"My MCP Server\"\r\n                                  className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                                  onChange={(e) => setNewMcpServer(prev => ({ ...prev, name: e.target.value }))}\r\n                                />\r\n                              </div>\r\n                              <div className=\"space-y-1\">\r\n                                <Label htmlFor=\"mcp-command\" className=\"text-xs\">Command</Label>\r\n                                <Input\r\n                                  id=\"mcp-command\"\r\n                                  value={newMcpServer.command}\r\n                                  placeholder=\"node server.js\"\r\n                                  className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                                  onChange={(e) => setNewMcpServer(prev => ({ ...prev, command: e.target.value }))}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"space-y-1\">\r\n                              <Label htmlFor=\"mcp-description\" className=\"text-xs\">Description (Optional)</Label>\r\n                              <Input\r\n                                id=\"mcp-description\"\r\n                                value={newMcpServer.description}\r\n                                placeholder=\"Description of what this server does\"\r\n                                className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                                onChange={(e) => setNewMcpServer(prev => ({ ...prev, description: e.target.value }))}\r\n                              />\r\n                            </div>\r\n\r\n                            {/* Arguments Section */}\r\n                            <div className=\"space-y-1\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <Label className=\"text-xs\">Arguments</Label>\r\n                                <Button\r\n                                  type=\"button\"\r\n                                  variant=\"outline\"\r\n                                  size=\"sm\"\r\n                                  onClick={addArgument}\r\n                                  className=\"h-6 text-xs flex items-center gap-1\"\r\n                                >\r\n                                  <Plus className=\"h-3 w-3\" />\r\n                                  Add Argument\r\n                                </Button>\r\n                              </div>\r\n                              {newMcpServer.args.map((arg, index) => (\r\n                                <div key={index} className=\"flex gap-1\">\r\n                                  <Input\r\n                                    value={arg}\r\n                                    placeholder={`Argument ${index + 1}`}\r\n                                    className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                                    onChange={(e) => updateArgument(index, e.target.value)}\r\n                                  />\r\n                                  <Button\r\n                                    type=\"button\"\r\n                                    variant=\"ghost\"\r\n                                    size=\"sm\"\r\n                                    onClick={() => removeArgument(index)}\r\n                                    className=\"h-7 w-7 p-0 text-destructive hover:text-destructive\"\r\n                                  >\r\n                                    <Trash2 className=\"h-3 w-3\" />\r\n                                  </Button>\r\n                                </div>\r\n                              ))}\r\n                              {newMcpServer.args.length === 0 && (\r\n                                <p className=\"text-xs text-muted-foreground\">No arguments configured</p>\r\n                              )}\r\n                            </div>\r\n\r\n                            {/* Environment Variables Section */}\r\n                            <div className=\"space-y-1\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <Label className=\"text-xs\">Environment Variables</Label>\r\n                                <Button\r\n                                  type=\"button\"\r\n                                  variant=\"outline\"\r\n                                  size=\"sm\"\r\n                                  onClick={addEnvVariable}\r\n                                  className=\"h-6 text-xs flex items-center gap-1\"\r\n                                >\r\n                                  <Plus className=\"h-3 w-3\" />\r\n                                  Add Variable\r\n                                </Button>\r\n                              </div>\r\n                              {Object.entries(newMcpServer.env).map(([key, value]) => (\r\n                                <div key={key} className=\"flex gap-1\">\r\n                                  <Input\r\n                                    value={key}\r\n                                    placeholder=\"Variable name\"\r\n                                    className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                                    onChange={(e) => updateEnvVariable(key, e.target.value, value)}\r\n                                  />\r\n                                  <Input\r\n                                    value={value}\r\n                                    placeholder=\"Variable value\"\r\n                                    className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                                    onChange={(e) => updateEnvVariable(key, key, e.target.value)}\r\n                                  />\r\n                                  <Button\r\n                                    type=\"button\"\r\n                                    variant=\"outline\"\r\n                                    size=\"sm\"\r\n                                    onClick={() => removeEnvVariable(key)}\r\n                                    className=\"h-7 w-7 p-0 text-destructive hover:text-destructive\"\r\n                                  >\r\n                                    <Trash2 className=\"h-3 w-3\" />\r\n                                  </Button>\r\n                                </div>\r\n                              ))}\r\n                              {Object.keys(newMcpServer.env).length === 0 && (\r\n                                <p className=\"text-xs text-muted-foreground\">No environment variables configured</p>\r\n                              )}\r\n                            </div>\r\n\r\n                            <div className=\"flex justify-end gap-1\">\r\n                              <Button\r\n                                variant=\"outline\"\r\n                                size=\"sm\"\r\n                                onClick={() => {\r\n                                  setShowAddMcpServer(false);\r\n                                  setEditingMcpServer(null);\r\n                                  setNewMcpServer({\r\n                                    name: '',\r\n                                    command: '',\r\n                                    args: [],\r\n                                    description: '',\r\n                                    enabled: true,\r\n                                    env: {}\r\n                                  });\r\n                                }}\r\n                                className=\"h-7 text-xs\"\r\n                              >\r\n                                Cancel\r\n                              </Button>\r\n                              <Button\r\n                                onClick={handleUpdateMcpServer}\r\n                                size=\"sm\"\r\n                                className=\"h-7 text-xs\"\r\n                              >\r\n                                Update Server\r\n                              </Button>\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                    {mcpServers.length === 0 && (\r\n                      <div className=\"text-center py-8 text-muted-foreground\">\r\n                        No MCP servers configured. Add one to get started.\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Internal Commands Tab */}\r\n          {activeTab === 'internal-commands' && (\r\n            <div className=\"space-y-3\">\r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2\">Internal Commands</h3>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <ToggleSwitch\r\n                      size=\"sm\"\r\n                      enabled={internalCommandsEnabled}\r\n                      onToggle={(enabled) => {\r\n                        setInternalCommandsEnabled(enabled);\r\n                        setHasChanges(true);\r\n\r\n                        // Update formData with internal commands changes\r\n                        setFormData(prev => prev ? {\r\n                          ...prev,\r\n                          internalCommands: {\r\n                            ...prev.internalCommands,\r\n                            enabled: enabled,\r\n                            allowedDirectories: allowedDirectories,\r\n                            blockedCommands: blockedCommands,\r\n                            enabledCommands: enabledCommandCategories,\r\n                            enabledTools: enabledTools\r\n                          }\r\n                        } : null);\r\n\r\n                        // Also save immediately\r\n                        saveInternalCommandsSettings();\r\n                      }}\r\n                    />\r\n                    <div>\r\n                      <Label className=\"text-xs\">Enable Internal Commands</Label>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        Allow the AI to execute system commands and file operations\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {internalCommandsEnabled && (\r\n                    <>\r\n                      <div className=\"space-y-1\">\r\n                        <Label className=\"text-xs\">Command Categories</Label>\r\n                        <div className=\"space-y-1\">\r\n                          {Object.entries(enabledCommandCategories).map(([category, enabled]) => (\r\n                            <div key={category} className=\"flex items-center space-x-2\">\r\n                              <ToggleSwitch\r\n                                size=\"sm\"\r\n                                enabled={enabled}\r\n                                onToggle={(enabled) => handleCommandCategoryToggle(category, enabled)}\r\n                              />\r\n                              <Label className=\"text-xs capitalize\">{category.replace(/([A-Z])/g, ' $1').trim()}</Label>\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"space-y-1\">\r\n                        <Label className=\"text-xs\">Allowed Directories</Label>\r\n                        <div className=\"flex gap-1\">\r\n                          <Input\r\n                            value={newDirectory}\r\n                            onChange={(e) => setNewDirectory(e.target.value)}\r\n                            placeholder=\"Enter directory path\"\r\n                            className=\"h-7 text-xs flex-1\"\r\n                          />\r\n                          <Button\r\n                            onClick={async () => {\r\n                              if (typeof window !== 'undefined' && window.electronAPI) {\r\n                                try {\r\n                                  const selectedPath = await window.electronAPI.selectDirectory();\r\n                                  if (selectedPath) {\r\n                                    setNewDirectory(selectedPath);\r\n                                  }\r\n                                } catch (error) {\r\n                                  console.error('Failed to select directory:', error);\r\n                                }\r\n                              }\r\n                            }}\r\n                            size=\"sm\"\r\n                            variant=\"outline\"\r\n                            className=\"h-7 text-xs\"\r\n                          >\r\n                            Browse\r\n                          </Button>\r\n                          <Button\r\n                            onClick={handleAddDirectory}\r\n                            size=\"sm\"\r\n                            className=\"h-7 w-7 p-0\"\r\n                          >\r\n                            <Plus className=\"h-3 w-3\" />\r\n                          </Button>\r\n                        </div>\r\n                        <div className=\"space-y-1\">\r\n                          {allowedDirectories.map((dir) => (\r\n                            <div key={dir} className=\"flex items-center justify-between p-1 bg-muted rounded\">\r\n                              <span className=\"text-xs\">{dir}</span>\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => handleRemoveDirectory(dir)}\r\n                                className=\"h-6 w-6 p-0 text-destructive\"\r\n                              >\r\n                                <Trash2 className=\"h-3 w-3\" />\r\n                              </Button>\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/* Available Internal Command Tools Section - positioned after directories */}\r\n                      <div className=\"space-y-1\">\r\n                        <Label className=\"text-xs\">Available Internal Command Tools</Label>\r\n                        <div className=\"max-h-64 overflow-y-auto space-y-1 border border-border rounded p-2 bg-muted/20\">\r\n                          {availableTools.length > 0 ? (\r\n                            availableTools.map((tool) => (\r\n                              <div key={tool.name} className=\"flex items-center justify-between p-2 bg-background rounded\">\r\n                                <div>\r\n                                  <div className=\"text-xs font-medium\">{tool.name}</div>\r\n                                  <div className=\"text-xs text-muted-foreground\">{tool.description}</div>\r\n                                  <div className=\"text-xs text-muted-foreground\">Category: {tool.category}</div>\r\n                                </div>\r\n                                <ToggleSwitch\r\n                                  size=\"sm\"\r\n                                  enabled={enabledTools[tool.name] !== false}\r\n                                  onToggle={(enabled) => {\r\n                                    setEnabledTools(prev => ({\r\n                                      ...prev,\r\n                                      [tool.name]: enabled\r\n                                    }));\r\n                                    saveInternalCommandsSettings();\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                            ))\r\n                          ) : (\r\n                            <div className=\"text-center py-3 text-muted-foreground text-xs\">\r\n                              No internal command tools detected. Make sure internal commands are enabled and configured.\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"space-y-1\">\r\n                        <Label className=\"text-xs\">Blocked Commands</Label>\r\n                        <div className=\"flex gap-1\">\r\n                          <Input\r\n                            value={newBlockedCommand}\r\n                            onChange={(e) => setNewBlockedCommand(e.target.value)}\r\n                            placeholder=\"Enter command to block (e.g., rm, del)\"\r\n                            className=\"h-7 text-xs flex-1\"\r\n                          />\r\n                          <Button\r\n                            onClick={handleAddBlockedCommand}\r\n                            size=\"sm\"\r\n                            className=\"h-7 w-7 p-0\"\r\n                          >\r\n                            <Plus className=\"h-3 w-3\" />\r\n                          </Button>\r\n                        </div>\r\n                        <div className=\"space-y-1\">\r\n                          {blockedCommands.map((cmd) => (\r\n                            <div key={cmd} className=\"flex items-center justify-between p-1 bg-muted rounded\">\r\n                              <span className=\"text-xs\">{cmd}</span>\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => handleRemoveBlockedCommand(cmd)}\r\n                                className=\"h-6 w-6 p-0 text-destructive\"\r\n                              >\r\n                                <Trash2 className=\"h-3 w-3\" />\r\n                              </Button>\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n\r\n\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Memory Tab */}\r\n          {activeTab === 'memory' && (\r\n            <div className=\"space-y-3\">\r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2\">Memory Management</h3>\r\n                <MemoryManagement />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Knowledge Base Tab */}\r\n          {activeTab === 'knowledge-base' && (\r\n            <div className=\"space-y-3\">\r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2\">Knowledge Base</h3>\r\n                <KnowledgeBaseSettings />\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Appearance Tab */}\r\n          {activeTab === 'appearance' && (\r\n            <div className=\"space-y-3\">\r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2\">Appearance</h3>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"space-y-1\">\r\n                    <Label className=\"text-xs\">Theme</Label>\r\n                    <ThemeSelector\r\n                      selectedThemeId={selectedThemePreset}\r\n                      onThemeSelect={(theme) => {\r\n                        setSelectedThemePreset(theme.id);\r\n                        setHasChanges(true);\r\n\r\n                        // Update formData with theme changes\r\n                        setFormData(prev => prev ? {\r\n                          ...prev,\r\n                          ui: {\r\n                            ...prev.ui,\r\n                            selectedThemePreset: theme.id,\r\n                            colorMode: 'preset',\r\n                            customColors: theme.colors\r\n                          }\r\n                        } : null);\r\n\r\n                        // Apply theme change immediately\r\n                        if (typeof window !== 'undefined' && window.electronAPI) {\r\n                          console.log('Applying theme preset change immediately:', theme.colors);\r\n                          window.electronAPI.notifyThemeChange({\r\n                            customColors: theme.colors,\r\n                            useCustomColors: false\r\n                          });\r\n                        }\r\n                      }}\r\n                    />\r\n                  </div>\r\n\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label>Color Mode</Label>\r\n                    <Select\r\n                      value={colorMode}\r\n                      onValueChange={(value: 'preset' | 'custom') => {\r\n                        setColorMode(value);\r\n                        setHasChanges(true);\r\n\r\n                        // Determine colors to apply\r\n                        let colorsToApply = customColors;\r\n                        if (value === 'preset') {\r\n                          const preset = themePresets.find(p => p.id === selectedThemePreset);\r\n                          if (preset) {\r\n                            colorsToApply = preset.colors;\r\n                          }\r\n                        }\r\n\r\n                        // Update formData with theme changes\r\n                        setFormData(prev => prev ? {\r\n                          ...prev,\r\n                          ui: {\r\n                            ...prev.ui,\r\n                            colorMode: value,\r\n                            selectedThemePreset: selectedThemePreset,\r\n                            customColors: colorsToApply,\r\n                            useCustomColors: value === 'custom'\r\n                          }\r\n                        } : null);\r\n\r\n                        // Apply theme change immediately\r\n                        if (typeof window !== 'undefined' && window.electronAPI) {\r\n                          console.log('Applying theme change immediately:', colorsToApply);\r\n                          window.electronAPI.notifyThemeChange({\r\n                            customColors: colorsToApply,\r\n                            useCustomColors: value === 'custom'\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <SelectTrigger className=\"bg-muted/80 border-input\">\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"preset\">Use Theme Preset</SelectItem>\r\n                        <SelectItem value=\"custom\">Custom Colors</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  {colorMode === 'custom' && (\r\n                    <div className=\"space-y-4\">\r\n                      <div className=\"grid grid-cols-2 gap-4\">\r\n                        <div className=\"space-y-2\">\r\n                          <Label>Background</Label>\r\n                          <ColorPicker\r\n                            value={customColors.background}\r\n                            onChange={(color) => {\r\n                              const newColors = { ...customColors, background: color };\r\n                              setCustomColors(newColors);\r\n                              setHasChanges(true);\r\n\r\n                              // Update formData with custom color changes\r\n                              setFormData(prev => prev ? {\r\n                                ...prev,\r\n                                ui: {\r\n                                  ...prev.ui,\r\n                                  customColors: newColors,\r\n                                  colorMode: 'custom',\r\n                                  useCustomColors: true\r\n                                }\r\n                              } : null);\r\n\r\n                              // Apply color change immediately\r\n                              if (typeof window !== 'undefined' && window.electronAPI) {\r\n                                console.log('Applying background color change immediately:', newColors);\r\n                                window.electronAPI.notifyThemeChange({\r\n                                  customColors: newColors,\r\n                                  useCustomColors: true\r\n                                });\r\n                              }\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"space-y-2\">\r\n                          <Label>Foreground</Label>\r\n                          <ColorPicker\r\n                            value={customColors.foreground}\r\n                            onChange={(color) => {\r\n                              const newColors = { ...customColors, foreground: color };\r\n                              setCustomColors(newColors);\r\n                              setHasChanges(true);\r\n\r\n                              // Update formData with custom color changes\r\n                              setFormData(prev => prev ? {\r\n                                ...prev,\r\n                                ui: {\r\n                                  ...prev.ui,\r\n                                  customColors: newColors,\r\n                                  colorMode: 'custom',\r\n                                  useCustomColors: true\r\n                                }\r\n                              } : null);\r\n\r\n                              // Apply color change immediately\r\n                              if (typeof window !== 'undefined' && window.electronAPI) {\r\n                                console.log('Applying foreground color change immediately:', newColors);\r\n                                window.electronAPI.notifyThemeChange({\r\n                                  customColors: newColors,\r\n                                  useCustomColors: true\r\n                                });\r\n                              }\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"space-y-2\">\r\n                          <Label>Primary</Label>\r\n                          <ColorPicker\r\n                            value={customColors.primary}\r\n                            onChange={(color) => {\r\n                              const newColors = { ...customColors, primary: color };\r\n                              setCustomColors(newColors);\r\n                              setHasChanges(true);\r\n\r\n                              // Update formData with custom color changes\r\n                              setFormData(prev => prev ? {\r\n                                ...prev,\r\n                                ui: {\r\n                                  ...prev.ui,\r\n                                  customColors: newColors,\r\n                                  colorMode: 'custom',\r\n                                  useCustomColors: true\r\n                                }\r\n                              } : null);\r\n\r\n                              // Apply color change immediately\r\n                              if (typeof window !== 'undefined' && window.electronAPI) {\r\n                                console.log('Applying primary color change immediately:', newColors);\r\n                                window.electronAPI.notifyThemeChange({\r\n                                  customColors: newColors,\r\n                                  useCustomColors: true\r\n                                });\r\n                              }\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"space-y-2\">\r\n                          <Label>Secondary</Label>\r\n                          <ColorPicker\r\n                            value={customColors.secondary}\r\n                            onChange={(color) => {\r\n                              const newColors = { ...customColors, secondary: color };\r\n                              setCustomColors(newColors);\r\n                              setHasChanges(true);\r\n\r\n                              // Update formData with custom color changes\r\n                              setFormData(prev => prev ? {\r\n                                ...prev,\r\n                                ui: {\r\n                                  ...prev.ui,\r\n                                  customColors: newColors,\r\n                                  colorMode: 'custom',\r\n                                  useCustomColors: true\r\n                                }\r\n                              } : null);\r\n\r\n                              // Apply color change immediately\r\n                              if (typeof window !== 'undefined' && window.electronAPI) {\r\n                                console.log('Applying secondary color change immediately:', newColors);\r\n                                window.electronAPI.notifyThemeChange({\r\n                                  customColors: newColors,\r\n                                  useCustomColors: true\r\n                                });\r\n                              }\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      <Button\r\n                        variant=\"outline\"\r\n                        onClick={resetToDefaults}\r\n                        className=\"flex items-center gap-2\"\r\n                      >\r\n                        <RotateCcw className=\"h-4 w-4\" />\r\n                        Reset to Defaults\r\n                      </Button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* General Tab */}\r\n          {activeTab === 'general' && formData?.general && (\r\n            <div className=\"space-y-3\">\r\n              <div>\r\n                <h3 className=\"text-sm font-medium mb-2\">General Settings</h3>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <ToggleSwitch\r\n                      size=\"sm\"\r\n                      enabled={formData.general.autoStartWithSystem}\r\n                      onToggle={(enabled) => updateFormData({\r\n                        general: { ...formData.general, autoStartWithSystem: enabled }\r\n                      })}\r\n                    />\r\n                    <div>\r\n                      <Label className=\"text-xs\">Auto-start with system</Label>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        Launch LittleLLM automatically when your computer starts\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <ToggleSwitch\r\n                      size=\"sm\"\r\n                      enabled={formData.general.showNotifications}\r\n                      onToggle={(enabled) => updateFormData({\r\n                        general: { ...formData.general, showNotifications: enabled }\r\n                      })}\r\n                    />\r\n                    <div>\r\n                      <Label className=\"text-xs\">Show notifications</Label>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        Display system notifications for important events\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <ToggleSwitch\r\n                      size=\"sm\"\r\n                      enabled={formData.general.saveConversationHistory}\r\n                      onToggle={(enabled) => updateFormData({\r\n                        general: { ...formData.general, saveConversationHistory: enabled }\r\n                      })}\r\n                    />\r\n                    <div>\r\n                      <Label className=\"text-xs\">Save conversation history</Label>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        Keep a record of your conversations for future reference\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-1\">\r\n                    <Label htmlFor=\"history-length\" className=\"text-xs\">Conversation history length</Label>\r\n                    <Input\r\n                      id=\"history-length\"\r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                      max=\"100\"\r\n                      value={formData.general.conversationHistoryLength}\r\n                      className=\"h-7 text-xs bg-muted/80 border-input focus:bg-muted hover:bg-muted/90 transition-colors\"\r\n                      onChange={(e) => updateFormData({\r\n                        general: { ...formData.general, conversationHistoryLength: parseInt(e.target.value) || 10 }\r\n                      })}\r\n                    />\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      Number of recent conversations to keep in history\r\n                    </p>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <ToggleSwitch\r\n                      size=\"sm\"\r\n                      enabled={formData.general.debugLogging}\r\n                      onToggle={(enabled) => updateFormData({\r\n                        general: { ...formData.general, debugLogging: enabled }\r\n                      })}\r\n                    />\r\n                    <div>\r\n                      <Label className=\"text-xs\">Debug logging</Label>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        Enable detailed logging for troubleshooting\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* MCP JSON Editor Dialog */}\r\n      {showMcpJsonEditor && (\r\n        <Dialog open={showMcpJsonEditor} onOpenChange={setShowMcpJsonEditor}>\r\n          <DialogContent className=\"max-w-6xl w-[90vw] max-h-[90vh] h-[80vh] flex flex-col\">\r\n            <DialogHeader className=\"flex-shrink-0\">\r\n              <DialogTitle>Edit MCP Configuration</DialogTitle>\r\n            </DialogHeader>\r\n            <div className=\"flex-1 flex flex-col space-y-4 min-h-0\">\r\n              <div className=\"flex-1 min-h-0\">\r\n                <Textarea\r\n                  value={mcpJsonContent}\r\n                  onChange={(e) => setMcpJsonContent(e.target.value)}\r\n                  className=\"font-mono text-sm h-full resize-none overflow-auto\"\r\n                  placeholder=\"MCP configuration JSON...\"\r\n                />\r\n              </div>\r\n              <div className=\"flex justify-end gap-2 flex-shrink-0\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={() => setShowMcpJsonEditor(false)}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button onClick={handleSaveMcpJson}>\r\n                  Save JSON\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\TopHeader.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'onHistoryClick' is defined but never used. Allowed unused args must match /^_/u.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":17},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'onConsoleClick' is defined but never used. Allowed unused args must match /^_/u.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":17},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'onAddSplitChatClick' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":22},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'handleHistoryClick' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":48,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":27},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'handleConsoleClick' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":50,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":27},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'handleAddSplitChatClick' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":52,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2449,2518],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2671,2744],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":126,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":126,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3778,3824],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3855,3901],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onHistoryClick' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onConsoleClick' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onAddSplitChatClick' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleHistoryClick' is assigned a value but never used.","line":48,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleConsoleClick' is assigned a value but never used.","line":50,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleAddSplitChatClick' is assigned a value but never used.","line":52,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":6,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport {\r\n  Minus,\r\n  Square,\r\n  X,\r\n  Server,\r\n  Volume2,\r\n  VolumeX\r\n} from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { ProviderLogo } from '../ui/provider-logo';\r\nimport { DEFAULT_PROVIDERS } from '../../services/providers/constants';\r\nimport { cn } from '@/lib/utils';\r\nimport { settingsService } from '../../services/settingsService';\r\nimport { useState, useEffect } from 'react';\r\n\r\ninterface TopHeaderProps {\r\n  className?: string;\r\n  onHistoryClick?: () => void;\r\n  onConsoleClick?: () => void;\r\n  onAddSplitChatClick?: () => void;\r\n  onMinimize?: () => void;\r\n  onMaximize?: () => void;\r\n  onClose?: () => void;\r\n  selectedProvider?: string;\r\n  onProviderClick?: (element: HTMLElement) => void;\r\n}\r\n\r\nexport function TopHeader({\r\n  className,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  onHistoryClick,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  onConsoleClick,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  onAddSplitChatClick,\r\n  onMinimize,\r\n  onMaximize,\r\n  onClose,\r\n  selectedProvider,\r\n  onProviderClick\r\n}: TopHeaderProps) {\r\n  \r\n  // Reserved handlers (currently unused in this header variant)\r\n  // Keeping typed props for future header actions without triggering ESLint unused warnings\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const handleHistoryClick = () => {};\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const handleConsoleClick = () => {};\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const handleAddSplitChatClick = () => {};\r\n\r\n  const handleMinimize = () => {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      window.electronAPI.minimizeWindow();\r\n    }\r\n    onMinimize?.();\r\n  };\r\n\r\n  const handleMaximize = () => {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      window.electronAPI.maximizeWindow();\r\n    }\r\n    onMaximize?.();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      window.electronAPI.closeWindow();\r\n    }\r\n    onClose?.();\r\n  };\r\n\r\n  // TTS state\r\n  const [ttsEnabled, setTtsEnabled] = useState(false);\r\n\r\n  // Load TTS settings\r\n  useEffect(() => {\r\n    const loadTtsSettings = () => {\r\n      const settings = settingsService.getSettings();\r\n      const enabled = settings.ui?.textToSpeech?.enabled || false;\r\n      console.log('🔊 TopHeader: Loading TTS settings, enabled:', enabled);\r\n      setTtsEnabled(enabled);\r\n    };\r\n\r\n    loadTtsSettings();\r\n\r\n    // Listen for settings changes\r\n    const handleSettingsChange = () => {\r\n      console.log('🔊 TopHeader: Settings changed, reloading TTS settings...');\r\n      loadTtsSettings();\r\n    };\r\n\r\n    window.addEventListener('settingsSaved', handleSettingsChange);\r\n\r\n    return () => {\r\n      window.removeEventListener('settingsSaved', handleSettingsChange);\r\n    };\r\n  }, []);\r\n\r\n  const handleTtsToggle = async () => {\r\n    try {\r\n      const settings = settingsService.getSettings();\r\n      const newTtsEnabled = !ttsEnabled;\r\n\r\n      const updatedSettings = {\r\n        ...settings,\r\n        ui: {\r\n          ...settings.ui,\r\n          textToSpeech: {\r\n            ...settings.ui?.textToSpeech,\r\n            enabled: newTtsEnabled,\r\n            voice: settings.ui?.textToSpeech?.voice || '',\r\n            rate: settings.ui?.textToSpeech?.rate || 1.0,\r\n            pitch: settings.ui?.textToSpeech?.pitch || 1.0,\r\n            volume: settings.ui?.textToSpeech?.volume || 0.8,\r\n            autoPlay: settings.ui?.textToSpeech?.autoPlay || false,\r\n          }\r\n        }\r\n      };\r\n\r\n      await settingsService.updateSettings(updatedSettings);\r\n      setTtsEnabled(newTtsEnabled);\r\n\r\n      console.log('🔊 TTS toggled:', newTtsEnabled);\r\n    } catch (error) {\r\n      console.error('Failed to toggle TTS:', error);\r\n    }\r\n  };\r\n\r\n  const handleProviderClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    onProviderClick?.(event.currentTarget);\r\n  };\r\n\r\n  // Get selected provider data\r\n  const allProviders = DEFAULT_PROVIDERS;\r\n  const selectedProviderData = allProviders.find(p => p.id === selectedProvider);\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"relative h-8 draggable-title-bar select-none\", // explicit draggable class for preload hook\r\n        className\r\n      )}\r\n      style={{\r\n        // Note: positioning is controlled by the fixed wrapper in ModernChatInterface\r\n        // Using relative here prevents creating an extra stacking context that could\r\n        // interact poorly with overlapping content and Electron drag hit-testing.\r\n        position: 'relative',\r\n        userSelect: 'none',\r\n        WebkitAppRegion: 'drag',\r\n        cursor: 'default'\r\n      } as React.CSSProperties}\r\n    >\r\n      {/* Full header drag background: sits above visual bg, below controls */}\r\n      <div\r\n        aria-hidden=\"true\"\r\n        style={{\r\n          position: 'absolute',\r\n          inset: 0,\r\n          WebkitAppRegion: 'drag',\r\n          pointerEvents: 'auto',\r\n          zIndex: 1,\r\n          background: 'transparent'\r\n        } as React.CSSProperties}\r\n      />\r\n\r\n      {/* Visual layer: blur + background, non-interactive */}\r\n      <div\r\n        aria-hidden=\"true\"\r\n        style={{\r\n          position: 'absolute',\r\n          inset: 0,\r\n          zIndex: 0,\r\n          pointerEvents: 'none',\r\n          backdropFilter: 'blur(8px)',\r\n          backgroundColor: 'rgba(17, 24, 39, 0.95)'\r\n        } as React.CSSProperties}\r\n      />\r\n\r\n      {/* Content row: header surface is draggable; interactive elements inside are no-drag */}\r\n      <div\r\n        className=\"relative h-8 px-4 flex items-center justify-between\"\r\n        style={{ zIndex: 4, WebkitAppRegion: 'drag', pointerEvents: 'auto' } as React.CSSProperties}\r\n      >\r\n        {/* Left side - Provider selector */}\r\n        <div className=\"flex items-center\" style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties}>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={handleProviderClick}\r\n            className=\"h-5 px-1.5 text-gray-400 hover:text-white hover:bg-gray-800/50 transition-colors\"\r\n            title=\"Select Provider\"\r\n          >\r\n            {selectedProviderData ? (\r\n              <div className=\"flex items-center gap-1\">\r\n                <div className=\"w-3 h-3\">\r\n                  <ProviderLogo provider={selectedProviderData} size={12} />\r\n                </div>\r\n                <span className=\"text-xs\">{selectedProviderData.name}</span>\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex items-center gap-1\">\r\n                <Server style={{ width: '12px', height: '12px' }} />\r\n                <span className=\"text-xs\">Select Provider</span>\r\n              </div>\r\n            )}\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Center - TTS Toggle */}\r\n        <div className=\"flex items-center\" style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties}>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={handleTtsToggle}\r\n            className={cn(\r\n              \"h-6 w-6 p-0 transition-colors\",\r\n              ttsEnabled\r\n                ? \"text-blue-400 hover:text-blue-300 hover:bg-blue-600/20\"\r\n                : \"text-gray-400 hover:text-white hover:bg-gray-800/50\"\r\n            )}\r\n            title={ttsEnabled ? \"Disable Text to Speech\" : \"Enable Text to Speech\"}\r\n          >\r\n            {ttsEnabled ? (\r\n              <Volume2 className=\"w-3 h-3\" />\r\n            ) : (\r\n              <VolumeX className=\"w-3 h-3\" />\r\n            )}\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Right side - Window controls */}\r\n        <div className=\"flex items-center gap-1\" style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties}>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={handleMinimize}\r\n            className=\"h-6 w-6 p-0 text-gray-400 hover:text-white hover:bg-gray-800/50 transition-colors\"\r\n            title=\"Minimize\"\r\n          >\r\n            <Minus className=\"w-3 h-3\" />\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={handleMaximize}\r\n            className=\"h-6 w-6 p-0 text-gray-400 hover:text-white hover:bg-gray-800/50 transition-colors\"\r\n            title=\"Maximize\"\r\n          >\r\n            <Square className=\"w-3 h-3\" />\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={handleClose}\r\n            className=\"h-6 w-6 p-0 text-gray-400 hover:text-white hover:bg-red-600/50 transition-colors\"\r\n            title=\"Close\"\r\n          >\r\n            <X className=\"w-3 h-3\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\modern-ui\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\color-picker.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1940,2000],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":92,"column":20,"nodeType":"Literal","endLine":92,"endColumn":44},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":118,"column":21,"nodeType":"Literal","endLine":118,"endColumn":46},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 6 times.","line":122,"column":25,"nodeType":"Literal","endLine":122,"endColumn":40},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 5 times.","line":145,"column":30,"nodeType":"Literal","endLine":145,"endColumn":44},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":155,"column":20,"nodeType":"Literal","endLine":155,"endColumn":39},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":188,"column":49,"nodeType":"Literal","endLine":188,"endColumn":67},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":192,"column":49,"nodeType":"Literal","endLine":192,"endColumn":69},{"ruleId":"sonarjs/no-redundant-boolean","severity":2,"message":"Refactor the code to avoid using this boolean literal.","line":297,"column":14,"nodeType":"Literal","messageId":"removeUnnecessaryBoolean","endLine":297,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":370,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":370,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12889,12942],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\n\r\n\r\ninterface ColorPickerProps {\r\n  value: string;\r\n  onChange: (color: string) => void;\r\n  label?: string;\r\n  className?: string;\r\n  supportAlpha?: boolean; // Support transparency/alpha values\r\n}\r\n\r\nexport function ColorPicker({ value, onChange, label, className, supportAlpha = false }: ColorPickerProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [inputValue, setInputValue] = useState(value);\r\n  const colorInputRef = useRef<HTMLInputElement>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    setInputValue(value);\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [isOpen]);\r\n\r\n  const handleColorChange = (newColor: string) => {\r\n    setInputValue(newColor);\r\n    onChange(newColor);\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = e.target.value;\r\n    setInputValue(newValue);\r\n    \r\n    // Validate hex color format or rgba format\r\n    if (/^#[0-9A-Fa-f]{6}$/.test(newValue) || /^rgba?\\(\\d+,\\s*\\d+,\\s*\\d+(?:,\\s*[\\d.]+)?\\)$/.test(newValue)) {\r\n      onChange(newValue);\r\n    }\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    // If input is invalid, revert to current value\r\n    if (!/^#[0-9A-Fa-f]{6}$/.test(inputValue) && !/^rgba?\\(\\d+,\\s*\\d+,\\s*\\d+(?:,\\s*[\\d.]+)?\\)$/.test(inputValue)) {\r\n      setInputValue(value);\r\n    }\r\n  };\r\n\r\n  const handleNativeColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newColor = e.target.value;\r\n    console.log('🎨 Native color picker changed to:', newColor);\r\n    handleColorChange(newColor);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const presetColors = [\r\n    '#569cd6', '#4fc1ff', '#e04539', '#f44747', '#dcdcaa', '#ce9178',\r\n    '#9cdcfe', '#c586c0', '#4ec9b0', '#b5cea8', '#d7ba7d', '#808080',\r\n    '#181829', '#1d1d33', '#211f32', '#3b3b68', '#d4d4d4', '#ffffff'\r\n  ];\r\n\r\n  const transparentColors = supportAlpha ? [\r\n    'rgba(86, 156, 214, 0.8)', 'rgba(79, 193, 255, 0.8)', 'rgba(224, 69, 57, 0.8)',\r\n    'rgba(244, 71, 71, 0.8)', 'rgba(220, 220, 170, 0.8)', 'rgba(206, 145, 120, 0.8)',\r\n    'rgba(255, 255, 255, 0.5)', 'rgba(0, 0, 0, 0.5)', 'rgba(255, 0, 0, 0.3)',\r\n    'rgba(0, 255, 0, 0.3)', 'rgba(0, 0, 255, 0.3)', 'rgba(255, 255, 0, 0.3)'\r\n  ] : [];\r\n\r\n  return (\r\n    <div\r\n      className={`space-y-2 relative ${className || ''}`}\r\n      ref={containerRef}\r\n    >\r\n      {label && (\r\n        <label\r\n          className=\"text-sm font-medium leading-none\"\r\n          style={{\r\n            color: 'var(--card-foreground)',\r\n            display: 'block',\r\n            marginBottom: '8px'\r\n          }}\r\n        >\r\n          {label}\r\n        </label>\r\n      )}\r\n\r\n      <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\r\n        {/* Color Preview Button - Opens system color picker */}\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            // Open system color picker\r\n            if (colorInputRef.current) {\r\n              colorInputRef.current.click();\r\n            }\r\n          }}\r\n          title=\"Click to open system color picker\"\r\n          style={{\r\n            width: '48px',\r\n            height: '40px',\r\n            padding: '0',\r\n            margin: '0',\r\n            backgroundColor: value,\r\n            border: '2px solid var(--border)',\r\n            borderRadius: '6px',\r\n            cursor: 'pointer',\r\n            outline: 'none',\r\n            transition: 'all 0.2s ease',\r\n            boxShadow: 'none'\r\n          }}\r\n          onMouseEnter={(e) => {\r\n            e.currentTarget.style.transform = 'scale(1.05)';\r\n          }}\r\n          onMouseLeave={(e) => {\r\n            e.currentTarget.style.transform = 'scale(1)';\r\n          }}\r\n        >\r\n          <span style={{ position: 'absolute', left: '-9999px' }}>Open system color picker</span>\r\n        </button>\r\n\r\n        {/* Dropdown Toggle Button */}\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => setIsOpen(!isOpen)}\r\n          title=\"Click to open preset colors\"\r\n          style={{\r\n            width: '40px',\r\n            height: '40px',\r\n            padding: '0',\r\n            margin: '0',\r\n            backgroundColor: 'var(--muted)',\r\n            border: '2px solid var(--border)',\r\n            borderRadius: '6px',\r\n            cursor: 'pointer',\r\n            outline: 'none',\r\n            transition: 'all 0.2s ease',\r\n            boxShadow: 'none',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            color: 'var(--foreground)'\r\n          }}\r\n          onMouseEnter={(e) => {\r\n            e.currentTarget.style.backgroundColor = 'var(--accent)';\r\n          }}\r\n          onMouseLeave={(e) => {\r\n            e.currentTarget.style.backgroundColor = 'var(--muted)';\r\n          }}\r\n        >\r\n          ▼\r\n        </button>\r\n\r\n        {/* Hex Input - Custom styled */}\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          placeholder={supportAlpha ? \"#000000 or rgba(0,0,0,0.5)\" : \"#000000\"}\r\n          maxLength={supportAlpha ? 25 : 7}\r\n          style={{\r\n            flex: '1',\r\n            height: '40px',\r\n            padding: '8px 12px',\r\n            backgroundColor: 'var(--muted)',\r\n            color: 'var(--foreground)',\r\n            border: '2px solid var(--border)',\r\n            borderRadius: '6px',\r\n            fontFamily: 'monospace',\r\n            fontSize: '14px',\r\n            outline: 'none',\r\n            transition: 'all 0.2s ease'\r\n          }}\r\n          onFocus={(e) => {\r\n            e.currentTarget.style.borderColor = 'hsl(var(--ring))';\r\n            e.currentTarget.style.boxShadow = '0 0 0 2px hsl(var(--ring) / 0.2)';\r\n          }}\r\n          onBlur={(e) => {\r\n            e.currentTarget.style.borderColor = 'hsl(var(--border))';\r\n            e.currentTarget.style.boxShadow = 'none';\r\n            handleInputBlur();\r\n          }}\r\n        />\r\n\r\n        {/* Native color input for system color picker */}\r\n        <input\r\n          ref={colorInputRef}\r\n          type=\"color\"\r\n          value={value}\r\n          onChange={(e) => handleColorChange(e.target.value)}\r\n          style={{ position: 'absolute', left: '-9999px', opacity: 0, pointerEvents: 'none' }}\r\n        />\r\n      </div>\r\n\r\n      {/* Hidden native color input for system color picker */}\r\n      <input\r\n        ref={colorInputRef}\r\n        type=\"color\"\r\n        value={value}\r\n        onChange={handleNativeColorChange}\r\n        style={{\r\n          position: 'absolute',\r\n          left: '-9999px',\r\n          opacity: 0,\r\n          pointerEvents: 'none'\r\n        }}\r\n      />\r\n\r\n      {/* Color Picker Dropdown - Completely custom */}\r\n      {isOpen && (\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            zIndex: 9999,\r\n            top: '100%',\r\n            left: '0',\r\n            marginTop: '8px',\r\n            padding: '16px',\r\n            backgroundColor: 'hsl(var(--card))',\r\n            border: '2px solid hsl(var(--border))',\r\n            borderRadius: '8px',\r\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.8)',\r\n            minWidth: '280px',\r\n            color: 'hsl(var(--card-foreground))',\r\n            backdropFilter: 'none',\r\n            opacity: '1'\r\n          }}\r\n        >\r\n          <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>\r\n            {/* Preset Colors */}\r\n            <div>\r\n              <label\r\n                style={{\r\n                  fontSize: '14px',\r\n                  fontWeight: '500',\r\n                  marginBottom: '8px',\r\n                  display: 'block',\r\n                  color: 'var(--card-foreground)'\r\n                }}\r\n              >\r\n                Preset Colors\r\n              </label>\r\n              <div\r\n                style={{\r\n                  display: 'grid',\r\n                  gridTemplateColumns: 'repeat(6, 1fr)',\r\n                  gap: '8px'\r\n                }}\r\n              >\r\n                {presetColors.map((color) => (\r\n                  <button\r\n                    key={color}\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      handleColorChange(color);\r\n                      setIsOpen(false);\r\n                    }}\r\n                    title={color}\r\n                    style={{\r\n                      width: '32px',\r\n                      height: '32px',\r\n                      padding: '0',\r\n                      margin: '0',\r\n                      backgroundColor: color, // Keep hex for direct background color\r\n                      border: `2px solid ${value === color ? 'hsl(var(--ring))' : 'hsl(var(--border))'}`,\r\n                      borderRadius: '4px',\r\n                      cursor: 'pointer',\r\n                      outline: 'none',\r\n                      transition: 'all 0.2s ease',\r\n                      boxShadow: value === color ? '0 0 0 2px hsl(var(--ring) / 0.3)' : 'none'\r\n                    }}\r\n                    onMouseEnter={(e) => {\r\n                      e.currentTarget.style.transform = 'scale(1.1)';\r\n                    }}\r\n                    onMouseLeave={(e) => {\r\n                      e.currentTarget.style.transform = 'scale(1)';\r\n                    }}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Transparency Colors (temporarily disabled to fix interface) */}\r\n            {false && supportAlpha && transparentColors.length > 0 && (\r\n              <div>\r\n                <label\r\n                  style={{\r\n                    fontSize: '14px',\r\n                    fontWeight: '500',\r\n                    marginBottom: '8px',\r\n                    display: 'block',\r\n                    color: 'var(--card-foreground)'\r\n                  }}\r\n                >\r\n                  Transparent Colors\r\n                </label>\r\n                <div\r\n                  style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: 'repeat(6, 1fr)',\r\n                    gap: '8px'\r\n                  }}\r\n                >\r\n                  {transparentColors.map((color, index) => (\r\n                    <button\r\n                      key={`transparent-${index}`}\r\n                      type=\"button\"\r\n                      onClick={() => {\r\n                        handleColorChange(color);\r\n                        setIsOpen(false);\r\n                      }}\r\n                      title={color}\r\n                      style={{\r\n                        width: '32px',\r\n                        height: '32px',\r\n                        padding: '0',\r\n                        margin: '0',\r\n                        background: `linear-gradient(45deg, #ccc 25%, transparent 25%), linear-gradient(-45deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%), linear-gradient(-45deg, transparent 75%, #ccc 75%)`,\r\n                        backgroundSize: '8px 8px',\r\n                        backgroundPosition: '0 0, 0 4px, 4px -4px, -4px 0px',\r\n                        border: `2px solid ${value === color ? 'hsl(var(--ring))' : 'hsl(var(--border))'}`,\r\n                        borderRadius: '4px',\r\n                        cursor: 'pointer',\r\n                        outline: 'none',\r\n                        transition: 'all 0.2s ease',\r\n                        position: 'relative'\r\n                      }}\r\n                      onMouseEnter={(e) => {\r\n                        e.currentTarget.style.transform = 'scale(1.1)';\r\n                      }}\r\n                      onMouseLeave={(e) => {\r\n                        e.currentTarget.style.transform = 'scale(1)';\r\n                      }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          position: 'absolute',\r\n                          top: 0,\r\n                          left: 0,\r\n                          right: 0,\r\n                          bottom: 0,\r\n                          backgroundColor: color,\r\n                          borderRadius: '2px'\r\n                        }}\r\n                      />\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Native Color Picker Button */}\r\n            <div>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  console.log('🎨 System color picker button clicked');\r\n                  if (colorInputRef.current) {\r\n                    colorInputRef.current.click();\r\n                  }\r\n                }}\r\n                style={{\r\n                  width: '100%',\r\n                  height: '36px',\r\n                  padding: '8px 16px',\r\n                  backgroundColor: 'var(--muted)',\r\n                  color: 'var(--foreground)',\r\n                  border: '1px solid var(--border)',\r\n                  borderRadius: '6px',\r\n                  cursor: 'pointer',\r\n                  outline: 'none',\r\n                  fontSize: '14px',\r\n                  fontWeight: '500',\r\n                  transition: 'all 0.2s ease'\r\n                }}\r\n                onMouseEnter={(e) => {\r\n                  e.currentTarget.style.backgroundColor = 'var(--accent)';\r\n                }}\r\n                onMouseLeave={(e) => {\r\n                  e.currentTarget.style.backgroundColor = 'var(--muted)';\r\n                }}\r\n              >\r\n                Open System Color Picker\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":25,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":25,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[805,909],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\draggable-dialog.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2515,2575],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport { X } from 'lucide-react';\r\nimport { Button } from './button';\r\n\r\ninterface DraggableDialogProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  title: string;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  width?: string;\r\n  height?: string;\r\n}\r\n\r\nexport function DraggableDialog({\r\n  isOpen,\r\n  onClose,\r\n  title,\r\n  children,\r\n  className = '',\r\n  width = 'w-[600px]',\r\n  height = 'max-h-[80vh]'\r\n}: DraggableDialogProps) {\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\r\n  const dialogRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Center the dialog when it opens\r\n  useEffect(() => {\r\n    if (isOpen && dialogRef.current) {\r\n      const rect = dialogRef.current.getBoundingClientRect();\r\n      const centerX = (window.innerWidth - rect.width) / 2;\r\n      const centerY = (window.innerHeight - rect.height) / 2;\r\n      setPosition({ x: centerX, y: Math.max(50, centerY) });\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const handleMouseDown = (e: React.MouseEvent) => {\r\n    if (e.target === e.currentTarget || (e.target as HTMLElement).closest('.drag-handle')) {\r\n      setIsDragging(true);\r\n      setDragStart({\r\n        x: e.clientX - position.x,\r\n        y: e.clientY - position.y\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = useCallback((e: MouseEvent) => {\r\n    if (isDragging) {\r\n      const newX = e.clientX - dragStart.x;\r\n      const newY = e.clientY - dragStart.y;\r\n\r\n      // Keep dialog within viewport bounds\r\n      const maxX = window.innerWidth - (dialogRef.current?.offsetWidth || 0);\r\n      const maxY = window.innerHeight - (dialogRef.current?.offsetHeight || 0);\r\n\r\n      setPosition({\r\n        x: Math.max(0, Math.min(newX, maxX)),\r\n        y: Math.max(0, Math.min(newY, maxY))\r\n      });\r\n    }\r\n  }, [isDragging, dragStart.x, dragStart.y]);\r\n\r\n  const handleMouseUp = useCallback(() => {\r\n    setIsDragging(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isDragging) {\r\n      document.addEventListener('mousemove', handleMouseMove);\r\n      document.addEventListener('mouseup', handleMouseUp);\r\n      return () => {\r\n        document.removeEventListener('mousemove', handleMouseMove);\r\n        document.removeEventListener('mouseup', handleMouseUp);\r\n      };\r\n    }\r\n  }, [isDragging, handleMouseMove, handleMouseUp]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  console.log('DraggableDialog rendering with title:', title);\r\n\r\n  return (\r\n    <>\r\n      {/* Backdrop */}\r\n      <div\r\n        className=\"fixed inset-0 bg-black/50 z-[9998]\"\r\n        onClick={onClose}\r\n      />\r\n\r\n      {/* Dialog */}\r\n      <div\r\n        ref={dialogRef}\r\n        className={`draggable-dialog fixed z-[9999] bg-background border border-border rounded-lg shadow-lg ${width} ${height} ${className}`}\r\n        style={{\r\n          left: `${position.x}px`,\r\n          top: `${position.y}px`,\r\n          cursor: isDragging ? 'grabbing' : 'default'\r\n        }}\r\n      >\r\n        {/* Draggable Header */}\r\n        <div\r\n          className=\"drag-handle flex items-center justify-between p-4 border-b border-border cursor-grab active:cursor-grabbing bg-muted hover:bg-muted/80 transition-colors min-h-[60px]\"\r\n          onMouseDown={handleMouseDown}\r\n        >\r\n          <div className=\"flex items-center gap-3\">\r\n            <div className=\"flex flex-col gap-1\">\r\n              <div className=\"w-1.5 h-1.5 bg-muted-foreground rounded-full\"></div>\r\n              <div className=\"w-1.5 h-1.5 bg-muted-foreground rounded-full\"></div>\r\n              <div className=\"w-1.5 h-1.5 bg-muted-foreground rounded-full\"></div>\r\n            </div>\r\n            <h2 className=\"text-lg font-bold text-foreground select-none\">\r\n              {title}\r\n            </h2>\r\n          </div>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={onClose}\r\n            className=\"h-8 w-8 p-0 hover:bg-muted text-foreground\"\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n        \r\n        {/* Content */}\r\n        <div\r\n          className=\"p-4 overflow-y-auto max-h-[calc(80vh-80px)] bg-background text-foreground\"\r\n          style={{\r\n            backgroundColor: 'hsl(var(--background))',\r\n            color: 'hsl(var(--foreground))'\r\n          }}\r\n        >\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\electron-dropdown.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1589,1647],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3032,3288],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3676,3733],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4009,4082],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4197,4249],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4475,4542],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4552,4617],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":130,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4627,4727],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4918,5009],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":240,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":240,"endColumn":40,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9275,9321],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Check, ChevronDown, Search } from \"lucide-react\"\r\nimport { cn } from \"../../lib/utils\"\r\nimport { Button } from \"./button\"\r\nimport { Input } from \"./input\"\r\n\r\ninterface ElectronDropdownProps {\r\n  value?: string\r\n  onValueChange?: (value: string) => void\r\n  placeholder?: string\r\n  options: string[]\r\n  disabled?: boolean\r\n  className?: string\r\n  displayTransform?: (value: string) => string // Optional function to transform display text\r\n}\r\n\r\nexport function ElectronDropdown({\r\n  value,\r\n  onValueChange,\r\n  placeholder = \"Select an option...\",\r\n  options,\r\n  disabled = false,\r\n  className,\r\n  displayTransform\r\n}: ElectronDropdownProps) {\r\n  const [open, setOpen] = React.useState(false)\r\n  const [searchValue, setSearchValue] = React.useState(\"\")\r\n  const triggerRef = React.useRef<HTMLButtonElement>(null)\r\n  const isElectron = typeof window !== 'undefined' && window.electronAPI\r\n\r\n  // Sort options alphabetically\r\n  const sortedOptions = React.useMemo(() => {\r\n    return [...options].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()))\r\n  }, [options])\r\n\r\n  // Filter options based on search\r\n  const filteredOptions = React.useMemo(() => {\r\n    if (!searchValue) return sortedOptions\r\n    return sortedOptions.filter(option =>\r\n      option.toLowerCase().includes(searchValue.toLowerCase())\r\n    )\r\n  }, [sortedOptions, searchValue])\r\n\r\n  const handleClose = React.useCallback(async () => {\r\n    if (isElectron) {\r\n      try {\r\n        await window.electronAPI.closeDropdown()\r\n      } catch (error) {\r\n        console.error('Failed to close floating dropdown:', error)\r\n      }\r\n    }\r\n    setOpen(false)\r\n    setSearchValue(\"\")\r\n  }, [isElectron])\r\n\r\n  const openDropdown = async () => {\r\n    if (!isElectron || !triggerRef.current) {\r\n      setOpen(true)\r\n      return\r\n    }\r\n\r\n    // Calculate dropdown dimensions\r\n    // Calculate width based on longest option text\r\n    const maxTextLength = Math.max(\r\n      ...filteredOptions.map(option =>\r\n        displayTransform ? displayTransform(option).length : String(option).length\r\n      ),\r\n      12 // Minimum width for \"Search options...\"\r\n    )\r\n    const dropdownWidth = Math.max(280, Math.min(500, maxTextLength * 8 + 60)) // 8px per char + padding\r\n    // Height calculation: search section (50px) + content area (dynamic) + minimal padding\r\n    const searchSectionHeight = 50\r\n    const itemHeight = 40\r\n    const maxContentHeight = 250\r\n    const calculatedContentHeight = filteredOptions.length * itemHeight + 8 // 8px for content padding\r\n    const actualContentHeight = Math.min(maxContentHeight, calculatedContentHeight)\r\n    const dropdownHeight = searchSectionHeight + actualContentHeight\r\n\r\n    try {\r\n      // Get trigger button position relative to the window (not viewport)\r\n      const rect = triggerRef.current.getBoundingClientRect()\r\n\r\n      // Calculate position below the trigger\r\n      const x = rect.left\r\n      const y = rect.bottom + 4 // 4px gap below the button\r\n\r\n      console.log('🔍 ElectronDropdown position debug:', {\r\n        rect: { left: rect.left, top: rect.top, bottom: rect.bottom, right: rect.right },\r\n        calculated: { x, y },\r\n        dropdownSize: { width: dropdownWidth, height: dropdownHeight }\r\n      })\r\n\r\n      // Generate HTML content for dropdown\r\n      const content = generateOptionsDropdownHTML(filteredOptions, value, searchValue, displayTransform)\r\n\r\n      // Open dropdown at calculated position (theme will be retrieved from main window)\r\n      await window.electronAPI.openDropdown(x, y, dropdownWidth, dropdownHeight, content)\r\n      setOpen(true)\r\n    } catch (error) {\r\n      console.error('Failed to open floating dropdown:', error)\r\n      setOpen(true) // Fallback to regular dropdown\r\n    }\r\n  }\r\n\r\n  const toggleDropdown = () => {\r\n    if (disabled) return\r\n\r\n    if (open) {\r\n      handleClose()\r\n    } else {\r\n      openDropdown()\r\n    }\r\n  }\r\n\r\n  const handleSelect = (selectedValue: string) => {\r\n    console.log('ElectronDropdown handleSelect called with:', selectedValue);\r\n    onValueChange?.(selectedValue);\r\n    handleClose(); // This will close dropdown and restore window size\r\n    console.log('ElectronDropdown selection completed');\r\n  }\r\n\r\n  // Handle dropdown selection events from Electron\r\n  React.useEffect(() => {\r\n    if (isElectron && window.electronAPI?.onDropdownItemSelected) {\r\n      const handleSelection = (selectedValue: string) => {\r\n        console.log('🔥 ELECTRON DROPDOWN: Item selected:', selectedValue);\r\n        console.log('🔥 ELECTRON DROPDOWN: Available options:', options);\r\n        console.log('🔥 ELECTRON DROPDOWN: Is selected value in options?', options.includes(selectedValue));\r\n\r\n        // ONLY handle selections that are actually in our options list\r\n        // This prevents cross-dropdown contamination\r\n        if (!options.includes(selectedValue)) {\r\n          console.log('🔥 ELECTRON DROPDOWN: Ignoring selection not in our options:', selectedValue);\r\n          return;\r\n        }\r\n\r\n        onValueChange?.(selectedValue);\r\n        setOpen(false);\r\n      };\r\n\r\n      window.electronAPI.onDropdownItemSelected(handleSelection);\r\n\r\n      return () => {\r\n        // Don't remove all listeners - just let this one be overridden\r\n        // The electron API will handle multiple listeners properly\r\n      };\r\n    }\r\n  }, [isElectron, onValueChange, options]);\r\n\r\n  // Close dropdown when clicking outside (for non-Electron fallback)\r\n  React.useEffect(() => {\r\n    if (!isElectron && open) {\r\n      const handleClickOutside = (event: MouseEvent) => {\r\n        if (triggerRef.current && !triggerRef.current.contains(event.target as Node)) {\r\n          setOpen(false);\r\n        }\r\n      };\r\n\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n      return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }\r\n  }, [open, isElectron]);\r\n\r\n  const displayValue = value ? (displayTransform ? displayTransform(value) : value) : placeholder\r\n\r\n  return (\r\n    <div className=\"relative\" style={{ zIndex: 1 }}>\r\n      <Button\r\n        ref={triggerRef}\r\n        variant=\"outline\"\r\n        role=\"combobox\"\r\n        aria-expanded={open}\r\n        className={cn(\r\n          \"justify-between font-normal text-foreground\",\r\n          !value && \"text-muted-foreground\",\r\n          className\r\n        )}\r\n        disabled={disabled}\r\n        onClick={toggleDropdown}\r\n        style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n      >\r\n        <span className=\"truncate text-sm text-foreground\">{displayValue}</span>\r\n        <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\r\n      </Button>\r\n\r\n      {open && !isElectron && (\r\n        <>\r\n          {/* Backdrop to close dropdown */}\r\n          <div\r\n            className=\"fixed inset-0 z-[99998]\"\r\n            onClick={handleClose}\r\n            style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n          />\r\n\r\n          {/* Dropdown content - opens downward */}\r\n          <div\r\n            className=\"absolute top-full mt-1 left-0 z-[99999] min-w-full max-w-[350px] bg-card border shadow-lg rounded-md\"\r\n            style={{\r\n              WebkitAppRegion: 'no-drag',\r\n              maxHeight: '315px', // Increased by 15px for draggable header\r\n              overflow: 'hidden'\r\n            } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n          >\r\n            <div className=\"flex flex-col h-full\">\r\n              <div className=\"flex items-center border-b px-3 py-2 flex-shrink-0\">\r\n                <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\r\n                <Input\r\n                  placeholder=\"Search...\"\r\n                  value={searchValue}\r\n                  onChange={(e) => setSearchValue(e.target.value)}\r\n                  className=\"border-0 bg-transparent p-0 text-sm outline-none focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n                />\r\n              </div>\r\n              <div\r\n                className=\"flex-1 min-h-0 overflow-y-auto scrollbar-hide\"\r\n                style={{\r\n                  WebkitAppRegion: 'no-drag',\r\n                  maxHeight: '265px' // Increased by 15px for draggable header\r\n                } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n              >\r\n                <div className=\"p-1\">\r\n                  {filteredOptions.length === 0 ? (\r\n                    <div className=\"py-6 text-center text-sm text-muted-foreground\">\r\n                      No options found.\r\n                    </div>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"px-2 py-1 text-xs text-muted-foreground\">\r\n                        {filteredOptions.length} options available\r\n                      </div>\r\n                      {filteredOptions.map((option) => (\r\n                        <div\r\n                          key={option}\r\n                          onClick={(e) => {\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                            console.log('Dropdown item clicked:', option);\r\n                            handleSelect(option);\r\n                          }}\r\n                          className={cn(\r\n                            \"relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent hover:text-accent-foreground\",\r\n                            value === option && \"bg-accent text-accent-foreground\"\r\n                          )}\r\n                          style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n                        >\r\n                          <Check\r\n                            className={cn(\r\n                              \"mr-2 h-4 w-4\",\r\n                              value === option ? \"opacity-100\" : \"opacity-0\"\r\n                            )}\r\n                          />\r\n                          <span className=\"text-sm truncate flex-1\">{displayTransform ? displayTransform(option) : option}</span>\r\n                        </div>\r\n                      ))}\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\n// Helper function to generate HTML content for the floating dropdown\r\nfunction generateOptionsDropdownHTML(options: string[], selectedValue?: string, searchValue?: string, displayTransform?: (value: string) => string): string {\r\n  const searchSection = `\r\n    <div class=\"search-section\">\r\n      <input\r\n        type=\"text\"\r\n        class=\"search-input\"\r\n        placeholder=\"Search options...\"\r\n        value=\"${searchValue || ''}\"\r\n      />\r\n    </div>\r\n  `;\r\n\r\n  const optionItems = options.map(option => `\r\n    <div\r\n      class=\"dropdown-item ${selectedValue === option ? 'selected' : ''}\"\r\n      data-value=\"${option}\"\r\n    >\r\n      <span class=\"check-icon ${selectedValue === option ? 'visible' : ''}\">✓</span>\r\n      <span>${displayTransform ? displayTransform(option) : option}</span>\r\n    </div>\r\n  `).join('');\r\n\r\n  return `\r\n    <style>\r\n      .search-section {\r\n        padding: 8px 12px;\r\n        border-bottom: 1px solid hsl(var(--border));\r\n        background: hsl(var(--muted));\r\n      }\r\n      .search-input {\r\n        width: 100%;\r\n        padding: 6px 8px;\r\n        background: hsl(var(--background));\r\n        border: 1px solid hsl(var(--border));\r\n        border-radius: 4px;\r\n        color: hsl(var(--foreground));\r\n        font-size: 14px;\r\n        outline: none;\r\n      }\r\n      .search-input::placeholder {\r\n        color: hsl(var(--muted-foreground));\r\n      }\r\n      .dropdown-content {\r\n        max-height: 250px;\r\n        overflow-y: auto;\r\n        overflow-x: hidden;\r\n        scrollbar-width: none;\r\n        -ms-overflow-style: none;\r\n      }\r\n      .dropdown-content::-webkit-scrollbar {\r\n        display: none;\r\n      }\r\n      .dropdown-item {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 8px 12px;\r\n        color: hsl(var(--foreground));\r\n        cursor: pointer;\r\n        border-radius: 4px;\r\n        margin: 1px 0;\r\n        font-size: 14px;\r\n        user-select: none;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        box-sizing: border-box;\r\n        min-width: 0;\r\n        transition: background-color 0.2s;\r\n      }\r\n      .dropdown-item:hover {\r\n        background: hsl(var(--accent) / 0.1);\r\n        color: hsl(var(--foreground));\r\n      }\r\n      .dropdown-item.selected {\r\n        background: hsl(var(--accent) / 0.2);\r\n        color: hsl(var(--foreground));\r\n      }\r\n      .check-icon {\r\n        margin-right: 8px;\r\n        width: 16px;\r\n        height: 16px;\r\n        opacity: 0;\r\n        color: hsl(var(--primary));\r\n      }\r\n      .check-icon.visible {\r\n        opacity: 1;\r\n      }\r\n    </style>\r\n    ${searchSection}\r\n    <div class=\"dropdown-content\">\r\n      ${optionItems}\r\n    </div>\r\n  `;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\floating-dropdown.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1245,1303],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1535,1594],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\n\r\ninterface FloatingDropdownProps {\r\n  trigger: React.ReactNode;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport function FloatingDropdown({ trigger, children, className = '', disabled = false }: FloatingDropdownProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const triggerRef = useRef<HTMLButtonElement>(null);\r\n  const isElectron = typeof window !== 'undefined' && window.electronAPI;\r\n\r\n  const openDropdown = async () => {\r\n    if (!isElectron || !triggerRef.current) {\r\n      setIsOpen(true);\r\n      return;\r\n    }\r\n\r\n    // Get trigger button position relative to window\r\n    const rect = triggerRef.current.getBoundingClientRect();\r\n    const dropdownWidth = 200; // Default width\r\n    const dropdownHeight = 300; // Default height\r\n\r\n    // Calculate position below the trigger\r\n    const x = rect.left;\r\n    const y = rect.bottom + 4; // 4px gap\r\n\r\n    // Generate HTML content for dropdown\r\n    const content = generateDropdownHTML(children);\r\n\r\n    try {\r\n      await window.electronAPI.openDropdown(x, y, dropdownWidth, dropdownHeight, content);\r\n      setIsOpen(true);\r\n    } catch (error) {\r\n      console.error('Failed to open floating dropdown:', error);\r\n      setIsOpen(true); // Fallback to regular dropdown\r\n    }\r\n  };\r\n\r\n  const closeDropdown = async () => {\r\n    if (isElectron) {\r\n      try {\r\n        await window.electronAPI.closeDropdown();\r\n      } catch (error) {\r\n        console.error('Failed to close floating dropdown:', error);\r\n      }\r\n    }\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const toggleDropdown = () => {\r\n    if (disabled) return;\r\n    \r\n    if (isOpen) {\r\n      closeDropdown();\r\n    } else {\r\n      openDropdown();\r\n    }\r\n  };\r\n\r\n  // Close dropdown when clicking outside (for non-Electron fallback)\r\n  useEffect(() => {\r\n    if (!isElectron && isOpen) {\r\n      const handleClickOutside = (event: MouseEvent) => {\r\n        if (triggerRef.current && !triggerRef.current.contains(event.target as Node)) {\r\n          setIsOpen(false);\r\n        }\r\n      };\r\n\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n      return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }\r\n  }, [isOpen, isElectron]);\r\n\r\n  // For non-Electron environments, render regular dropdown\r\n  if (!isElectron) {\r\n    return (\r\n      <div className={`relative ${className}`}>\r\n        <button\r\n          ref={triggerRef}\r\n          onClick={toggleDropdown}\r\n          disabled={disabled}\r\n          className=\"flex items-center gap-2 w-full\"\r\n        >\r\n          {trigger}\r\n        </button>\r\n        \r\n        {isOpen && (\r\n          <div className=\"absolute top-full left-0 mt-1 bg-gray-800 border border-gray-600 rounded-lg shadow-lg z-50 min-w-full\">\r\n            {children}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // For Electron, render just the trigger (dropdown is handled by native window)\r\n  return (\r\n    <div className={`relative ${className}`}>\r\n      <button\r\n        ref={triggerRef}\r\n        onClick={toggleDropdown}\r\n        disabled={disabled}\r\n        className=\"flex items-center gap-2 w-full\"\r\n      >\r\n        {trigger}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper function to convert React children to HTML string\r\nfunction generateDropdownHTML(children: React.ReactNode): string {\r\n  // This is a simplified conversion - in a real implementation,\r\n  // you might want to use a more sophisticated React-to-HTML converter\r\n  if (typeof children === 'string') {\r\n    return `<div class=\"dropdown-item\">${children}</div>`;\r\n  }\r\n\r\n  // For now, return a placeholder - this would need to be enhanced\r\n  // to properly convert React elements to HTML\r\n  return `\r\n    <div class=\"dropdown-item\">Provider 1</div>\r\n    <div class=\"dropdown-item\">Provider 2</div>\r\n    <div class=\"dropdown-item\">Provider 3</div>\r\n  `;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\floating-ui.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[148,279],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\mcp-dropdown.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1346,1412],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1480,1530],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3111,3162],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'loadServers'. Either include it or remove the dependency array.","line":119,"column":6,"nodeType":"ArrayExpression","endLine":119,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadServers]","fix":{"range":[3875,3877],"text":"[loadServers]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4044,4156],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4164,4231],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4702,4765],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4886,4957],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5000,5067],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5194,5272],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":168,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":168,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5817,5903],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":169,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":169,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5911,6001],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":176,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":176,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6322,6377],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6414,6458],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6489,6543],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6870,6921],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7185,7252],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7416,7473],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7504,7559],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":223,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":223,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7927,7985],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":234,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":234,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8225,8301],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8309,8385],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":242,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":242,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8665,8740],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8956,9026],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":253,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":253,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9168,9255],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9401,9493],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9699,9778],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":279,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":279,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10335,10421],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":283,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":283,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10463,10525],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":292,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":292,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10788,10841],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":296,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":296,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10942,11007],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":543,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":543,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19526,19719],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":556,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":556,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[20073,20130],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":724,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":724,"endColumn":44,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27992,28050],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":732,"column":35,"nodeType":"MemberExpression","messageId":"unexpected","endLine":732,"endColumn":46,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28441,28571],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Server, RefreshCw, Zap } from \"lucide-react\"\r\nimport { cn } from \"../../lib/utils\"\r\nimport { Button } from \"./button\"\r\nimport { ToggleSwitch } from \"./toggle-switch\"\r\nimport { mcpService, type MCPServer } from \"../../services/mcpService\"\r\n\r\ninterface MCPDropdownProps {\r\n  disabled?: boolean\r\n  className?: string\r\n}\r\n\r\nexport function MCPDropdown({\r\n  disabled = false,\r\n  className\r\n}: MCPDropdownProps) {\r\n  const [open, setOpen] = React.useState(false)\r\n  const [servers, setServers] = React.useState<MCPServer[]>([])\r\n  const [enabledServers, setEnabledServers] = React.useState<Set<string>>(new Set())\r\n  const [connectedServers, setConnectedServers] = React.useState<Set<string>>(new Set())\r\n  const [serverStatus, setServerStatus] = React.useState<Map<string, {\r\n    status: string;\r\n    error?: string;\r\n    toolCount?: number;\r\n    resourceCount?: number;\r\n    promptCount?: number;\r\n  }>>(new Map())\r\n  \r\n  const triggerRef = React.useRef<HTMLButtonElement>(null)\r\n  const isElectron = typeof window !== 'undefined' && window.electronAPI\r\n\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  const loadingTimeoutRef = React.useRef<NodeJS.Timeout>()\r\n\r\n  const loadServers = React.useCallback(async () => {\r\n    // Prevent concurrent loads\r\n    if (isLoading) {\r\n      console.log('🔄 MCP Dropdown: Load already in progress, skipping')\r\n      return\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true)\r\n      console.log('🔄 MCP Dropdown: Loading servers...')\r\n\r\n      const mcpServers = await mcpService.getServers()\r\n      setServers(mcpServers)\r\n\r\n      // Track which servers are enabled\r\n      const enabled = new Set(mcpServers.filter(s => s.enabled).map(s => s.id))\r\n      setEnabledServers(enabled)\r\n\r\n      // Track which servers are connected\r\n      const connectedIds = await mcpService.getConnectedServerIds()\r\n      const connected = new Set(connectedIds)\r\n      setConnectedServers(connected)\r\n\r\n      // Get detailed status for health indicators\r\n      const detailedStatus = await mcpService.getDetailedStatus() as {\r\n        servers?: Array<{\r\n          id: string;\r\n          connected: boolean;\r\n          toolCount?: number;\r\n          resourceCount?: number;\r\n          promptCount?: number;\r\n          hasProcess?: boolean;\r\n        }>\r\n      }\r\n      const statusMap = new Map()\r\n\r\n      if (detailedStatus?.servers) {\r\n        detailedStatus.servers.forEach((serverInfo: {\r\n          id: string;\r\n          connected: boolean;\r\n          toolCount?: number;\r\n          resourceCount?: number;\r\n          promptCount?: number;\r\n          hasProcess?: boolean;\r\n        }) => {\r\n          statusMap.set(serverInfo.id, {\r\n            connected: serverInfo.connected,\r\n            toolCount: serverInfo.toolCount || 0,\r\n            resourceCount: serverInfo.resourceCount || 0,\r\n            promptCount: serverInfo.promptCount || 0,\r\n            hasProcess: serverInfo.hasProcess || false\r\n          })\r\n        })\r\n      }\r\n\r\n      setServerStatus(statusMap)\r\n\r\n      // MCP Status loaded\r\n    } catch (error) {\r\n      console.error('Failed to load MCP servers:', error)\r\n    } finally {\r\n      // Clear loading state after a short delay to prevent rapid successive calls\r\n      if (loadingTimeoutRef.current) {\r\n        clearTimeout(loadingTimeoutRef.current)\r\n      }\r\n      loadingTimeoutRef.current = setTimeout(() => {\r\n        setIsLoading(false)\r\n      }, 500) // 500ms debounce\r\n    }\r\n  }, [isLoading])\r\n\r\n  // Load MCP servers on mount only (no auto-refresh)\r\n  React.useEffect(() => {\r\n    loadServers()\r\n    // Removed auto-refresh interval - servers will be refreshed when needed (e.g., when toggling)\r\n\r\n    // Cleanup timeout on unmount\r\n    return () => {\r\n      if (loadingTimeoutRef.current) {\r\n        clearTimeout(loadingTimeoutRef.current)\r\n      }\r\n    }\r\n  }, []) // Empty dependency array - only run on mount\r\n\r\n  const toggleServer = React.useCallback(async (serverId: string, currentlyEnabled: boolean) => {\r\n    try {\r\n      console.log(`🔄 MCP Dropdown: toggleServer called for ${serverId}: ${currentlyEnabled} -> ${!currentlyEnabled}`)\r\n      console.log('🔄 MCP Dropdown: mcpService available:', !!mcpService)\r\n\r\n      // Use the exact same logic as SettingsOverlay.tsx handleUpdateMcpServer\r\n      const wasEnabled = currentlyEnabled\r\n      const willBeEnabled = !currentlyEnabled\r\n      const updates = { enabled: willBeEnabled }\r\n\r\n      // Update server enabled state\r\n      await mcpService.updateServer(serverId, updates)\r\n\r\n      // Handle connection changes - same logic as settings page\r\n      if (wasEnabled !== willBeEnabled) {\r\n        if (willBeEnabled) {\r\n          console.log('🔌 Connecting MCP server after enable:', serverId)\r\n          try {\r\n            await mcpService.connectServer(serverId)\r\n          } catch (connectError) {\r\n            console.warn('⚠️ Failed to connect server after enable:', connectError)\r\n          }\r\n        } else {\r\n          console.log('🔌 Disconnecting MCP server after disable:', serverId)\r\n          try {\r\n            await mcpService.disconnectServer(serverId)\r\n          } catch (disconnectError) {\r\n            console.warn('⚠️ Failed to disconnect server after disable:', disconnectError)\r\n          }\r\n        }\r\n      }\r\n\r\n      // Update local state immediately for responsive UI\r\n      const newEnabledServers = new Set(enabledServers)\r\n      const newConnectedServers = new Set(connectedServers)\r\n\r\n      if (willBeEnabled) {\r\n        newEnabledServers.add(serverId)\r\n        newConnectedServers.add(serverId)\r\n      } else {\r\n        newEnabledServers.delete(serverId)\r\n        newConnectedServers.delete(serverId)\r\n      }\r\n\r\n      setEnabledServers(newEnabledServers)\r\n      setConnectedServers(newConnectedServers)\r\n\r\n      console.log('🔄 Updated local state - enabledServers:', Array.from(newEnabledServers))\r\n      console.log('🔄 Updated local state - connectedServers:', Array.from(newConnectedServers))\r\n\r\n      // Trigger settings reload for MCP server change (explicit requirement) - same as settings page\r\n      const { settingsService } = await import('../../services/settingsService')\r\n      await settingsService.reloadForMCPChange()\r\n\r\n      // Force reload servers to ensure UI is in sync with backend state\r\n      console.log('🔄 Reloading servers to sync UI state...')\r\n      await loadServers()\r\n\r\n      console.log('✅ MCP server update completed')\r\n    } catch (error) {\r\n      console.error('❌ Failed to update MCP server:', error)\r\n      // Only reload if not already loading to prevent loops\r\n      if (!isLoading) {\r\n        setTimeout(() => loadServers(), 1000) // Delayed reload to prevent loops\r\n      }\r\n    }\r\n  }, [enabledServers, connectedServers, loadServers, isLoading])\r\n\r\n  const restartServer = async (serverId: string) => {\r\n    try {\r\n      console.log(`🔄 Restarting MCP server ${serverId}`)\r\n\r\n      // Disconnect first\r\n      await mcpService.disconnectServer(serverId)\r\n\r\n      // Wait a moment\r\n      await new Promise(resolve => setTimeout(resolve, 500))\r\n\r\n      // Reconnect\r\n      const connected = await mcpService.connectServer(serverId)\r\n      console.log(`🔌 MCP server ${serverId} restart result:`, connected)\r\n\r\n      // Update local state instead of full reload\r\n      if (connected) {\r\n        setConnectedServers(prev => new Set([...prev, serverId]))\r\n      }\r\n\r\n      console.log(`✅ MCP server ${serverId} restart completed`)\r\n    } catch (error) {\r\n      console.error('❌ Failed to restart MCP server:', error)\r\n      // Only reload if not already loading to prevent loops\r\n      if (!isLoading) {\r\n        setTimeout(() => loadServers(), 1000) // Delayed reload to prevent loops\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleClose = React.useCallback(async () => {\r\n    if (isElectron) {\r\n      try {\r\n        await window.electronAPI.closeDropdown()\r\n      } catch (error) {\r\n        console.error('Failed to close floating dropdown:', error)\r\n      }\r\n    }\r\n    setOpen(false)\r\n  }, [isElectron])\r\n\r\n  // Handle MCP dropdown selection events from Electron\r\n  React.useEffect(() => {\r\n    if (!isElectron) return;\r\n\r\n    const handleSelection = (selectedValue: string) => {\r\n      console.log('🔥 MCP DROPDOWN: handleSelection called with:', selectedValue);\r\n      console.log('🔥 MCP DROPDOWN: typeof selectedValue:', typeof selectedValue);\r\n\r\n      // ONLY handle MCP-related selections to avoid conflicts with other dropdowns\r\n      const isMCPToggle = selectedValue.startsWith('mcp-toggle:');\r\n      const isMCPServer = servers.some(s => s.id === selectedValue);\r\n\r\n      if (!isMCPToggle && !isMCPServer) {\r\n        console.log('🔥 MCP DROPDOWN: Ignoring non-MCP selection:', selectedValue);\r\n        return;\r\n      }\r\n\r\n      // Handle new toggle format: \"mcp-toggle:serverId:currentlyEnabled\"\r\n      if (selectedValue.startsWith('mcp-toggle:')) {\r\n        const parts = selectedValue.split(':');\r\n        console.log('🔥 MCP DROPDOWN: Toggle format detected, parts:', parts);\r\n        if (parts.length === 3) {\r\n          const serverId = parts[1];\r\n          const currentlyEnabled = parts[2] === 'true';\r\n          console.log('🔥 MCP DROPDOWN: Calling toggleServer with:', serverId, currentlyEnabled);\r\n          toggleServer(serverId, currentlyEnabled);\r\n          return; // Don't close dropdown for toggle switches\r\n        } else {\r\n          console.log('🔥 MCP DROPDOWN: Invalid toggle format, expected 3 parts, got:', parts.length);\r\n        }\r\n      }\r\n\r\n      // Try to parse as JSON for legacy toggle switch events\r\n      try {\r\n        const parsed = JSON.parse(selectedValue);\r\n        if (parsed.type === 'mcp-toggle') {\r\n          console.log('🔥 MCP DROPDOWN: Legacy toggle switch clicked:', parsed.serverId);\r\n          toggleServer(parsed.serverId, parsed.currentlyEnabled);\r\n          return; // Don't close dropdown for toggle switches\r\n        }\r\n      } catch {\r\n        // Not JSON, handle as regular string selection\r\n      }\r\n\r\n      // Handle regular server selection (string)\r\n      if (typeof selectedValue === 'string') {\r\n        // ONLY handle values that are actually MCP server IDs\r\n        // This prevents intercepting provider/model selections\r\n        const server = servers.find(s => s.id === selectedValue);\r\n        if (!server) {\r\n          console.log('🔥 MCP DROPDOWN: Ignoring selection not in our servers:', selectedValue);\r\n          return;\r\n        }\r\n\r\n        console.log('🔥 MCP DROPDOWN: Toggling server:', server.name);\r\n        const currentlyEnabled = enabledServers.has(server.id);\r\n        toggleServer(server.id, currentlyEnabled);\r\n        setOpen(false);\r\n      }\r\n    };\r\n\r\n    // Register MCP dropdown listener\r\n    if (window.electronAPI?.onDropdownItemSelected) {\r\n      console.log('🔥 MCP DROPDOWN: Registering listener');\r\n      window.electronAPI.onDropdownItemSelected(handleSelection);\r\n\r\n      return () => {\r\n        console.log('🔥 MCP DROPDOWN: Cleanup (not removing listeners)');\r\n      };\r\n    }\r\n  }, [servers, enabledServers, isElectron, toggleServer]);\r\n\r\n  const generateMCPDropdownHTML = (servers: MCPServer[], enabledServers: Set<string>) => {\r\n    const serverItems = servers.map(server => {\r\n      const isEnabled = enabledServers.has(server.id)\r\n      return `\r\n        <div class=\"dropdown-item\">\r\n          <div class=\"server-info\">\r\n            <div class=\"server-icon\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <rect width=\"20\" height=\"8\" x=\"2\" y=\"2\" rx=\"2\" ry=\"2\"/>\r\n                <rect width=\"20\" height=\"8\" x=\"2\" y=\"14\" rx=\"2\" ry=\"2\"/>\r\n                <line x1=\"6\" x2=\"6\" y1=\"6\" y2=\"10\"/>\r\n                <line x1=\"6\" x2=\"6\" y1=\"18\" y2=\"22\"/>\r\n              </svg>\r\n            </div>\r\n            <div class=\"server-details\">\r\n              <div class=\"server-name\">${server.name}</div>\r\n              ${server.description ? `<div class=\"server-description\">${server.description}</div>` : ''}\r\n            </div>\r\n          </div>\r\n          <div class=\"server-status\">\r\n            <div class=\"status-icon\">\r\n              ${isEnabled ?\r\n                `<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"status-enabled\">\r\n                  <polyline points=\"20,6 9,17 4,12\"/>\r\n                </svg>` :\r\n                `<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"status-disabled\">\r\n                  <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\r\n                  <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\r\n                </svg>`\r\n              }\r\n            </div>\r\n            <div class=\"toggle-switch ${isEnabled ? 'toggle-enabled' : 'toggle-disabled'} dropdown-item\"\r\n                 data-value=\"mcp-toggle:${server.id}:${isEnabled}\"\r\n                 data-server-id=\"${server.id}\"\r\n                 data-enabled=\"${isEnabled}\"\r\n                 onclick=\"console.log('🔥 HTML Toggle clicked:', '${server.id}', ${isEnabled}); console.log('🔥 electronAPI available:', !!window.electronAPI); console.log('🔥 selectDropdownItem available:', !!window.electronAPI?.selectDropdownItem); window.electronAPI?.selectDropdownItem?.('mcp-toggle:${server.id}:${isEnabled}');\">\r\n              <div class=\"toggle-track\">\r\n                <div class=\"toggle-thumb\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `\r\n    }).join('')\r\n\r\n    return `\r\n      <style>\r\n        /* MCP-specific styles - main process handles theme colors */\r\n        .dropdown-header {\r\n          padding: 8px 12px;\r\n          font-size: 12px;\r\n          color: hsl(var(--muted-foreground));\r\n          border-bottom: 1px solid hsl(var(--border));\r\n          background: hsl(var(--muted));\r\n        }\r\n        .dropdown-item {\r\n          padding: 8px 12px;\r\n          border-bottom: 1px solid hsl(var(--border));\r\n          cursor: default;\r\n          transition: background-color 0.2s;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n          min-height: 48px;\r\n          color: hsl(var(--foreground));\r\n        }\r\n        .dropdown-item:hover {\r\n          background: hsl(var(--accent) / 0.1);\r\n          color: hsl(var(--foreground));\r\n        }\r\n        .dropdown-item:last-child {\r\n          border-bottom: none;\r\n        }\r\n        .server-info {\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 8px;\r\n          flex: 1;\r\n          min-width: 0;\r\n        }\r\n        .server-icon {\r\n          width: 16px;\r\n          height: 16px;\r\n          flex-shrink: 0;\r\n          color: var(--muted-foreground);\r\n        }\r\n        .server-details {\r\n          display: flex;\r\n          flex-direction: column;\r\n          gap: 2px;\r\n          flex: 1;\r\n          min-width: 0;\r\n        }\r\n        .server-name {\r\n          font-size: 14px;\r\n          font-weight: 500;\r\n          color: white;\r\n          white-space: nowrap;\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n        }\r\n        .server-description {\r\n          font-size: 12px;\r\n          color: rgba(255, 255, 255, 0.7);\r\n          white-space: nowrap;\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n        }\r\n        .server-status {\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 4px;\r\n          flex-shrink: 0;\r\n          margin-left: 8px;\r\n        }\r\n        .status-icon {\r\n          width: 16px;\r\n          height: 16px;\r\n        }\r\n        .status-text {\r\n          font-size: 11px;\r\n          font-weight: 500;\r\n          white-space: nowrap;\r\n        }\r\n\r\n        /* iOS-style toggle switch */\r\n        .toggle-switch {\r\n          cursor: pointer;\r\n          user-select: none;\r\n        }\r\n        .toggle-track {\r\n          width: 36px;\r\n          height: 20px;\r\n          border-radius: 10px;\r\n          position: relative;\r\n          transition: all 0.3s ease;\r\n          border: 2px solid transparent;\r\n        }\r\n        .toggle-enabled .toggle-track {\r\n          background-color: #22c55e;\r\n        }\r\n        .toggle-disabled .toggle-track {\r\n          background-color: #d1d5db;\r\n        }\r\n        .toggle-thumb {\r\n          width: 16px;\r\n          height: 16px;\r\n          border-radius: 50%;\r\n          background-color: white;\r\n          position: absolute;\r\n          top: 2px;\r\n          transition: all 0.3s ease;\r\n          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n        }\r\n        .toggle-enabled .toggle-thumb {\r\n          transform: translateX(16px);\r\n        }\r\n        .toggle-disabled .toggle-thumb {\r\n          transform: translateX(2px);\r\n        }\r\n        .toggle-switch:hover .toggle-track {\r\n          opacity: 0.9;\r\n          box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);\r\n        }\r\n        .status-enabled {\r\n          color: hsl(142.1 76.2% 36.3%);\r\n        }\r\n        .status-disabled {\r\n          color: hsl(0 84.2% 60.2%);\r\n        }\r\n        .empty-state {\r\n          padding: 16px;\r\n          text-align: center;\r\n          color: var(--muted-foreground);\r\n          font-size: 14px;\r\n        }\r\n        /* Enable scrolling with hidden scrollbars */\r\n        .dropdown-container {\r\n          max-height: 400px;\r\n          overflow-y: auto;\r\n          overflow-x: hidden;\r\n        }\r\n        .dropdown-container::-webkit-scrollbar {\r\n          display: none;\r\n        }\r\n        .dropdown-container {\r\n          -ms-overflow-style: none;\r\n          scrollbar-width: none;\r\n        }\r\n        /* Ensure no scrollbars on any child elements */\r\n        * {\r\n          scrollbar-width: none;\r\n          -ms-overflow-style: none;\r\n        }\r\n        *::-webkit-scrollbar {\r\n          display: none;\r\n        }\r\n      </style>\r\n\r\n      <div class=\"dropdown-container\">\r\n        ${servers.length === 0 ?\r\n          '<div class=\"empty-state\">No MCP servers configured</div>' :\r\n          `<div class=\"dropdown-header\">\r\n            ${servers.length} MCP server${servers.length === 1 ? '' : 's'}\r\n          </div>${serverItems}`\r\n        }\r\n      </div>\r\n    `\r\n  }\r\n\r\n  const openDropdown = async () => {\r\n    // Only refresh servers if we haven't loaded them recently or if not currently loading\r\n    if (servers.length === 0 && !isLoading) {\r\n      await loadServers()\r\n    }\r\n\r\n    if (!isElectron || !triggerRef.current) {\r\n      setOpen(true)\r\n      return\r\n    }\r\n\r\n    const dropdownWidth = 320\r\n    // Calculate height: header (32px) + servers (48px each) + padding (16px) + 15px for draggable header\r\n    const serverHeight = 48 // Each server item height\r\n    const headerHeight = 32 // Header height\r\n    const padding = 16 // Top and bottom padding\r\n    const maxHeight = 415 // Maximum dropdown height (increased by 15px)\r\n\r\n    const calculatedHeight = servers.length === 0\r\n      ? headerHeight + 32 + padding // Empty state height\r\n      : Math.min(maxHeight, headerHeight + (servers.length * serverHeight) + padding)\r\n\r\n    const dropdownHeight = calculatedHeight\r\n\r\n    try {\r\n      // Get trigger button position relative to the window (not viewport)\r\n      const rect = triggerRef.current.getBoundingClientRect()\r\n\r\n      // Calculate position below the trigger\r\n      const x = rect.left\r\n      const y = rect.bottom + 4 // 4px gap below trigger\r\n\r\n      console.log('🔍 MCP Dropdown positioning:', {\r\n        buttonRect: rect,\r\n        calculatedPosition: { x, y },\r\n        dropdownSize: { width: dropdownWidth, height: dropdownHeight }\r\n      })\r\n\r\n      // Generate HTML content for dropdown\r\n      const content = generateMCPDropdownHTML(servers, enabledServers)\r\n\r\n      // Open dropdown at calculated position (theme will be retrieved from main window)\r\n      await window.electronAPI.openDropdown(x, y, dropdownWidth, dropdownHeight, content)\r\n      setOpen(true)\r\n    } catch (error) {\r\n      console.error('Failed to open floating dropdown:', error)\r\n      setOpen(true) // Fallback to regular dropdown\r\n    }\r\n  }\r\n\r\n  const toggleDropdown = () => {\r\n    if (disabled) return\r\n\r\n    if (open) {\r\n      handleClose()\r\n    } else {\r\n      openDropdown()\r\n    }\r\n  }\r\n\r\n  // Note: MCP dropdown selection is handled by the specific handler above (lines 163-191)\r\n  // This prevents conflicts with other dropdowns that use the global event system\r\n\r\n  // Close dropdown when clicking outside (for non-Electron fallback)\r\n  React.useEffect(() => {\r\n    if (!isElectron && open) {\r\n      const handleClickOutside = (event: MouseEvent) => {\r\n        if (triggerRef.current && !triggerRef.current.contains(event.target as Node)) {\r\n          setOpen(false);\r\n        }\r\n      };\r\n\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n      return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }\r\n  }, [open, isElectron]);\r\n\r\n  const enabledCount = enabledServers.size\r\n  const totalCount = servers.length\r\n\r\n  return (\r\n    <div className=\"relative\" style={{ zIndex: 1 }}>\r\n      <Button\r\n        ref={triggerRef}\r\n        variant=\"ghost\"\r\n        role=\"combobox\"\r\n        aria-expanded={open}\r\n        className={cn(\r\n          \"justify-center items-center font-normal h-8 w-8 p-0 bg-transparent\",\r\n          className\r\n        )}\r\n        disabled={disabled}\r\n        onClick={toggleDropdown}\r\n        title={`MCP Servers: ${enabledCount}/${totalCount} enabled, ${connectedServers.size} connected`}\r\n        style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n      >\r\n        <Zap className=\"h-4 w-4 transition-colors\" />\r\n      </Button>\r\n\r\n      {open && !isElectron && (\r\n        <>\r\n          {/* Backdrop to close dropdown */}\r\n          <div\r\n            className=\"fixed inset-0 z-[99998]\"\r\n            onClick={handleClose}\r\n            style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n          />\r\n          \r\n          {/* Dropdown content */}\r\n          <div\r\n            className=\"mcp-dropdown-content absolute top-full left-0 mt-1 w-80 bg-popover border border-border rounded-md shadow-lg z-[99999]\"\r\n            style={{\r\n              WebkitAppRegion: 'no-drag',\r\n              maxHeight: '400px',\r\n              overflow: 'hidden'\r\n            } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n            onClick={(e) => {\r\n              // Prevent dropdown from closing when clicking inside\r\n              e.stopPropagation();\r\n            }}\r\n          >\r\n            <div className=\"p-1 overflow-y-auto scrollbar-hide\" style={{ maxHeight: '400px' }}>\r\n              {servers.length === 0 ? (\r\n                <div className=\"py-6 text-center text-sm text-muted-foreground\">\r\n                  No MCP servers configured\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  <div className=\"px-2 py-1 text-xs text-muted-foreground border-b flex items-center justify-between\">\r\n                    <span>{servers.length} MCP server{servers.length === 1 ? '' : 's'}</span>\r\n                    <span className=\"flex items-center gap-1\">\r\n                      <span className=\"text-green-600\">{enabledCount} enabled</span>\r\n                      <span>•</span>\r\n                      <span className=\"text-blue-600\">{connectedServers.size} connected</span>\r\n                    </span>\r\n                  </div>\r\n                  {servers.map((server) => {\r\n                    const isEnabled = enabledServers.has(server.id)\r\n                    const isConnected = connectedServers.has(server.id)\r\n                    const status = serverStatus.get(server.id)\r\n\r\n                    return (\r\n                      <div\r\n                        key={server.id}\r\n                        className={`p-2 rounded-sm border-l-2 ${\r\n                          isEnabled\r\n                            ? 'border-l-green-500 bg-green-50/50 hover:bg-green-100/50'\r\n                            : 'border-l-gray-300 bg-gray-50/50 hover:bg-gray-100/50'\r\n                        }`}\r\n                      >\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <div className=\"flex items-center gap-2 flex-1\">\r\n                            <Server className={`h-4 w-4 ${isEnabled ? 'text-green-600' : 'text-gray-400'}`} />\r\n                            <div className=\"flex flex-col flex-1\">\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <span className={`text-sm font-medium ${isEnabled ? 'text-foreground' : 'text-muted-foreground'}`}>\r\n                                  {server.name}\r\n                                </span>\r\n\r\n                                {/* Status badge */}\r\n                                <span className={`text-xs px-2 py-0.5 rounded-full ${\r\n                                  isEnabled\r\n                                    ? isConnected\r\n                                      ? 'bg-green-100 text-green-800'\r\n                                      : 'bg-yellow-100 text-yellow-800'\r\n                                    : 'bg-gray-100 text-gray-600'\r\n                                }`}>\r\n                                  {isEnabled\r\n                                    ? isConnected\r\n                                      ? 'Connected'\r\n                                      : 'Disconnected'\r\n                                    : 'Disabled'\r\n                                  }\r\n                                </span>\r\n\r\n                                {/* Capability indicators */}\r\n                                {isEnabled && isConnected && status && (\r\n                                  <span\r\n                                    className=\"text-xs text-muted-foreground\"\r\n                                    title={`Tools: ${status.toolCount ?? 0}, Resources: ${status.resourceCount ?? 0}, Prompts: ${status.promptCount ?? 0}`}\r\n                                  >\r\n                                    {(status.toolCount ?? 0) > 0 && `${status.toolCount}t`}\r\n                                    {(status.resourceCount ?? 0) > 0 && ` ${status.resourceCount}r`}\r\n                                    {(status.promptCount ?? 0) > 0 && ` ${status.promptCount}p`}\r\n                                    {(status.toolCount ?? 0) === 0 && (status.resourceCount ?? 0) === 0 && (status.promptCount ?? 0) === 0 && 'no capabilities'}\r\n                                  </span>\r\n                                )}\r\n                              </div>\r\n                              {server.description && (\r\n                                <span className=\"text-xs text-muted-foreground\">{server.description}</span>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"flex items-center gap-2\">\r\n                            {/* Restart button for enabled servers */}\r\n                            {isEnabled && (\r\n                              <button\r\n                                onClick={(e) => {\r\n                                  e.preventDefault();\r\n                                  e.stopPropagation();\r\n                                  restartServer(server.id);\r\n                                }}\r\n                                className=\"p-1 hover:bg-accent-foreground/10 rounded\"\r\n                                title=\"Restart server\"\r\n                              >\r\n                                <RefreshCw className=\"h-3 w-3\" />\r\n                              </button>\r\n                            )}\r\n\r\n                            {/* iPhone-style toggle switch */}\r\n                            <div\r\n                              onMouseDown={(e) => {\r\n                                console.log('🔄 MCP Toggle switch mousedown:', server.id);\r\n                                // Prevent dropdown from closing\r\n                                e.stopPropagation();\r\n                              }}\r\n                            >\r\n                              <ToggleSwitch\r\n                                enabled={isEnabled}\r\n                                onToggle={async (newEnabledState) => {\r\n                                  console.log('🔄 MCP Toggle switch clicked:', server.id, 'currently enabled:', isEnabled, 'new state requested:', newEnabledState);\r\n                                  // The toggleServer function expects the CURRENT state, not the new state\r\n                                  // This is because it calculates willBeEnabled = !currentlyEnabled\r\n                                  await toggleServer(server.id, isEnabled);\r\n                                }}\r\n                                size=\"sm\"\r\n                                className=\"focus:ring-offset-0\"\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  })}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\provider-dropdown.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1338,1396],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1521,1602],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1673,1725],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3078,3135],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3563,3626],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3636,3705],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3864,3954],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4142,4227],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":126,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":126,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4269,4341],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4583,4653],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":29,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":40,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8654,8707],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Check, ChevronDown } from \"lucide-react\"\r\nimport { cn } from \"../../lib/utils\"\r\nimport { Button } from \"./button\"\r\nimport { ProviderLogo } from \"./provider-logo\"\r\nimport type { LLMProvider } from \"../../services/llmService\"\r\n\r\ninterface ProviderDropdownProps {\r\n  value?: string\r\n  onValueChange?: (value: string) => void\r\n  placeholder?: string\r\n  providers: LLMProvider[]\r\n  disabled?: boolean\r\n  className?: string\r\n}\r\n\r\nexport function ProviderDropdown({\r\n  value,\r\n  onValueChange,\r\n  placeholder = \"Select a provider...\",\r\n  providers,\r\n  disabled = false,\r\n  className\r\n}: ProviderDropdownProps) {\r\n  const [open, setOpen] = React.useState(false)\r\n\r\n  const triggerRef = React.useRef<HTMLButtonElement>(null)\r\n  const isElectron = typeof window !== 'undefined' && window.electronAPI\r\n\r\n  // Sort providers alphabetically by name\r\n  const sortedProviders = React.useMemo(() => {\r\n    return [...providers].sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()))\r\n  }, [providers])\r\n\r\n  // Use all sorted providers (no search filtering)\r\n  const filteredProviders = sortedProviders\r\n\r\n  const handleClose = React.useCallback(async () => {\r\n    if (isElectron) {\r\n      try {\r\n        await window.electronAPI.closeDropdown()\r\n      } catch (error) {\r\n        console.error('Failed to close floating dropdown:', error)\r\n      }\r\n    }\r\n    setOpen(false)\r\n  }, [isElectron])\r\n\r\n  const handleSelect = (selectedProvider: LLMProvider) => {\r\n    console.log('ProviderDropdown handleSelect called with:', selectedProvider.name);\r\n    onValueChange?.(selectedProvider.name);\r\n    handleClose();\r\n    console.log('ProviderDropdown selection completed');\r\n  }\r\n\r\n  const openDropdown = async () => {\r\n    if (!isElectron || !triggerRef.current) {\r\n      setOpen(true)\r\n      return\r\n    }\r\n\r\n    // Calculate dropdown dimensions\r\n    const dropdownWidth = 280\r\n    const itemHeight = 40\r\n    const headerHeight = 32 // For provider count text\r\n    const padding = 16 // Top and bottom padding\r\n    const maxHeight = 415 // Increased by 15px for draggable header\r\n\r\n    // Calculate height based on number of providers, ensuring scrolling works\r\n    const calculatedHeight = Math.min(\r\n      maxHeight,\r\n      headerHeight + (filteredProviders.length * itemHeight) + padding\r\n    )\r\n    const dropdownHeight = Math.max(120, calculatedHeight) // Minimum height\r\n\r\n    try {\r\n      // Get trigger button position relative to the window (not viewport)\r\n      const rect = triggerRef.current.getBoundingClientRect()\r\n\r\n      // Calculate position below the trigger\r\n      const x = rect.left\r\n      const y = rect.bottom + 4 // 4px gap below the button\r\n\r\n      // Generate HTML content for dropdown\r\n      const content = generateProviderDropdownHTML(filteredProviders, value)\r\n\r\n      // Open dropdown at calculated position (theme will be retrieved from main window)\r\n      await window.electronAPI.openDropdown(x, y, dropdownWidth, dropdownHeight, content)\r\n      setOpen(true)\r\n    } catch (error) {\r\n      console.error('Failed to open floating dropdown:', error)\r\n      setOpen(true) // Fallback to regular dropdown\r\n    }\r\n  }\r\n\r\n  const toggleDropdown = () => {\r\n    if (disabled) return\r\n\r\n    if (open) {\r\n      handleClose()\r\n    } else {\r\n      openDropdown()\r\n    }\r\n  }\r\n\r\n  // Handle dropdown selection events from Electron\r\n  React.useEffect(() => {\r\n    if (isElectron && window.electronAPI?.onDropdownItemSelected) {\r\n      const handleSelection = (value: string) => {\r\n        console.log('🚀 ELECTRON DROPDOWN: Provider selected:', value);\r\n        console.log('🚀 ELECTRON DROPDOWN: Available providers:', providers);\r\n\r\n        // Check if the selected value is a valid provider ID\r\n        const isValidProvider = providers.some(provider => provider.id === value);\r\n        console.log('🚀 ELECTRON DROPDOWN: Is selected value a valid provider?', isValidProvider);\r\n\r\n        // ONLY handle selections that are actually valid providers\r\n        // This prevents cross-dropdown contamination from MCP servers\r\n        if (!isValidProvider) {\r\n          console.log('🚀 ELECTRON DROPDOWN: Ignoring selection not in our providers:', value);\r\n          return;\r\n        }\r\n\r\n        console.log('🚀 ELECTRON DROPDOWN: Calling onValueChange with:', value);\r\n        onValueChange?.(value);\r\n        setOpen(false);\r\n      };\r\n\r\n      window.electronAPI.onDropdownItemSelected(handleSelection);\r\n\r\n      return () => {\r\n        // Don't remove all listeners - other dropdowns need them too\r\n        console.log('🚀 PROVIDER DROPDOWN: Cleanup (not removing listeners)');\r\n      };\r\n    }\r\n  }, [isElectron, onValueChange, providers]);\r\n\r\n  // Close dropdown when clicking outside (for non-Electron fallback)\r\n  React.useEffect(() => {\r\n    if (!isElectron && open) {\r\n      const handleClickOutside = (event: MouseEvent) => {\r\n        if (triggerRef.current && !triggerRef.current.contains(event.target as Node)) {\r\n          setOpen(false);\r\n        }\r\n      };\r\n\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n      return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }\r\n  }, [open, isElectron]);\r\n\r\n  // Find the selected provider to show its logo\r\n  const selectedProvider = providers.find(p => p.name === value)\r\n\r\n  return (\r\n    <div className=\"relative\" style={{ zIndex: 1 }}>\r\n      <Button\r\n        ref={triggerRef}\r\n        variant=\"outline\"\r\n        role=\"combobox\"\r\n        aria-expanded={open}\r\n        className={cn(\r\n          \"justify-between font-normal\",\r\n          !value && \"text-muted-foreground\",\r\n          className\r\n        )}\r\n        disabled={disabled}\r\n        onClick={toggleDropdown}\r\n        style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n      >\r\n        <div className=\"flex items-center gap-2 min-w-0\">\r\n          {selectedProvider ? (\r\n            <>\r\n              <div className=\"w-4 h-4 flex-shrink-0\">\r\n                <ProviderLogo provider={selectedProvider} size={16} className=\"flex-shrink-0\" />\r\n              </div>\r\n              <span className=\"truncate\">{selectedProvider.name}</span>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <span className=\"text-xs text-muted-foreground\">?</span>\r\n              <span className=\"truncate text-muted-foreground\">{placeholder}</span>\r\n            </>\r\n          )}\r\n        </div>\r\n        <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\r\n      </Button>\r\n\r\n      {open && !isElectron && (\r\n        <>\r\n          {/* Backdrop to close dropdown */}\r\n          <div\r\n            className=\"fixed inset-0 z-[99998]\"\r\n            onClick={handleClose}\r\n            style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n          />\r\n\r\n          {/* Dropdown content - only show for non-Electron fallback */}\r\n          <div\r\n            className=\"absolute top-full mt-1 left-0 z-[99999] w-[280px] bg-card border shadow-lg rounded-md\"\r\n            style={{\r\n              WebkitAppRegion: 'no-drag',\r\n              maxHeight: '415px', // Increased by 15px for draggable header\r\n              overflow: 'hidden'\r\n            } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n          >\r\n            <div className=\"flex flex-col h-full\">\r\n              <div\r\n                className=\"flex-1 min-h-0 overflow-y-auto scrollbar-hide\"\r\n                style={{\r\n                  WebkitAppRegion: 'no-drag',\r\n                  maxHeight: '415px', // Increased by 15px for draggable header\r\n                  scrollbarWidth: 'none',\r\n                  msOverflowStyle: 'none'\r\n                } as React.CSSProperties & { WebkitAppRegion?: string; scrollbarWidth?: string; msOverflowStyle?: string }}\r\n              >\r\n                <div className=\"p-1\">\r\n                  {filteredProviders.length === 0 ? (\r\n                    <div className=\"py-6 text-center text-sm text-muted-foreground\">\r\n                      No providers found.\r\n                    </div>\r\n                  ) : (\r\n                    <>\r\n                      <div className=\"px-2 py-1 text-xs text-muted-foreground\">\r\n                        {filteredProviders.length} providers available\r\n                      </div>\r\n                      {filteredProviders.map((provider) => (\r\n                        <div\r\n                          key={provider.id}\r\n                          onClick={(e) => {\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                            console.log('Provider item clicked:', provider.name);\r\n                            handleSelect(provider);\r\n                          }}\r\n                          className={cn(\r\n                            \"relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent hover:text-accent-foreground\",\r\n                            value === provider.name && \"bg-accent text-accent-foreground\"\r\n                          )}\r\n                          style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n                        >\r\n                          <Check\r\n                            className={cn(\r\n                              \"mr-2 h-4 w-4 flex-shrink-0\",\r\n                              value === provider.name ? \"opacity-100\" : \"opacity-0\"\r\n                            )}\r\n                          />\r\n                          <ProviderLogo\r\n                            provider={provider}\r\n                            size={20}\r\n                            className=\"mr-3 flex-shrink-0\"\r\n                          />\r\n                          <span className=\"text-sm truncate\">{provider.name}</span>\r\n                        </div>\r\n                      ))}\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\n// Helper function to generate HTML content for the floating dropdown\r\nfunction generateProviderDropdownHTML(providers: LLMProvider[], selectedValue?: string): string {\r\n\r\n  const providerItems = providers.map(provider => {\r\n    // Convert relative path to absolute URL for Electron context\r\n    // Use window.location.origin to get the correct port dynamically\r\n    const logoUrl = provider.logo && provider.logo.startsWith('/') ?\r\n      (typeof window !== 'undefined' ? `${window.location.origin}${provider.logo}` : provider.logo) :\r\n      (provider.logo || '');\r\n\r\n    return `\r\n    <div\r\n      class=\"dropdown-item ${selectedValue === provider.name ? 'selected' : ''}\"\r\n      data-value=\"${provider.id}\"\r\n    >\r\n      <span class=\"check-icon ${selectedValue === provider.name ? 'visible' : ''}\">✓</span>\r\n      <img\r\n        src=\"${logoUrl}\"\r\n        alt=\"${provider.name}\"\r\n        class=\"provider-icon\"\r\n        onerror=\"this.style.display='none'; this.nextElementSibling.style.display='flex';\"\r\n      />\r\n      <div class=\"provider-icon-fallback\" style=\"display: none; width: 20px; height: 20px; background: var(--muted); border-radius: 4px; align-items: center; justify-content: center; font-size: 12px; font-weight: bold; color: var(--foreground);\">\r\n        ${provider.name.charAt(0).toUpperCase()}\r\n      </div>\r\n      <span>${provider.name}</span>\r\n    </div>\r\n  `;\r\n  }).join('');\r\n\r\n  return `\r\n    <style>\r\n      .provider-icon {\r\n        width: 20px;\r\n        height: 20px;\r\n        margin-right: 12px;\r\n        border-radius: 4px;\r\n        object-fit: contain;\r\n      }\r\n      .provider-icon-fallback {\r\n        color: hsl(var(--foreground));\r\n      }\r\n      .dropdown-content {\r\n        max-height: 415px; /* Increased by 15px for draggable header */\r\n        overflow-y: auto;\r\n        overflow-x: hidden;\r\n        scrollbar-width: none;\r\n        -ms-overflow-style: none;\r\n        background: hsl(var(--card));\r\n        color: hsl(var(--card-foreground));\r\n      }\r\n      .dropdown-content::-webkit-scrollbar {\r\n        display: none;\r\n      }\r\n      .dropdown-header {\r\n        padding: 8px 12px;\r\n        font-size: 12px;\r\n        color: hsl(var(--muted-foreground));\r\n        border-bottom: 1px solid hsl(var(--border));\r\n        background: hsl(var(--muted));\r\n        position: sticky;\r\n        top: 0;\r\n        z-index: 1;\r\n      }\r\n      .dropdown-item {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 8px 12px;\r\n        color: hsl(var(--foreground));\r\n        cursor: pointer;\r\n        border-radius: 4px;\r\n        margin: 1px 0;\r\n        font-size: 14px;\r\n        user-select: none;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        box-sizing: border-box;\r\n        min-width: 0;\r\n        transition: background-color 0.2s;\r\n      }\r\n      .dropdown-item:hover {\r\n        background: hsl(var(--accent) / 0.1);\r\n        color: hsl(var(--foreground));\r\n      }\r\n      .dropdown-item.selected {\r\n        background: hsl(var(--accent) / 0.2);\r\n        color: hsl(var(--foreground));\r\n      }\r\n      .check-icon {\r\n        margin-right: 8px;\r\n        width: 16px;\r\n        height: 16px;\r\n        opacity: 0;\r\n        color: hsl(var(--primary));\r\n      }\r\n      .check-icon.visible {\r\n        opacity: 1;\r\n      }\r\n    </style>\r\n    <div class=\"dropdown-content\">\r\n      <div class=\"dropdown-header\">\r\n        ${providers.length} providers available\r\n      </div>\r\n      ${providerItems}\r\n    </div>\r\n  `;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\provider-logo.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1609,1695],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport type { LLMProvider } from \"../../services/llmService\"\r\n\r\ninterface ProviderLogoProps {\r\n  provider: LLMProvider\r\n  className?: string\r\n  size?: number\r\n}\r\n\r\nexport function ProviderLogo({ provider, className = \"\", size = 20 }: ProviderLogoProps) {\r\n  const [isDarkTheme, setIsDarkTheme] = React.useState(true)\r\n\r\n  React.useEffect(() => {\r\n    // Force dark theme - no dynamic detection\r\n    setIsDarkTheme(true)\r\n  }, [])\r\n\r\n  // Convert relative URLs to absolute URLs for Electron compatibility\r\n  const getAbsoluteUrl = (url: string | undefined) => {\r\n    if (!url) return '';\r\n    if (url.startsWith('http')) return url;\r\n    if (typeof window !== 'undefined') {\r\n      // Use window.location.origin to get the correct port dynamically\r\n      return `${window.location.origin}${url}`;\r\n    }\r\n    return url;\r\n  };\r\n\r\n  const logoUrl = isDarkTheme ? provider.logo : (provider.logoLight || provider.logo);\r\n  const logoSrc = getAbsoluteUrl(logoUrl);\r\n\r\n  // If no logo available, show a fallback\r\n  if (!logoSrc) {\r\n    return (\r\n      <div\r\n        className={`bg-gray-600 text-white rounded flex items-center justify-center text-xs font-bold ${className}`}\r\n        style={{ width: size, height: size }}\r\n        title={provider.name}\r\n      >\r\n        {provider.name.charAt(0).toUpperCase()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <img\r\n      src={logoSrc}\r\n      alt={provider.name}\r\n      className={`object-contain ${className}`}\r\n      style={{ width: size, height: size }}\r\n      title={provider.name}\r\n      onError={(e) => {\r\n        console.log('Provider logo failed to load:', logoSrc, 'for provider:', provider.name);\r\n        // Fallback to first letter if image fails to load\r\n        const target = e.currentTarget;\r\n        target.style.display = 'none';\r\n        const fallback = document.createElement('div');\r\n        fallback.className = `bg-muted rounded flex items-center justify-center text-xs font-bold ${className}`;\r\n        fallback.style.width = `${size}px`;\r\n        fallback.style.height = `${size}px`;\r\n        fallback.textContent = provider.name.charAt(0).toUpperCase();\r\n        target.parentNode?.appendChild(fallback);\r\n      }}\r\n    />\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\rag-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\searchable-select.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1291,1364],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1453,1505],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":36,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3995,4041],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Check, ChevronDown, Search } from \"lucide-react\"\r\nimport { cn } from \"../../lib/utils\"\r\nimport { Button } from \"./button\"\r\nimport { Input } from \"./input\"\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"./popover\"\r\n\r\ninterface SearchableSelectProps {\r\n  value?: string\r\n  onValueChange?: (value: string) => void\r\n  placeholder?: string\r\n  options: string[]\r\n  disabled?: boolean\r\n  className?: string\r\n}\r\n\r\nexport function SearchableSelect({\r\n  value,\r\n  onValueChange,\r\n  placeholder = \"Select an option...\",\r\n  options,\r\n  disabled = false,\r\n  className\r\n}: SearchableSelectProps) {\r\n  const [open, setOpen] = React.useState(false)\r\n  const [searchValue, setSearchValue] = React.useState(\"\")\r\n\r\n  // Sort options alphabetically\r\n  const sortedOptions = React.useMemo(() => {\r\n    return [...options].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()))\r\n  }, [options])\r\n\r\n  // Filter options based on search\r\n  const filteredOptions = React.useMemo(() => {\r\n    if (!searchValue) return sortedOptions\r\n    return sortedOptions.filter(option =>\r\n      option.toLowerCase().includes(searchValue.toLowerCase())\r\n    )\r\n  }, [sortedOptions, searchValue])\r\n\r\n  const handleSelect = (selectedValue: string) => {\r\n    console.log('SearchableSelect handleSelect called with:', selectedValue);\r\n    onValueChange?.(selectedValue);\r\n    setOpen(false);\r\n    setSearchValue(\"\");\r\n    console.log('SearchableSelect selection completed');\r\n  }\r\n\r\n  const displayValue = value || placeholder\r\n\r\n  return (\r\n    <Popover open={open} onOpenChange={setOpen}>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          role=\"combobox\"\r\n          aria-expanded={open}\r\n          className={cn(\r\n            \"justify-between font-normal\",\r\n            !value && \"text-muted-foreground\",\r\n            className\r\n          )}\r\n          disabled={disabled}\r\n        >\r\n          <span className=\"truncate text-sm\">{displayValue}</span>\r\n          <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent\r\n        className=\"w-[400px] p-0 bg-card border shadow-lg backdrop-blur-none z-[9999]\"\r\n        align=\"start\"\r\n        side=\"top\"\r\n        sideOffset={4}\r\n        avoidCollisions={false}\r\n        collisionPadding={0}\r\n        style={{\r\n          WebkitAppRegion: 'no-drag',\r\n          position: 'fixed',\r\n          maxHeight: '300px',\r\n          overflow: 'visible'\r\n        } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n      >\r\n        <div\r\n          className=\"flex flex-col\"\r\n          style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n        >\r\n          <div className=\"flex items-center border-b px-3 py-2\">\r\n            <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\r\n            <Input\r\n              placeholder=\"Search models...\"\r\n              value={searchValue}\r\n              onChange={(e) => setSearchValue(e.target.value)}\r\n              className=\"border-0 bg-transparent p-0 text-sm outline-none focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n            />\r\n          </div>\r\n          <div className=\"max-h-[300px] overflow-y-auto\">\r\n            <div className=\"p-1\">\r\n              {filteredOptions.length === 0 ? (\r\n                <div className=\"py-6 text-center text-sm text-muted-foreground\">\r\n                  No models found.\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  <div className=\"px-2 py-1 text-xs text-muted-foreground\">\r\n                    {filteredOptions.length} models available\r\n                  </div>\r\n                  {filteredOptions.map((option) => (\r\n                    <div\r\n                      key={option}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        console.log('Dropdown item clicked:', option);\r\n                        handleSelect(option);\r\n                      }}\r\n                      className={cn(\r\n                        \"relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent hover:text-accent-foreground\",\r\n                        value === option && \"bg-accent text-accent-foreground\"\r\n                      )}\r\n                      style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n                    >\r\n                      <Check\r\n                        className={cn(\r\n                          \"mr-2 h-4 w-4\",\r\n                          value === option ? \"opacity-100\" : \"opacity-0\"\r\n                        )}\r\n                      />\r\n                      <span className=\"text-sm\">{option}</span>\r\n                    </div>\r\n                  ))}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[148,288],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\theme-selector.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":147,"column":79,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5544,5656],"text":"\r\n          Want more control? You can still create a custom theme by selecting &quot;Custom Colors\" below.\r\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5544,5656],"text":"\r\n          Want more control? You can still create a custom theme by selecting &ldquo;Custom Colors\" below.\r\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5544,5656],"text":"\r\n          Want more control? You can still create a custom theme by selecting &#34;Custom Colors\" below.\r\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5544,5656],"text":"\r\n          Want more control? You can still create a custom theme by selecting &rdquo;Custom Colors\" below.\r\n        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":147,"column":93,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5544,5656],"text":"\r\n          Want more control? You can still create a custom theme by selecting \"Custom Colors&quot; below.\r\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5544,5656],"text":"\r\n          Want more control? You can still create a custom theme by selecting \"Custom Colors&ldquo; below.\r\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5544,5656],"text":"\r\n          Want more control? You can still create a custom theme by selecting \"Custom Colors&#34; below.\r\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5544,5656],"text":"\r\n          Want more control? You can still create a custom theme by selecting \"Custom Colors&rdquo; below.\r\n        "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { THEME_PRESETS, type ThemePreset } from '../../config/themes';\r\nimport { Check } from 'lucide-react';\r\n\r\ninterface ThemeSelectorProps {\r\n  selectedThemeId: string;\r\n  onThemeSelect: (theme: ThemePreset) => void;\r\n  className?: string;\r\n}\r\n\r\nexport function ThemeSelector({ selectedThemeId, onThemeSelect, className }: ThemeSelectorProps) {\r\n  const [hoveredTheme, setHoveredTheme] = useState<string | null>(null);\r\n\r\n  return (\r\n    <div className={`space-y-4 ${className || ''}`}>\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {THEME_PRESETS.map((theme) => {\r\n          const isSelected = selectedThemeId === theme.id;\r\n          const isHovered = hoveredTheme === theme.id;\r\n\r\n          return (\r\n            <div\r\n              key={theme.id}\r\n              className=\"relative cursor-pointer group\"\r\n              onClick={() => onThemeSelect(theme)}\r\n              onMouseEnter={() => setHoveredTheme(theme.id)}\r\n              onMouseLeave={() => setHoveredTheme(null)}\r\n            >\r\n              {/* Theme Preview Card */}\r\n              <div\r\n                className={`\r\n                  relative p-4 rounded-lg border-2 transition-all duration-200\r\n                  ${isSelected \r\n                    ? 'border-primary shadow-lg scale-105' \r\n                    : 'border-border hover:border-primary/50 hover:scale-102'\r\n                  }\r\n                `}\r\n                style={{\r\n                  backgroundColor: theme.colors.card,\r\n                  borderColor: isSelected ? theme.colors.primary : theme.colors.border,\r\n                }}\r\n              >\r\n                {/* Selected Indicator */}\r\n                {isSelected && (\r\n                  <div\r\n                    className=\"absolute top-2 right-2 w-6 h-6 rounded-full flex items-center justify-center\"\r\n                    style={{ backgroundColor: theme.colors.primary }}\r\n                  >\r\n                    <Check size={14} style={{ color: theme.colors.primaryForeground }} />\r\n                  </div>\r\n                )}\r\n\r\n                {/* Theme Icon and Name */}\r\n                <div className=\"flex items-center gap-3 mb-3\">\r\n                  <span className=\"text-2xl\">{theme.icon}</span>\r\n                  <div>\r\n                    <h3 \r\n                      className=\"font-medium text-sm\"\r\n                      style={{ color: theme.colors.cardForeground }}\r\n                    >\r\n                      {theme.name}\r\n                    </h3>\r\n                    <p \r\n                      className=\"text-xs opacity-75\"\r\n                      style={{ color: theme.colors.mutedForeground }}\r\n                    >\r\n                      {theme.description}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Color Palette Preview */}\r\n                <div className=\"flex gap-1 mb-3\">\r\n                  <div\r\n                    className=\"w-4 h-4 rounded-sm\"\r\n                    style={{ backgroundColor: theme.colors.background }}\r\n                    title=\"Background\"\r\n                  />\r\n                  <div\r\n                    className=\"w-4 h-4 rounded-sm\"\r\n                    style={{ backgroundColor: theme.colors.primary }}\r\n                    title=\"Primary\"\r\n                  />\r\n                  <div\r\n                    className=\"w-4 h-4 rounded-sm\"\r\n                    style={{ backgroundColor: theme.colors.secondary }}\r\n                    title=\"Secondary\"\r\n                  />\r\n                  <div\r\n                    className=\"w-4 h-4 rounded-sm\"\r\n                    style={{ backgroundColor: theme.colors.accent }}\r\n                    title=\"Accent\"\r\n                  />\r\n                  <div\r\n                    className=\"w-4 h-4 rounded-sm\"\r\n                    style={{ backgroundColor: theme.colors.muted }}\r\n                    title=\"Muted\"\r\n                  />\r\n                </div>\r\n\r\n                {/* Mini UI Preview */}\r\n                <div \r\n                  className=\"p-2 rounded border\"\r\n                  style={{ \r\n                    backgroundColor: theme.colors.background,\r\n                    borderColor: theme.colors.border \r\n                  }}\r\n                >\r\n                  {/* Mini Button */}\r\n                  <div\r\n                    className=\"inline-block px-2 py-1 rounded text-xs mb-1\"\r\n                    style={{\r\n                      backgroundColor: theme.colors.primary,\r\n                      color: theme.colors.primaryForeground,\r\n                    }}\r\n                  >\r\n                    Button\r\n                  </div>\r\n                  \r\n                  {/* Mini Text */}\r\n                  <div \r\n                    className=\"text-xs\"\r\n                    style={{ color: theme.colors.foreground }}\r\n                  >\r\n                    Sample text\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Hover Effect Overlay */}\r\n                {isHovered && !isSelected && (\r\n                  <div \r\n                    className=\"absolute inset-0 rounded-lg opacity-10\"\r\n                    style={{ backgroundColor: theme.colors.primary }}\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Custom Theme Option */}\r\n      <div className=\"pt-4 border-t border-border\">\r\n        <div className=\"text-sm text-muted-foreground\">\r\n          Want more control? You can still create a custom theme by selecting \"Custom Colors\" below.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\toggle-switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\components\\ui\\tool-calling-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\config\\colors.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4927,5016],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5888,5951],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * SINGLE POINT OF COLOR REFERENCE\r\n * All colors in the entire application are defined here\r\n * This is the ONLY place where colors should be defined\r\n */\r\n\r\nexport interface ColorDefinition {\r\n  hex: string;\r\n  hsl: string;\r\n  description: string;\r\n}\r\n\r\nexport interface ColorScheme {\r\n  background: ColorDefinition;\r\n  foreground: ColorDefinition;\r\n  card: ColorDefinition;\r\n  cardForeground: ColorDefinition;\r\n  primary: ColorDefinition;\r\n  primaryForeground: ColorDefinition;\r\n  secondary: ColorDefinition;\r\n  secondaryForeground: ColorDefinition;\r\n  accent: ColorDefinition;\r\n  accentForeground: ColorDefinition;\r\n  muted: ColorDefinition;\r\n  mutedForeground: ColorDefinition;\r\n  border: ColorDefinition;\r\n  input: ColorDefinition;\r\n  ring: ColorDefinition;\r\n  destructive: ColorDefinition;\r\n  destructiveForeground: ColorDefinition;\r\n  systemText: ColorDefinition;\r\n}\r\n\r\n/**\r\n * Convert hex to HSL format for CSS variables\r\n */\r\nfunction hexToHsl(hex: string): string {\r\n  // Remove # if present\r\n  hex = hex.replace('#', '');\r\n  \r\n  // Parse RGB\r\n  const r = parseInt(hex.substring(0, 2), 16) / 255;\r\n  const g = parseInt(hex.substring(2, 4), 16) / 255;\r\n  const b = parseInt(hex.substring(4, 6), 16) / 255;\r\n\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  let h = 0;\r\n  let s = 0;\r\n  const l = (max + min) / 2;\r\n\r\n  if (max !== min) {\r\n    const d = max - min;\r\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n    \r\n    switch (max) {\r\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n      case g: h = (b - r) / d + 2; break;\r\n      case b: h = (r - g) / d + 4; break;\r\n    }\r\n    h /= 6;\r\n  }\r\n\r\n  return `${Math.round(h * 360)} ${Math.round(s * 100)}% ${Math.round(l * 100)}%`;\r\n}\r\n\r\n/**\r\n * Create color definition from hex\r\n */\r\nfunction createColor(hex: string, description: string): ColorDefinition {\r\n  return {\r\n    hex,\r\n    hsl: hexToHsl(hex),\r\n    description\r\n  };\r\n}\r\n\r\n/**\r\n * DEFAULT COLOR SCHEME\r\n * These are the default values for \"Reset to Defaults\"\r\n * Users can change these through Settings Appearance\r\n * NO HARDCODED VALUES are used anywhere else\r\n */\r\nexport const DEFAULT_COLORS: ColorScheme = {\r\n  background: createColor('#181829', 'Main application background'),\r\n  foreground: createColor('#d4d4d4', 'Main text color'),\r\n  card: createColor('#211f32', 'Panel and card backgrounds'),\r\n  cardForeground: createColor('#ffffff', 'Panel and card text'),\r\n  primary: createColor('#569cd6', 'Primary buttons and links'),\r\n  primaryForeground: createColor('#ffffff', 'Primary button text'),\r\n  secondary: createColor('#4fc1ff', 'Secondary elements'),\r\n  secondaryForeground: createColor('#adadad', 'Secondary text'),\r\n  accent: createColor('#569cd6', 'Accent and hover states'),\r\n  accentForeground: createColor('#ffffff', 'Accent text'),\r\n  muted: createColor('#2d2a41', 'Subtle backgrounds'),\r\n  mutedForeground: createColor('#9ca3af', 'Subtle text'),\r\n  border: createColor('#3b3b68', 'Borders and dividers'),\r\n  input: createColor('#949494', 'Input field backgrounds'),\r\n  ring: createColor('#569cd6', 'Focus outlines'),\r\n  destructive: createColor('#f44747', 'Error and delete actions'),\r\n  destructiveForeground: createColor('#ffffff', 'Error text'),\r\n  systemText: createColor('#e0e0e0', 'System UI text (labels, buttons, etc.)')\r\n};\r\n\r\n/**\r\n * Get CSS variables string for injection\r\n */\r\nexport function getCSSVariables(): string {\r\n  return Object.entries(DEFAULT_COLORS)\r\n    .map(([key, color]) => {\r\n      const cssVar = `--${key.replace(/([A-Z])/g, '-$1').toLowerCase()}`;\r\n      return `${cssVar}: ${color.hsl};`;\r\n    })\r\n    .join('\\n    ');\r\n}\r\n\r\n/**\r\n * Get default hex colors for settings interface\r\n * These are used for \"Reset to Defaults\" functionality\r\n */\r\nexport function getDefaultHexColors() {\r\n  return {\r\n    background: DEFAULT_COLORS.background.hex,\r\n    foreground: DEFAULT_COLORS.foreground.hex,\r\n    card: DEFAULT_COLORS.card.hex,\r\n    cardForeground: DEFAULT_COLORS.cardForeground.hex,\r\n    primary: DEFAULT_COLORS.primary.hex,\r\n    primaryForeground: DEFAULT_COLORS.primaryForeground.hex,\r\n    secondary: DEFAULT_COLORS.secondary.hex,\r\n    secondaryForeground: DEFAULT_COLORS.secondaryForeground.hex,\r\n    accent: DEFAULT_COLORS.accent.hex,\r\n    accentForeground: DEFAULT_COLORS.accentForeground.hex,\r\n    muted: DEFAULT_COLORS.muted.hex,\r\n    mutedForeground: DEFAULT_COLORS.mutedForeground.hex,\r\n    border: DEFAULT_COLORS.border.hex,\r\n    input: DEFAULT_COLORS.input.hex,\r\n    ring: DEFAULT_COLORS.ring.hex,\r\n    destructive: DEFAULT_COLORS.destructive.hex,\r\n    destructiveForeground: DEFAULT_COLORS.destructiveForeground.hex,\r\n    systemText: DEFAULT_COLORS.systemText.hex,\r\n  };\r\n}\r\n\r\n/**\r\n * Apply colors to DOM and Electron window background\r\n * REQUIRES custom colors - no fallback to defaults\r\n */\r\nexport function applyColorsToDOM(customColors: Record<string, string>) {\r\n  if (!customColors) {\r\n    console.error('❌ CRITICAL: applyColorsToDOM called without colors - cannot apply theme');\r\n    return;\r\n  }\r\n\r\n  const root = document.documentElement;\r\n  const defaults = getDefaultHexColors();\r\n  const colorsToApply = customColors;\r\n\r\n  // Ensure all required colors exist (fallback for missing systemText in old settings)\r\n  const completeColors = {\r\n    ...defaults,\r\n    ...colorsToApply,\r\n    systemText: colorsToApply.systemText || defaults.systemText\r\n  };\r\n\r\n  Object.entries(completeColors).forEach(([key, hex]) => {\r\n    const cssVar = `--${key.replace(/([A-Z])/g, '-$1').toLowerCase()}`;\r\n    const hsl = hexToHsl(hex as string);\r\n    root.style.setProperty(cssVar, hsl, 'important');\r\n  });\r\n\r\n  // Also update the Electron window background color\r\n  if (typeof window !== 'undefined' && window.electronAPI && completeColors.background) {\r\n    window.electronAPI.setWindowBackgroundColor(completeColors.background).catch((error: Error) => {\r\n      console.error('Failed to set window background color:', error);\r\n    });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\config\\themes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\contexts\\ThemeContext.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":120,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":120,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3923,4020],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4055,4112],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4122,4201],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5155,5240],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6154,6241],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":223,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":223,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7478,7527],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8208,8305],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":251,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":251,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8452,8531],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":273,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":273,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9156,9208],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10271,10333],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":324,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":324,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10823,10900],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":325,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":325,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10906,10975],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { settingsService } from '../services/settingsService';\r\nimport { themeSyncService } from '../services/themeSyncService';\r\nimport { getDefaultHexColors, applyColorsToDOM } from '../config/colors';\r\nimport { THEME_PRESETS, getThemePreset, type ThemePreset } from '../config/themes';\r\nimport type { ColorSettings } from '../types/settings';\r\n\r\nexport interface Theme {\r\n  id: string;\r\n  name: string;\r\n  icon: string;\r\n  colors: {\r\n    background: string;\r\n    foreground: string;\r\n    card: string;\r\n    cardForeground: string;\r\n    primary: string;\r\n    primaryForeground: string;\r\n    secondary: string;\r\n    secondaryForeground: string;\r\n    accent: string;\r\n    accentForeground: string;\r\n    muted: string;\r\n    mutedForeground: string;\r\n    border: string;\r\n    input: string;\r\n    ring: string;\r\n    destructive: string;\r\n    destructiveForeground: string;\r\n  };\r\n}\r\n\r\n// Single VS Code theme - the only theme we need\r\nexport const themes: Theme[] = [\r\n  {\r\n    id: 'vscode',\r\n    name: 'VS Code',\r\n    icon: '💻',\r\n    colors: {\r\n      background: '#13131f',\r\n      foreground: '#d4d4d4',\r\n      card: '#1d1d33',\r\n      cardForeground: '#d4d4d4',\r\n      primary: '#569cd6',\r\n      primaryForeground: '#ffffff',\r\n      secondary: '#4fc1ff',\r\n      secondaryForeground: '#13131f',\r\n      accent: '#e04539',\r\n      accentForeground: '#ffffff',\r\n      muted: '#1e1b2e',\r\n      mutedForeground: '#9ca3af',\r\n      border: '#3b3b68',\r\n      input: '#1e1b2e',\r\n      ring: '#569cd6',\r\n      destructive: '#f44747',\r\n      destructiveForeground: '#ffffff',\r\n    },\r\n  },\r\n];\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  setTheme: (theme: Theme) => void;\r\n  themes: Theme[];\r\n  customColors: ColorSettings;\r\n  setCustomColors: (colors: ColorSettings) => void;\r\n  useCustomColors: boolean;\r\n  setUseCustomColors: (use: boolean) => void;\r\n  resetToDefaults: () => void;\r\n  // Theme preset functionality\r\n  selectedThemePreset: string;\r\n  setSelectedThemePreset: (presetId: string) => void;\r\n  colorMode: 'preset' | 'custom';\r\n  setColorMode: (mode: 'preset' | 'custom') => void;\r\n  themePresets: ThemePreset[];\r\n  getCurrentColors: () => ColorSettings;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\n\r\n// Hex to HSL conversion is now handled in colors.ts\r\n\r\n// Theme application is now handled by applyColorsToDOM from colors.ts\r\n\r\n// NO DEFAULT COLORS - will be loaded from settings only\r\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\r\n  const [themeState, setThemeState] = useState<Theme>(themes[0]);\r\n  const [customColors, setCustomColors] = useState<ColorSettings>({} as ColorSettings);\r\n  const [useCustomColors, setUseCustomColors] = useState(false);\r\n  const [selectedThemePreset, setSelectedThemePreset] = useState('');\r\n  const [colorMode, setColorMode] = useState<'preset' | 'custom'>('preset');\r\n\r\n  // SIMPLIFIED: Load theme ONCE from main process at startup\r\n  useEffect(() => {\r\n    const loadTheme = async () => {\r\n      try {\r\n        if (typeof window === 'undefined') return;\r\n\r\n        // Loading theme from main process\r\n\r\n        // Get theme directly from main process\r\n        if (window.electronAPI?.getCurrentTheme) {\r\n          const currentTheme = await window.electronAPI.getCurrentTheme();\r\n          // Received theme from main process\r\n\r\n          if (currentTheme?.customColors) {\r\n            // Apply theme immediately\r\n            setCustomColors(currentTheme.customColors as unknown as ColorSettings);\r\n            setUseCustomColors(currentTheme.useCustomColors);\r\n            applyColorsToDOM(currentTheme.customColors as unknown as ColorSettings);\r\n            // Theme applied successfully\r\n            return;\r\n          }\r\n        }\r\n\r\n        // NO FALLBACK - app requires valid theme settings\r\n        console.error('❌ CRITICAL: No theme data from main process - app requires valid theme settings');\r\n      } catch (error) {\r\n        console.error('❌ CRITICAL: Error loading theme:', error);\r\n        console.error('❌ App requires valid theme settings - no fallback to defaults');\r\n      }\r\n    };\r\n\r\n    loadTheme();\r\n  }, []);\r\n\r\n  // Listen for theme changes from other windows\r\n  useEffect(() => {\r\n    if (typeof window === 'undefined' || !window.electronAPI) return;\r\n\r\n    const handleThemeChange = (themeData: { customColors: unknown; useCustomColors: boolean }) => {\r\n      // Received theme change\r\n      const receivedColors = themeData.customColors as ColorSettings;\r\n\r\n      // Update local state\r\n      setCustomColors(receivedColors);\r\n      setUseCustomColors(themeData.useCustomColors);\r\n\r\n      // Apply the colors directly - the main process has already resolved preset vs custom\r\n      // The customColors field contains the actual colors to apply (either preset or custom)\r\n      if (receivedColors && Object.keys(receivedColors).length > 0) {\r\n        applyColorsToDOM(receivedColors);\r\n        // Applied theme change to DOM\r\n      } else {\r\n        // NO FALLBACK - log error but don't apply defaults\r\n        console.error('❌ CRITICAL: No colors received in theme change - cannot apply theme');\r\n      }\r\n    };\r\n\r\n    // Listen for theme changes and store the wrapped callback\r\n    const wrappedCallback = window.electronAPI.onThemeChange(handleThemeChange);\r\n\r\n    return () => {\r\n      // Cleanup listener if available\r\n      if (window.electronAPI.removeThemeChangeListener && wrappedCallback) {\r\n        window.electronAPI.removeThemeChangeListener(wrappedCallback);\r\n      }\r\n    };\r\n  }, [themeState]);\r\n\r\n  const setTheme = (newTheme: Theme) => {\r\n    if (newTheme.id === 'vscode') {\r\n      setThemeState(newTheme);\r\n      const colorsToApply = getCurrentColors();\r\n      applyColorsToDOM(colorsToApply);\r\n    }\r\n  };\r\n\r\n  const handleSetSelectedThemePreset = (presetId: string, shouldSave = true) => {\r\n    // Setting theme preset\r\n    setSelectedThemePreset(presetId);\r\n\r\n    // Apply preset colors immediately - NO FALLBACK\r\n    const preset = getThemePreset(presetId);\r\n    if (!preset) {\r\n      console.error(`❌ CRITICAL: Theme preset '${presetId}' not found - cannot apply theme`);\r\n      return;\r\n    }\r\n    setCustomColors(preset.colors);\r\n    applyColorsToDOM(preset.colors);\r\n\r\n    if (shouldSave) {\r\n      // Save to settings immediately\r\n      const currentSettings = settingsService.getSettings();\r\n      settingsService.updateSettings({\r\n        ui: {\r\n          ...currentSettings.ui,\r\n          selectedThemePreset: presetId,\r\n          colorMode: 'preset'\r\n        }\r\n      });\r\n\r\n      // Notify main process immediately\r\n      const themeData = {\r\n        customColors: preset.colors,\r\n        useCustomColors: false\r\n      };\r\n\r\n      if (window.electronAPI?.notifyThemeChange) {\r\n        window.electronAPI.notifyThemeChange(themeData);\r\n        // Theme change notified to main process\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSetColorMode = (mode: 'preset' | 'custom', shouldSave = true) => {\r\n    setColorMode(mode);\r\n\r\n    // Apply appropriate colors immediately\r\n    const colorsToApply = getCurrentColors(mode);\r\n    applyColorsToDOM(colorsToApply);\r\n\r\n    if (shouldSave) {\r\n      try {\r\n        const currentSettings = settingsService.getSettings();\r\n        settingsService.updateSettings({\r\n          ui: { ...currentSettings.ui, colorMode: mode }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error saving color mode:', error);\r\n      }\r\n\r\n      // Broadcast theme change\r\n      const themeData = {\r\n        customColors: colorsToApply,\r\n        useCustomColors: mode === 'custom'\r\n      };\r\n      themeSyncService.broadcastThemeChange(themeData);\r\n\r\n      // Store current theme in main process for new windows\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        window.electronAPI.notifyThemeChange(themeData);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getCurrentColors = (mode?: 'preset' | 'custom'): ColorSettings => {\r\n    const currentMode = mode || colorMode;\r\n    if (currentMode === 'preset') {\r\n      const preset = getThemePreset(selectedThemePreset);\r\n      if (!preset) {\r\n        console.error(`❌ CRITICAL: Theme preset '${selectedThemePreset}' not found - cannot get colors`);\r\n        return {} as ColorSettings;\r\n      }\r\n      return preset.colors;\r\n    } else {\r\n      if (!useCustomColors || !customColors) {\r\n        console.error('❌ CRITICAL: Custom colors mode but no custom colors available');\r\n        return {} as ColorSettings;\r\n      }\r\n      return customColors;\r\n    }\r\n  };\r\n\r\n  const handleSetCustomColors = (colors: ColorSettings, shouldSave = true) => {\r\n    setCustomColors(colors);\r\n\r\n    // Apply theme immediately\r\n    applyColorsToDOM(colors);\r\n\r\n    // Only save and notify if requested (settings overlay will handle this)\r\n    if (shouldSave) {\r\n      // Save to settings\r\n      try {\r\n        const currentSettings = settingsService.getSettings();\r\n        settingsService.updateSettings({\r\n          ui: { ...currentSettings.ui, customColors: colors }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error saving custom colors:', error);\r\n      }\r\n\r\n      // Broadcast theme change to all windows via sync service\r\n      const themeData = {\r\n        customColors: colors,\r\n        useCustomColors: useCustomColors\r\n      };\r\n      themeSyncService.broadcastThemeChange(themeData);\r\n\r\n      // Store current theme in main process for new windows\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        window.electronAPI.notifyThemeChange(themeData);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSetUseCustomColors = (use: boolean, shouldSave = true) => {\r\n    setUseCustomColors(use);\r\n\r\n    // Apply theme immediately\r\n    const colorsToApply = use ? customColors : getDefaultHexColors();\r\n    applyColorsToDOM(colorsToApply);\r\n\r\n    // Only save and notify if requested (settings overlay will handle this)\r\n    if (shouldSave) {\r\n      // Save to settings\r\n      try {\r\n        const currentSettings = settingsService.getSettings();\r\n        settingsService.updateSettings({\r\n          ui: { ...currentSettings.ui, useCustomColors: use }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error saving useCustomColors setting:', error);\r\n      }\r\n\r\n      // Broadcast theme change to all windows via sync service\r\n      const themeData = {\r\n        customColors: customColors,\r\n        useCustomColors: use\r\n      };\r\n      themeSyncService.broadcastThemeChange(themeData);\r\n\r\n      // Store current theme in main process for new windows\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        window.electronAPI.notifyThemeChange(themeData);\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetToDefaults = () => {\r\n    console.error('❌ resetToDefaults is disabled - no default themes available');\r\n    console.log('💡 Use theme presets instead of resetting to defaults');\r\n  };\r\n\r\n  const value = {\r\n    theme: themeState,\r\n    setTheme,\r\n    themes,\r\n    customColors,\r\n    setCustomColors: handleSetCustomColors,\r\n    useCustomColors,\r\n    setUseCustomColors: handleSetUseCustomColors,\r\n    resetToDefaults,\r\n    selectedThemePreset,\r\n    setSelectedThemePreset: handleSetSelectedThemePreset,\r\n    colorMode,\r\n    setColorMode: handleSetColorMode,\r\n    themePresets: THEME_PRESETS,\r\n    getCurrentColors\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    // NO DEFAULTS - even during static generation\r\n    throw new Error('useTheme must be used within a ThemeProvider - no fallback themes available');\r\n  }\r\n  return context;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\contexts\\TransparencyContext.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2250,2310],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ninterface TransparencyConfig {\r\n  opacity: number;\r\n  vibrancyType: string;\r\n  blurRadius: number;\r\n  saturation: number;\r\n}\r\n\r\ninterface PlatformCapabilities {\r\n  supportsTransparency: boolean;\r\n  supportsVibrancy: boolean;\r\n  supportsBackdropFilter: boolean;\r\n  platform: string;\r\n}\r\n\r\ninterface TransparencyContextType {\r\n  isTransparencyEnabled: boolean;\r\n  config: TransparencyConfig | null;\r\n  capabilities: PlatformCapabilities | null;\r\n  enableTransparency: () => Promise<void>;\r\n  disableTransparency: () => Promise<void>;\r\n  updateOpacity: (opacity: number) => Promise<void>;\r\n  updateVibrancyType: (type: string) => Promise<void>;\r\n  isSupported: boolean;\r\n  isInitialized: boolean;\r\n}\r\n\r\nconst TransparencyContext = createContext<TransparencyContextType | undefined>(undefined);\r\n\r\ninterface TransparencyProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function TransparencyProvider({ children }: TransparencyProviderProps) {\r\n  const [isTransparencyEnabled, setIsTransparencyEnabled] = useState(true);\r\n  const [config, setConfig] = useState<TransparencyConfig>({\r\n    opacity: 0.85,\r\n    vibrancyType: 'under-window',\r\n    blurRadius: 20,\r\n    saturation: 180,\r\n  });\r\n  const [capabilities, setCapabilities] = useState<PlatformCapabilities | null>(null);\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n\r\n  // Detect platform capabilities\r\n  useEffect(() => {\r\n    const detectCapabilities = () => {\r\n      const isElectron = typeof window !== 'undefined' && (window.electronAPI || window.require);\r\n      const supportsBackdropFilter = CSS.supports('backdrop-filter', 'blur(1px)') ||\r\n                                   CSS.supports('-webkit-backdrop-filter', 'blur(1px)');\r\n\r\n      const platformCapabilities: PlatformCapabilities = {\r\n        supportsTransparency: true, // Force enable for testing\r\n        supportsVibrancy: !!isElectron,\r\n        supportsBackdropFilter: supportsBackdropFilter, // Use actual detection\r\n        platform: typeof navigator !== 'undefined' ? navigator.platform : 'unknown',\r\n      };\r\n\r\n      setCapabilities(platformCapabilities);\r\n      setIsInitialized(true);\r\n      console.log('Platform capabilities:', platformCapabilities);\r\n    };\r\n\r\n    detectCapabilities();\r\n  }, []);\r\n\r\n  const enableTransparency = async () => {\r\n    setIsTransparencyEnabled(true);\r\n    // Notify Electron main process if available\r\n    if (window.electronAPI?.setTransparency) {\r\n      await window.electronAPI.setTransparency(true);\r\n    }\r\n  };\r\n\r\n  const disableTransparency = async () => {\r\n    setIsTransparencyEnabled(false);\r\n    // Notify Electron main process if available\r\n    if (window.electronAPI?.setTransparency) {\r\n      await window.electronAPI.setTransparency(false);\r\n    }\r\n  };\r\n\r\n  const updateOpacity = async (opacity: number) => {\r\n    setConfig(prev => prev ? { ...prev, opacity } : {\r\n      opacity,\r\n      vibrancyType: 'dark',\r\n      blurRadius: 10,\r\n      saturation: 1.0\r\n    });\r\n    // Notify Electron main process if available\r\n    if (window.electronAPI?.setOpacity) {\r\n      await window.electronAPI.setOpacity(opacity);\r\n    }\r\n  };\r\n\r\n  const updateVibrancyType = async (type: string) => {\r\n    setConfig(prev => prev ? { ...prev, vibrancyType: type } : {\r\n      opacity: 0.9,\r\n      vibrancyType: type,\r\n      blurRadius: 10,\r\n      saturation: 1.0\r\n    });\r\n    // Notify Electron main process if available\r\n    if (window.electronAPI?.setVibrancyType) {\r\n      await window.electronAPI.setVibrancyType(type);\r\n    }\r\n  };\r\n\r\n  const isSupported = capabilities?.supportsTransparency && capabilities?.supportsBackdropFilter;\r\n\r\n  return (\r\n    <TransparencyContext.Provider\r\n      value={{\r\n        isTransparencyEnabled,\r\n        config,\r\n        capabilities,\r\n        enableTransparency,\r\n        disableTransparency,\r\n        updateOpacity,\r\n        updateVibrancyType,\r\n        isSupported: isSupported || false,\r\n        isInitialized,\r\n      }}\r\n    >\r\n      {children}\r\n    </TransparencyContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTransparency() {\r\n  const context = useContext(TransparencyContext);\r\n  if (context === undefined) {\r\n    // During static generation, return default values\r\n    if (typeof window === 'undefined') {\r\n      return {\r\n        isTransparencyEnabled: true,\r\n        setIsTransparencyEnabled: () => {},\r\n        config: {\r\n          opacity: 0.85,\r\n          vibrancyType: 'under-window' as const,\r\n          blurRadius: 20,\r\n          saturation: 180,\r\n        },\r\n        setConfig: () => {},\r\n        capabilities: null,\r\n        isSupported: false,\r\n        isInitialized: false\r\n      };\r\n    }\r\n    throw new Error('useTransparency must be used within a TransparencyProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTransparencyAwareStyles() {\r\n  const { isTransparencyEnabled, isSupported } = useTransparency();\r\n  \r\n  const getTransparencyClass = (baseClass: string, transparentClass: string) => {\r\n    return isTransparencyEnabled && isSupported ? transparentClass : baseClass;\r\n  };\r\n\r\n  const getFloatingClass = (level: 1 | 2 | 3 | 4 | 'modal' = 1) => {\r\n    if (!isTransparencyEnabled || !isSupported) return '';\r\n    return `floating-layer-${level}`;\r\n  };\r\n\r\n  return {\r\n    isTransparent: isTransparencyEnabled && isSupported,\r\n    getTransparencyClass,\r\n    getFloatingClass,\r\n    textClass: isTransparencyEnabled && isSupported ? 'transparent-text' : '',\r\n    mutedTextClass: isTransparencyEnabled && isSupported ? 'transparent-text-muted' : '',\r\n    accentTextClass: isTransparencyEnabled && isSupported ? 'transparent-text-accent' : ''\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\electron\\internalCommandHandler.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1445,1526],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1673,1773],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1804,1928],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2120,2213],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2218,2306],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2341,2443],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3285,3348],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.","line":119,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":119,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":120,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":120,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3946,4010],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6495,6563],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6687,6793],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6898,7001],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":194,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":194,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7206,7284],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":206,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":206,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7854,7956],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8267,8383],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8447,8552],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8559,8661],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":225,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":225,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8768,8833],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":300,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":300,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10869,10927],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":425,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":425,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15165,15220],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":427,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":427,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15278,15347],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":431,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":431,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15426,15474],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":455,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":455,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16362,16420],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":457,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":457,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16478,16524],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":461,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":461,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16628,16674],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":485,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":485,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17500,17561],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":487,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":487,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17619,17693],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":491,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":491,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17800,17849],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":523,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":523,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18836,18909],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":529,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":529,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[19208,19256],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":557,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":557,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20306,20363],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":597,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":597,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21585,21690],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":604,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":604,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21941,21996],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":607,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":607,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22074,22127],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":615,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":615,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22358,22448],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":619,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":619,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22584,22627],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":629,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":629,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22866,22931],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":632,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":632,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23032,23110],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":635,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":635,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[23227,23276],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":648,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":648,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23673,23731],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":655,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":655,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24016,24088],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":658,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":658,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[24166,24214],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 19 to the 15 allowed.","line":738,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":738,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":740,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":740,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26832,26880],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":754,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":754,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27517,27583],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":756,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":756,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27630,27707],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":786,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":786,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29182,29247],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":793,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":793,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29462,29538],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":797,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":797,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[29668,29712],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":862,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":862,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32069,32145],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":863,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":863,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32150,32234],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":866,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":866,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32275,32356],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":896,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":896,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33166,33226],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":900,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":900,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33272,33329],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":902,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":902,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33364,33466],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1299,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1299,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[44129,44195],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1304,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1304,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[44285,44341],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1403,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1403,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47082,47126],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1407,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1407,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[47175,47237],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1505,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1505,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[50543,50597],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":58,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Electron Main Process Internal Command Handler\n * Handles internal commands in the main process where Node.js APIs are available\n */\n\nimport { spawn, ChildProcess, exec } from 'child_process';\nimport { promisify } from 'util';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport os from 'os';\nimport {\n  CommandResult,\n  InternalCommandConfig,\n  FileInfo\n} from '../types/internalCommands';\n\n// Electron-specific ProcessSession with proper ChildProcess type\ninterface ElectronProcessSession {\n  pid: number;\n  command: string;\n  shell: string;\n  startTime: Date;\n  lastActivity: Date;\n  status: 'running' | 'finished' | 'error';\n  blocked: boolean;\n  process?: ChildProcess; // Proper Node.js ChildProcess type\n}\n\nexport class ElectronInternalCommandHandler {\n  private config: InternalCommandConfig | null = null;\n  private commandHistory: Array<{ timestamp: number; command: string; success: boolean }> = [];\n  private readonly MAX_COMMANDS_PER_MINUTE = 60;\n  private readonly MAX_HISTORY_SIZE = 1000;\n  private sessions: Map<number, ElectronProcessSession> = new Map();\n  private nextPid = 1000;\n\n  constructor() {\n    this.setupIpcHandlers();\n  }\n\n  /**\n   * Set up IPC handlers for internal commands\n   * Note: IPC handlers are now registered in main.ts setupIPC() to avoid duplicates\n   */\n  private setupIpcHandlers(): void {\n    // IPC handlers moved to main.ts setupIPC() function to prevent duplicate registration\n    console.log('🔧 Internal command handler initialized (IPC handlers in main.ts)');\n  }\n\n  /**\n   * Public methods for main process integration\n   */\n  public async setConfig(config: InternalCommandConfig): Promise<boolean> {\n    console.log(`🔧 ElectronInternalCommandHandler.setConfig() called with enabled: ${config.enabled}`);\n    this.config = config;\n    console.log(`🔧 Config updated - enabled: ${this.config?.enabled}, has enabledCommands: ${!!this.config?.enabledCommands}`);\n    return true;\n  }\n\n  public async getTools(): Promise<Array<{name: string; description: string; category: string; inputSchema: unknown}>> {\n    const tools = this.getAvailableTools();\n    console.log(`🔧 InternalCommandHandler.getTools() called - returning ${tools.length} tools`);\n    console.log(`🔧 Config enabled: ${this.config?.enabled}, has config: ${!!this.config}`);\n    if (tools.length > 0) {\n      console.log(`🔧 Sample tools:`, tools.slice(0, 3).map(t => ({ name: t.name, category: t.category })));\n    }\n    return tools;\n  }\n\n  public async execute(toolName: string, args: unknown): Promise<CommandResult> {\n    return this.executeCommand(toolName, args);\n  }\n\n  public async isEnabled(): Promise<boolean> {\n    return this.config?.enabled || false;\n  }\n\n  /**\n   * Execute an internal command\n   */\n  private async executeCommand(toolName: string, args: unknown): Promise<CommandResult> {\n    let success = false;\n\n    try {\n      // Check if service is enabled\n      if (!this.config?.enabled) {\n        throw new Error('Internal commands are disabled');\n      }\n\n      // Check rate limiting\n      this.checkRateLimit();\n\n      // Import and execute the appropriate command\n      const result = await this.executeSpecificCommand(toolName, args);\n      success = result.success;\n      \n      return result;\n\n    } catch (error) {\n      console.error(`❌ Internal command failed: ${toolName}`, error);\n      \n      return {\n        success: false,\n        content: [{\n          type: 'text',\n          text: `Error executing ${toolName}: ${error instanceof Error ? error.message : String(error)}`\n        }],\n        error: error instanceof Error ? error.message : String(error)\n      };\n    } finally {\n      // Record command execution for rate limiting and monitoring\n      this.recordCommandExecution(toolName, success);\n    }\n  }\n\n  /**\n   * Execute specific command based on tool name\n   */\n  private async executeSpecificCommand(toolName: string, args: unknown): Promise<CommandResult> {\n    console.log(`🔧 Executing internal command: ${toolName}`, args);\n\n    // Terminal commands\n    if (toolName === 'start_process') {\n      return this.startProcess(args as { command: string; timeout_ms: number; shell?: string });\n    } else if (toolName === 'read_process_output') {\n      return this.readProcessOutput(args as { pid: number });\n    } else if (toolName === 'interact_with_process') {\n      return this.interactWithProcess(args as { pid: number; input: string });\n    } else if (toolName === 'force_terminate') {\n      return this.forceTerminate(args as { pid: number });\n    } else if (toolName === 'list_sessions') {\n      return this.listSessions();\n    } else if (toolName === 'kill_process') {\n      return this.killProcess(args as { pid: number });\n    } else if (toolName === 'list_processes') {\n      return this.listProcesses();\n    } else if (toolName === 'get_cpu_usage') {\n      return this.getCpuUsage();\n    } else if (toolName === 'get_memory_usage') {\n      return this.getMemoryUsage();\n    } else if (toolName === 'get_system_info') {\n      return this.getSystemInfo();\n    }\n\n    // Filesystem commands\n    else if (toolName === 'read_file') {\n      return this.readFile(args as { path: string; isUrl?: boolean; offset?: number; length?: number });\n    } else if (toolName === 'write_file') {\n      return this.writeFile(args as { path: string; content: string; append?: boolean });\n    } else if (toolName === 'create_directory') {\n      return this.createDirectory(args as { path: string });\n    } else if (toolName === 'list_directory') {\n      return this.listDirectory(args as { path: string });\n    } else if (toolName === 'move_file') {\n      return this.moveFile(args as { source: string; destination: string });\n    } else if (toolName === 'search_files') {\n      return this.searchFiles(args as { path: string; pattern: string; recursive?: boolean });\n    } else if (toolName === 'get_file_info') {\n      return this.getFileInfo(args as { path: string });\n    } else if (toolName === 'delete_file') {\n      return this.deleteFile(args as { path: string });\n    }\n\n    // Text editing commands\n    else if (toolName === 'edit_block') {\n      return this.editBlock(args as { file_path: string; old_string: string; new_string: string; expected_replacements?: number });\n    }\n\n    else {\n      throw new Error(`Unknown internal command: ${toolName}`);\n    }\n  }\n\n  /**\n   * Validate file path against allowed directories\n   */\n  private validateFilePath(filePath: string): void {\n    if (!this.config) {\n      console.error('🚨 validateFilePath: Configuration not initialized');\n      throw new Error('Configuration not initialized');\n    }\n\n    const allowedDirs = this.config.allowedDirectories;\n    console.log(`🔧 validateFilePath: Checking path \"${filePath}\" against allowed directories:`, allowedDirs);\n\n    // If no allowed directories configured, deny all access\n    if (allowedDirs.length === 0) {\n      console.error('🚨 validateFilePath: No allowed directories configured - blocking all file operations');\n      throw new Error('No allowed directories configured. Please configure allowed directories in settings.');\n    }\n\n    // Resolve the absolute path\n    const absolutePath = path.resolve(filePath);\n    console.log(`🔧 validateFilePath: Resolved absolute path: \"${absolutePath}\"`);\n\n    // Check if path is within any allowed directory\n    const isAllowed = allowedDirs.some(allowedDir => {\n      const absoluteAllowedDir = path.resolve(allowedDir);\n\n      // Normalize paths for Windows compatibility (case-insensitive, consistent separators)\n      const normalizedPath = absolutePath.toLowerCase().replace(/\\\\/g, '/');\n      const normalizedAllowedDir = absoluteAllowedDir.toLowerCase().replace(/\\\\/g, '/');\n\n      // Check if paths are exactly equal (for accessing the directory itself)\n      if (normalizedPath === normalizedAllowedDir) {\n        console.log(`🔧 validateFilePath: Exact match \"${absolutePath}\" === \"${absoluteAllowedDir}\" -> true`);\n        return true;\n      }\n\n      // Check if path is within the allowed directory (subdirectory access)\n      const allowedDirWithSlash = normalizedAllowedDir.endsWith('/') ? normalizedAllowedDir : normalizedAllowedDir + '/';\n      const isWithinDir = normalizedPath.startsWith(allowedDirWithSlash);\n\n      console.log(`🔧 validateFilePath: Checking \"${normalizedPath}\" against \"${allowedDirWithSlash}\" -> ${isWithinDir}`);\n      return isWithinDir;\n    });\n\n    if (!isAllowed) {\n      console.error(`🚨 validateFilePath: Access denied for path \"${filePath}\" (resolved: \"${absolutePath}\")`);\n      console.error(`🚨 validateFilePath: Allowed directories:`, allowedDirs.map(dir => path.resolve(dir)));\n\n      throw new Error(`Access denied: Path '${filePath}' is not within allowed directories`);\n    }\n\n    console.log(`✅ validateFilePath: Path \"${filePath}\" is allowed`);\n  }\n\n  /**\n   * Validate command against blocked commands\n   */\n  private validateCommand(command: string): void {\n    if (!this.config) {\n      throw new Error('Configuration not initialized');\n    }\n\n    const blockedCommands = this.config.blockedCommands;\n\n    // Check if command contains any blocked patterns\n    const isBlocked = blockedCommands.some(blockedCmd =>\n      command.toLowerCase().includes(blockedCmd.toLowerCase())\n    );\n\n    if (isBlocked) {\n      throw new Error(`Command blocked for security: '${command}'`);\n    }\n  }\n\n  // ===== TERMINAL COMMANDS =====\n\n  /**\n   * Start a new process\n   */\n  private async startProcess(args: { command: string; timeout_ms: number; shell?: string }): Promise<CommandResult> {\n    try {\n      this.validateCommand(args.command);\n\n      const pid = this.nextPid++;\n      const startTime = new Date();\n\n      // Determine shell to use\n      const useShell = args.shell || this.getDefaultShell();\n\n      // Parse command and arguments\n      const { cmd, cmdArgs } = this.parseCommand(args.command, useShell);\n\n      // Spawn the process\n      const childProcess = spawn(cmd, cmdArgs, {\n        stdio: ['pipe', 'pipe', 'pipe'],\n        shell: useShell === 'bash' || useShell === 'sh',\n        env: { ...process.env },\n        cwd: process.cwd()\n      });\n\n      // Create session\n      const session: ElectronProcessSession = {\n        pid,\n        command: args.command,\n        shell: useShell,\n        startTime,\n        lastActivity: startTime,\n        status: 'running',\n        blocked: false,\n        process: childProcess\n      };\n\n      this.sessions.set(pid, session);\n\n      // Set up process event handlers\n      this.setupProcessHandlers(session, childProcess);\n\n      // Set up timeout if specified\n      if (args.timeout_ms && args.timeout_ms > 0) {\n        setTimeout(() => {\n          if (this.sessions.has(pid) && this.sessions.get(pid)!.status === 'running') {\n            this.forceTerminateInternal(pid);\n          }\n        }, args.timeout_ms);\n      }\n\n      console.log(`🚀 Started process ${pid}: ${args.command}`);\n\n      return this.createSuccessResponse(\n        `Process started successfully:\\nPID: ${pid}\\nCommand: ${args.command}\\nStatus: running\\nStarted: ${startTime.toISOString()}`\n      );\n\n    } catch (error) {\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Read output from a process\n   */\n  private async readProcessOutput(args: { pid: number; timeout_ms?: number }): Promise<CommandResult> {\n    try {\n      const session = this.sessions.get(args.pid);\n      if (!session) {\n        throw new Error(`Process ${args.pid} not found`);\n      }\n\n      if (!session.process) {\n        throw new Error(`Process ${args.pid} has no associated child process`);\n      }\n\n      const output = await this.readProcessOutputInternal(session, args.timeout_ms || 5000);\n      return this.createSuccessResponse(output || 'No output available');\n\n    } catch (error) {\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Send input to a process and get response\n   */\n  private async interactWithProcess(args: { pid: number; input: string; timeout_ms?: number }): Promise<CommandResult> {\n    try {\n      const session = this.sessions.get(args.pid);\n      if (!session) {\n        throw new Error(`Process ${args.pid} not found`);\n      }\n\n      if (!session.process || !session.process.stdin) {\n        throw new Error(`Process ${args.pid} is not accepting input`);\n      }\n\n      // Send input to the process\n      session.process.stdin.write(args.input + '\\n');\n      session.lastActivity = new Date();\n\n      // Wait for output\n      const output = await this.readProcessOutputInternal(session, args.timeout_ms || 5000);\n      return this.createSuccessResponse(output || 'Command executed, no output returned');\n\n    } catch (error) {\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Force terminate a process\n   */\n  private async forceTerminate(args: { pid: number }): Promise<CommandResult> {\n    try {\n      const success = this.forceTerminateInternal(args.pid);\n      if (success) {\n        return this.createSuccessResponse(`Process ${args.pid} terminated successfully`);\n      } else {\n        return this.createErrorResponse(`Failed to terminate process ${args.pid}`);\n      }\n    } catch (error) {\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * List all active sessions\n   */\n  private async listSessions(): Promise<CommandResult> {\n    try {\n      const sessions = Array.from(this.sessions.values()).map(session => ({\n        pid: session.pid,\n        command: session.command,\n        status: session.status,\n        startTime: session.startTime,\n        blocked: session.blocked,\n        runtime: Date.now() - session.startTime.getTime()\n      }));\n\n      if (sessions.length === 0) {\n        return this.createSuccessResponse('No active sessions');\n      }\n\n      const sessionList = sessions.map(session =>\n        `PID: ${session.pid} | Command: ${session.command} | Status: ${session.status} | ` +\n        `Blocked: ${session.blocked} | Runtime: ${Math.round(session.runtime / 1000)}s`\n      ).join('\\n');\n\n      return this.createSuccessResponse(`Active Sessions (${sessions.length}):\\n${sessionList}`);\n\n    } catch (error) {\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * List all running processes on the system\n   */\n  private async listProcesses(): Promise<CommandResult> {\n    try {\n      const execAsync = promisify(exec);\n\n      let command: string;\n      if (process.platform === 'win32') {\n        // Windows: Get processes with CPU and memory usage\n        command = 'powershell \"Get-Process | Sort-Object CPU -Descending | Select-Object -First 20 Name,Id,CPU,WorkingSet | Format-Table -AutoSize\"';\n      } else if (process.platform === 'darwin') {\n        // macOS: Get top processes with CPU and memory\n        command = 'ps aux | head -21';\n      } else {\n        // Linux: Get top processes with CPU and memory\n        command = 'ps aux --sort=-%cpu | head -21';\n      }\n\n      console.log(`🔧 Executing system command: ${command}`);\n      const { stdout } = await execAsync(command);\n      console.log(`🔧 Command output length: ${stdout.length} characters`);\n\n      return this.createSuccessResponse(stdout);\n    } catch (error) {\n      console.error(`🔧 listProcesses error:`, error);\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Get current CPU usage percentage\n   */\n  private async getCpuUsage(): Promise<CommandResult> {\n    try {\n      const execAsync = promisify(exec);\n\n      let command: string;\n      if (process.platform === 'win32') {\n        // PowerShell command to get CPU usage - simplified for better reliability\n        command = 'powershell \"Get-WmiObject -Class Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select-Object Average\"';\n      } else if (process.platform === 'darwin') {\n        // macOS command using top - more reliable format\n        command = 'top -l 1 -s 0 | grep \"CPU usage\" | head -1';\n      } else {\n        // Linux command using top - simplified for better parsing\n        command = 'top -bn1 | grep \"Cpu(s)\" | head -1';\n      }\n\n      console.log(`🔧 Executing CPU usage command: ${command}`);\n      const { stdout } = await execAsync(command);\n      console.log(`🔧 CPU usage output: ${stdout}`);\n\n      return this.createSuccessResponse(`Current CPU Usage:\\n${stdout}`);\n    } catch (error) {\n      console.error(`🔧 getCpuUsage error:`, error);\n      return this.createErrorResponse(`Failed to get CPU usage: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Get current memory usage statistics\n   */\n  private async getMemoryUsage(): Promise<CommandResult> {\n    try {\n      const execAsync = promisify(exec);\n\n      let command: string;\n      if (process.platform === 'win32') {\n        // PowerShell command to get memory usage\n        command = 'powershell \"Get-CimInstance -ClassName Win32_OperatingSystem | Select-Object TotalVisibleMemorySize,FreePhysicalMemory | ConvertTo-Json\"';\n      } else if (process.platform === 'darwin') {\n        // macOS command using vm_stat\n        command = 'vm_stat && echo \"---\" && sysctl hw.memsize';\n      } else {\n        // Linux command using free\n        command = 'free -h';\n      }\n\n      console.log(`🔧 Executing memory usage command: ${command}`);\n      const { stdout } = await execAsync(command);\n      console.log(`🔧 Memory usage output length: ${stdout.length} characters`);\n\n      return this.createSuccessResponse(`Current Memory Usage:\\n${stdout}`);\n    } catch (error) {\n      console.error(`🔧 getMemoryUsage error:`, error);\n      return this.createErrorResponse(`Failed to get memory usage: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Get comprehensive system information\n   */\n  private async getSystemInfo(): Promise<CommandResult> {\n    try {\n      const execAsync = promisify(exec);\n\n      let commands: string[];\n      if (process.platform === 'win32') {\n        commands = [\n          'powershell \"Get-ComputerInfo | Select-Object WindowsProductName,WindowsVersion,TotalPhysicalMemory,CsProcessors | ConvertTo-Json\"',\n          'powershell \"Get-CimInstance -ClassName Win32_LogicalDisk | Select-Object DeviceID,Size,FreeSpace | ConvertTo-Json\"'\n        ];\n      } else if (process.platform === 'darwin') {\n        commands = [\n          'system_profiler SPSoftwareDataType SPHardwareDataType',\n          'df -h'\n        ];\n      } else {\n        commands = [\n          'uname -a',\n          'lscpu',\n          'free -h',\n          'df -h'\n        ];\n      }\n\n      console.log(`🔧 Executing system info commands for ${process.platform}`);\n      const results = await Promise.all(commands.map(cmd => execAsync(cmd)));\n      const output = results.map((result, index) => `Command ${index + 1}:\\n${result.stdout}`).join('\\n\\n---\\n\\n');\n\n      return this.createSuccessResponse(`System Information:\\n${output}`);\n    } catch (error) {\n      console.error(`🔧 getSystemInfo error:`, error);\n      return this.createErrorResponse(`Failed to get system info: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Kill a system process by PID\n   */\n  private async killProcess(args: { pid: number }): Promise<CommandResult> {\n    try {\n      process.kill(args.pid, 'SIGTERM');\n      return this.createSuccessResponse(`Process ${args.pid} killed successfully`);\n    } catch (error) {\n      return this.createErrorResponse(`Failed to kill process ${args.pid}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  // ===== FILESYSTEM COMMANDS =====\n\n  /**\n   * Read file contents\n   */\n  private async readFile(args: { path: string; isUrl?: boolean; offset?: number; length?: number } | { input: { path: string; isUrl?: boolean; offset?: number; length?: number } }): Promise<CommandResult> {\n    try {\n      // Handle both direct args and nested input format\n      const actualArgs = 'path' in args ? args : args.input;\n      const { path: filePath, isUrl, offset, length } = actualArgs;\n\n      console.log(`🔧 readFile called with path: ${filePath}`);\n\n      if (isUrl) {\n        return this.readFromUrl(filePath);\n      }\n\n      this.validateFilePath(filePath);\n\n      const stats = await fs.stat(filePath);\n      if (!stats.isFile()) {\n        throw new Error(`Path is not a file: ${filePath}`);\n      }\n\n      // Check if it's an image file\n      const isImage = this.isImageFile(filePath);\n      if (isImage) {\n        const buffer = await fs.readFile(filePath);\n        return {\n          success: true,\n          content: [\n            { type: 'text', text: `Image file: ${filePath}` },\n            { type: 'image', data: buffer.toString('base64'), mimeType: this.getMimeType(filePath) }\n          ]\n        };\n      }\n\n      // Read text file with offset/length support\n      const content = await this.readTextFileWithOffset(filePath, offset || 0, length);\n      return this.createSuccessResponse(content);\n\n    } catch (error) {\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Write file contents\n   */\n  private async writeFile(args: { path: string; content: string; append?: boolean } | { path: string; content: string; mode?: 'rewrite' | 'append' }): Promise<CommandResult> {\n    try {\n      console.log(`🔧 writeFile called with:`, { path: args.path, contentLength: args.content?.length, args });\n      this.validateFilePath(args.path);\n\n      // Handle both parameter formats: append boolean or mode string\n      const shouldAppend = 'append' in args ? args.append : ('mode' in args && args.mode === 'append');\n\n      if (shouldAppend) {\n        console.log(`🔧 writeFile: Appending to ${args.path}`);\n        await fs.appendFile(args.path, args.content);\n      } else {\n        console.log(`🔧 writeFile: Writing to ${args.path}`);\n        await fs.writeFile(args.path, args.content, 'utf8');\n      }\n\n      const lines = args.content.split('\\n');\n      const lineCount = lines.length;\n      const modeMessage = shouldAppend ? 'appended to' : 'wrote to';\n\n      console.log(`✅ writeFile: Successfully ${modeMessage} ${args.path} (${lineCount} lines)`);\n      return this.createSuccessResponse(`Successfully ${modeMessage} ${args.path} (${lineCount} lines)`);\n\n    } catch (error) {\n      console.error(`❌ writeFile error:`, error);\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Create directory\n   */\n  private async createDirectory(args: { path: string }): Promise<CommandResult> {\n    try {\n      console.log(`🔧 createDirectory called with path: ${args.path}`);\n      this.validateFilePath(args.path);\n      await fs.mkdir(args.path, { recursive: true });\n      console.log(`✅ createDirectory: Successfully created directory ${args.path}`);\n      return this.createSuccessResponse(`Successfully created directory ${args.path}`);\n    } catch (error) {\n      console.error(`❌ createDirectory error:`, error);\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * List directory contents\n   */\n  private async listDirectory(args: { path: string } | { input: { path: string } }): Promise<CommandResult> {\n    try {\n      // Handle both direct path and nested input format\n      const path = 'path' in args ? args.path : args.input.path;\n\n      console.log(`🔧 listDirectory called with path: ${path}`);\n      this.validateFilePath(path);\n      const entries = await fs.readdir(path, { withFileTypes: true });\n      const result = entries.map(entry => {\n        const prefix = entry.isDirectory() ? '[DIR]' : '[FILE]';\n        return `${prefix} ${entry.name}`;\n      }).join('\\n');\n      console.log(`🔧 listDirectory result: ${entries.length} entries found`);\n      return this.createSuccessResponse(result);\n    } catch (error) {\n      console.error(`🔧 listDirectory error:`, error);\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Move or rename file/directory\n   */\n  private async moveFile(args: { source: string; destination: string }): Promise<CommandResult> {\n    try {\n      this.validateFilePath(args.source);\n      this.validateFilePath(args.destination);\n      await fs.rename(args.source, args.destination);\n      return this.createSuccessResponse(`Successfully moved ${args.source} to ${args.destination}`);\n    } catch (error) {\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Search for files by name pattern\n   */\n  private async searchFiles(args: { path: string; pattern: string; timeoutMs?: number }): Promise<CommandResult> {\n    try {\n      this.validateFilePath(args.path);\n      const results = await this.searchFilesRecursive(args.path, args.pattern.toLowerCase(), args.timeoutMs);\n\n      if (results.length === 0) {\n        return this.createSuccessResponse('No matches found.');\n      }\n\n      return this.createSuccessResponse(results.join('\\n'));\n    } catch (error) {\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Get file information\n   */\n  private async getFileInfo(args: { path: string }): Promise<CommandResult> {\n    try {\n      this.validateFilePath(args.path);\n      const stats = await fs.stat(args.path);\n\n      const info: FileInfo = {\n        path: args.path,\n        size: stats.size,\n        created: stats.birthtime,\n        modified: stats.mtime,\n        permissions: stats.mode.toString(8),\n        type: stats.isDirectory() ? 'directory' : 'file'\n      };\n\n      // Add line count for text files\n      if (stats.isFile() && !this.isImageFile(args.path)) {\n        try {\n          const content = await fs.readFile(args.path, 'utf8');\n          const lines = content.split('\\n');\n          info.lineCount = lines.length;\n          info.lastLine = lines.length - 1;\n          info.appendPosition = lines.length;\n        } catch {\n          // Ignore errors for binary files\n        }\n      }\n\n      const infoText = Object.entries(info)\n        .map(([key, value]) => `${key}: ${value}`)\n        .join('\\n');\n\n      return this.createSuccessResponse(infoText);\n    } catch (error) {\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Delete file or directory\n   */\n  private async deleteFile(args: { path: string; useRecycleBin?: boolean }): Promise<CommandResult> {\n    try {\n      console.log(`🔧 deleteFile called with:`, args);\n      this.validateFilePath(args.path);\n\n      const useRecycleBin = args.useRecycleBin !== false; // Default to true\n\n      if (useRecycleBin) {\n        // Use shell command to move to recycle bin on Windows\n        if (process.platform === 'win32') {\n          const execAsync = promisify(exec);\n\n          // Use PowerShell to move file to recycle bin\n          const escapedPath = args.path.replace(/'/g, \"''\");\n          const command = `powershell -Command \"Add-Type -AssemblyName Microsoft.VisualBasic; [Microsoft.VisualBasic.FileIO.FileSystem]::DeleteFile('${escapedPath}', 'OnlyErrorDialogs', 'SendToRecycleBin')\"`;\n\n          console.log(`🔧 deleteFile: Moving to Recycle Bin: ${args.path}`);\n          await execAsync(command);\n          console.log(`✅ deleteFile: Successfully moved to Recycle Bin: ${args.path}`);\n\n          return this.createSuccessResponse(`Successfully moved to Recycle Bin: ${args.path}`);\n        } else {\n          // On macOS/Linux, move to trash using system commands\n          const execAsync = promisify(exec);\n\n          if (process.platform === 'darwin') {\n            // macOS: use osascript to move to trash\n            const escapedPath = args.path.replace(/'/g, \"\\\\'\");\n            await execAsync(`osascript -e 'tell application \"Finder\" to delete POSIX file \"${escapedPath}\"'`);\n            return this.createSuccessResponse(`Successfully moved to Trash: ${args.path}`);\n          } else {\n            // Linux: use gio trash if available, otherwise move to ~/.local/share/Trash\n            try {\n              await execAsync(`gio trash \"${args.path}\"`);\n              return this.createSuccessResponse(`Successfully moved to Trash: ${args.path}`);\n            } catch {\n              // Fallback: create .trash directory and move file there\n              const trashDir = path.join(os.homedir(), '.local', 'share', 'Trash', 'files');\n              await fs.mkdir(trashDir, { recursive: true });\n              const fileName = path.basename(args.path);\n              const trashPath = path.join(trashDir, fileName);\n              await fs.rename(args.path, trashPath);\n              return this.createSuccessResponse(`Successfully moved to Trash: ${args.path}`);\n            }\n          }\n        }\n      } else {\n        // Permanent deletion\n        console.log(`🔧 deleteFile: Permanently deleting: ${args.path}`);\n        const stats = await fs.stat(args.path);\n        if (stats.isDirectory()) {\n          await fs.rmdir(args.path, { recursive: true });\n        } else {\n          await fs.unlink(args.path);\n        }\n        console.log(`✅ deleteFile: Successfully permanently deleted: ${args.path}`);\n        return this.createSuccessResponse(`Successfully permanently deleted: ${args.path}`);\n      }\n    } catch (error) {\n      console.error(`❌ deleteFile error:`, error);\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  // ===== TEXT EDITING COMMANDS =====\n\n  /**\n   * Apply surgical text replacements to files\n   */\n  private async editBlock(args: { file_path: string; old_string: string; new_string: string; expected_replacements?: number }): Promise<CommandResult> {\n    try {\n      this.validateFilePath(args.file_path);\n\n      // Read the current file content\n      const content = await fs.readFile(args.file_path, 'utf8');\n\n      // Perform the replacement\n      const replacementCount = args.expected_replacements || 1;\n      let actualReplacements = 0;\n      let newContent = content;\n\n      if (replacementCount === 1) {\n        // Single replacement\n        const index = content.indexOf(args.old_string);\n        if (index !== -1) {\n          newContent = content.substring(0, index) + args.new_string + content.substring(index + args.old_string.length);\n          actualReplacements = 1;\n        }\n      } else {\n        // Multiple replacements\n        const regex = new RegExp(this.escapeRegExp(args.old_string), 'g');\n        const matches = content.match(regex);\n        actualReplacements = matches ? matches.length : 0;\n\n        if (actualReplacements > 0) {\n          newContent = content.replace(regex, args.new_string);\n        }\n      }\n\n      // Check if replacement was successful\n      if (actualReplacements === 0) {\n        return this.createErrorResponse(`No exact matches found for the search text in ${args.file_path}.`);\n      }\n\n      if (args.expected_replacements && actualReplacements !== args.expected_replacements) {\n        return this.createErrorResponse(\n          `Expected ${args.expected_replacements} replacements but found ${actualReplacements} matches`\n        );\n      }\n\n      // Write the modified content back to the file\n      await fs.writeFile(args.file_path, newContent, 'utf8');\n\n      return this.createSuccessResponse(`Successfully applied ${actualReplacements} replacement(s) in ${args.file_path}`);\n\n    } catch (error) {\n      return this.createErrorResponse(error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Get available tools based on configuration\n   */\n  private getAvailableTools(): Array<{name: string; description: string; category: string; inputSchema: unknown}> {\n    console.log(`🔧 ElectronInternalCommandHandler.getAvailableTools() called`);\n    console.log(`🔧 Config exists: ${!!this.config}, enabled: ${this.config?.enabled}`);\n\n    if (!this.config?.enabled) {\n      console.log(`🔧 Internal commands disabled or no config, returning empty array`);\n      return [];\n    }\n\n    const tools: Array<{name: string; description: string; category: string; inputSchema: unknown}> = [];\n\n    // Add terminal commands if enabled\n    if (this.config.enabledCommands.terminal) {\n      tools.push(\n        ...this.getTerminalCommandDefinitions()\n      );\n    }\n\n    // Add filesystem commands if enabled\n    if (this.config.enabledCommands.filesystem) {\n      tools.push(\n        ...this.getFilesystemCommandDefinitions()\n      );\n    }\n\n    // Add text editing commands if enabled\n    if (this.config.enabledCommands.textEditing) {\n      tools.push(\n        ...this.getTextEditingCommandDefinitions()\n      );\n    }\n\n    // Add system commands if enabled\n    if (this.config.enabledCommands.system) {\n      const systemTools = this.getSystemCommandDefinitions();\n      console.log(`🔧 Adding ${systemTools.length} system tools`);\n      tools.push(...systemTools);\n    }\n\n    console.log(`🔧 Total tools generated: ${tools.length}`);\n    if (tools.length > 0) {\n      console.log(`🔧 Sample tools:`, tools.slice(0, 3).map(t => ({ name: t.name, category: t.category })));\n    }\n\n    return tools;\n  }\n\n  /**\n   * Check if command is a terminal command\n   */\n  private isTerminalCommand(toolName: string): boolean {\n    const terminalCommands = [\n      'start_process', 'read_process_output', 'interact_with_process', \n      'force_terminate', 'list_sessions', 'kill_process', 'list_processes'\n    ];\n    return terminalCommands.includes(toolName);\n  }\n\n  /**\n   * Check if command is a filesystem command\n   */\n  private isFilesystemCommand(toolName: string): boolean {\n    const filesystemCommands = [\n      'read_file', 'read_multiple_files', 'write_file', 'create_directory',\n      'list_directory', 'move_file', 'search_files', 'search_code', 'get_file_info', 'delete_file'\n    ];\n    return filesystemCommands.includes(toolName);\n  }\n\n  /**\n   * Check if command is a text editing command\n   */\n  private isTextEditingCommand(toolName: string): boolean {\n    const textEditingCommands = ['edit_block'];\n    return textEditingCommands.includes(toolName);\n  }\n\n  /**\n   * Get terminal command definitions\n   */\n  private getTerminalCommandDefinitions() {\n    return [\n      {\n        name: 'start_process',\n        description: 'Start a new terminal process',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            command: { type: 'string' },\n            timeout_ms: { type: 'number' },\n            shell: { type: 'string' }\n          },\n          required: ['command', 'timeout_ms']\n        }\n      },\n      {\n        name: 'read_process_output',\n        description: 'Read output from a running process',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            session_id: { type: 'string' }\n          },\n          required: ['session_id']\n        }\n      },\n      {\n        name: 'interact_with_process',\n        description: 'Send input to an interactive process',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            session_id: { type: 'string' },\n            input: { type: 'string' }\n          },\n          required: ['session_id', 'input']\n        }\n      },\n      {\n        name: 'force_terminate',\n        description: 'Force terminate a process',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            session_id: { type: 'string' }\n          },\n          required: ['session_id']\n        }\n      },\n      {\n        name: 'list_sessions',\n        description: 'List all active terminal sessions',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        }\n      },\n      {\n        name: 'kill_process',\n        description: 'Kill a system process by PID',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            pid: { type: 'number' }\n          },\n          required: ['pid']\n        }\n      },\n      {\n        name: 'list_processes',\n        description: 'List all running processes on the system with CPU and memory usage',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        }\n      },\n      {\n        name: 'get_cpu_usage',\n        description: 'Get current CPU usage percentage and system performance metrics. Works on Windows (PowerShell), macOS (zsh/bash), and Linux (bash).',\n        category: 'system',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        }\n      },\n      {\n        name: 'get_memory_usage',\n        description: 'Get current memory usage statistics including total, used, and available memory. Works on Windows (PowerShell), macOS (zsh/bash), and Linux (bash).',\n        category: 'system',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        }\n      },\n      {\n        name: 'get_system_info',\n        description: 'Get comprehensive system information including OS, CPU, memory, and disk usage. Works across all platforms.',\n        category: 'system',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        }\n      }\n    ];\n  }\n\n  /**\n   * Get filesystem command definitions\n   */\n  private getFilesystemCommandDefinitions() {\n    return [\n      {\n        name: 'read_file',\n        description: 'Read file contents (supports images, documents, code)',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            path: { type: 'string' },\n            isUrl: { type: 'boolean' },\n            offset: { type: 'number' },\n            length: { type: 'number' }\n          },\n          required: ['path']\n        }\n      },\n      {\n        name: 'write_file',\n        description: 'Write or append to files',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            path: { type: 'string' },\n            content: { type: 'string' },\n            append: { type: 'boolean' }\n          },\n          required: ['path', 'content']\n        }\n      },\n      {\n        name: 'create_directory',\n        description: 'Create directories',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            path: { type: 'string' }\n          },\n          required: ['path']\n        }\n      },\n      {\n        name: 'list_directory',\n        description: 'List directory contents',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            path: { type: 'string' }\n          },\n          required: ['path']\n        }\n      },\n      {\n        name: 'move_file',\n        description: 'Move or rename files/directories',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            source: { type: 'string' },\n            destination: { type: 'string' }\n          },\n          required: ['source', 'destination']\n        }\n      },\n      {\n        name: 'search_files',\n        description: 'Find files by name patterns',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            directory: { type: 'string' },\n            pattern: { type: 'string' },\n            recursive: { type: 'boolean' }\n          },\n          required: ['directory', 'pattern']\n        }\n      },\n      {\n        name: 'get_file_info',\n        description: 'Get detailed file metadata',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            path: { type: 'string' }\n          },\n          required: ['path']\n        }\n      }\n    ];\n  }\n\n  /**\n   * Get text editing command definitions\n   */\n  private getTextEditingCommandDefinitions() {\n    return [\n      {\n        name: 'edit_block',\n        description: 'Apply surgical text replacements',\n        category: 'textEditing',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            file_path: { type: 'string' },\n            old_string: { type: 'string' },\n            new_string: { type: 'string' },\n            expected_replacements: { type: 'number' }\n          },\n          required: ['file_path', 'old_string', 'new_string']\n        }\n      }\n    ];\n  }\n\n  /**\n   * Get system command definitions\n   */\n  private getSystemCommandDefinitions() {\n    return [\n      {\n        name: 'get_cpu_usage',\n        description: 'Get current CPU usage percentage and system performance metrics. Works on Windows (PowerShell), macOS (zsh/bash), and Linux (bash).',\n        category: 'system',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        }\n      },\n      {\n        name: 'get_memory_usage',\n        description: 'Get current memory usage statistics including total, used, and available memory. Works on Windows (PowerShell), macOS (zsh/bash), and Linux (bash).',\n        category: 'system',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        }\n      },\n      {\n        name: 'get_system_info',\n        description: 'Get comprehensive system information including OS, CPU, memory, and disk usage. Works across all platforms.',\n        category: 'system',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        }\n      }\n    ];\n  }\n\n  /**\n   * Check rate limiting to prevent abuse\n   */\n  private checkRateLimit(): void {\n    const now = Date.now();\n    const oneMinuteAgo = now - 60000;\n\n    // Clean old entries\n    this.commandHistory = this.commandHistory.filter(entry => entry.timestamp > oneMinuteAgo);\n\n    // Check if rate limit exceeded\n    if (this.commandHistory.length >= this.MAX_COMMANDS_PER_MINUTE) {\n      throw new Error(\n        `Rate limit exceeded: Maximum ${this.MAX_COMMANDS_PER_MINUTE} commands per minute`\n      );\n    }\n  }\n\n  /**\n   * Record command execution for monitoring\n   */\n  private recordCommandExecution(command: string, success: boolean): void {\n    this.commandHistory.push({\n      timestamp: Date.now(),\n      command,\n      success\n    });\n\n    // Limit history size\n    if (this.commandHistory.length > this.MAX_HISTORY_SIZE) {\n      this.commandHistory = this.commandHistory.slice(-this.MAX_HISTORY_SIZE);\n    }\n  }\n\n  // ===== HELPER METHODS =====\n\n  private createSuccessResponse(text: string): CommandResult {\n    return {\n      success: true,\n      content: [{ type: 'text', text }]\n    };\n  }\n\n  private createErrorResponse(message: string): CommandResult {\n    return {\n      success: false,\n      content: [{ type: 'text', text: `Error: ${message}` }],\n      error: message\n    };\n  }\n\n  private getDefaultShell(): string {\n    switch (process.platform) {\n      case 'win32':\n        return 'powershell';\n      case 'darwin':\n      case 'linux':\n      default:\n        return 'bash';\n    }\n  }\n\n  private parseCommand(command: string, shell: string): { cmd: string; cmdArgs: string[] } {\n    if (shell === 'powershell') {\n      return {\n        cmd: 'powershell',\n        cmdArgs: ['-Command', command]\n      };\n    } else {\n      return {\n        cmd: shell,\n        cmdArgs: ['-c', command]\n      };\n    }\n  }\n\n  private setupProcessHandlers(session: ElectronProcessSession, childProcess: ChildProcess): void {\n    childProcess.on('close', (code) => {\n      session.status = code === 0 ? 'finished' : 'error';\n      console.log(`📋 Process ${session.pid} closed with code ${code}`);\n    });\n\n    childProcess.on('error', (error) => {\n      session.status = 'error';\n      console.error(`❌ Process ${session.pid} error:`, error);\n    });\n\n    // Detect if process is blocked (waiting for input)\n    let lastOutputTime = Date.now();\n    childProcess.stdout?.on('data', () => {\n      lastOutputTime = Date.now();\n      session.blocked = false;\n    });\n\n    // Check periodically if process seems blocked\n    const checkBlocked = setInterval(() => {\n      if (session.status === 'running' && Date.now() - lastOutputTime > 2000) {\n        session.blocked = true;\n      }\n    }, 1000);\n\n    childProcess.on('close', () => {\n      clearInterval(checkBlocked);\n    });\n  }\n\n  private async readProcessOutputInternal(session: ElectronProcessSession, timeoutMs: number): Promise<string> {\n    return new Promise((resolve, reject) => {\n      let output = '';\n      let hasResolved = false;\n\n      const timeout = setTimeout(() => {\n        if (!hasResolved) {\n          hasResolved = true;\n          resolve(output || 'Process timed out or no output available');\n        }\n      }, timeoutMs);\n\n      // Collect stdout data\n      const onData = (data: Buffer) => {\n        output += data.toString();\n        session.lastActivity = new Date();\n      };\n\n      // Handle process completion\n      const onClose = (code: number | null) => {\n        clearTimeout(timeout);\n        if (!hasResolved) {\n          hasResolved = true;\n          session.status = code === 0 ? 'finished' : 'error';\n          resolve(output);\n        }\n      };\n\n      // Handle errors\n      const onError = (error: Error) => {\n        clearTimeout(timeout);\n        if (!hasResolved) {\n          hasResolved = true;\n          session.status = 'error';\n          reject(error);\n        }\n      };\n\n      session.process!.stdout?.on('data', onData);\n      session.process!.stderr?.on('data', onData);\n      session.process!.on('close', onClose);\n      session.process!.on('error', onError);\n\n      // Clean up listeners after resolution\n      const cleanup = () => {\n        session.process!.stdout?.off('data', onData);\n        session.process!.stderr?.off('data', onData);\n        session.process!.off('close', onClose);\n        session.process!.off('error', onError);\n      };\n\n      // Ensure cleanup happens\n      setTimeout(cleanup, timeoutMs + 1000);\n    });\n  }\n\n  private forceTerminateInternal(pid: number): boolean {\n    const session = this.sessions.get(pid);\n    if (!session) {\n      return false;\n    }\n\n    try {\n      if (session.process) {\n        session.process.kill('SIGTERM');\n\n        // If process doesn't terminate gracefully, force kill\n        setTimeout(() => {\n          if (session.process && !session.process.killed) {\n            session.process.kill('SIGKILL');\n          }\n        }, 5000);\n      }\n\n      session.status = 'finished';\n      this.sessions.delete(pid);\n\n      console.log(`🛑 Terminated process ${pid}`);\n      return true;\n\n    } catch (error) {\n      console.error(`❌ Failed to terminate process ${pid}:`, error);\n      return false;\n    }\n  }\n\n  private isImageFile(filePath: string): boolean {\n    const ext = path.extname(filePath).toLowerCase();\n    return ['.png', '.jpg', '.jpeg', '.gif', '.webp', '.bmp', '.svg'].includes(ext);\n  }\n\n  private getMimeType(filePath: string): string {\n    const ext = path.extname(filePath).toLowerCase();\n    const mimeTypes: Record<string, string> = {\n      '.png': 'image/png',\n      '.jpg': 'image/jpeg',\n      '.jpeg': 'image/jpeg',\n      '.gif': 'image/gif',\n      '.webp': 'image/webp',\n      '.bmp': 'image/bmp',\n      '.svg': 'image/svg+xml'\n    };\n    return mimeTypes[ext] || 'application/octet-stream';\n  }\n\n  private async readTextFileWithOffset(filePath: string, offset: number, length?: number): Promise<string> {\n    const content = await fs.readFile(filePath, 'utf8');\n    const lines = content.split('\\n');\n\n    if (offset < 0) {\n      // Negative offset: read from end (tail behavior)\n      const tailLines = Math.abs(offset);\n      return lines.slice(-tailLines).join('\\n');\n    } else {\n      // Positive offset: read from start with optional length\n      const startLine = offset;\n      const endLine = length ? startLine + length : lines.length;\n      return lines.slice(startLine, endLine).join('\\n');\n    }\n  }\n\n  private async readFromUrl(url: string): Promise<CommandResult> {\n    try {\n      const response = await fetch(url, {\n        headers: {\n          'User-Agent': 'LittleLLM/1.0'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const contentType = response.headers.get('content-type') || '';\n      const isImage = contentType.startsWith('image/');\n\n      if (isImage) {\n        const buffer = await response.arrayBuffer();\n        return {\n          success: true,\n          content: [\n            { type: 'text', text: `Image from URL: ${url}` },\n            { type: 'image', data: Buffer.from(buffer).toString('base64'), mimeType: contentType }\n          ]\n        };\n      } else {\n        const content = await response.text();\n        return this.createSuccessResponse(content);\n      }\n    } catch (error) {\n      return this.createErrorResponse(`Failed to fetch URL ${url}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  private async searchFilesRecursive(dirPath: string, pattern: string, timeoutMs?: number, startTime?: number): Promise<string[]> {\n    const results: string[] = [];\n    const currentTime = Date.now();\n    if (!startTime) startTime = currentTime;\n\n    if (timeoutMs && (currentTime - startTime) > timeoutMs) {\n      return results; // Timeout reached\n    }\n\n    try {\n      const entries = await fs.readdir(dirPath, { withFileTypes: true });\n\n      for (const entry of entries) {\n        const fullPath = path.join(dirPath, entry.name);\n\n        if (entry.isFile() && entry.name.toLowerCase().includes(pattern)) {\n          results.push(fullPath);\n        } else if (entry.isDirectory() && !entry.name.startsWith('.')) {\n          // Recursively search subdirectories\n          const subResults = await this.searchFilesRecursive(fullPath, pattern, timeoutMs, startTime);\n          results.push(...subResults);\n        }\n      }\n    } catch (error) {\n      // Ignore permission errors and continue\n      console.warn(`Search warning for ${dirPath}:`, error);\n    }\n\n    return results;\n  }\n\n  private escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n}\n\n// Export singleton instance\nexport const electronInternalCommandHandler = new ElectronInternalCommandHandler();\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\hooks\\useEnhancedWindowDrag.ts","messages":[{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 6 times.","line":20,"column":51,"nodeType":"Literal","endLine":20,"endColumn":71}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect } from 'react';\r\nimport { debugLogger } from '../services/debugLogger';\r\n\r\n/**\r\n * Simple window dragging hook using Electron's built-in web API\r\n * This avoids high DPI scaling issues by using CSS -webkit-app-region\r\n */\r\nexport function useEnhancedWindowDrag() {\r\n  // This hook now uses CSS-based dragging only\r\n\r\n  useEffect(() => {\r\n    // Only enable in Electron environment\r\n    if (typeof window === 'undefined' || !window.electronAPI) {\r\n      return;\r\n    }\r\n\r\n    // Scoped strategy: ensure root elements have no app-region so component-level regions work\r\n    document.documentElement.style.removeProperty('-webkit-app-region');\r\n    document.body.style.removeProperty('-webkit-app-region');\r\n\r\n    // Debug computed styles to verify correct regions\r\n    try {\r\n      const logRegion = (label: string, el: Element | null) => {\r\n        if (!el) return;\r\n        const cs = getComputedStyle(el as HTMLElement) as CSSStyleDeclaration;\r\n        // Access vendor property without using 'any'\r\n        const region =\r\n          (cs as unknown as Record<string, string>)['-webkit-app-region'] ||\r\n          (cs.getPropertyValue && cs.getPropertyValue('-webkit-app-region')) ||\r\n          'unset';\r\n        debugLogger.debug(`EnhancedWindowDrag: ${label} app-region=${region}`);\r\n      };\r\n      logRegion('html', document.documentElement);\r\n      logRegion('body', document.body);\r\n      const header = document.querySelector('.draggable-title-bar');\r\n      logRegion('.draggable-title-bar', header);\r\n    } catch {\r\n      // ignore logging errors\r\n    }\r\n\r\n    return () => {\r\n      // leave root without app-region\r\n      document.documentElement.style.removeProperty('-webkit-app-region');\r\n      document.body.style.removeProperty('-webkit-app-region');\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    isDragging: false // CSS-based dragging doesn't need state tracking\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\lib\\contentParser.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1273,1309],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 17 to the 15 allowed.","line":43,"column":10,"nodeType":null,"messageId":"refactorFunction","endLine":43,"endColumn":30},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 6 times.","line":51,"column":13,"nodeType":"Literal","endLine":51,"endColumn":25},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 5 times.","line":71,"column":15,"nodeType":"Literal","endLine":71,"endColumn":28},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'node' is defined but never used. Allowed unused args must match /^_/u.","line":325,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":325,"endColumn":20},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":325,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":325,"endColumn":59},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":346,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":346,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":358,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12225,12228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12225,12228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":359,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12323,12326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12323,12326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":360,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":360,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12420,12423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12420,12423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":361,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12517,12520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12517,12520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":362,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12616,12619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12616,12619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":363,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12713,12716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12713,12716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":366,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12922,12925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12922,12925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":368,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13049,13052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13049,13052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":369,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13155,13158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13155,13158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":370,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13264,13267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13264,13267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":372,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13397,13400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13397,13400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'node' is defined but never used.","line":325,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":325,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":325,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":325,"endColumn":59,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":325,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10892,10895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10892,10895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":346,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":346,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":346,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11734,11737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11734,11737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":379,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":379,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13690,13693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13690,13693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14011,14014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14011,14014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":393,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14271,14274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14271,14274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":402,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14653,14656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14653,14656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":404,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14812,14815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14812,14815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":6,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkGfm from 'remark-gfm';\r\nimport { CodeBlock, InlineCode } from '../components/CodeBlock';\r\n\r\n/**\r\n * Regular expressions for different content types\r\n */\r\nconst URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/g;\r\nconst DOMAIN_REGEX = /(^|[\\s([{])((?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.(?:[a-zA-Z]{2,6}|localhost)(?::\\d+)?(?:[-a-zA-Z0-9()@:%_+.~#?&//=]*)?)/g;\r\nconst CODE_BLOCK_REGEX = /```(\\w+)?\\n?([\\s\\S]*?)```/g;\r\nconst INLINE_CODE_REGEX = /`([^`\\n]+)`/g;\r\nconst IMAGE_URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)\\.(jpg|jpeg|png|gif|webp|svg|bmp|ico)(\\?[^)\\s]*)?/gi;\r\n\r\n/**\r\n * Interface for parsed content segments\r\n */\r\ninterface ContentSegment {\r\n  type: 'text' | 'link' | 'code-block' | 'inline-code' | 'image';\r\n  content: string;\r\n  url?: string;\r\n  language?: string;\r\n  index: number;\r\n  length: number;\r\n}\r\n\r\n/**\r\n * Handles clicking on external links\r\n */\r\nfunction handleLinkClick(url: string) {\r\n  if (typeof window !== 'undefined' && window.electronAPI?.openExternalLink) {\r\n    window.electronAPI.openExternalLink(url);\r\n  } else {\r\n    console.log('Would open URL:', url);\r\n  }\r\n}\r\n\r\n/**\r\n * Parses text and identifies all content segments (code blocks, inline code, links, text)\r\n * @param text - The input text to parse\r\n * @returns Array of content segments\r\n */\r\nfunction parseContentSegments(text: string): ContentSegment[] {\r\n  const segments: ContentSegment[] = [];\r\n\r\n  // Find all code blocks first (highest priority)\r\n  CODE_BLOCK_REGEX.lastIndex = 0;\r\n  let match: RegExpExecArray | null;\r\n  while ((match = CODE_BLOCK_REGEX.exec(text)) !== null) {\r\n    segments.push({\r\n      type: 'code-block',\r\n      content: match[2].trim(),\r\n      language: match[1] || undefined,\r\n      index: match.index,\r\n      length: match[0].length\r\n    });\r\n  }\r\n\r\n  // Find all inline code (second priority)\r\n  INLINE_CODE_REGEX.lastIndex = 0;\r\n  while ((match = INLINE_CODE_REGEX.exec(text)) !== null) {\r\n    // Skip if this inline code is inside a code block\r\n    const isInsideCodeBlock = segments.some(segment =>\r\n      segment.type === 'code-block' &&\r\n      match!.index >= segment.index &&\r\n      match!.index < segment.index + segment.length\r\n    );\r\n    \r\n    if (!isInsideCodeBlock) {\r\n      segments.push({\r\n        type: 'inline-code',\r\n        content: match[1],\r\n        index: match.index,\r\n        length: match[0].length\r\n      });\r\n    }\r\n  }\r\n\r\n  // Find all image URLs first (higher priority than regular links)\r\n  IMAGE_URL_REGEX.lastIndex = 0;\r\n  while ((match = IMAGE_URL_REGEX.exec(text)) !== null) {\r\n    // Skip if this URL is inside a code block or inline code\r\n    const isInsideCode = segments.some(segment =>\r\n      (segment.type === 'code-block' || segment.type === 'inline-code') &&\r\n      match!.index >= segment.index &&\r\n      match!.index < segment.index + segment.length\r\n    );\r\n\r\n    if (!isInsideCode) {\r\n      segments.push({\r\n        type: 'image',\r\n        content: match[0],\r\n        url: match[0],\r\n        index: match.index,\r\n        length: match[0].length\r\n      });\r\n    }\r\n  }\r\n\r\n  // Find all HTTP/HTTPS URLs (excluding images already found)\r\n  URL_REGEX.lastIndex = 0;\r\n  while ((match = URL_REGEX.exec(text)) !== null) {\r\n    // Skip if this URL is inside a code block, inline code, or already covered by an image\r\n    const isInsideCodeOrImage = segments.some(segment =>\r\n      ((segment.type === 'code-block' || segment.type === 'inline-code' || segment.type === 'image') &&\r\n       match!.index >= segment.index &&\r\n       match!.index < segment.index + segment.length)\r\n    );\r\n\r\n    if (!isInsideCodeOrImage) {\r\n      segments.push({\r\n        type: 'link',\r\n        content: match[0],\r\n        url: match[0],\r\n        index: match.index,\r\n        length: match[0].length\r\n      });\r\n    }\r\n  }\r\n\r\n  // Find all domain-only URLs\r\n  DOMAIN_REGEX.lastIndex = 0;\r\n  while ((match = DOMAIN_REGEX.exec(text)) !== null) {\r\n    const domainMatch = match[2];\r\n    const domainIndex = match.index + match[1].length;\r\n    \r\n    // Remove trailing punctuation\r\n    const cleanDomain = domainMatch.replace(/[)\\]}.,:;!?]*$/, '');\r\n    \r\n    // Skip if this domain is inside code or already covered by a full URL\r\n    const isInsideCodeOrCovered = segments.some(segment => \r\n      ((segment.type === 'code-block' || segment.type === 'inline-code') &&\r\n       domainIndex >= segment.index && domainIndex < segment.index + segment.length) ||\r\n      (segment.type === 'link' &&\r\n       domainIndex >= segment.index && domainIndex < segment.index + segment.length)\r\n    );\r\n    \r\n    if (!isInsideCodeOrCovered && cleanDomain) {\r\n      const fullUrl = cleanDomain.startsWith('http') ? cleanDomain : `https://${cleanDomain}`;\r\n      segments.push({\r\n        type: 'link',\r\n        content: cleanDomain,\r\n        url: fullUrl,\r\n        index: domainIndex,\r\n        length: cleanDomain.length\r\n      });\r\n    }\r\n  }\r\n\r\n  // Sort segments by index to process them in order\r\n  segments.sort((a, b) => a.index - b.index);\r\n\r\n  return segments;\r\n}\r\n\r\n/**\r\n * Renders parsed content segments as JSX\r\n * @param text - The original text\r\n * @param segments - The parsed content segments\r\n * @returns JSX elements\r\n */\r\nfunction renderContentSegments(text: string, segments: ContentSegment[]): JSX.Element[] {\r\n  const elements: JSX.Element[] = [];\r\n  let lastIndex = 0;\r\n\r\n  segments.forEach((segment, index) => {\r\n    // Add text before this segment if any\r\n    if (segment.index > lastIndex) {\r\n      const textContent = text.slice(lastIndex, segment.index);\r\n      if (textContent) {\r\n        elements.push(\r\n          <span key={`text-${index}-${lastIndex}`}>\r\n            {textContent}\r\n          </span>\r\n        );\r\n      }\r\n    }\r\n\r\n    // Add the segment\r\n    switch (segment.type) {\r\n      case 'code-block':\r\n        elements.push(\r\n          <CodeBlock\r\n            key={`code-block-${index}`}\r\n            code={segment.content}\r\n            language={segment.language}\r\n            className=\"my-2\"\r\n          />\r\n        );\r\n        break;\r\n      \r\n      case 'inline-code':\r\n        elements.push(\r\n          <InlineCode\r\n            key={`inline-code-${index}`}\r\n            code={segment.content}\r\n          />\r\n        );\r\n        break;\r\n      \r\n      case 'image':\r\n        elements.push(\r\n          <div key={`image-${index}`} className=\"my-2\">\r\n            <img\r\n              src={segment.url!}\r\n              alt=\"Image\"\r\n              className=\"max-w-full h-auto rounded-lg border border-border cursor-pointer hover:opacity-80 transition-opacity\"\r\n              style={{\r\n                maxHeight: '400px',\r\n                objectFit: 'contain',\r\n                WebkitAppRegion: 'no-drag'\r\n              } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n              onClick={() => {\r\n                // Open image in new window/tab\r\n                if (typeof window !== 'undefined' && window.electronAPI) {\r\n                  window.electronAPI.openExternal(segment.url!);\r\n                } else {\r\n                  window.open(segment.url!, '_blank');\r\n                }\r\n              }}\r\n              onError={(e) => {\r\n                // Fallback to link if image fails to load\r\n                const target = e.target as HTMLImageElement;\r\n                const parent = target.parentElement;\r\n                if (parent) {\r\n                  parent.innerHTML = `<a href=\"#\" class=\"text-blue-500 hover:text-blue-700 underline cursor-pointer\" onclick=\"event.preventDefault(); ${typeof window !== 'undefined' && window.electronAPI ? 'window.electronAPI.openExternal' : 'window.open'}('${segment.url}', '_blank')\" title=\"Open ${segment.url} in browser\">${segment.content}</a>`;\r\n                }\r\n              }}\r\n              title={`Click to open ${segment.url} in browser`}\r\n            />\r\n          </div>\r\n        );\r\n        break;\r\n\r\n      case 'link':\r\n        elements.push(\r\n          <a\r\n            key={`link-${index}`}\r\n            href=\"#\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleLinkClick(segment.url!);\r\n            }}\r\n            className=\"text-blue-500 hover:text-blue-700 underline cursor-pointer\"\r\n            style={{\r\n              WebkitAppRegion: 'no-drag',\r\n              textDecoration: 'underline',\r\n              color: 'rgb(59 130 246)',\r\n            } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n            title={`Open ${segment.url} in browser`}\r\n          >\r\n            {segment.content}\r\n          </a>\r\n        );\r\n        break;\r\n    }\r\n\r\n    lastIndex = segment.index + segment.length;\r\n  });\r\n\r\n  // Add remaining text after the last segment\r\n  if (lastIndex < text.length) {\r\n    const textContent = text.slice(lastIndex);\r\n    if (textContent) {\r\n      elements.push(\r\n        <span key={`text-final-${lastIndex}`}>\r\n          {textContent}\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Props for the ParsedContent component\r\n */\r\ninterface ParsedContentProps {\r\n  children: string;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\n/**\r\n * Component that renders text with code blocks, inline code, and clickable links\r\n * @param children - The text content to parse and render\r\n * @param className - CSS classes to apply to the container\r\n * @param style - Inline styles to apply to the container\r\n */\r\nexport function ParsedContent({ children, className, style }: ParsedContentProps) {\r\n  const segments = parseContentSegments(children);\r\n  const elements = renderContentSegments(children, segments);\r\n\r\n  return (\r\n    <div className={className} style={style}>\r\n      {elements.length > 0 ? elements : children}\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Utility function to parse text with all content types\r\n * @param text - The text to parse\r\n * @param className - Optional CSS classes for the container\r\n * @param style - Optional inline styles for the container\r\n * @returns JSX element with parsed content\r\n */\r\n/**\r\n * Enhanced markdown parser using react-markdown\r\n * @param text - The input text to parse as markdown\r\n * @returns JSX elements with parsed markdown content\r\n */\r\nexport function parseMarkdownContent(text: string): React.ReactNode {\r\n  if (!text) return null;\r\n\r\n  return (\r\n    <ReactMarkdown\r\n      remarkPlugins={[remarkGfm]}\r\n      components={{\r\n        // Custom code block component\r\n        // Types for react-markdown renderers kept broad to match library's dynamic nodes\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any\r\n        code({ node, inline, className, children, ...props }: any) {\r\n          const match = /language-(\\w+)/.exec(className || '');\r\n          const language = match ? match[1] : undefined;\r\n\r\n          if (inline) {\r\n            return <InlineCode code={String(children).replace(/\\n$/, '')} />;\r\n          }\r\n\r\n          // Block code: render as a block-level container to avoid nesting <pre> within <p>\r\n          return (\r\n            <div className=\"my-2\">\r\n              <CodeBlock\r\n                code={String(children).replace(/\\n$/, '')}\r\n                language={language}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n        // Custom link component\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any\r\n        a({ href, children, ...props }: any) {\r\n          return (\r\n            <button\r\n              onClick={() => href && handleLinkClick(href)}\r\n              className=\"text-blue-400 hover:text-blue-300 underline cursor-pointer bg-transparent border-none p-0 font-inherit\"\r\n              style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n            >\r\n              {children}\r\n            </button>\r\n          );\r\n        },\r\n        // Style headers\r\n        h1: ({ children }: any) => <h1 className=\"text-2xl font-bold mb-4 mt-6\">{children}</h1>,\r\n        h2: ({ children }: any) => <h2 className=\"text-xl font-bold mb-3 mt-5\">{children}</h2>,\r\n        h3: ({ children }: any) => <h3 className=\"text-lg font-bold mb-2 mt-4\">{children}</h3>,\r\n        h4: ({ children }: any) => <h4 className=\"text-base font-bold mb-2 mt-3\">{children}</h4>,\r\n        h5: ({ children }: any) => <h5 className=\"text-sm font-bold mb-1 mt-2\">{children}</h5>,\r\n        h6: ({ children }: any) => <h6 className=\"text-xs font-bold mb-1 mt-2\">{children}</h6>,\r\n        // Style paragraphs with minimal spacing\r\n        // Avoid placing block elements like <pre> inside <p>\r\n        p: ({ children }: any) => <p className=\"mb-1 last:mb-0\">{children}</p>,\r\n        // Style lists with minimal spacing\r\n        ul: ({ children }: any) => <ul className=\"list-disc list-inside mb-2 space-y-0\">{children}</ul>,\r\n        ol: ({ children }: any) => <ol className=\"list-decimal list-inside mb-2 space-y-0\">{children}</ol>,\r\n        li: ({ children }: any) => <li className=\"ml-4\">{children}</li>,\r\n        // Style blockquotes with minimal spacing\r\n        blockquote: ({ children }: any) => (\r\n          <blockquote className=\"border-l-4 border-gray-500 pl-4 italic my-2 text-gray-300\">\r\n            {children}\r\n          </blockquote>\r\n        ),\r\n        // Style tables\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        table: ({ children }: any) => (\r\n          <div className=\"overflow-x-auto my-4\">\r\n            <table className=\"min-w-full border-collapse border border-gray-600\">\r\n              {children}\r\n            </table>\r\n          </div>\r\n        ),\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        th: ({ children }: any) => (\r\n          <th className=\"border border-gray-600 px-3 py-2 bg-gray-700 font-semibold text-left\">\r\n            {children}\r\n          </th>\r\n        ),\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        td: ({ children }: any) => (\r\n          <td className=\"border border-gray-600 px-3 py-2\">\r\n            {children}\r\n          </td>\r\n        ),\r\n        // Style horizontal rules with minimal spacing\r\n        hr: () => <hr className=\"my-3 border-gray-600\" />,\r\n        // Style strong and emphasis\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        strong: ({ children }: any) => <strong className=\"font-bold\">{children}</strong>,\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        em: ({ children }: any) => <em className=\"italic\">{children}</em>,\r\n      }}\r\n    >\r\n      {text}\r\n    </ReactMarkdown>\r\n  );\r\n}\r\n\r\nexport function parseTextWithContent(\r\n  text: string,\r\n  className?: string,\r\n  style?: React.CSSProperties\r\n): JSX.Element {\r\n  // Clean up excessive line breaks and normalize spacing\r\n  const cleanText = text\r\n    .replace(/\\n{3,}/g, '\\n\\n') // Replace 3+ consecutive newlines with 2\r\n    .replace(/[ \\t]+/g, ' '); // Replace multiple spaces/tabs with single space\r\n\r\n  // Check if the text contains markdown elements\r\n  const hasMarkdown = /^#{1,6}\\s|^\\*\\s|^\\d+\\.\\s|^>\\s|^\\|.*\\||```|`[^`]+`|\\*\\*.*\\*\\*|\\*.*\\*|_.*_|\\[.*\\]\\(.*\\)/m.test(cleanText);\r\n\r\n  if (hasMarkdown) {\r\n    return (\r\n      <div className={className} style={style}>\r\n        {parseMarkdownContent(cleanText)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Fallback to the original parser for simple text\r\n  return (\r\n    <ParsedContent className={className} style={style}>\r\n      {cleanText}\r\n    </ParsedContent>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\lib\\linkParser.tsx","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.","line":30,"column":10,"nodeType":null,"messageId":"refactorFunction","endLine":30,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4214,4250],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\n\r\n/**\r\n * Regular expression to detect HTTP and HTTPS URLs in text\r\n * Matches URLs with or without www, with various TLDs, paths, query parameters, and fragments\r\n */\r\nconst URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/g;\r\n\r\n/**\r\n * Regular expression to detect domain names without protocol (e.g., example.com, www.google.com)\r\n * More conservative pattern to avoid false positives\r\n * Handles domains in parentheses and other punctuation contexts\r\n */\r\nconst DOMAIN_REGEX = /(^|[\\s([{])((?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.(?:[a-zA-Z]{2,6}|localhost)(?::\\d+)?(?:[-a-zA-Z0-9()@:%_+.~#?&//=]*)?)/g;\r\n\r\n/**\r\n * Interface for parsed text segments\r\n */\r\ninterface TextSegment {\r\n  type: 'text' | 'link';\r\n  content: string;\r\n  url?: string;\r\n}\r\n\r\n/**\r\n * Parses text and splits it into segments of regular text and URLs\r\n * @param text - The input text to parse\r\n * @returns Array of text segments\r\n */\r\nfunction parseTextSegments(text: string): TextSegment[] {\r\n  const segments: TextSegment[] = [];\r\n  const allMatches: Array<{ index: number; length: number; content: string; url: string }> = [];\r\n\r\n  // Find all HTTP/HTTPS URLs\r\n  URL_REGEX.lastIndex = 0;\r\n  let match;\r\n  while ((match = URL_REGEX.exec(text)) !== null) {\r\n    allMatches.push({\r\n      index: match.index,\r\n      length: match[0].length,\r\n      content: match[0],\r\n      url: match[0]\r\n    });\r\n  }\r\n\r\n  // Find all domain-only URLs (like example.com)\r\n  DOMAIN_REGEX.lastIndex = 0;\r\n  while ((match = DOMAIN_REGEX.exec(text)) !== null) {\r\n    let domainMatch = match[2]; // The domain part (without leading whitespace)\r\n    const domainIndex = match.index + match[1].length; // Adjust for leading whitespace\r\n\r\n    // Remove trailing punctuation that shouldn't be part of the URL\r\n    const trailingPunctuationMatch = domainMatch.match(/^(.+?)[)\\]}.:,;!?]*$/);\r\n    if (trailingPunctuationMatch) {\r\n      domainMatch = trailingPunctuationMatch[1];\r\n    }\r\n\r\n    // Skip if this domain is already covered by a full URL\r\n    const isAlreadyCovered = allMatches.some(existing =>\r\n      domainIndex >= existing.index &&\r\n      domainIndex < existing.index + existing.length\r\n    );\r\n\r\n    if (!isAlreadyCovered && domainMatch) {\r\n      // Add https:// prefix for the URL\r\n      const fullUrl = domainMatch.startsWith('http') ? domainMatch : `https://${domainMatch}`;\r\n      allMatches.push({\r\n        index: domainIndex,\r\n        length: domainMatch.length,\r\n        content: domainMatch,\r\n        url: fullUrl\r\n      });\r\n    }\r\n  }\r\n\r\n  // Sort matches by index to process them in order\r\n  allMatches.sort((a, b) => a.index - b.index);\r\n\r\n  let lastIndex = 0;\r\n  for (const urlMatch of allMatches) {\r\n    // Add text before the URL if any\r\n    if (urlMatch.index > lastIndex) {\r\n      const textContent = text.slice(lastIndex, urlMatch.index);\r\n      if (textContent) {\r\n        segments.push({\r\n          type: 'text',\r\n          content: textContent\r\n        });\r\n      }\r\n    }\r\n\r\n    // Add the URL segment\r\n    segments.push({\r\n      type: 'link',\r\n      content: urlMatch.content,\r\n      url: urlMatch.url\r\n    });\r\n\r\n    lastIndex = urlMatch.index + urlMatch.length;\r\n  }\r\n\r\n  // Add remaining text after the last URL if any\r\n  if (lastIndex < text.length) {\r\n    const textContent = text.slice(lastIndex);\r\n    if (textContent) {\r\n      segments.push({\r\n        type: 'text',\r\n        content: textContent\r\n      });\r\n    }\r\n  }\r\n\r\n  // If no URLs were found, return the entire text as a single segment\r\n  if (segments.length === 0) {\r\n    segments.push({\r\n      type: 'text',\r\n      content: text\r\n    });\r\n  }\r\n\r\n  return segments;\r\n}\r\n\r\n/**\r\n * Handles clicking on external links\r\n * Opens the URL in the user's default browser via Electron's shell.openExternal\r\n * @param url - The URL to open\r\n */\r\nfunction handleLinkClick(url: string) {\r\n  // Prevent default link behavior\r\n  if (typeof window !== 'undefined' && window.electronAPI?.openExternalLink) {\r\n    // Use Electron API to open in external browser\r\n    window.electronAPI.openExternalLink(url);\r\n  } else {\r\n    // Fallback for non-Electron environments (development)\r\n    console.log('Would open URL:', url);\r\n    // In a web environment, we could use window.open\r\n    // window.open(url, '_blank', 'noopener,noreferrer');\r\n  }\r\n}\r\n\r\n/**\r\n * Props for the ParsedTextWithLinks component\r\n */\r\ninterface ParsedTextWithLinksProps {\r\n  children: string;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\n/**\r\n * Component that renders text with clickable links\r\n * Preserves whitespace and formatting while making URLs clickable\r\n * @param children - The text content to parse and render\r\n * @param className - CSS classes to apply to the container\r\n * @param style - Inline styles to apply to the container\r\n */\r\nexport function ParsedTextWithLinks({ children, className, style }: ParsedTextWithLinksProps) {\r\n  const segments = parseTextSegments(children);\r\n\r\n  return (\r\n    <span className={className} style={style}>\r\n      {segments.map((segment, index) => {\r\n        if (segment.type === 'link' && segment.url) {\r\n          return (\r\n            <a\r\n              key={index}\r\n              href=\"#\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                handleLinkClick(segment.url!);\r\n              }}\r\n              className=\"text-blue-500 hover:text-blue-700 underline cursor-pointer\"\r\n              style={{\r\n                WebkitAppRegion: 'no-drag',\r\n                textDecoration: 'underline',\r\n                color: 'rgb(59 130 246)', // blue-500\r\n              } as React.CSSProperties & { WebkitAppRegion?: string }}\r\n              title={`Open ${segment.url} in browser`}\r\n            >\r\n              {segment.content}\r\n            </a>\r\n          );\r\n        } else {\r\n          return (\r\n            <span key={index}>\r\n              {segment.content}\r\n            </span>\r\n          );\r\n        }\r\n      })}\r\n    </span>\r\n  );\r\n}\r\n\r\n/**\r\n * Utility function to parse text with links (for use in other components)\r\n * @param text - The text to parse\r\n * @param className - Optional CSS classes for the container\r\n * @param style - Optional inline styles for the container\r\n * @returns JSX element with parsed text and clickable links\r\n */\r\nexport function parseTextWithLinks(\r\n  text: string, \r\n  className?: string, \r\n  style?: React.CSSProperties\r\n): JSX.Element {\r\n  return (\r\n    <ParsedTextWithLinks className={className} style={style}>\r\n      {text}\r\n    </ParsedTextWithLinks>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\DocumentParserService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1773,1854],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1860,2016],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3415,3483],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":153,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":153,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3952,4025],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 9 times.","line":161,"column":69,"nodeType":"Literal","endLine":161,"endColumn":84},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":166,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":166,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4444,4507],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4564,4630],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4972,5034],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5109,5190],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":209,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":209,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5985,6069],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":225,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":225,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6553,6627],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8105,8166],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":505,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":505,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15083,15165],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":514,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":514,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15473,15548],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":521,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":521,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16271,16385],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":527,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":527,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16674,16741],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":542,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":542,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17244,17298],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":547,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":547,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17505,17565],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":551,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":551,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17757,17803],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":681,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":681,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23122,23185],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":283,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":283,"endColumn":39,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import mammoth from 'mammoth';\r\nimport * as XLSX from 'xlsx';\r\nimport csvParser from 'csv-parser';\r\nimport { parse as parseHtml } from 'node-html-parser';\r\nimport ICAL from 'ical.js';\r\nimport { parseString as parseXml } from 'xml2js';\r\nimport rtfParser from 'rtf-parser';\r\n\r\nexport interface ParsedDocument {\r\n  text: string;\r\n  metadata?: {\r\n    title?: string;\r\n    author?: string;\r\n    pages?: number;\r\n    sheets?: string[];\r\n    format?: string;\r\n    success?: boolean;\r\n    error?: string;\r\n    fallbackUsed?: boolean;\r\n    processingTime?: number;\r\n    [key: string]: unknown;\r\n  };\r\n}\r\n\r\nexport interface DocumentParsingStats {\r\n  totalAttempts: number;\r\n  successfulParses: number;\r\n  failedParses: number;\r\n  fallbacksUsed: number;\r\n  averageProcessingTime: number;\r\n  errorsByType: Record<string, number>;\r\n}\r\n\r\nexport class DocumentParserService {\r\n  private stats: DocumentParsingStats = {\r\n    totalAttempts: 0,\r\n    successfulParses: 0,\r\n    failedParses: 0,\r\n    fallbacksUsed: 0,\r\n    averageProcessingTime: 0,\r\n    errorsByType: {}\r\n  };\r\n\r\n  /**\r\n   * Get current parsing statistics\r\n   */\r\n  getStats(): DocumentParsingStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  /**\r\n   * Reset parsing statistics\r\n   */\r\n  resetStats(): void {\r\n    this.stats = {\r\n      totalAttempts: 0,\r\n      successfulParses: 0,\r\n      failedParses: 0,\r\n      fallbacksUsed: 0,\r\n      averageProcessingTime: 0,\r\n      errorsByType: {}\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Main entry point for parsing any supported document format\r\n   */\r\n  async parseDocument(file: File): Promise<ParsedDocument> {\r\n    const startTime = Date.now();\r\n    const fileExtension = this.getFileExtension(file.name).toLowerCase();\r\n    const mimeType = file.type;\r\n\r\n    this.stats.totalAttempts++;\r\n    console.log(`📄 Parsing document: ${file.name} (${fileExtension}, ${mimeType})`);\r\n    console.log(`📄 File size: ${Math.round(file.size / 1024)}KB, Last modified: ${file.lastModified ? new Date(file.lastModified).toISOString() : 'Unknown'}`);\r\n\r\n    try {\r\n      let result: ParsedDocument;\r\n\r\n      switch (fileExtension) {\r\n        case '.docx':\r\n        case '.doc':\r\n          result = await this.parseWordDocument(file);\r\n          break;\r\n\r\n        case '.xlsx':\r\n        case '.xls':\r\n        case '.ods':\r\n          result = await this.parseSpreadsheet(file);\r\n          break;\r\n\r\n        case '.csv':\r\n          result = await this.parseCsv(file);\r\n          break;\r\n\r\n        case '.html':\r\n        case '.htm':\r\n          result = await this.parseHtml(file);\r\n          break;\r\n\r\n        case '.ics':\r\n          result = await this.parseIcs(file);\r\n          break;\r\n\r\n        case '.json':\r\n          result = await this.parseJson(file);\r\n          break;\r\n\r\n        case '.rtf':\r\n          result = await this.parseRtf(file);\r\n          break;\r\n\r\n        case '.xml':\r\n          result = await this.parseXml(file);\r\n          break;\r\n\r\n        case '.pptx':\r\n        case '.ppt':\r\n          result = await this.parsePowerPoint(file);\r\n          break;\r\n\r\n        case '.pdf':\r\n          result = await this.parsePdf(file);\r\n          break;\r\n\r\n        case '.txt':\r\n          result = await this.parseTextFile(file);\r\n          break;\r\n\r\n        case '.md':\r\n          result = await this.parseMarkdownFile(file);\r\n          break;\r\n\r\n        default:\r\n          // Create a fallback document for unsupported formats\r\n          console.log('📄 Unsupported format, creating fallback document...');\r\n          result = await this.createFallbackDocument(file, 'Unsupported file format');\r\n          this.stats.fallbacksUsed++;\r\n          break;\r\n      }\r\n\r\n      // Success - update statistics\r\n      const processingTime = Date.now() - startTime;\r\n      this.stats.successfulParses++;\r\n      this.updateAverageProcessingTime(processingTime);\r\n\r\n      result.metadata = {\r\n        ...result.metadata,\r\n        success: true,\r\n        processingTime\r\n      };\r\n\r\n      console.log(`✅ Successfully parsed ${file.name} in ${processingTime}ms`);\r\n      return result;\r\n\r\n    } catch (error) {\r\n      // Error handling with fallback\r\n      const processingTime = Date.now() - startTime;\r\n      this.stats.failedParses++;\r\n\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n      const errorType = this.categorizeError(error);\r\n\r\n      this.stats.errorsByType[errorType] = (this.stats.errorsByType[errorType] || 0) + 1;\r\n\r\n      console.error(`❌ Error parsing document ${file.name}:`, error);\r\n\r\n      // Try fallback approach\r\n      try {\r\n        console.log(`🔄 Attempting fallback parsing for ${file.name}...`);\r\n        const fallbackResult = await this.createFallbackDocument(file, errorMessage);\r\n        this.stats.fallbacksUsed++;\r\n\r\n        fallbackResult.metadata = {\r\n          ...fallbackResult.metadata,\r\n          success: false,\r\n          error: errorMessage,\r\n          fallbackUsed: true,\r\n          processingTime\r\n        };\r\n\r\n        console.log(`⚠️ Fallback parsing completed for ${file.name}`);\r\n        return fallbackResult;\r\n      } catch (fallbackError) {\r\n        console.error(`❌ Fallback parsing also failed for ${file.name}:`, fallbackError);\r\n        throw new Error(`Failed to parse document: ${errorMessage}. Fallback also failed: ${fallbackError instanceof Error ? fallbackError.message : 'Unknown error'}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse Word documents (.docx, .doc)\r\n   */\r\n  private async parseWordDocument(file: File): Promise<ParsedDocument> {\r\n    try {\r\n      // First, try with ArrayBuffer (more compatible)\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      const result = await mammoth.extractRawText({ arrayBuffer });\r\n\r\n      return {\r\n        text: result.value,\r\n        metadata: {\r\n          format: 'Word Document',\r\n          title: file.name,\r\n          warnings: result.messages?.length > 0 ? result.messages.map(m => m.message) : undefined\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.log('📄 Mammoth failed with ArrayBuffer, trying Buffer approach...', error);\r\n\r\n      try {\r\n        // Fallback: try with Buffer\r\n        const buffer = await this.fileToBuffer(file);\r\n        const result = await mammoth.extractRawText({ buffer });\r\n\r\n        return {\r\n          text: result.value,\r\n          metadata: {\r\n            format: 'Word Document',\r\n            title: file.name,\r\n            warnings: result.messages?.length > 0 ? result.messages.map(m => m.message) : undefined\r\n          }\r\n        };\r\n      } catch (bufferError) {\r\n        console.log('📄 Mammoth failed with Buffer approach too...', bufferError);\r\n\r\n        // Final fallback: create a fallback document with detailed error info\r\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n        const bufferErrorMessage = bufferError instanceof Error ? bufferError.message : 'Unknown error';\r\n\r\n        return await this.createFallbackDocument(\r\n          file,\r\n          `Word document parsing failed. Primary error: ${errorMessage}. Buffer fallback error: ${bufferErrorMessage}. The file may be corrupted, password-protected, or in an unsupported format.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse spreadsheet files (.xlsx, .xls, .ods)\r\n   */\r\n  private async parseSpreadsheet(file: File): Promise<ParsedDocument> {\r\n    const buffer = await this.fileToBuffer(file);\r\n    \r\n    try {\r\n      const workbook = XLSX.read(buffer, { type: 'buffer' });\r\n      const sheets: string[] = [];\r\n      let combinedText = '';\r\n\r\n      workbook.SheetNames.forEach((sheetName) => {\r\n        sheets.push(sheetName);\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const csvData = XLSX.utils.sheet_to_csv(worksheet);\r\n        \r\n        combinedText += `\\n\\n=== Sheet: ${sheetName} ===\\n`;\r\n        combinedText += csvData;\r\n      });\r\n\r\n      return {\r\n        text: combinedText.trim(),\r\n        metadata: {\r\n          format: 'Spreadsheet',\r\n          title: file.name,\r\n          sheets: sheets,\r\n          sheetCount: sheets.length\r\n        }\r\n      };\r\n    } catch {\r\n      console.log('📊 XLSX failed, creating fallback document...');\r\n      return await this.createFallbackDocument(file, 'Spreadsheet parsing failed - file may be corrupted or in an unsupported format');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse CSV files\r\n   */\r\n  private async parseCsv(file: File): Promise<ParsedDocument> {\r\n    const text = await this.fileToText(file);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const rows: Record<string, string>[] = [];\r\n      // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n      const stream = require('stream');\r\n      const readable = new stream.Readable();\r\n      readable.push(text);\r\n      readable.push(null);\r\n\r\n      readable\r\n        .pipe(csvParser())\r\n        .on('data', (row: Record<string, string>) => rows.push(row))\r\n        .on('end', () => {\r\n          const headers = Object.keys(rows[0] || {});\r\n          let csvText = `Headers: ${headers.join(', ')}\\n\\n`;\r\n          \r\n          rows.forEach((row, index) => {\r\n            csvText += `Row ${index + 1}:\\n`;\r\n            headers.forEach(header => {\r\n              csvText += `  ${header}: ${row[header]}\\n`;\r\n            });\r\n            csvText += '\\n';\r\n          });\r\n\r\n          resolve({\r\n            text: csvText,\r\n            metadata: {\r\n              format: 'CSV',\r\n              title: file.name,\r\n              rows: rows.length,\r\n              columns: headers.length,\r\n              headers: headers\r\n            }\r\n          });\r\n        })\r\n        .on('error', reject);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parse HTML files\r\n   */\r\n  private async parseHtml(file: File): Promise<ParsedDocument> {\r\n    const htmlContent = await this.fileToText(file);\r\n    const root = parseHtml(htmlContent);\r\n    \r\n    // Extract title\r\n    const title = root.querySelector('title')?.text || file.name;\r\n    \r\n    // Remove script and style tags\r\n    root.querySelectorAll('script, style').forEach(el => el.remove());\r\n    \r\n    // Extract text content\r\n    const text = root.text;\r\n    \r\n    return {\r\n      text: text,\r\n      metadata: {\r\n        format: 'HTML',\r\n        title: title,\r\n        originalTitle: file.name\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Parse ICS calendar files\r\n   */\r\n  private async parseIcs(file: File): Promise<ParsedDocument> {\r\n    const icsContent = await this.fileToText(file);\r\n    \r\n    try {\r\n      const jcalData = ICAL.parse(icsContent);\r\n      const comp = new ICAL.Component(jcalData);\r\n      const events = comp.getAllSubcomponents('vevent');\r\n      \r\n      let calendarText = 'Calendar Events:\\n\\n';\r\n      \r\n      events.forEach((event, index) => {\r\n        const vevent = new ICAL.Event(event);\r\n        calendarText += `Event ${index + 1}:\\n`;\r\n        calendarText += `  Title: ${vevent.summary}\\n`;\r\n        calendarText += `  Start: ${vevent.startDate?.toJSDate()}\\n`;\r\n        calendarText += `  End: ${vevent.endDate?.toJSDate()}\\n`;\r\n        if (vevent.description) {\r\n          calendarText += `  Description: ${vevent.description}\\n`;\r\n        }\r\n        if (vevent.location) {\r\n          calendarText += `  Location: ${vevent.location}\\n`;\r\n        }\r\n        calendarText += '\\n';\r\n      });\r\n\r\n      return {\r\n        text: calendarText,\r\n        metadata: {\r\n          format: 'Calendar (ICS)',\r\n          title: file.name,\r\n          eventCount: events.length\r\n        }\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Failed to parse ICS file: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse JSON files\r\n   */\r\n  private async parseJson(file: File): Promise<ParsedDocument> {\r\n    const jsonContent = await this.fileToText(file);\r\n    \r\n    try {\r\n      const jsonData = JSON.parse(jsonContent);\r\n      const formattedJson = JSON.stringify(jsonData, null, 2);\r\n      \r\n      return {\r\n        text: formattedJson,\r\n        metadata: {\r\n          format: 'JSON',\r\n          title: file.name,\r\n          type: Array.isArray(jsonData) ? 'Array' : typeof jsonData,\r\n          size: Array.isArray(jsonData) ? jsonData.length : Object.keys(jsonData).length\r\n        }\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Invalid JSON file: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse RTF files\r\n   */\r\n  private async parseRtf(file: File): Promise<ParsedDocument> {\r\n    const rtfContent = await this.fileToText(file);\r\n    \r\n    try {\r\n      const doc = await rtfParser.parseRTF(rtfContent);\r\n      const text = this.extractTextFromRtfDoc(doc);\r\n      \r\n      return {\r\n        text: text,\r\n        metadata: {\r\n          format: 'RTF',\r\n          title: file.name\r\n        }\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Failed to parse RTF file: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse XML files\r\n   */\r\n  private async parseXml(file: File): Promise<ParsedDocument> {\r\n    const xmlContent = await this.fileToText(file);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      parseXml(xmlContent, (err, result) => {\r\n        if (err) {\r\n          reject(new Error(`Failed to parse XML: ${err.message}`));\r\n          return;\r\n        }\r\n\r\n        const formattedXml = JSON.stringify(result, null, 2);\r\n\r\n        resolve({\r\n          text: formattedXml,\r\n          metadata: {\r\n            format: 'XML',\r\n            title: file.name,\r\n            rootElement: Object.keys(result)[0]\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parse plain text files (.txt)\r\n   */\r\n  private async parseTextFile(file: File): Promise<ParsedDocument> {\r\n    const textContent = await this.fileToText(file);\r\n\r\n    return {\r\n      text: textContent,\r\n      metadata: {\r\n        format: 'Plain Text',\r\n        title: file.name,\r\n        characterCount: textContent.length,\r\n        lineCount: textContent.split('\\n').length\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Parse Markdown files (.md)\r\n   */\r\n  private async parseMarkdownFile(file: File): Promise<ParsedDocument> {\r\n    const markdownContent = await this.fileToText(file);\r\n\r\n    // Extract basic markdown metadata\r\n    const lines = markdownContent.split('\\n');\r\n    const headings = lines.filter(line => line.trim().startsWith('#'));\r\n    const firstHeading = headings.length > 0 ? headings[0].replace(/^#+\\s*/, '') : undefined;\r\n\r\n    return {\r\n      text: markdownContent,\r\n      metadata: {\r\n        format: 'Markdown',\r\n        title: firstHeading || file.name,\r\n        originalTitle: file.name,\r\n        characterCount: markdownContent.length,\r\n        lineCount: lines.length,\r\n        headingCount: headings.length,\r\n        headings: headings.slice(0, 10).map(h => h.replace(/^#+\\s*/, '')) // First 10 headings\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Parse PowerPoint files (.pptx, .ppt)\r\n   */\r\n  private async parsePowerPoint(file: File): Promise<ParsedDocument> {\r\n    // PowerPoint parsing is not currently supported in browser environment\r\n    console.log('📊 PowerPoint parsing not available, creating fallback document...');\r\n    return await this.createFallbackDocument(file, 'PowerPoint parsing is not currently supported in browser environment. Please convert to PDF or extract text manually.');\r\n  }\r\n\r\n  /**\r\n   * Parse PDF files (.pdf)\r\n   */\r\n  private async parsePdf(file: File): Promise<ParsedDocument> {\r\n    try {\r\n      console.log('📄 Parsing PDF file using Electron main process:', file.name);\r\n\r\n      // Check if we're in a browser environment with Electron API access\r\n      if (typeof window !== 'undefined' && (window as unknown as { electronAPI?: { parsePdfFile?: (buffer: ArrayBuffer, name: string) => Promise<{ success: boolean; text?: string; metadata?: { pages?: number; [key: string]: unknown }; error?: string }> } }).electronAPI?.parsePdfFile) {\r\n        const fileBuffer = await file.arrayBuffer();\r\n        const result = await (window as unknown as { electronAPI: { parsePdfFile: (buffer: ArrayBuffer, name: string) => Promise<{ success: boolean; text?: string; metadata?: { pages?: number; [key: string]: unknown }; error?: string }> } }).electronAPI.parsePdfFile(fileBuffer, file.name);\r\n\r\n        console.log('📄 PDF parsing result from Electron:', { success: result.success, textLength: result.text?.length });\r\n\r\n        if (result.success && result.text) {\r\n          // Check if this is actually the fallback error message\r\n          if (result.text.includes('PDF parsing module could not be loaded') ||\r\n              result.text.includes('PDF text extraction is not available')) {\r\n            console.error('📄 PDF parsing failed - received fallback message');\r\n            return await this.createFallbackDocument(file, 'PDF parsing module not available in Electron environment');\r\n          }\r\n\r\n          return {\r\n            text: result.text,\r\n            metadata: {\r\n              format: 'PDF',\r\n              title: file.name,\r\n              pages: result.metadata?.pages || 1,\r\n              success: true,\r\n              processingTime: Date.now() - Date.now() // Will be overridden by caller\r\n            }\r\n          };\r\n        } else {\r\n          console.error('📄 PDF parsing failed:', result.error);\r\n          return await this.createFallbackDocument(file, `PDF parsing failed: ${result.error || 'Unknown error'}`);\r\n        }\r\n      } else {\r\n        // Fallback if electronAPI is not available\r\n        console.log('📄 ElectronAPI not available for PDF parsing');\r\n        return await this.createFallbackDocument(file, 'PDF parsing not available in this environment. Please use the Electron app for PDF support.');\r\n      }\r\n    } catch (error) {\r\n      console.error('📄 PDF parsing error:', error);\r\n      return await this.createFallbackDocument(file, `PDF parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // Helper methods\r\n  private getFileExtension(filename: string): string {\r\n    return filename.substring(filename.lastIndexOf('.'));\r\n  }\r\n\r\n  private async fileToBuffer(file: File): Promise<Buffer> {\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    return Buffer.from(arrayBuffer);\r\n  }\r\n\r\n  private async fileToText(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = error => reject(error);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  private extractTextFromRtfDoc(doc: unknown): string {\r\n    // Simple text extraction from RTF document structure\r\n    if (typeof doc === 'string') {\r\n      return doc;\r\n    }\r\n\r\n    if (doc && typeof doc === 'object') {\r\n      const docObj = doc as Record<string, unknown>;\r\n\r\n      if (docObj.content) {\r\n        if (Array.isArray(docObj.content)) {\r\n          return docObj.content.map((item: unknown) => this.extractTextFromRtfDoc(item)).join('');\r\n        }\r\n        return this.extractTextFromRtfDoc(docObj.content);\r\n      }\r\n\r\n      if (docObj.text && typeof docObj.text === 'string') {\r\n        return docObj.text;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  private updateAverageProcessingTime(newTime: number): void {\r\n    const totalSuccessful = this.stats.successfulParses;\r\n    if (totalSuccessful === 1) {\r\n      this.stats.averageProcessingTime = newTime;\r\n    } else {\r\n      this.stats.averageProcessingTime =\r\n        ((this.stats.averageProcessingTime * (totalSuccessful - 1)) + newTime) / totalSuccessful;\r\n    }\r\n  }\r\n\r\n  private categorizeError(error: unknown): string {\r\n    if (error instanceof Error) {\r\n      const message = error.message.toLowerCase();\r\n\r\n      if (message.includes('network') || message.includes('fetch')) {\r\n        return 'network';\r\n      } else if (message.includes('permission') || message.includes('access')) {\r\n        return 'permission';\r\n      } else if (message.includes('format') || message.includes('invalid')) {\r\n        return 'format';\r\n      } else if (message.includes('memory') || message.includes('size')) {\r\n        return 'memory';\r\n      } else if (message.includes('timeout')) {\r\n        return 'timeout';\r\n      } else {\r\n        return 'parsing';\r\n      }\r\n    }\r\n    return 'unknown';\r\n  }\r\n\r\n  private async createFallbackDocument(file: File, originalError: string): Promise<ParsedDocument> {\r\n    const fileExtension = this.getFileExtension(file.name).toLowerCase();\r\n    const fileSize = Math.round(file.size / 1024);\r\n\r\n    // Try to extract basic file metadata\r\n    let fallbackText = `[Document: ${file.name}]\\n`;\r\n    fallbackText += `File Type: ${file.type || 'Unknown'}\\n`;\r\n    fallbackText += `File Size: ${fileSize}KB\\n`;\r\n    fallbackText += `Extension: ${fileExtension}\\n`;\r\n    fallbackText += `\\nParsing Error: ${originalError}\\n`;\r\n\r\n    // Add format-specific guidance\r\n    if (fileExtension === '.docx' || fileExtension === '.doc') {\r\n      fallbackText += `\\nTroubleshooting for Word documents:\\n`;\r\n      fallbackText += `• The document may be password-protected\\n`;\r\n      fallbackText += `• The file might be corrupted or incomplete\\n`;\r\n      fallbackText += `• Try saving as a newer .docx format\\n`;\r\n      fallbackText += `• Consider converting to PDF for better compatibility\\n`;\r\n      fallbackText += `• You can copy and paste the text content directly into the chat\\n`;\r\n    } else if (fileExtension === '.xlsx' || fileExtension === '.xls') {\r\n      fallbackText += `\\nTroubleshooting for Excel files:\\n`;\r\n      fallbackText += `• The spreadsheet may be password-protected\\n`;\r\n      fallbackText += `• Try saving as a newer .xlsx format\\n`;\r\n      fallbackText += `• Consider exporting as CSV for text analysis\\n`;\r\n    } else if (fileExtension === '.pptx' || fileExtension === '.ppt') {\r\n      fallbackText += `\\nNote: PowerPoint parsing is limited in browser environments.\\n`;\r\n      fallbackText += `• Try converting to PDF for better text extraction\\n`;\r\n      fallbackText += `• You can copy slide content and paste it directly\\n`;\r\n    }\r\n\r\n    fallbackText += `\\nWhat you can do:\\n`;\r\n    fallbackText += `• Describe the document content and ask specific questions\\n`;\r\n    fallbackText += `• Convert the file to PDF, TXT, or another supported format\\n`;\r\n    fallbackText += `• Copy and paste the text content directly into the chat\\n`;\r\n    fallbackText += `• Share specific sections or data you'd like me to analyze\\n`;\r\n\r\n    // Try to read as plain text if it might be a text-based format\r\n    if (['.txt', '.md', '.log', '.csv', '.json', '.xml', '.html', '.htm'].includes(fileExtension)) {\r\n      try {\r\n        const textContent = await this.fileToText(file);\r\n        if (textContent && textContent.trim().length > 0) {\r\n          fallbackText += `\\n\\nRaw Content (may contain formatting artifacts):\\n${textContent.substring(0, 2000)}`;\r\n          if (textContent.length > 2000) {\r\n            fallbackText += `\\n... (content truncated, showing first 2000 characters)`;\r\n          }\r\n        }\r\n      } catch (textError) {\r\n        console.log(`Could not read ${file.name} as text:`, textError);\r\n      }\r\n    }\r\n\r\n    return {\r\n      text: fallbackText,\r\n      metadata: {\r\n        format: 'Fallback',\r\n        title: file.name,\r\n        originalError,\r\n        fallbackUsed: true,\r\n        fileSize: file.size,\r\n        fileType: file.type\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nexport const documentParserService = new DocumentParserService();\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\KnowledgeBaseService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2721,2776],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2854,2923],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3188,3267],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4011,4067],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4699,4753],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":126,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":126,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4889,4955],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.","line":166,"column":16,"nodeType":null,"messageId":"refactorFunction","endLine":166,"endColumn":27},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 11 times.","line":172,"column":23,"nodeType":"Literal","endLine":172,"endColumn":59},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7360,7427],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":189,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":189,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7529,7601],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":202,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":202,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8126,8205],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":205,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":205,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8348,8395],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":206,"column":100,"nodeType":"Literal","endLine":206,"endColumn":115},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9062,9137],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9147,9212],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9719,9803],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":244,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":244,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10088,10150],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":248,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":248,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10330,10386],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":254,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":254,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10620,10678],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":268,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":268,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11232,11305],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":270,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":270,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11351,11465],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":276,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":276,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11822,11938],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12204,12267],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":395,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":395,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15779,15838],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":429,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":429,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16899,16960],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":438,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":438,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17293,17346],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":447,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":447,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17678,17774],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":458,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":458,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18170,18232],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":470,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":470,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18509,18565],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":474,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":474,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18660,18718],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":485,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":485,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18989,19062],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":487,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":487,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19108,19222],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":493,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":493,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19579,19695],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":496,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":496,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[19728,19791],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":600,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":600,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23405,23452],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":621,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":621,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24138,24209],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":627,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":627,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24468,24546],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":630,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":630,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[24606,24655],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":652,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":652,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25485,25556],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":679,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":679,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26492,26576],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":682,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":682,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[26644,26707],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":752,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":752,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29939,30088],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":756,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":756,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[30164,30223],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":832,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":832,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[33534,33622],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":847,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":847,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34084,34239],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":851,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":851,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[34312,34371],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":875,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":875,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[35044,35159],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":912,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":912,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36311,36364],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":914,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":914,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[36395,36453],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":944,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":944,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[37593,37653],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as lancedb from 'vectordb';\r\nimport { pipeline, FeatureExtractionPipeline } from '@xenova/transformers';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs/promises';\r\nimport { documentParserService } from './DocumentParserService.js';\r\n\r\ninterface KnowledgeBaseRecord {\r\n  id: string;\r\n  text: string;\r\n  vector: number[];\r\n  source: string;\r\n  metadata?: Record<string, unknown>;\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface ExportData {\r\n  version: string;\r\n  exportDate: string;\r\n  records: KnowledgeBaseRecord[];\r\n  metadata: {\r\n    totalRecords: number;\r\n    totalDocuments: number;\r\n    exportSize: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Manages the local knowledge base for the application.\r\n * This service handles the creation, management, and querying of a local vector database,\r\n * allowing AI models to access a shared, user-enrichable knowledge source.\r\n */\r\nexport class KnowledgeBaseService {\r\n  private static instance: KnowledgeBaseService;\r\n    private db: lancedb.Connection | undefined;\r\n  private table: lancedb.Table | undefined;\r\n  private embedder: FeatureExtractionPipeline | undefined;\r\n\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Gets the singleton instance of the KnowledgeBaseService.\r\n   * @returns {KnowledgeBaseService} The singleton instance.\r\n   */\r\n  public static getInstance(): KnowledgeBaseService {\r\n    if (!KnowledgeBaseService.instance) {\r\n      KnowledgeBaseService.instance = new KnowledgeBaseService();\r\n    }\r\n    return KnowledgeBaseService.instance;\r\n  }\r\n\r\n  /**\r\n   * Checks if the knowledge base is initialized.\r\n   * @returns {boolean} True if the knowledge base is initialized, false otherwise.\r\n   */\r\n  public isInitialized(): boolean {\r\n    return this.db !== undefined && this.table !== undefined && this.embedder !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Initializes the connection to the LanceDB vector database.\r\n   * Creates the database and necessary tables if they don't exist.\r\n   * @param dbPath - The local file system path to store the database.\r\n   */\r\n    public async initialize(dbPath: string): Promise<void> {\r\n    this.db = await lancedb.connect(dbPath);\r\n    // Using a pre-trained model for local embeddings\r\n    this.embedder = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');\r\n\r\n    const tableNames = await this.db.tableNames();\r\n    if (!tableNames.includes('vectors')) {\r\n      // The first time we create the table, we need to provide data.\r\n      // We'll use a dummy entry to define the schema.\r\n      const initialData = [{ \r\n        vector: await this.createEmbedding('initial'), \r\n        text: 'initial', \r\n        source: 'system' \r\n      }];\r\n      this.table = await this.db.createTable('vectors', initialData);\r\n      console.log('Knowledge base table \"vectors\" created.');\r\n    } else {\r\n      this.table = await this.db.openTable('vectors');\r\n      console.log('Connected to existing knowledge base table \"vectors\".');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Safely imports pdf-parse module with comprehensive error handling\r\n   */\r\n  public async importPdfParseSafely(): Promise<(buffer: Buffer) => Promise<{ text: string; numpages: number; info: Record<string, unknown> }>> {\r\n    try {\r\n      console.log('📄 Attempting to import pdf-parse with working directory fix...');\r\n\r\n      // Change to the pdf-parse module directory to ensure test files are found\r\n      const originalCwd = process.cwd();\r\n\r\n      try {\r\n        // Try to import pdf-parse with a timeout to prevent hanging\r\n        const importPromise = import('pdf-parse');\r\n        const timeoutPromise = new Promise((_, reject) =>\r\n          setTimeout(() => reject(new Error('PDF parse import timeout')), 5000)\r\n        );\r\n\r\n        const pdfParseModule = await Promise.race([importPromise, timeoutPromise]) as {\r\n          default?: (buffer: Buffer) => Promise<{ text: string; numpages: number; info: Record<string, unknown> }>;\r\n        } & ((buffer: Buffer) => Promise<{ text: string; numpages: number; info: Record<string, unknown> }>);\r\n        console.log('✅ pdf-parse module imported successfully');\r\n\r\n        // Handle both CommonJS and ES module exports\r\n        const pdfParse = pdfParseModule.default;\r\n        if (typeof pdfParse === 'function') {\r\n          return pdfParse;\r\n        } else if (typeof pdfParseModule === 'function') {\r\n          return pdfParseModule as (buffer: Buffer) => Promise<{ text: string; numpages: number; info: Record<string, unknown> }>;\r\n        } else {\r\n          throw new Error('pdf-parse module does not export a function');\r\n        }\r\n      } finally {\r\n        // Always restore the original working directory\r\n        process.chdir(originalCwd);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to import pdf-parse:', error);\r\n\r\n      // Return a fallback function that provides basic PDF info without parsing\r\n      return async (buffer: Buffer) => {\r\n        console.log('📄 Using fallback PDF handler (no text extraction)');\r\n        return {\r\n          text: `[PDF Document - ${buffer.length} bytes]\\nNote: PDF text extraction is not available. The PDF parsing module could not be loaded.`,\r\n          numpages: 1,\r\n          info: {\r\n            Title: 'PDF Document',\r\n            Creator: 'Unknown',\r\n            Producer: 'Fallback Handler'\r\n          } as Record<string, unknown>\r\n        };\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a document to the knowledge base.\r\n   * The document is processed, chunked, embedded, and stored in the vector database.\r\n   * @param filePath - The path to the file to be added (e.g., a PDF).\r\n   * @param metadata - Optional metadata to include with the document.\r\n   * @param progressCallback - Optional callback for progress updates.\r\n   */\r\n  public async addDocument(\r\n    filePath: string,\r\n    metadata?: Record<string, unknown>,\r\n    progressCallback?: (progress: {step: string, message: string, current?: number, total?: number, chunkCount?: number}) => void\r\n  ): Promise<void>;\r\n\r\n  /**\r\n   * Adds a document to the knowledge base from a File object.\r\n   * The document is processed, chunked, embedded, and stored in the vector database.\r\n   * @param file - The File object to be added.\r\n   * @param metadata - Optional metadata to include with the document.\r\n   * @param progressCallback - Optional callback for progress updates.\r\n   */\r\n  public async addDocument(\r\n    file: File,\r\n    metadata?: Record<string, unknown>,\r\n    progressCallback?: (progress: {step: string, message: string, current?: number, total?: number, chunkCount?: number}) => void\r\n  ): Promise<void>;\r\n\r\n  public async addDocument(\r\n    filePathOrFile: string | File,\r\n    metadata?: Record<string, unknown>,\r\n    progressCallback?: (progress: {step: string, message: string, current?: number, total?: number, chunkCount?: number}) => void\r\n  ): Promise<void> {\r\n    if (!this.table) {\r\n      throw new Error('Knowledge base is not initialized.');\r\n    }\r\n\r\n    try {\r\n      let text: string;\r\n      let documentSource: string;\r\n      let documentMetadata: Record<string, unknown> = metadata || {};\r\n\r\n      if (typeof filePathOrFile === 'string') {\r\n        // Handle file path (existing PDF functionality)\r\n        const filePath = filePathOrFile;\r\n        documentSource = path.basename(filePath);\r\n        progressCallback?.({step: 'reading', message: `Reading file: ${documentSource}`});\r\n        console.log(`Starting to process document from path: ${filePath}`);\r\n\r\n        // Check if file exists\r\n        const fileBuffer = await fs.readFile(filePath);\r\n        console.log(`File read successfully, size: ${fileBuffer.length} bytes`);\r\n\r\n        // Determine file type and parse accordingly\r\n        const fileExtension = path.extname(filePath).toLowerCase();\r\n\r\n        progressCallback?.({step: 'parsing', message: `Parsing ${fileExtension.toUpperCase()} file: ${documentSource}`});\r\n\r\n        if (fileExtension === '.pdf') {\r\n          // Use existing PDF parsing logic\r\n          try {\r\n            const pdfParse = await this.importPdfParseSafely();\r\n            const pdfData = await pdfParse(fileBuffer);\r\n            text = pdfData.text;\r\n            console.log(`PDF parsed successfully, text length: ${text.length} characters`);\r\n            documentMetadata = { ...documentMetadata, format: 'PDF', pages: pdfData.numpages };\r\n          } catch (pdfError) {\r\n            console.error('PDF parsing failed:', pdfError);\r\n            throw new Error(`Failed to parse PDF: ${pdfError instanceof Error ? pdfError.message : 'Unknown error'}`);\r\n          }\r\n        } else {\r\n          // For non-PDF files from file path, read as text\r\n          const textContent = await fs.readFile(filePath, 'utf-8');\r\n          text = textContent;\r\n          documentMetadata = { ...documentMetadata, format: 'Text', characterCount: text.length };\r\n        }\r\n      } else {\r\n        // Handle File object (new functionality)\r\n        const file = filePathOrFile;\r\n        documentSource = file.name;\r\n        progressCallback?.({step: 'reading', message: `Reading file: ${documentSource}`});\r\n        console.log(`Starting to process document from File object: ${file.name}`);\r\n        console.log(`File size: ${file.size} bytes, type: ${file.type}`);\r\n\r\n        progressCallback?.({step: 'parsing', message: `Parsing file: ${documentSource}`});\r\n\r\n        // Use DocumentParserService to parse the file\r\n        const parsedDocument = await documentParserService.parseDocument(file);\r\n        text = parsedDocument.text;\r\n        documentMetadata = {\r\n          ...documentMetadata,\r\n          ...parsedDocument.metadata,\r\n          fileSize: file.size,\r\n          fileType: file.type,\r\n          uploadDate: new Date().toISOString()\r\n        };\r\n\r\n        console.log(`Document parsed successfully, text length: ${text.length} characters`);\r\n      }\r\n\r\n      if (!text || text.trim().length === 0) {\r\n        throw new Error('No text content found in the document');\r\n      }\r\n\r\n      progressCallback?.({step: 'chunking', message: `Chunking text for: ${documentSource}`});\r\n      const chunks = this.chunkText(text);\r\n      console.log(`Document chunked into ${chunks.length} pieces.`);\r\n      progressCallback?.({step: 'chunking', message: `Generated ${chunks.length} chunks for: ${documentSource}`, chunkCount: chunks.length});\r\n\r\n      const records = [];\r\n      console.log(`Using document source: ${documentSource}`);\r\n\r\n      progressCallback?.({step: 'embedding', message: `Creating embeddings for: ${documentSource}`, current: 0, total: chunks.length});\r\n\r\n      for (let i = 0; i < chunks.length; i++) {\r\n        const chunk = chunks[i];\r\n        console.log(`Processing chunk ${i + 1}/${chunks.length}`);\r\n        progressCallback?.({step: 'embedding', message: `Processing chunk ${i + 1}/${chunks.length} for: ${documentSource}`, current: i + 1, total: chunks.length});\r\n\r\n        const embedding = await this.createEmbedding(chunk);\r\n        records.push({\r\n          vector: embedding,\r\n          text: chunk,\r\n          source: documentSource,\r\n          metadata: documentMetadata,\r\n          chunkIndex: i\r\n        });\r\n      }\r\n\r\n      progressCallback?.({step: 'storing', message: `Storing ${records.length} records for: ${documentSource}`});\r\n      console.log(`Adding ${records.length} records to the knowledge base...`);\r\n      await this.table.add(records);\r\n      console.log(`Successfully added ${records.length} records to the knowledge base for document: ${documentSource}`);\r\n\r\n      // Verify the records were added by checking the count\r\n      const dummyEmbedding = new Array(384).fill(0); // MiniLM-L6-v2 has 384 dimensions\r\n      const allRecords = await this.table.search(dummyEmbedding).limit(10000).execute();\r\n      const documentRecords = allRecords.filter(r => (r as {source: string}).source === documentSource);\r\n      console.log(`Verification: Found ${documentRecords.length} records for document ${documentSource} in the database`);\r\n\r\n      progressCallback?.({step: 'complete', message: `Successfully processed: ${documentSource}`, chunkCount: chunks.length});\r\n\r\n    } catch (error) {\r\n      const errorMessage = typeof filePathOrFile === 'string' ? filePathOrFile : filePathOrFile.name;\r\n      console.error(`Error adding document ${errorMessage}:`, error);\r\n      progressCallback?.({step: 'error', message: `Failed to process: ${errorMessage} - ${error instanceof Error ? error.message : 'Unknown error'}`});\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds multiple documents to the knowledge base with real-time progress updates.\r\n   * @param filePaths - Array of file paths to process.\r\n   * @param progressCallback - Callback for real-time progress updates.\r\n   * @returns Promise with batch processing results.\r\n   */\r\n  public async addDocumentsBatch(\r\n    filePaths: string[],\r\n    progressCallback?: (progress: {\r\n      step: string;\r\n      message: string;\r\n      fileIndex: number;\r\n      totalFiles: number;\r\n      fileName: string;\r\n      chunkCount?: number;\r\n      status: 'processing' | 'success' | 'error';\r\n      error?: string;\r\n    }) => void\r\n  ): Promise<{success: boolean, results: Array<{filePath: string, success: boolean, error?: string, chunkCount?: number}>, summary: string}> {\r\n    if (!this.table) {\r\n      throw new Error('Knowledge base is not initialized.');\r\n    }\r\n\r\n    const results: Array<{filePath: string, success: boolean, error?: string, chunkCount?: number}> = [];\r\n    let successCount = 0;\r\n    let errorCount = 0;\r\n\r\n    progressCallback?.({\r\n      step: 'starting',\r\n      message: `Starting batch processing of ${filePaths.length} documents`,\r\n      fileIndex: 0,\r\n      totalFiles: filePaths.length,\r\n      fileName: '',\r\n      status: 'processing'\r\n    });\r\n\r\n    for (let i = 0; i < filePaths.length; i++) {\r\n      const filePath = filePaths[i];\r\n      const fileName = path.basename(filePath);\r\n\r\n      try {\r\n        progressCallback?.({\r\n          step: 'processing',\r\n          message: `Processing file ${i + 1}/${filePaths.length}: ${fileName}`,\r\n          fileIndex: i + 1,\r\n          totalFiles: filePaths.length,\r\n          fileName,\r\n          status: 'processing'\r\n        });\r\n\r\n        // Process individual document with progress tracking\r\n        let chunkCount = 0;\r\n        await this.addDocument(filePath, undefined, (docProgress) => {\r\n          if (docProgress.chunkCount) {\r\n            chunkCount = docProgress.chunkCount;\r\n          }\r\n\r\n          progressCallback?.({\r\n            step: docProgress.step,\r\n            message: `File ${i + 1}/${filePaths.length}: ${docProgress.message}`,\r\n            fileIndex: i + 1,\r\n            totalFiles: filePaths.length,\r\n            fileName,\r\n            chunkCount: docProgress.chunkCount,\r\n            status: 'processing'\r\n          });\r\n        });\r\n\r\n        results.push({\r\n          filePath,\r\n          success: true,\r\n          chunkCount\r\n        });\r\n\r\n        successCount++;\r\n\r\n        progressCallback?.({\r\n          step: 'complete',\r\n          message: `Successfully processed ${fileName} (${chunkCount} chunks)`,\r\n          fileIndex: i + 1,\r\n          totalFiles: filePaths.length,\r\n          fileName,\r\n          chunkCount,\r\n          status: 'success'\r\n        });\r\n\r\n      } catch (error) {\r\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n\r\n        results.push({\r\n          filePath,\r\n          success: false,\r\n          error: errorMessage\r\n        });\r\n\r\n        errorCount++;\r\n\r\n        progressCallback?.({\r\n          step: 'error',\r\n          message: `Failed to process ${fileName}: ${errorMessage}`,\r\n          fileIndex: i + 1,\r\n          totalFiles: filePaths.length,\r\n          fileName,\r\n          status: 'error',\r\n          error: errorMessage\r\n        });\r\n\r\n        console.error(`Error processing file ${filePath}:`, error);\r\n      }\r\n    }\r\n\r\n    const summary = `Batch processing completed: ${successCount} successful, ${errorCount} failed out of ${filePaths.length} total files`;\r\n\r\n    progressCallback?.({\r\n      step: 'finished',\r\n      message: summary,\r\n      fileIndex: filePaths.length,\r\n      totalFiles: filePaths.length,\r\n      fileName: '',\r\n      status: successCount === filePaths.length ? 'success' : errorCount === filePaths.length ? 'error' : 'processing'\r\n    });\r\n\r\n    return {\r\n      success: errorCount === 0,\r\n      results,\r\n      summary\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Adds a document to the knowledge base from a Google Docs URL.\r\n   * The document is processed, chunked, embedded, and stored in the vector database.\r\n   * @param url - The Google Docs URL to import.\r\n   * @param metadata - Optional metadata to include with the document.\r\n   */\r\n  public async addDocumentFromUrl(url: string, metadata?: Record<string, unknown>): Promise<void> {\r\n    if (!this.table) {\r\n      throw new Error('Knowledge base is not initialized.');\r\n    }\r\n\r\n    try {\r\n      console.log(`Starting to process document from URL: ${url}`);\r\n\r\n      // Validate Google Docs URL\r\n      if (!this.isValidGoogleDocsUrl(url)) {\r\n        throw new Error('Invalid Google Docs URL. Please provide a valid Google Docs sharing URL.');\r\n      }\r\n\r\n      // Convert Google Docs URL to export format (plain text)\r\n      const exportUrl = this.convertToGoogleDocsExportUrl(url);\r\n      console.log(`Converted to export URL: ${exportUrl}`);\r\n\r\n      // Fetch the document content\r\n      const response = await fetch(exportUrl);\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch Google Docs content: ${response.status} ${response.statusText}. Make sure the document is publicly accessible.`);\r\n      }\r\n\r\n      const text = await response.text();\r\n      console.log(`Google Docs content fetched successfully, text length: ${text.length} characters`);\r\n\r\n      if (!text || text.trim().length === 0) {\r\n        throw new Error('No text content found in the Google Docs document');\r\n      }\r\n\r\n      // Extract document title from URL or use a default\r\n      const documentTitle = this.extractGoogleDocsTitle(url) || 'Google Docs Document';\r\n      const documentSource = `${documentTitle}.txt`;\r\n\r\n      const chunks = this.chunkText(text);\r\n      console.log(`Document chunked into ${chunks.length} pieces.`);\r\n\r\n      const documentMetadata = {\r\n        ...metadata,\r\n        format: 'Google Docs',\r\n        sourceUrl: url,\r\n        characterCount: text.length,\r\n        uploadDate: new Date().toISOString(),\r\n        title: documentTitle\r\n      };\r\n\r\n      const records = [];\r\n      console.log(`Using document source: ${documentSource}`);\r\n\r\n      for (let i = 0; i < chunks.length; i++) {\r\n        const chunk = chunks[i];\r\n        console.log(`Processing chunk ${i + 1}/${chunks.length}`);\r\n        const embedding = await this.createEmbedding(chunk);\r\n        records.push({\r\n          vector: embedding,\r\n          text: chunk,\r\n          source: documentSource,\r\n          metadata: documentMetadata,\r\n          chunkIndex: i\r\n        });\r\n      }\r\n\r\n      console.log(`Adding ${records.length} records to the knowledge base...`);\r\n      await this.table.add(records);\r\n      console.log(`Successfully added ${records.length} records to the knowledge base for document: ${documentSource}`);\r\n\r\n      // Verify the records were added by checking the count\r\n      const dummyEmbedding = new Array(384).fill(0); // MiniLM-L6-v2 has 384 dimensions\r\n      const allRecords = await this.table.search(dummyEmbedding).limit(10000).execute();\r\n      const documentRecords = allRecords.filter(r => (r as {source: string}).source === documentSource);\r\n      console.log(`Verification: Found ${documentRecords.length} records for document ${documentSource} in the database`);\r\n\r\n    } catch (error) {\r\n      console.error(`Error adding document from URL ${url}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates if a URL is a valid Google Docs URL\r\n   */\r\n  private isValidGoogleDocsUrl(url: string): boolean {\r\n    const googleDocsPattern = /^https:\\/\\/docs\\.google\\.com\\/document\\/d\\/[a-zA-Z0-9-_]+/;\r\n    return googleDocsPattern.test(url);\r\n  }\r\n\r\n  /**\r\n   * Converts a Google Docs sharing URL to an export URL for plain text\r\n   */\r\n  private convertToGoogleDocsExportUrl(url: string): string {\r\n    // Extract document ID from the URL\r\n    const match = url.match(/\\/document\\/d\\/([a-zA-Z0-9-_]+)/);\r\n    if (!match) {\r\n      throw new Error('Could not extract document ID from Google Docs URL');\r\n    }\r\n\r\n    const documentId = match[1];\r\n    return `https://docs.google.com/document/d/${documentId}/export?format=txt`;\r\n  }\r\n\r\n  /**\r\n   * Attempts to extract a title from the Google Docs URL\r\n   */\r\n  private extractGoogleDocsTitle(url: string): string | null {\r\n    // Try to extract title from URL if it contains one\r\n    const titleMatch = url.match(/\\/document\\/d\\/[^/]+\\/edit.*[?&]title=([^&]+)/);\r\n    if (titleMatch) {\r\n      return decodeURIComponent(titleMatch[1]);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Generates a vector embedding for a given text.\r\n   * @param text - The text to embed.\r\n   * @returns {Promise<number[]>} A promise that resolves to the vector embedding.\r\n   */\r\n    /**\r\n   * Splits a long text into smaller, overlapping chunks.\r\n   * @param text - The text to chunk.\r\n   * @param chunkSize - The size of each chunk.\r\n   * @param overlap - The overlap between consecutive chunks.\r\n   * @returns {string[]} An array of text chunks.\r\n   */\r\n  private chunkText(text: string, chunkSize = 1000, overlap = 200): string[] {\r\n    const chunks: string[] = [];\r\n    for (let i = 0; i < text.length; i += chunkSize - overlap) {\r\n      chunks.push(text.substring(i, i + chunkSize));\r\n    }\r\n    return chunks;\r\n  }\r\n\r\n  private async createEmbedding(text: string): Promise<number[]> {\r\n    if (!this.embedder) {\r\n      throw new Error('Embedding pipeline is not initialized.');\r\n    }\r\n    const result = await this.embedder(text, { pooling: 'mean', normalize: true });\r\n    return Array.from(result.data);\r\n  }\r\n\r\n  /**\r\n   * Searches the knowledge base for content relevant to a given query.\r\n   * @param queryText - The text to search for.\r\n   * @param limit - The maximum number of relevant chunks to return.\r\n   * @returns {Promise<Array<{text: string, source: string, score: number}>>} A promise that resolves to an array of relevant document chunks.\r\n   */\r\n    public async search(queryText: string, limit = 5): Promise<Array<{text: string, source: string, score: number}>> {\r\n    if (!this.table) {\r\n      throw new Error('Knowledge base is not initialized.');\r\n    }\r\n\r\n    const queryEmbedding = await this.createEmbedding(queryText);\r\n\r\n    const results = await this.table\r\n      .search(queryEmbedding)\r\n      .limit(limit)\r\n      .execute();\r\n\r\n    return results.map(r => ({\r\n      text: String(r.text),\r\n      source: String(r.source),\r\n      score: Number(r.score)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Removes a document from the knowledge base.\r\n   * @param documentId - The identifier of the document to remove (typically the file path or name).\r\n   * @returns {Promise<void>} A promise that resolves when the document is removed.\r\n   */\r\n  public async removeDocument(documentId: string): Promise<void> {\r\n    if (!this.table) {\r\n      throw new Error('Knowledge base is not initialized.');\r\n    }\r\n\r\n    // Remove all chunks that belong to this document\r\n    await this.table.delete(`source = '${documentId}'`);\r\n    console.log(`Removed document: ${documentId}`);\r\n  }\r\n\r\n  /**\r\n   * Gets a list of all documents in the knowledge base.\r\n   * @returns {Promise<string[]>} A promise that resolves to an array of document identifiers.\r\n   */\r\n  public async getDocuments(): Promise<string[]> {\r\n    if (!this.table) {\r\n      throw new Error('Knowledge base is not initialized.');\r\n    }\r\n\r\n    try {\r\n      // Use search with a dummy embedding to get all records\r\n      // This is the correct way to get all records from a LanceDB table\r\n      const dummyEmbedding = new Array(384).fill(0); // MiniLM-L6-v2 has 384 dimensions\r\n      const results = await this.table\r\n        .search(dummyEmbedding)\r\n        .limit(10000)\r\n        .execute();\r\n\r\n      console.log(`Retrieved ${results.length} records from knowledge base`);\r\n\r\n      // Extract unique sources and filter out system entries\r\n      const sourceSet = new Set(results.map(r => (r as {source: string}).source as string));\r\n      const uniqueSources = Array.from(sourceSet).filter(source => source !== 'system');\r\n\r\n      console.log(`Found ${uniqueSources.length} unique documents:`, uniqueSources);\r\n      return uniqueSources;\r\n    } catch (error) {\r\n      console.error('Error getting documents:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a list of all documents in the knowledge base with their metadata.\r\n   * @returns {Promise<Array<{source: string, metadata: Record<string, unknown>, chunkCount: number}>>} A promise that resolves to an array of documents with metadata.\r\n   */\r\n  public async getDocumentsWithMetadata(): Promise<Array<{source: string, metadata: Record<string, unknown>, chunkCount: number, addedAt?: string}>> {\r\n    if (!this.table) {\r\n      throw new Error('Knowledge base is not initialized.');\r\n    }\r\n\r\n    try {\r\n      // Use search with a dummy embedding to get all records\r\n      const dummyEmbedding = new Array(384).fill(0); // MiniLM-L6-v2 has 384 dimensions\r\n      const results = await this.table\r\n        .search(dummyEmbedding)\r\n        .limit(10000)\r\n        .execute();\r\n\r\n      console.log(`Retrieved ${results.length} records from knowledge base`);\r\n\r\n      // Group records by source and extract metadata\r\n      const documentMap = new Map<string, {metadata: Record<string, unknown>, chunks: number}>();\r\n\r\n      for (const record of results) {\r\n        const source = (record as {source: string}).source;\r\n        const metadata = (record as {metadata?: Record<string, unknown>}).metadata || {};\r\n\r\n        // Skip system entries\r\n        if (source === 'system') continue;\r\n\r\n        if (documentMap.has(source)) {\r\n          documentMap.get(source)!.chunks++;\r\n        } else {\r\n          documentMap.set(source, { metadata, chunks: 1 });\r\n        }\r\n      }\r\n\r\n      // Convert to array format\r\n      const documentsWithMetadata = Array.from(documentMap.entries()).map(([source, data]) => ({\r\n        source,\r\n        metadata: data.metadata,\r\n        chunkCount: data.chunks,\r\n        addedAt: data.metadata.uploadDate as string || new Date().toISOString()\r\n      }));\r\n\r\n      console.log(`Found ${documentsWithMetadata.length} unique documents with metadata`);\r\n      return documentsWithMetadata;\r\n    } catch (error) {\r\n      console.error('Error getting documents with metadata:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Exports the entire knowledge base to a portable JSON format.\r\n   * @param progressCallback - Optional callback to report export progress.\r\n   * @returns {Promise<{data: ExportData, stats: {totalRecords: number, totalDocuments: number, exportSize: number, exportTime: number}}>} The exported data and statistics.\r\n   */\r\n  public async exportKnowledgeBase(progressCallback?: (progress: {step: string, current: number, total: number, message: string}) => void): Promise<{data: ExportData, stats: {totalRecords: number, totalDocuments: number, exportSize: number, exportTime: number}}> {\r\n    if (!this.table) {\r\n      throw new Error('Knowledge base is not initialized.');\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    progressCallback?.({step: 'initializing', current: 0, total: 100, message: 'Starting knowledge base export...'});\r\n\r\n    try {\r\n      // Get all records from the database\r\n      progressCallback?.({step: 'fetching', current: 10, total: 100, message: 'Fetching all records from database...'});\r\n      const dummyEmbedding = new Array(384).fill(0); // MiniLM-L6-v2 has 384 dimensions\r\n      const allRecords = await this.table.search(dummyEmbedding).limit(50000).execute();\r\n\r\n      progressCallback?.({step: 'processing', current: 30, total: 100, message: `Processing ${allRecords.length} records...`});\r\n\r\n      // Filter out system entries and organize data\r\n      const validRecords = allRecords.filter(r => (r as {source: string}).source !== 'system');\r\n\r\n      // Create export structure\r\n      const exportData = {\r\n        version: '1.0.0',\r\n        exportDate: new Date().toISOString(),\r\n        records: validRecords.map(record => ({\r\n          id: (record as {id?: string}).id || `${Date.now()}-${Math.random()}`,\r\n          vector: (record as {vector: number[]}).vector,\r\n          text: (record as {text: string}).text,\r\n          source: (record as {source: string}).source,\r\n          metadata: (record as {metadata?: Record<string, unknown>}).metadata || {},\r\n          chunkIndex: (record as {chunkIndex?: number}).chunkIndex || 0\r\n        })),\r\n        metadata: {\r\n          totalRecords: 0, // Will be calculated below\r\n          totalDocuments: 0, // Will be calculated below\r\n          exportSize: 0 // Will be calculated below\r\n        }\r\n      };\r\n\r\n      progressCallback?.({step: 'finalizing', current: 80, total: 100, message: 'Finalizing export data...'});\r\n\r\n      // Calculate statistics\r\n      const uniqueSources = new Set(exportData.records.map(r => r.source));\r\n      const exportTime = Date.now() - startTime;\r\n\r\n      // Update metadata with calculated values\r\n      exportData.metadata = {\r\n        totalRecords: exportData.records.length,\r\n        totalDocuments: uniqueSources.size,\r\n        exportSize: JSON.stringify(exportData).length\r\n      };\r\n\r\n      const stats = {\r\n        totalRecords: exportData.records.length,\r\n        totalDocuments: uniqueSources.size,\r\n        exportSize: exportData.metadata.exportSize,\r\n        exportTime\r\n      };\r\n\r\n      progressCallback?.({step: 'complete', current: 100, total: 100, message: `Export completed: ${stats.totalDocuments} documents, ${stats.totalRecords} chunks`});\r\n\r\n      console.log(`✅ Knowledge base exported: ${stats.totalDocuments} documents, ${stats.totalRecords} records, ${Math.round(stats.exportSize / 1024)}KB`);\r\n\r\n      return { data: exportData, stats };\r\n    } catch (error) {\r\n      console.error('❌ Failed to export knowledge base:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Imports knowledge base data from a previously exported format.\r\n   * @param importData - The data to import.\r\n   * @param options - Import options including merge vs replace mode.\r\n   * @param progressCallback - Optional callback to report import progress.\r\n   * @returns {Promise<{success: boolean, stats: {importedRecords: number, importedDocuments: number, skippedRecords: number, importTime: number}}>} Import results and statistics.\r\n   */\r\n  public async importKnowledgeBase(\r\n    importData: ExportData | { records: KnowledgeBaseRecord[] },\r\n    options: {mode: 'replace' | 'merge', validateEmbeddings?: boolean} = {mode: 'replace', validateEmbeddings: true},\r\n    progressCallback?: (progress: {step: string, current: number, total: number, message: string}) => void\r\n  ): Promise<{success: boolean, stats: {importedRecords: number, importedDocuments: number, skippedRecords: number, importTime: number}}> {\r\n    if (!this.table) {\r\n      throw new Error('Knowledge base is not initialized.');\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    progressCallback?.({step: 'validating', current: 0, total: 100, message: 'Validating import data...'});\r\n\r\n    try {\r\n      // Validate import data structure\r\n      if (!this.validateImportData(importData)) {\r\n        throw new Error('Invalid import data format. Please ensure you are importing a valid knowledge base export file.');\r\n      }\r\n\r\n      const records = importData.records || [];\r\n      progressCallback?.({step: 'preparing', current: 10, total: 100, message: `Preparing to import ${records.length} records...`});\r\n\r\n      // Clear existing data if replace mode\r\n      if (options.mode === 'replace') {\r\n        progressCallback?.({step: 'clearing', current: 20, total: 100, message: 'Clearing existing knowledge base...'});\r\n        await this.clearKnowledgeBase();\r\n      }\r\n\r\n      // Process records in batches for better performance\r\n      const batchSize = 100;\r\n      let importedRecords = 0;\r\n      let skippedRecords = 0;\r\n      const uniqueSources = new Set<string>();\r\n\r\n      for (let i = 0; i < records.length; i += batchSize) {\r\n        const batch = records.slice(i, i + batchSize);\r\n        const progress = 30 + ((i / records.length) * 60);\r\n\r\n        progressCallback?.({\r\n          step: 'importing',\r\n          current: Math.round(progress),\r\n          total: 100,\r\n          message: `Importing batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(records.length / batchSize)}...`\r\n        });\r\n\r\n        try {\r\n          // Validate and prepare batch records\r\n          const validBatch = batch.filter((record: KnowledgeBaseRecord) => {\r\n            if (options.validateEmbeddings && (!record.vector || record.vector.length !== 384)) {\r\n              skippedRecords++;\r\n              return false;\r\n            }\r\n            if (!record.text || !record.source) {\r\n              skippedRecords++;\r\n              return false;\r\n            }\r\n            return true;\r\n          });\r\n\r\n          if (validBatch.length > 0) {\r\n            await this.table.add(validBatch);\r\n            importedRecords += validBatch.length;\r\n            validBatch.forEach((record: KnowledgeBaseRecord) => uniqueSources.add(record.source));\r\n          }\r\n        } catch (batchError) {\r\n          console.error(`❌ Failed to import batch ${Math.floor(i / batchSize) + 1}:`, batchError);\r\n          skippedRecords += batch.length;\r\n        }\r\n      }\r\n\r\n      const importTime = Date.now() - startTime;\r\n      const stats = {\r\n        importedRecords,\r\n        importedDocuments: uniqueSources.size,\r\n        skippedRecords,\r\n        importTime\r\n      };\r\n\r\n      progressCallback?.({step: 'complete', current: 100, total: 100, message: `Import completed: ${stats.importedDocuments} documents, ${stats.importedRecords} records imported`});\r\n\r\n      console.log(`✅ Knowledge base imported: ${stats.importedDocuments} documents, ${stats.importedRecords} records imported, ${stats.skippedRecords} skipped`);\r\n\r\n      return { success: true, stats };\r\n    } catch (error) {\r\n      console.error('❌ Failed to import knowledge base:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates the structure of import data.\r\n   * @param data - The data to validate.\r\n   * @returns {boolean} True if the data is valid for import.\r\n   */\r\n  private validateImportData(data: unknown): data is ExportData | { records: KnowledgeBaseRecord[] } {\r\n    if (!data || typeof data !== 'object') {\r\n      return false;\r\n    }\r\n\r\n    const typedData = data as Record<string, unknown>;\r\n\r\n    // Check required fields\r\n    if (!typedData.version || !typedData.records || !Array.isArray(typedData.records)) {\r\n      return false;\r\n    }\r\n\r\n    // Check version compatibility\r\n    if (typedData.version !== '1.0.0') {\r\n      console.warn(`⚠️ Import data version ${typedData.version} may not be fully compatible with current version 1.0.0`);\r\n    }\r\n\r\n    // Validate a sample of records\r\n    const sampleSize = Math.min(10, typedData.records.length);\r\n    for (let i = 0; i < sampleSize; i++) {\r\n      const record = (typedData.records as unknown[])[i] as Record<string, unknown>;\r\n      if (!record.text || !record.source || !Array.isArray(record.vector)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Clears all data from the knowledge base.\r\n   * @returns {Promise<void>} A promise that resolves when the knowledge base is cleared.\r\n   */\r\n  public async clearKnowledgeBase(): Promise<void> {\r\n    if (!this.table) {\r\n      throw new Error('Knowledge base is not initialized.');\r\n    }\r\n\r\n    try {\r\n      // Get all records to delete them\r\n      const dummyEmbedding = new Array(384).fill(0);\r\n      const allRecords = await this.table.search(dummyEmbedding).limit(50000).execute();\r\n\r\n      // Delete all non-system records\r\n      for (const record of allRecords) {\r\n        const source = (record as {source: string}).source;\r\n        if (source !== 'system') {\r\n          await this.table.delete(`source = '${source}'`);\r\n        }\r\n      }\r\n\r\n      console.log('✅ Knowledge base cleared successfully');\r\n    } catch (error) {\r\n      console.error('❌ Failed to clear knowledge base:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets statistics about the current knowledge base.\r\n   * @returns {Promise<{totalRecords: number, totalDocuments: number, databaseSize: number}>} Knowledge base statistics.\r\n   */\r\n  public async getKnowledgeBaseStats(): Promise<{totalRecords: number, totalDocuments: number, databaseSize: number}> {\r\n    if (!this.table) {\r\n      throw new Error('Knowledge base is not initialized.');\r\n    }\r\n\r\n    try {\r\n      const dummyEmbedding = new Array(384).fill(0);\r\n      const allRecords = await this.table.search(dummyEmbedding).limit(50000).execute();\r\n\r\n      const validRecords = allRecords.filter(r => (r as {source: string}).source !== 'system');\r\n      const uniqueSources = new Set(validRecords.map(r => (r as {source: string}).source));\r\n\r\n      // Estimate database size (rough calculation)\r\n      const estimatedSize = validRecords.length * (384 * 4 + 500); // 4 bytes per float + estimated text size\r\n\r\n      return {\r\n        totalRecords: validRecords.length,\r\n        totalDocuments: uniqueSources.size,\r\n        databaseSize: estimatedSize\r\n      };\r\n    } catch (error) {\r\n      console.error('Error getting knowledge base stats:', error);\r\n      return { totalRecords: 0, totalDocuments: 0, databaseSize: 0 };\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\OpenAIFileService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[847,924],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1204,1259],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1433,1493],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Removed unused import: APIResponseData\r\n\r\nexport interface OpenAIFileUpload {\r\n  id: string;\r\n  object: 'file';\r\n  bytes: number;\r\n  created_at: number;\r\n  filename: string;\r\n  purpose: 'fine-tune' | 'assistants' | 'vision';\r\n  status: 'uploaded' | 'processed' | 'error';\r\n  status_details?: string;\r\n}\r\n\r\nexport class OpenAIFileService {\r\n  private apiKey: string;\r\n  private baseUrl: string;\r\n\r\n  constructor(apiKey: string, baseUrl = 'https://api.openai.com/v1') {\r\n    if (!apiKey) {\r\n      throw new Error('OpenAI API key is required');\r\n    }\r\n    this.apiKey = apiKey;\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  async uploadFile(file: File, purpose: 'fine-tune' | 'assistants' | 'vision'): Promise<OpenAIFileUpload> {\r\n    const formData = new FormData();\r\n    formData.append('purpose', purpose);\r\n    formData.append('file', file);\r\n\r\n    console.log(`Uploading file to OpenAI: ${file.name} for purpose ${purpose}`);\r\n\r\n    const response = await fetch(`${this.baseUrl}/files`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${this.apiKey}`,\r\n      },\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('OpenAI file upload failed:', errorText);\r\n      throw new Error(`OpenAI file upload failed: ${response.statusText} - ${errorText}`);\r\n    }\r\n\r\n    const responseData: OpenAIFileUpload = await response.json();\r\n    console.log('OpenAI file upload successful:', responseData);\r\n    return responseData;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\ProgressMonitorService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4997,5049],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Progress monitoring service for knowledge base operations\n * Provides real-time progress tracking and logging functionality\n */\n\nexport interface ProgressEntry {\n  id: string;\n  timestamp: Date;\n  level: 'info' | 'warning' | 'error' | 'success';\n  operation: string;\n  message: string;\n  progress?: {\n    current: number;\n    total: number;\n    percentage: number;\n  };\n  metadata?: Record<string, unknown>;\n}\n\nexport interface OperationStats {\n  operationId: string;\n  operationType: 'upload' | 'export' | 'import' | 'processing';\n  startTime: Date;\n  endTime?: Date;\n  totalFiles?: number;\n  processedFiles?: number;\n  totalChunks?: number;\n  processedChunks?: number;\n  errors: number;\n  warnings: number;\n  status: 'running' | 'completed' | 'failed' | 'cancelled';\n}\n\nexport type ProgressCallback = (entry: ProgressEntry) => void;\n\nclass ProgressMonitorService {\n  private static instance: ProgressMonitorService;\n  private progressEntries: ProgressEntry[] = [];\n  private activeOperations: Map<string, OperationStats> = new Map();\n  private callbacks: Set<ProgressCallback> = new Set();\n  private maxEntries = 1000; // Limit to prevent memory issues\n\n  private constructor() {}\n\n  public static getInstance(): ProgressMonitorService {\n    if (!ProgressMonitorService.instance) {\n      ProgressMonitorService.instance = new ProgressMonitorService();\n    }\n    return ProgressMonitorService.instance;\n  }\n\n  /**\n   * Subscribe to progress updates\n   */\n  public subscribe(callback: ProgressCallback): () => void {\n    this.callbacks.add(callback);\n    return () => this.callbacks.delete(callback);\n  }\n\n  /**\n   * Start tracking a new operation\n   */\n  public startOperation(\n    operationId: string, \n    operationType: OperationStats['operationType'],\n    metadata?: { totalFiles?: number; totalChunks?: number }\n  ): void {\n    const operation: OperationStats = {\n      operationId,\n      operationType,\n      startTime: new Date(),\n      totalFiles: metadata?.totalFiles,\n      processedFiles: 0,\n      totalChunks: metadata?.totalChunks,\n      processedChunks: 0,\n      errors: 0,\n      warnings: 0,\n      status: 'running'\n    };\n\n    this.activeOperations.set(operationId, operation);\n    \n    this.addEntry({\n      id: this.generateId(),\n      timestamp: new Date(),\n      level: 'info',\n      operation: operationId,\n      message: `Started ${operationType} operation`,\n      metadata: metadata\n    });\n  }\n\n  /**\n   * Update operation progress\n   */\n  public updateProgress(\n    operationId: string,\n    message: string,\n    progress?: { current: number; total: number },\n    level: ProgressEntry['level'] = 'info',\n    metadata?: Record<string, unknown>\n  ): void {\n    const operation = this.activeOperations.get(operationId);\n    if (operation) {\n      if (level === 'error') operation.errors++;\n      if (level === 'warning') operation.warnings++;\n      \n      // Update operation stats based on metadata\n      if (metadata?.processedFiles !== undefined) {\n        operation.processedFiles = metadata.processedFiles as number;\n      }\n      if (metadata?.processedChunks !== undefined) {\n        operation.processedChunks = metadata.processedChunks as number;\n      }\n    }\n\n    const entry: ProgressEntry = {\n      id: this.generateId(),\n      timestamp: new Date(),\n      level,\n      operation: operationId,\n      message,\n      metadata\n    };\n\n    if (progress) {\n      entry.progress = {\n        current: progress.current,\n        total: progress.total,\n        percentage: Math.round((progress.current / progress.total) * 100)\n      };\n    }\n\n    this.addEntry(entry);\n  }\n\n  /**\n   * Complete an operation\n   */\n  public completeOperation(\n    operationId: string, \n    status: 'completed' | 'failed' | 'cancelled',\n    finalMessage?: string,\n    finalStats?: Record<string, unknown>\n  ): void {\n    const operation = this.activeOperations.get(operationId);\n    if (operation) {\n      operation.endTime = new Date();\n      operation.status = status;\n\n      const duration = operation.endTime.getTime() - operation.startTime.getTime();\n      const level = status === 'completed' ? 'success' : status === 'failed' ? 'error' : 'warning';\n      \n      this.addEntry({\n        id: this.generateId(),\n        timestamp: new Date(),\n        level,\n        operation: operationId,\n        message: finalMessage || `Operation ${status}`,\n        metadata: {\n          duration,\n          ...finalStats,\n          totalErrors: operation.errors,\n          totalWarnings: operation.warnings\n        }\n      });\n    }\n  }\n\n  /**\n   * Add a progress entry\n   */\n  private addEntry(entry: ProgressEntry): void {\n    this.progressEntries.push(entry);\n    \n    // Limit entries to prevent memory issues\n    if (this.progressEntries.length > this.maxEntries) {\n      this.progressEntries = this.progressEntries.slice(-this.maxEntries);\n    }\n\n    // Notify all subscribers\n    this.callbacks.forEach(callback => {\n      try {\n        callback(entry);\n      } catch (error) {\n        console.error('Error in progress callback:', error);\n      }\n    });\n  }\n\n  /**\n   * Get all progress entries\n   */\n  public getEntries(): ProgressEntry[] {\n    return [...this.progressEntries];\n  }\n\n  /**\n   * Get entries for a specific operation\n   */\n  public getEntriesForOperation(operationId: string): ProgressEntry[] {\n    return this.progressEntries.filter(entry => entry.operation === operationId);\n  }\n\n  /**\n   * Get active operations\n   */\n  public getActiveOperations(): OperationStats[] {\n    return Array.from(this.activeOperations.values()).filter(op => op.status === 'running');\n  }\n\n  /**\n   * Get operation statistics\n   */\n  public getOperationStats(operationId: string): OperationStats | undefined {\n    return this.activeOperations.get(operationId);\n  }\n\n  /**\n   * Clear all progress entries\n   */\n  public clearEntries(): void {\n    this.progressEntries = [];\n    this.addEntry({\n      id: this.generateId(),\n      timestamp: new Date(),\n      level: 'info',\n      operation: 'system',\n      message: 'Progress log cleared'\n    });\n  }\n\n  /**\n   * Clear completed operations\n   */\n  public clearCompletedOperations(): void {\n    const activeOps = new Map();\n    for (const [id, op] of this.activeOperations) {\n      if (op.status === 'running') {\n        activeOps.set(id, op);\n      }\n    }\n    this.activeOperations = activeOps;\n  }\n\n  /**\n   * Generate a unique ID for entries\n   */\n  private generateId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Format duration in human-readable format\n   */\n  public static formatDuration(milliseconds: number): string {\n    if (milliseconds < 1000) return `${milliseconds}ms`;\n    if (milliseconds < 60000) return `${(milliseconds / 1000).toFixed(1)}s`;\n    if (milliseconds < 3600000) return `${(milliseconds / 60000).toFixed(1)}m`;\n    return `${(milliseconds / 3600000).toFixed(1)}h`;\n  }\n\n  /**\n   * Format file size in human-readable format\n   */\n  public static formatFileSize(bytes: number): string {\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    if (bytes < 1024 * 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;\n  }\n}\n\nexport const progressMonitorService = ProgressMonitorService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\RAGService.ts","messages":[{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"augmentedPrompt\".","line":41,"column":29,"nodeType":"TemplateLiteral","messageId":"doImmediateAction","endLine":41,"endColumn":104,"fix":{"range":[1339,1469],"text":"return `${contextHeader}\\n\\n---\\nContext:\\n${context}\\n---\\n\\nQuestion: ${prompt}`"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { KnowledgeBaseService } from './KnowledgeBaseService';\r\n\r\n/**\r\n * A service to handle Retrieval-Augmented Generation (RAG).\r\n * It enriches user prompts with relevant context from the knowledge base.\r\n */\r\nexport class RAGService {\r\n  private static instance: RAGService;\r\n  private knowledgeBase: KnowledgeBaseService;\r\n\r\n  private constructor() {\r\n    this.knowledgeBase = KnowledgeBaseService.getInstance();\r\n  }\r\n\r\n  /**\r\n   * Gets the singleton instance of the RAGService.\r\n   * @returns {RAGService} The singleton instance.\r\n   */\r\n  public static getInstance(): RAGService {\r\n    if (!RAGService.instance) {\r\n      RAGService.instance = new RAGService();\r\n    }\r\n    return RAGService.instance;\r\n  }\r\n\r\n  /**\r\n   * Augments a user prompt with relevant context from the knowledge base.\r\n   * @param prompt - The original user prompt.\r\n   * @returns {Promise<string>} The augmented prompt with context.\r\n   */\r\n  public async augmentPromptWithContext(prompt: string): Promise<string> {\r\n    const searchResults = await this.knowledgeBase.search(prompt, 3);\r\n\r\n    if (searchResults.length === 0) {\r\n      return prompt; // No relevant context found\r\n    }\r\n\r\n    const contextHeader = 'Use the following context to answer the question below:';\r\n    const context = searchResults.map(r => `- ${r.text}`).join('\\n');\r\n    \r\n    const augmentedPrompt = `${contextHeader}\\n\\n---\\nContext:\\n${context}\\n---\\n\\nQuestion: ${prompt}`;\r\n\r\n    return augmentedPrompt;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\agentService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[947,990],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1019,1081],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1846,1913],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1941,2000],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2047,2096],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2790,2833],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2895,2936],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3027,3074],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":176,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":176,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5447,5504],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":192,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":192,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5993,6169],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":234,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":234,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7269,7320],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9681,9740],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":315,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":315,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10007,10057],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":349,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":349,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11610,11672],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":359,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":359,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11902,11944],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":367,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":367,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12088,12142],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":377,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":377,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12397,12439],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":405,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":405,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13364,13449],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":415,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":415,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13675,13717],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":444,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":444,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14648,14695],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":506,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":506,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17111,17179],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":516,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":516,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17339,17388],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Agent management service for LittleLLM\nimport { \n  AgentConfiguration, \n  AgentData, \n  AgentTemplate, \n  CreateAgentRequest, \n  UpdateAgentRequest,\n  AgentExport,\n  AgentImportResult,\n  AgentValidationResult,\n  AgentTool,\n  PromptGenerationRequest,\n  PromptGenerationResponse,\n  DEFAULT_AGENT_TEMPLATES\n} from '../types/agent';\nimport { mcpService } from './mcpService';\nimport { llmService } from './llmService';\nimport { secureApiKeyService } from './secureApiKeyService';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass AgentService {\n  private agents: AgentConfiguration[] = [];\n  private templates: AgentTemplate[] = [...DEFAULT_AGENT_TEMPLATES];\n  private initialized = false;\n  private listeners: Array<(agents: AgentConfiguration[]) => void> = [];\n\n  constructor() {\n    this.initialize();\n  }\n\n  private async initialize() {\n    if (this.initialized) return;\n\n    try {\n      await this.loadAgents();\n      this.initialized = true;\n      console.log('✅ Agent service initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize agent service:', error);\n      this.agents = [];\n      this.initialized = true;\n    }\n  }\n\n  // Load agents from storage\n  private async loadAgents() {\n    try {\n      if (typeof window !== 'undefined' && window.electronAPI?.getStateFile) {\n        const agentData = await window.electronAPI.getStateFile('agents.json') as AgentData | null;\n        \n        if (agentData) {\n          this.agents = agentData.agents.map(agent => ({\n            ...agent,\n            createdAt: new Date(agent.createdAt),\n            updatedAt: new Date(agent.updatedAt)\n          }));\n          \n          // Merge templates (user templates + defaults)\n          if (agentData.templates) {\n            this.templates = [...DEFAULT_AGENT_TEMPLATES, ...agentData.templates];\n          }\n          \n          console.log(`📋 Loaded ${this.agents.length} agents from storage`);\n        } else {\n          console.log('📋 No existing agents found, starting fresh');\n        }\n      }\n    } catch (error) {\n      console.error('❌ Failed to load agents:', error);\n      throw error;\n    }\n  }\n\n  // Save agents to storage\n  private async saveAgents() {\n    try {\n      if (typeof window !== 'undefined' && window.electronAPI?.saveStateFile) {\n        const agentData: AgentData = {\n          agents: this.agents.map(agent => ({\n            ...agent,\n            createdAt: agent.createdAt,\n            updatedAt: agent.updatedAt\n          })),\n          templates: this.templates.filter(t => !DEFAULT_AGENT_TEMPLATES.find(dt => dt.id === t.id)),\n          version: '1.0.0',\n          lastUpdated: new Date().toISOString()\n        };\n\n        const success = await window.electronAPI.saveStateFile('agents.json', agentData);\n        if (success) {\n          console.log('✅ Agents saved successfully');\n          this.notifyListeners();\n        } else {\n          console.error('❌ Failed to save agents');\n        }\n        return success;\n      }\n      return false;\n    } catch (error) {\n      console.error('❌ Error saving agents:', error);\n      return false;\n    }\n  }\n\n  // Notify listeners of changes\n  private notifyListeners() {\n    this.listeners.forEach(listener => listener([...this.agents]));\n  }\n\n  // Subscribe to agent changes\n  subscribe(listener: (agents: AgentConfiguration[]) => void) {\n    this.listeners.push(listener);\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  // Get all agents\n  async getAgents(): Promise<AgentConfiguration[]> {\n    await this.initialize();\n    return [...this.agents];\n  }\n\n  // Get agent by ID\n  async getAgent(id: string): Promise<AgentConfiguration | null> {\n    await this.initialize();\n    return this.agents.find(agent => agent.id === id) || null;\n  }\n\n  // Get all templates\n  async getTemplates(): Promise<AgentTemplate[]> {\n    return [...this.templates];\n  }\n\n  // Get available tools for agent creation\n  async getAvailableTools(): Promise<AgentTool[]> {\n    const tools: AgentTool[] = [];\n\n    try {\n      // Get MCP tools\n      const mcpTools = await mcpService.getAvailableTools();\n      mcpTools.forEach(tool => {\n        tools.push({\n          name: tool.name,\n          description: tool.description,\n          category: 'mcp',\n          serverId: tool.serverId,\n          enabled: true,\n          inputSchema: tool.inputSchema\n        });\n      });\n\n      // Add internal tools (these would be defined based on your internal command system)\n      const internalTools = [\n        { name: 'file-read', description: 'Read files from the filesystem', category: 'file' as const },\n        { name: 'file-write', description: 'Write files to the filesystem', category: 'file' as const },\n        { name: 'web-search', description: 'Search the web for information', category: 'web' as const },\n        { name: 'screenshot', description: 'Take screenshots', category: 'system' as const },\n        { name: 'memory-store', description: 'Store information in memory', category: 'memory' as const },\n        { name: 'memory-recall', description: 'Recall stored memories', category: 'memory' as const }\n      ];\n\n      internalTools.forEach(tool => {\n        tools.push({\n          name: tool.name,\n          description: tool.description,\n          category: tool.category,\n          enabled: true\n        });\n      });\n\n    } catch (error) {\n      console.error('❌ Failed to get available tools:', error);\n    }\n\n    return tools;\n  }\n\n  // Generate specialized prompt using LLM\n  async generatePrompt(request: PromptGenerationRequest): Promise<PromptGenerationResponse> {\n    try {\n      const metaPrompt = this.createMetaPrompt(request);\n\n      // Get API key from secure storage (same pattern as chatService)\n      const apiKeyData = secureApiKeyService?.getApiKeyData(request.provider);\n      const apiKey = apiKeyData?.apiKey || '';\n      const baseUrl = apiKeyData?.baseUrl || '';\n\n      console.log(`🤖 Agent prompt generation for ${request.provider}:`, {\n        hasApiKey: !!apiKey,\n        keyLength: apiKey?.length || 0,\n        model: request.model\n      });\n\n      // Check if API key is required and missing (same logic as chatService)\n      if (request.provider !== 'ollama' && request.provider !== 'lmstudio' && request.provider !== 'n8n' && !apiKey) {\n        return {\n          success: false,\n          error: `API key is required for ${request.provider}. Please configure it in Settings.`\n        };\n      }\n\n      // Use the LLM service to generate the prompt\n      const response = await llmService.sendMessage(\n        metaPrompt,\n        {\n          provider: request.provider,\n          model: request.model,\n          apiKey: apiKey,\n          baseUrl: baseUrl,\n          temperature: 0.3,\n          maxTokens: 2000,\n          toolCallingEnabled: false\n        },\n        [] // Empty conversation history\n      );\n\n      if (response.content) {\n        return {\n          success: true,\n          generatedPrompt: response.content,\n          tokensUsed: response.usage?.totalTokens\n        };\n      } else {\n        return {\n          success: false,\n          error: 'No content in LLM response'\n        };\n      }\n    } catch (error) {\n      console.error('❌ Error generating prompt:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  // Create meta-prompt for agent prompt generation\n  private createMetaPrompt(request: PromptGenerationRequest): string {\n    const toolDescriptions = request.selectedTools\n      .map(tool => `- ${tool.name}: ${tool.description}`)\n      .join('\\n');\n\n    return `You are an expert AI prompt engineer. Your task is to create a specialized system prompt for an AI agent based on the following requirements:\n\n**Agent Name:** ${request.agentName}\n**Agent Description:** ${request.agentDescription}\n**User's Purpose Description:** ${request.userDescription}\n\n**Available Tools:**\n${toolDescriptions}\n\n**Requirements:**\n1. Create a comprehensive system prompt that defines the agent's role, expertise, and behavior\n2. The prompt should be specific to the agent's intended purpose\n3. Include guidance on how to use the available tools effectively\n4. Maintain a professional but helpful tone\n5. Include any relevant best practices for the agent's domain\n6. The prompt should be 200-500 words\n\n**Output Format:**\nProvide only the system prompt text, without any additional commentary or formatting.`;\n  }\n\n  // Create new agent\n  async createAgent(request: CreateAgentRequest): Promise<string> {\n    await this.initialize();\n\n    const agentId = uuidv4();\n    const now = new Date();\n\n    // Get available tools and filter selected ones\n    const availableTools = await this.getAvailableTools();\n    const selectedTools = availableTools.filter(tool => \n      request.selectedTools.includes(tool.name)\n    );\n\n    const agent: AgentConfiguration = {\n      id: agentId,\n      name: request.name,\n      description: request.description,\n      icon: request.icon || '🤖',\n      defaultProvider: request.defaultProvider,\n      defaultModel: request.defaultModel,\n      systemPrompt: '', // Will be generated\n      userDescription: request.userDescription,\n      selectedTools,\n      toolCallingEnabled: selectedTools.length > 0,\n      enabledMCPServers: request.enabledMCPServers,\n      temperature: request.temperature || 0.7,\n      maxTokens: request.maxTokens || 4000,\n      createdAt: now,\n      updatedAt: now,\n      version: '1.0.0',\n      tags: request.tags || []\n    };\n\n    this.agents.push(agent);\n    await this.saveAgents();\n\n    console.log(`✅ Created agent: ${agent.name} (${agentId})`);\n    return agentId;\n  }\n\n  // Update existing agent\n  async updateAgent(request: UpdateAgentRequest): Promise<boolean> {\n    await this.initialize();\n\n    const agentIndex = this.agents.findIndex(agent => agent.id === request.id);\n    if (agentIndex === -1) {\n      console.error(`❌ Agent not found: ${request.id}`);\n      return false;\n    }\n\n    const agent = this.agents[agentIndex];\n    const updates: Partial<AgentConfiguration> = {\n      updatedAt: new Date()\n    };\n\n    // Update fields if provided\n    if (request.name !== undefined) updates.name = request.name;\n    if (request.description !== undefined) updates.description = request.description;\n    if (request.icon !== undefined) updates.icon = request.icon;\n    if (request.userDescription !== undefined) updates.userDescription = request.userDescription;\n    if (request.defaultProvider !== undefined) updates.defaultProvider = request.defaultProvider;\n    if (request.defaultModel !== undefined) updates.defaultModel = request.defaultModel;\n    if (request.systemPrompt !== undefined) updates.systemPrompt = request.systemPrompt;\n    if (request.temperature !== undefined) updates.temperature = request.temperature;\n    if (request.maxTokens !== undefined) updates.maxTokens = request.maxTokens;\n    if (request.tags !== undefined) updates.tags = request.tags;\n    if (request.enabledMCPServers !== undefined) updates.enabledMCPServers = request.enabledMCPServers;\n\n    // Update selected tools if provided\n    if (request.selectedTools !== undefined) {\n      const availableTools = await this.getAvailableTools();\n      updates.selectedTools = availableTools.filter(tool => \n        request.selectedTools!.includes(tool.name)\n      );\n      updates.toolCallingEnabled = updates.selectedTools.length > 0;\n    }\n\n    this.agents[agentIndex] = { ...agent, ...updates };\n    await this.saveAgents();\n\n    console.log(`✅ Updated agent: ${agent.name} (${request.id})`);\n    return true;\n  }\n\n  // Delete agent\n  async deleteAgent(id: string): Promise<boolean> {\n    await this.initialize();\n\n    const agentIndex = this.agents.findIndex(agent => agent.id === id);\n    if (agentIndex === -1) {\n      console.error(`❌ Agent not found: ${id}`);\n      return false;\n    }\n\n    const agent = this.agents[agentIndex];\n    this.agents.splice(agentIndex, 1);\n    await this.saveAgents();\n\n    console.log(`✅ Deleted agent: ${agent.name} (${id})`);\n    return true;\n  }\n\n  // Duplicate agent\n  async duplicateAgent(id: string, newName?: string): Promise<string | null> {\n    await this.initialize();\n\n    const originalAgent = this.agents.find(agent => agent.id === id);\n    if (!originalAgent) {\n      console.error(`❌ Agent not found: ${id}`);\n      return null;\n    }\n\n    const duplicateRequest: CreateAgentRequest = {\n      name: newName || `${originalAgent.name} (Copy)`,\n      description: originalAgent.description,\n      icon: originalAgent.icon,\n      userDescription: originalAgent.userDescription || '',\n      selectedTools: originalAgent.selectedTools.map(tool => tool.name),\n      enabledMCPServers: [...originalAgent.enabledMCPServers],\n      defaultProvider: originalAgent.defaultProvider,\n      defaultModel: originalAgent.defaultModel,\n      temperature: originalAgent.temperature,\n      maxTokens: originalAgent.maxTokens,\n      tags: [...(originalAgent.tags || [])]\n    };\n\n    const newAgentId = await this.createAgent(duplicateRequest);\n    \n    // Copy the system prompt if it exists\n    if (originalAgent.systemPrompt) {\n      await this.updateAgent({\n        id: newAgentId,\n        systemPrompt: originalAgent.systemPrompt\n      });\n    }\n\n    console.log(`✅ Duplicated agent: ${originalAgent.name} -> ${duplicateRequest.name}`);\n    return newAgentId;\n  }\n\n  // Export agent to JSON\n  async exportAgent(id: string): Promise<AgentExport | null> {\n    await this.initialize();\n\n    const agent = this.agents.find(a => a.id === id);\n    if (!agent) {\n      console.error(`❌ Agent not found: ${id}`);\n      return null;\n    }\n\n    const exportData: AgentExport = {\n      agent: {\n        name: agent.name,\n        description: agent.description,\n        icon: agent.icon,\n        defaultProvider: agent.defaultProvider,\n        defaultModel: agent.defaultModel,\n        systemPrompt: agent.systemPrompt,\n        generatedPrompt: agent.generatedPrompt,\n        userDescription: agent.userDescription,\n        selectedTools: agent.selectedTools,\n        toolCallingEnabled: agent.toolCallingEnabled,\n        enabledMCPServers: agent.enabledMCPServers,\n        temperature: agent.temperature,\n        maxTokens: agent.maxTokens,\n        version: agent.version,\n        tags: agent.tags,\n        isTemplate: agent.isTemplate\n      },\n      exportedAt: new Date().toISOString(),\n      exportVersion: '1.0.0',\n      requiredTools: agent.selectedTools.map(tool => tool.name),\n      requiredMCPServers: agent.enabledMCPServers\n    };\n\n    console.log(`✅ Exported agent: ${agent.name}`);\n    return exportData;\n  }\n\n  // Import agent from JSON\n  async importAgent(exportData: AgentExport, options?: { overwriteName?: string }): Promise<AgentImportResult> {\n    await this.initialize();\n\n    try {\n      // Validate export data\n      if (!exportData.agent || !exportData.agent.name) {\n        return {\n          success: false,\n          errors: ['Invalid export data: missing agent information']\n        };\n      }\n\n      // Check for missing tools and MCP servers\n      const availableTools = await this.getAvailableTools();\n      const availableToolNames = availableTools.map(tool => tool.name);\n      const missingTools = exportData.requiredTools.filter(tool => !availableToolNames.includes(tool));\n\n      const mcpServers = await mcpService.getServers();\n      const availableMCPServers = mcpServers.map(server => server.id);\n      const missingMCPServers = exportData.requiredMCPServers.filter(server => !availableMCPServers.includes(server));\n\n      // Create import request\n      const importRequest: CreateAgentRequest = {\n        name: options?.overwriteName || exportData.agent.name,\n        description: exportData.agent.description,\n        icon: exportData.agent.icon,\n        userDescription: exportData.agent.userDescription || '',\n        selectedTools: exportData.agent.selectedTools\n          .filter(tool => availableToolNames.includes(tool.name))\n          .map(tool => tool.name),\n        enabledMCPServers: exportData.agent.enabledMCPServers.filter(server => availableMCPServers.includes(server)),\n        defaultProvider: exportData.agent.defaultProvider,\n        defaultModel: exportData.agent.defaultModel,\n        temperature: exportData.agent.temperature,\n        maxTokens: exportData.agent.maxTokens,\n        tags: exportData.agent.tags\n      };\n\n      // Create the agent\n      const agentId = await this.createAgent(importRequest);\n\n      // Update with system prompt if available\n      if (exportData.agent.systemPrompt) {\n        await this.updateAgent({\n          id: agentId,\n          systemPrompt: exportData.agent.systemPrompt\n        });\n      }\n\n      const warnings: string[] = [];\n      if (missingTools.length > 0) {\n        warnings.push(`Some tools are not available: ${missingTools.join(', ')}`);\n      }\n      if (missingMCPServers.length > 0) {\n        warnings.push(`Some MCP servers are not configured: ${missingMCPServers.join(', ')}`);\n      }\n\n      console.log(`✅ Imported agent: ${importRequest.name} (${agentId})`);\n      return {\n        success: true,\n        agentId,\n        warnings,\n        missingTools,\n        missingMCPServers\n      };\n\n    } catch (error) {\n      console.error('❌ Error importing agent:', error);\n      return {\n        success: false,\n        errors: [error instanceof Error ? error.message : 'Unknown error']\n      };\n    }\n  }\n\n  // Validate agent configuration\n  async validateAgent(id: string): Promise<AgentValidationResult> {\n    await this.initialize();\n\n    const agent = this.agents.find(a => a.id === id);\n    if (!agent) {\n      return {\n        isValid: false,\n        errors: ['Agent not found'],\n        warnings: [],\n        missingDependencies: { providers: [], models: [], tools: [], mcpServers: [] }\n      };\n    }\n\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const missingDependencies = {\n      providers: [] as string[],\n      models: [] as string[],\n      tools: [] as string[],\n      mcpServers: [] as string[]\n    };\n\n    // Validate basic fields\n    if (!agent.name.trim()) errors.push('Agent name is required');\n    if (!agent.description.trim()) warnings.push('Agent description is empty');\n    if (!agent.systemPrompt.trim()) warnings.push('Agent system prompt is empty');\n\n    // Validate tools\n    const availableTools = await this.getAvailableTools();\n    const availableToolNames = availableTools.map(tool => tool.name);\n    agent.selectedTools.forEach(tool => {\n      if (!availableToolNames.includes(tool.name)) {\n        missingDependencies.tools.push(tool.name);\n      }\n    });\n\n    // Validate MCP servers\n    const mcpServers = await mcpService.getServers();\n    const availableMCPServers = mcpServers.map(server => server.id);\n    agent.enabledMCPServers.forEach(serverId => {\n      if (!availableMCPServers.includes(serverId)) {\n        missingDependencies.mcpServers.push(serverId);\n      }\n    });\n\n    // Add warnings for missing dependencies\n    if (missingDependencies.tools.length > 0) {\n      warnings.push(`Missing tools: ${missingDependencies.tools.join(', ')}`);\n    }\n    if (missingDependencies.mcpServers.length > 0) {\n      warnings.push(`Missing MCP servers: ${missingDependencies.mcpServers.join(', ')}`);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      missingDependencies\n    };\n  }\n}\n\nexport const agentService = new AgentService();\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\automaticMemoryService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1276,1355],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1516,1575],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1903,2129],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2178,2244],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2426,2493],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2674,2867],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3502,3582],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4083,4145],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4632,4901],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4948,5009],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5130,5179],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5367,5452],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6175,6251],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":204,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":204,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6300,6362],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6446,6499],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 25 to the 15 allowed.","line":301,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":301,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":323,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":323,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10175,10249],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":340,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":340,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10813,10883],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":354,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":354,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11423,11489],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":488,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":488,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15802,15872],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Automatic Memory Service for LiteLLM\n * Handles automatic memory search and storage without requiring explicit tool calls\n */\n\nimport { memoryService } from './memoryService';\nimport { memoryContextService } from './memoryContextService';\nimport { MemoryType, MemoryEntry } from '../types/memory';\n\nexport interface AutoMemoryConfig {\n  enableAutoSearch: boolean;\n  enableAutoSave: boolean;\n  searchThreshold: number; // Minimum relevance score to include memories\n  saveThreshold: number; // Minimum confidence to auto-save\n  maxContextMemories: number;\n  autoSaveTypes: MemoryType[];\n}\n\nexport interface MemoryEnhancedPrompt {\n  enhancedPrompt: string;\n  memoriesUsed: MemoryEntry[];\n  originalPrompt: string;\n}\n\nexport interface AutoSaveCandidate {\n  type: MemoryType;\n  title: string;\n  content: string;\n  tags: string[];\n  confidence: number;\n  reason: string;\n}\n\nclass AutomaticMemoryService {\n  private readonly DEFAULT_CONFIG: AutoMemoryConfig = {\n    enableAutoSearch: true,\n    enableAutoSave: true,\n    searchThreshold: 0.3,\n    saveThreshold: 0.7,\n    maxContextMemories: 5,\n    autoSaveTypes: ['user_preference', 'solution', 'project_knowledge', 'code_snippet']\n  };\n\n  private config: AutoMemoryConfig = { ...this.DEFAULT_CONFIG };\n\n  constructor() {\n    console.log('🧠 AutomaticMemoryService initialized with config:', this.config);\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<AutoMemoryConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    console.log('🧠 Auto-memory config updated:', this.config);\n  }\n\n  /**\n   * Automatically enhance a prompt with relevant memories\n   */\n  async enhancePromptWithMemories(\n    originalPrompt: string,\n    userMessage: string,\n    conversationHistory: Array<{role: string, content: string}> = [],\n    conversationId?: string,\n    projectId?: string\n  ): Promise<MemoryEnhancedPrompt> {\n    console.log('🧠 AutoMemoryService.enhancePromptWithMemories called with:', {\n      enableAutoSearch: this.config.enableAutoSearch,\n      userMessage: userMessage.substring(0, 100),\n      conversationId,\n      projectId\n    });\n\n    if (!this.config.enableAutoSearch) {\n      console.log('🧠 Auto-search disabled, returning original prompt');\n      return {\n        enhancedPrompt: originalPrompt,\n        memoriesUsed: [],\n        originalPrompt\n      };\n    }\n\n    try {\n      // Get relevant memories automatically\n      console.log('🧠 Calling memoryContextService.getMemoryContext...');\n      const memoryContext = await memoryContextService.getMemoryContext(\n        userMessage,\n        conversationId,\n        projectId,\n        conversationHistory\n      );\n      console.log('🧠 Memory context result:', {\n        relevantMemoriesCount: memoryContext.relevantMemories.length,\n        contextSummary: memoryContext.contextSummary.substring(0, 100)\n      });\n\n      // Filter memories by relevance threshold\n      const relevantMemories = memoryContext.relevantMemories.filter(\n        memory => memory.relevanceScore >= this.config.searchThreshold\n      ).slice(0, this.config.maxContextMemories);\n\n      if (relevantMemories.length === 0) {\n        return {\n          enhancedPrompt: originalPrompt,\n          memoriesUsed: [],\n          originalPrompt\n        };\n      }\n\n      // Build enhanced prompt with memory context\n      const memorySection = this.buildMemorySection(relevantMemories);\n      const enhancedPrompt = this.injectMemoryIntoPrompt(originalPrompt, memorySection);\n\n      console.log(`🧠 Auto-enhanced prompt with ${relevantMemories.length} memories`);\n\n      return {\n        enhancedPrompt,\n        memoriesUsed: relevantMemories.map(m => ({\n          id: m.id,\n          type: m.type,\n          title: m.title,\n          content: m.content,\n          metadata: {\n            tags: m.tags,\n            timestamp: new Date(),\n            relevanceScore: m.relevanceScore\n          },\n          searchableText: '',\n          createdAt: new Date(),\n          updatedAt: new Date()\n        })),\n        originalPrompt\n      };\n    } catch (error) {\n      console.error('Error enhancing prompt with memories:', error);\n      return {\n        enhancedPrompt: originalPrompt,\n        memoriesUsed: [],\n        originalPrompt\n      };\n    }\n  }\n\n  /**\n   * Automatically analyze and save useful information from conversations\n   */\n  async autoSaveFromConversation(\n    userMessage: string,\n    aiResponse: string,\n    conversationHistory: Array<{role: string, content: string}> = [],\n    conversationId?: string,\n    projectId?: string\n  ): Promise<{ saved: number; candidates: AutoSaveCandidate[] }> {\n    console.log('🧠 AutoMemoryService.autoSaveFromConversation called with:', {\n      enableAutoSave: this.config.enableAutoSave,\n      userMessage: userMessage.substring(0, 100),\n      aiResponse: aiResponse.substring(0, 100),\n      conversationId,\n      projectId\n    });\n\n    if (!this.config.enableAutoSave) {\n      console.log('🧠 Auto-save disabled, returning empty result');\n      return { saved: 0, candidates: [] };\n    }\n\n    try {\n      // Analyze conversation for save-worthy content\n      console.log('🧠 Identifying save candidates...');\n      const candidates = await this.identifySaveCandidates(\n        userMessage,\n        aiResponse,\n        conversationHistory,\n        conversationId,\n        projectId\n      );\n      console.log('🧠 Found candidates:', candidates.length, candidates.map(c => c.title));\n\n      // Filter by confidence threshold\n      const highConfidenceCandidates = candidates.filter(\n        candidate => candidate.confidence >= this.config.saveThreshold &&\n        this.config.autoSaveTypes.includes(candidate.type)\n      );\n\n      let saved = 0;\n      for (const candidate of highConfidenceCandidates) {\n        try {\n          const result = await memoryService.storeMemory({\n            type: candidate.type,\n            title: candidate.title,\n            content: candidate.content,\n            tags: [...candidate.tags, 'auto-saved'],\n            conversationId,\n            projectId,\n            source: 'auto_memory'\n          });\n\n          if (result.success) {\n            saved++;\n            console.log(`🧠 Auto-saved memory: ${candidate.title} (${candidate.type})`);\n          }\n        } catch (error) {\n          console.error('Failed to auto-save memory candidate:', error);\n        }\n      }\n\n      return { saved, candidates };\n    } catch (error) {\n      console.error('Error in auto-save analysis:', error);\n      return { saved: 0, candidates: [] };\n    }\n  }\n\n  /**\n   * Build memory section for prompt injection\n   */\n  private buildMemorySection(memories: Array<{\n    id: string;\n    type: MemoryType;\n    title: string;\n    content: string;\n    relevanceScore: number;\n    tags: string[];\n  }>): string {\n    if (memories.length === 0) return '';\n\n    const memoryEntries = memories.map((memory, index) => {\n      const typeLabel = this.getTypeLabel(memory.type);\n      return `${index + 1}. **${memory.title}** (${typeLabel})\n   ${memory.content}\n   Tags: ${memory.tags.join(', ')}`;\n    }).join('\\n\\n');\n\n    return `## Relevant Context from Memory\n\nYou have access to the following relevant information from previous conversations:\n\n${memoryEntries}\n\nUse this context to provide more informed and personalized responses. Reference this information naturally when relevant, but don't mention the memory system explicitly.`;\n  }\n\n  /**\n   * Inject memory section into system prompt\n   */\n  private injectMemoryIntoPrompt(originalPrompt: string, memorySection: string): string {\n    // Insert memory section before any existing tool instructions\n    const toolInstructionMarkers = [\n      'You have access to the following tools',\n      'Available tools:',\n      'Tool usage:',\n      'Functions available:'\n    ];\n\n    for (const marker of toolInstructionMarkers) {\n      const index = originalPrompt.indexOf(marker);\n      if (index !== -1) {\n        return originalPrompt.slice(0, index) + memorySection + '\\n\\n' + originalPrompt.slice(index);\n      }\n    }\n\n    // If no tool section found, append to end\n    return originalPrompt + '\\n\\n' + memorySection;\n  }\n\n  /**\n   * Identify candidates for automatic saving\n   */\n  private async identifySaveCandidates(\n    userMessage: string,\n    aiResponse: string,\n    conversationHistory: Array<{role: string, content: string}>,\n    conversationId?: string,\n    projectId?: string\n  ): Promise<AutoSaveCandidate[]> {\n    const candidates: AutoSaveCandidate[] = [];\n\n    // Analyze user message for preferences\n    const preferenceCandidate = this.analyzeForPreferences(userMessage);\n    if (preferenceCandidate) candidates.push(preferenceCandidate);\n\n    // Analyze AI response for solutions\n    const solutionCandidate = this.analyzeForSolutions(userMessage, aiResponse);\n    if (solutionCandidate) candidates.push(solutionCandidate);\n\n    // Analyze for code snippets\n    const codeCandidate = this.analyzeForCodeSnippets(aiResponse);\n    if (codeCandidate) candidates.push(codeCandidate);\n\n    // Analyze for project knowledge\n    const knowledgeCandidate = this.analyzeForProjectKnowledge(userMessage, aiResponse, projectId);\n    if (knowledgeCandidate) candidates.push(knowledgeCandidate);\n\n    return candidates;\n  }\n\n  /**\n   * Analyze message for user preferences\n   */\n  private analyzeForPreferences(userMessage: string): AutoSaveCandidate | null {\n    const preferenceIndicators = [\n      'i prefer', 'i like', 'i want', 'i always', 'i usually',\n      'my preference', 'i tend to', 'i typically', 'i favor',\n      'please remember', 'remember that i', 'note that i'\n    ];\n\n    // Add identity/name indicators\n    const identityIndicators = [\n      'my name is', 'i am', 'i\\'m', 'call me', 'my name\\'s',\n      'i go by', 'you can call me', 'my birthday is', 'i was born'\n    ];\n\n    const message = userMessage.toLowerCase();\n    const hasPreferenceIndicator = preferenceIndicators.some(indicator =>\n      message.includes(indicator)\n    );\n    const hasIdentityIndicator = identityIndicators.some(indicator =>\n      message.includes(indicator)\n    );\n\n    if (!hasPreferenceIndicator && !hasIdentityIndicator) {\n      console.log('🧠 No preference or identity indicators found in:', message);\n      return null;\n    }\n\n    // Extract preference or identity content\n    const sentences = userMessage.split(/[.!?]+/);\n    const allIndicators = [...preferenceIndicators, ...identityIndicators];\n    const relevantSentences = sentences.filter(sentence =>\n      allIndicators.some(indicator =>\n        sentence.toLowerCase().includes(indicator)\n      )\n    );\n\n    if (relevantSentences.length === 0) {\n      // If no sentences match, use the whole message if it's short\n      if (userMessage.length < 100) {\n        const content = userMessage.trim();\n        console.log('🧠 Using whole message as preference content:', content);\n        return {\n          type: 'user_preference',\n          title: `User Info: ${content.slice(0, 50)}${content.length > 50 ? '...' : ''}`,\n          content,\n          tags: hasIdentityIndicator ? ['identity', 'user-info'] : ['preference', 'user-stated'],\n          confidence: hasIdentityIndicator ? 0.9 : 0.8,\n          reason: hasIdentityIndicator ? 'User provided identity information' : 'User explicitly stated a preference'\n        };\n      }\n      return null;\n    }\n\n    const content = relevantSentences.join('. ').trim();\n    console.log('🧠 Extracted preference/identity content:', content);\n\n    return {\n      type: 'user_preference',\n      title: hasIdentityIndicator ?\n        `User Identity: ${content.slice(0, 50)}${content.length > 50 ? '...' : ''}` :\n        `User Preference: ${content.slice(0, 50)}${content.length > 50 ? '...' : ''}`,\n      content,\n      tags: hasIdentityIndicator ? ['identity', 'user-info'] : ['preference', 'user-stated'],\n      confidence: hasIdentityIndicator ? 0.9 : 0.8,\n      reason: hasIdentityIndicator ? 'User provided identity information' : 'User explicitly stated a preference'\n    };\n  }\n\n  /**\n   * Analyze for successful solutions\n   */\n  private analyzeForSolutions(userMessage: string, aiResponse: string): AutoSaveCandidate | null {\n    const problemIndicators = ['error', 'issue', 'problem', 'bug', 'fix', 'help', 'how to'];\n    const solutionIndicators = ['here\\'s how', 'you can', 'try this', 'solution', 'fix this'];\n\n    const userLower = userMessage.toLowerCase();\n    const responseLower = aiResponse.toLowerCase();\n\n    const hasProblem = problemIndicators.some(indicator => userLower.includes(indicator));\n    const hasSolution = solutionIndicators.some(indicator => responseLower.includes(indicator));\n\n    if (!hasProblem || !hasSolution) return null;\n\n    // Extract problem and solution\n    const problemSummary = userMessage.slice(0, 100) + (userMessage.length > 100 ? '...' : '');\n    \n    return {\n      type: 'solution',\n      title: `Solution: ${problemSummary}`,\n      content: `Problem: ${userMessage}\\n\\nSolution: ${aiResponse}`,\n      tags: ['solution', 'problem-solving'],\n      confidence: 0.7,\n      reason: 'Conversation contains problem and solution pattern'\n    };\n  }\n\n  /**\n   * Analyze for code snippets\n   */\n  private analyzeForCodeSnippets(aiResponse: string): AutoSaveCandidate | null {\n    const codeBlockRegex = /```[\\s\\S]*?```/g;\n    const codeBlocks = aiResponse.match(codeBlockRegex);\n\n    if (!codeBlocks || codeBlocks.length === 0) return null;\n\n    // Only save substantial code blocks\n    const substantialCode = codeBlocks.find(block => \n      block.split('\\n').length > 3 && block.length > 100\n    );\n\n    if (!substantialCode) return null;\n\n    // Extract language and create title\n    const languageMatch = substantialCode.match(/```(\\w+)/);\n    const language = languageMatch ? languageMatch[1] : 'code';\n    \n    return {\n      type: 'code_snippet',\n      title: `${language.charAt(0).toUpperCase() + language.slice(1)} Code Snippet`,\n      content: substantialCode,\n      tags: ['code', language, 'snippet'],\n      confidence: 0.6,\n      reason: 'Response contains substantial code block'\n    };\n  }\n\n  /**\n   * Analyze for project knowledge\n   */\n  private analyzeForProjectKnowledge(\n    userMessage: string, \n    aiResponse: string, \n    projectId?: string\n  ): AutoSaveCandidate | null {\n    if (!projectId) return null;\n\n    const knowledgeIndicators = [\n      'architecture', 'design', 'structure', 'database', 'api',\n      'requirements', 'specification', 'documentation', 'workflow'\n    ];\n\n    const combinedText = (userMessage + ' ' + aiResponse).toLowerCase();\n    const hasKnowledgeIndicator = knowledgeIndicators.some(indicator => \n      combinedText.includes(indicator)\n    );\n\n    if (!hasKnowledgeIndicator) return null;\n\n    const title = `Project Knowledge: ${userMessage.slice(0, 50)}...`;\n    \n    return {\n      type: 'project_knowledge',\n      title,\n      content: `Context: ${userMessage}\\n\\nInformation: ${aiResponse}`,\n      tags: ['project', 'knowledge', projectId],\n      confidence: 0.5,\n      reason: 'Conversation contains project-related knowledge'\n    };\n  }\n\n  /**\n   * Get human-readable type label\n   */\n  private getTypeLabel(type: MemoryType): string {\n    const labels = {\n      user_preference: 'User Preference',\n      conversation_context: 'Conversation',\n      project_knowledge: 'Project Knowledge',\n      code_snippet: 'Code Snippet',\n      solution: 'Solution',\n      general: 'General'\n    };\n    return labels[type] || type;\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): AutoMemoryConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Enable/disable automatic memory features\n   */\n  setEnabled(autoSearch: boolean, autoSave: boolean): void {\n    this.config.enableAutoSearch = autoSearch;\n    this.config.enableAutoSave = autoSave;\n    console.log(`🧠 Auto-memory: search=${autoSearch}, save=${autoSave}`);\n  }\n}\n\n// Export singleton instance\nexport const automaticMemoryService = new AutomaticMemoryService();\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\chatService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1172,1222],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1373,1456],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3485,3589],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3792,3864],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3996,4060],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4141,4183],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 44 to the 15 allowed.","line":144,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":144,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":161,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":161,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5277,5352],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":168,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":168,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5682,5803],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":171,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":171,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5867,5941],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":176,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":176,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6192,6259],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6912,6966],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":184,"column":138,"nodeType":"Literal","endLine":184,"endColumn":153},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7430,7510],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":192,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":192,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7761,7807],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8345,8414],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9734,9799],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 87 to the 15 allowed.","line":258,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":258,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":294,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":294,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12075,12163],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12779,12903],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":329,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":329,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13891,13973],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":357,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":357,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15266,15537],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":364,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":364,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15571,15633],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":370,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":370,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15796,15845],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":381,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":381,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16292,16389],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":384,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":384,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16446,16562],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":387,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":387,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16644,16705],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":391,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":391,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16822,16877],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":393,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":393,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16961,17023],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":394,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":394,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17035,17132],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":398,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":398,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17240,17480],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":413,"column":36,"nodeType":"Literal","endLine":413,"endColumn":74},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":419,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":419,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18130,18355],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":424,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":424,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[18402,18460],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":426,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":426,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18525,18578],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":431,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":431,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18773,18860],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":438,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":438,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19425,19460],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":446,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":446,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19752,19807],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":451,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":451,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20055,20134],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":454,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":454,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20254,20308],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":457,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":457,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20475,20544],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":466,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":466,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20761,20868],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":469,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":469,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20960,21024],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":475,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":475,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21224,21299],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":479,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":479,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21524,21577],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":486,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":486,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21809,21880],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":499,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":499,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22374,22864],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":528,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":528,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23590,23825],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":541,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":541,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24173,24308],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":550,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":550,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24551,24783],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":569,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":569,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25599,25768],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":571,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":571,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25837,25901],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":585,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":585,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26297,26390],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":587,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":587,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26512,26578],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":591,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":591,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26651,26703],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":602,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":602,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27096,27407],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":625,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":625,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28096,28262],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":640,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":640,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[28643,28688],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":669,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":669,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29588,29818],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":677,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":677,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[29883,29929],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":702,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":702,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[30886,30971],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 39 to the 15 allowed.","line":784,"column":3,"nodeType":null,"messageId":"refactorFunction","endLine":784,"endColumn":24},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":813,"column":51,"nodeType":"Literal","endLine":813,"endColumn":63},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":850,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":850,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[36194,36253],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":874,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":874,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[37004,37052],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":897,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":897,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37625,37685],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":907,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":907,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37958,38030],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":909,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":909,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[38061,38128],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":936,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":936,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38992,39046],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":940,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":940,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[39148,39193],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":942,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":942,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[39258,39320],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":956,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":956,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[39822,39879],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":970,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":970,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[40364,40438],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":972,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":972,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[40519,40578],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":68,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { llmService, type LLMSettings } from './llmService';\r\nimport { sessionService } from './sessionService';\r\nimport { settingsService } from './settingsService';\r\nimport { debugLogger } from './debugLogger';\r\n\r\n// Conditionally import services only in browser environment\r\nlet secureApiKeyService: {\r\n  getApiKey: (provider: string) => string | null;\r\n  getApiKeyData: (provider: string) => { apiKey: string; baseUrl?: string; lastSelectedModel?: string } | null;\r\n  forceReloadApiKeys: () => Promise<void>;\r\n} | null = null;\r\nlet documentParserService: {\r\n  parseDocument: (file: File) => Promise<{ text: string; metadata?: { format?: string; success?: boolean; error?: string; sheets?: string[]; eventCount?: number; title?: string; [key: string]: unknown } }>;\r\n  getStats: () => { totalAttempts: number; successfulParses: number; failedParses: number; fallbacksUsed: number; averageProcessingTime: number; errorsByType: Record<string, number> };\r\n  resetStats: () => void;\r\n} | null = null;\r\n\r\nif (typeof window !== 'undefined') {\r\n  import('./secureApiKeyService').then(module => {\r\n    secureApiKeyService = module.secureApiKeyService;\r\n  }).catch(() => {\r\n    console.warn('secureApiKeyService not available');\r\n  });\r\n\r\n  import('./DocumentParserService').then(module => {\r\n    documentParserService = module.documentParserService;\r\n  }).catch(error => {\r\n    console.warn('DocumentParserService not available in browser environment:', error);\r\n  });\r\n}\r\n\r\n// Type for content array items used in vision API\r\nexport interface ContentItem {\r\n  type: 'text' | 'image_url' | 'document';\r\n  text?: string;\r\n  image_url?: {\r\n    url: string;\r\n  };\r\n  document?: {\r\n    name: string;\r\n    media_type: string;\r\n    data: string;\r\n  };\r\n}\r\n\r\n// Type for tool call arguments - can be any valid JSON value\r\ntype ToolCallArguments = Record<string, unknown>;\r\n\r\nexport interface Source {\r\n  type: 'knowledge_base' | 'web' | 'document';\r\n  title: string;\r\n  url?: string;\r\n  score?: number;\r\n  snippet?: string;\r\n}\r\n\r\nexport interface Message {\r\n  id: string;\r\n  content: string | Array<ContentItem>;\r\n  role: 'user' | 'assistant';\r\n  timestamp: Date;\r\n  isThinking?: boolean; // Mark message as a thinking indicator bubble\r\n  usage?: {\r\n    promptTokens: number;\r\n    completionTokens: number;\r\n    totalTokens: number;\r\n  };\r\n  cost?: {\r\n    inputCost: number;\r\n    outputCost: number;\r\n    totalCost: number;\r\n    currency: string;\r\n    provider: string;\r\n    model: string;\r\n  };\r\n  timing?: {\r\n    startTime: number;\r\n    endTime: number;\r\n    duration: number; // in milliseconds\r\n    tokensPerSecond?: number;\r\n  };\r\n  toolCalls?: Array<{\r\n    id: string;\r\n    name: string;\r\n    arguments: ToolCallArguments;\r\n    result?: string;\r\n    error?: boolean;\r\n  }>;\r\n  sources?: Source[];\r\n}\r\n\r\n// Import shared types\r\nimport type { ProviderSettings, ChatSettings, ProvidersConfig } from '../types/settings';\r\n\r\n// Re-export for convenience\r\nexport type { ProviderSettings, ChatSettings, ProvidersConfig };\r\n\r\n// RAG result types\r\ninterface RAGResult {\r\n  text: string;\r\n  source: string;\r\n  score?: number;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const chatService = {\r\n  // Helper function to check if a model supports vision\r\n  supportsVision(provider: string, model: string): boolean {\r\n    // Assume all models support vision by default\r\n    // Let the individual APIs return errors if they don't support vision\r\n    // This is more robust and future-proof than maintaining model lists\r\n\r\n    console.log(`Vision support check - Provider: ${provider}, Model: ${model}, Supported: true (assumed)`);\r\n    return true;\r\n  },\r\n\r\n\r\n\r\n  // Helper function to convert file to base64 (no processing needed)\r\n  fileToBase64(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      console.log('Reading file as base64:', file.name, file.type, file.size);\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const result = reader.result as string;\r\n        console.log('File converted to base64, length:', result.length);\r\n        resolve(result);\r\n      };\r\n      reader.onerror = error => {\r\n        console.error('FileReader error:', error);\r\n        reject(error);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  },\r\n\r\n  // Helper function to extract text from files\r\n  async extractTextFromFile(file: File): Promise<string> {\r\n    const fileExtension = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\r\n\r\n    // Check if this is a supported document format for parsing\r\n    const supportedFormats = ['.docx', '.doc', '.xlsx', '.xls', '.ods', '.csv', '.html', '.htm', '.ics', '.json', '.rtf', '.xml', '.pptx', '.ppt'];\r\n\r\n    if (file.type === 'text/plain' || fileExtension === '.txt' || fileExtension === '.md' || fileExtension === '.log') {\r\n      // For plain text files, return content directly\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = () => resolve(reader.result as string);\r\n        reader.onerror = error => reject(error);\r\n        reader.readAsText(file);\r\n      });\r\n    } else if (file.type === 'application/pdf') {\r\n      // Parse PDF using Electron main process (same working method as knowledge base)\r\n      try {\r\n        console.log('📄 Parsing PDF file using Electron main process:', file.name);\r\n\r\n        // Check if we're in Electron environment with API access\r\n        if (typeof window !== 'undefined' && window.electronAPI && window.electronAPI.parsePdfFile) {\r\n          const fileBuffer = await file.arrayBuffer();\r\n          const result = await window.electronAPI.parsePdfFile(fileBuffer, file.name);\r\n\r\n          console.log('📄 PDF parsing result:', { success: result.success, textLength: result.text?.length, error: result.error });\r\n\r\n          if (result.success && result.text) {\r\n            console.log(`📄 PDF content preview: \"${result.text.substring(0, 200)}\"`);\r\n\r\n            // Check if this is actually the fallback error message\r\n            if (result.text.includes('PDF parsing module could not be loaded') ||\r\n                result.text.includes('PDF text extraction is not available')) {\r\n              console.error('📄 PDF parsing failed - received fallback message');\r\n              return `[PDF Document: ${file.name} - ${Math.round(file.size / 1024)}KB]\\n❌ Parsing Status: Failed\\nError: PDF parsing module not available\\n\\nThe PDF file was uploaded but text extraction failed. You can:\\n• Describe the content you'd like me to analyze\\n• Copy and paste text from the PDF\\n• Convert the PDF to a text file and upload that instead`;\r\n            }\r\n\r\n            // Return the actual parsed text content\r\n            return `[PDF Document: ${file.name} - ${Math.round(file.size / 1024)}KB]\\n✅ Parsing Status: Success\\nPages: ${result.metadata?.pages || 1}\\n\\nContent:\\n${result.text}`;\r\n          } else {\r\n            console.error('📄 PDF parsing failed:', result.error);\r\n            return `[PDF Document: ${file.name} - ${Math.round(file.size / 1024)}KB]\\n❌ Parsing Status: Failed\\nError: ${result.error || 'Unknown error'}\\n\\nThe PDF file was uploaded but text extraction failed. You can:\\n• Describe the content you'd like me to analyze\\n• Copy and paste text from the PDF\\n• Convert the PDF to a text file and upload that instead`;\r\n          }\r\n        } else {\r\n          // Fallback if electronAPI is not available\r\n          console.log('📄 ElectronAPI not available, using fallback for PDF:', file.name);\r\n          return `[PDF Document: ${file.name} - ${Math.round(file.size / 1024)}KB]\\nNote: PDF parsing not available in this environment.\\n\\nPlease describe what you'd like me to analyze about this PDF.`;\r\n        }\r\n      } catch (error) {\r\n        console.error('📄 PDF parsing error:', error);\r\n        return `[PDF Document: ${file.name} - ${Math.round(file.size / 1024)}KB]\\n❌ Parsing Status: Error\\nError: ${error instanceof Error ? error.message : 'Unknown error'}\\n\\nPlease describe what you'd like me to analyze about this PDF.`;\r\n      }\r\n    } else if (supportedFormats.includes(fileExtension)) {\r\n      // Use DocumentParserService for supported document formats\r\n      try {\r\n        if (!documentParserService) {\r\n          throw new Error('DocumentParserService not available in this environment');\r\n        }\r\n        console.log(`📄 Using DocumentParserService to parse: ${file.name}`);\r\n        const parsedDocument = await documentParserService.parseDocument(file);\r\n\r\n        // Return formatted text with metadata\r\n        let result = `[${parsedDocument.metadata?.format || 'Document'}: ${file.name}]\\n`;\r\n\r\n        // Add processing status\r\n        if (parsedDocument.metadata?.success === false) {\r\n          result += `⚠️ Parsing Status: Failed (using fallback)\\n`;\r\n          if (parsedDocument.metadata?.error) {\r\n            result += `Error: ${parsedDocument.metadata.error}\\n`;\r\n          }\r\n        } else {\r\n          result += `✅ Parsing Status: Success\\n`;\r\n        }\r\n\r\n        if (parsedDocument.metadata?.processingTime) {\r\n          result += `Processing Time: ${parsedDocument.metadata.processingTime}ms\\n`;\r\n        }\r\n\r\n        if (parsedDocument.metadata?.title && parsedDocument.metadata.title !== file.name) {\r\n          result += `Title: ${parsedDocument.metadata.title}\\n`;\r\n        }\r\n        if (parsedDocument.metadata?.sheets) {\r\n          result += `Sheets: ${parsedDocument.metadata.sheets.join(', ')}\\n`;\r\n        }\r\n        if (parsedDocument.metadata?.eventCount) {\r\n          result += `Events: ${parsedDocument.metadata.eventCount}\\n`;\r\n        }\r\n\r\n        result += `\\nContent:\\n${parsedDocument.text}`;\r\n\r\n        return result;\r\n      } catch (error) {\r\n        console.error(`❌ Failed to parse document ${file.name}:`, error);\r\n        return `[${file.name} - ${Math.round(file.size / 1024)}KB]\\nError: Failed to parse document - ${error instanceof Error ? error.message : 'Unknown error'}\\nPlease describe the content you'd like me to analyze.`;\r\n      }\r\n    } else {\r\n      return `[File: ${file.name} - ${Math.round(file.size / 1024)}KB]\\nFile type: ${file.type}\\nNote: Text extraction not supported for this file type.`;\r\n    }\r\n  },\r\n\r\n  // Get document parsing statistics\r\n  getDocumentParsingStats() {\r\n    if (!documentParserService) {\r\n      return { totalAttempts: 0, successfulParses: 0, failedParses: 0, fallbacksUsed: 0, averageProcessingTime: 0, errorsByType: {} };\r\n    }\r\n    return documentParserService.getStats();\r\n  },\r\n\r\n  // Reset document parsing statistics\r\n  resetDocumentParsingStats() {\r\n    if (documentParserService) {\r\n      documentParserService.resetStats();\r\n    }\r\n  },\r\n\r\n  async sendMessage(\r\n    message: string,\r\n    files: File[] | undefined,\r\n    settings: ChatSettings,\r\n    conversationHistory: Message[] = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string, // Add conversation ID for tool optimization\r\n    onKnowledgeBaseSearch?: (isSearching: boolean, query?: string) => void\r\n  ): Promise<Message> {\r\n    debugLogger.info('CHAT', 'sendMessage called', {\r\n      message: message.substring(0, 100) + '...',\r\n      provider: settings.provider,\r\n      model: settings.model,\r\n      hasApiKey: !!secureApiKeyService?.getApiKey(settings.provider),\r\n      filesCount: files?.length || 0\r\n    });\r\n\r\n    // Also log to window for debugging\r\n    if (typeof window !== 'undefined') {\r\n      (window as Window & { lastChatServiceCall?: unknown }).lastChatServiceCall = {\r\n        message: message.substring(0, 100) + '...',\r\n        provider: settings.provider,\r\n        model: settings.model,\r\n        hasApiKey: !!secureApiKeyService?.getApiKey(settings.provider),\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    }\r\n\r\n    try {\r\n      // RAG Integration: Augment message with knowledge base context if enabled\r\n      let augmentedMessage = message;\r\n      let sources: Source[] = [];\r\n\r\n      if (settings.ragEnabled && typeof window !== 'undefined' && window.electronAPI) {\r\n        try {\r\n          console.log('🧠 RAG enabled, searching knowledge base for:', message.substring(0, 100));\r\n\r\n          // Notify UI that knowledge base search is starting\r\n          onKnowledgeBaseSearch?.(true, message);\r\n\r\n          // Detect if this is a comprehensive query that needs all documents\r\n          const isComprehensiveQuery = /\\b(all|total|sum|add|combine|every|each)\\b/i.test(message);\r\n          const searchLimit = isComprehensiveQuery ? 20 : 5; // Higher limit for comprehensive queries\r\n\r\n          const ragResult = await window.electronAPI.searchKnowledgeBase(message, searchLimit);\r\n          \r\n          if (ragResult.success && ragResult.results && ragResult.results.length > 0) {\r\n            console.log(`🧠 Found ${ragResult.results.length} relevant knowledge base chunks (comprehensive: ${isComprehensiveQuery})`);\r\n            \r\n            let selectedChunks;\r\n            \r\n            if (isComprehensiveQuery) {\r\n              // For comprehensive queries, ensure we get chunks from different documents\r\n              const chunksBySource = new Map<string, RAGResult[]>();\r\n\r\n              // Group chunks by source document\r\n              ragResult.results.forEach((result: RAGResult) => {\r\n                if (!chunksBySource.has(result.source)) {\r\n                  chunksBySource.set(result.source, []);\r\n                }\r\n                chunksBySource.get(result.source)!.push(result);\r\n              });\r\n              \r\n              // Take the best chunk from each document, up to 8 total chunks\r\n              selectedChunks = [];\r\n              for (const [, chunks] of chunksBySource.entries()) {\r\n                selectedChunks.push(chunks[0]); // Best chunk from this document\r\n                if (selectedChunks.length >= 8) break;\r\n              }\r\n              \r\n              console.log(`🧠 Selected chunks from ${chunksBySource.size} different documents`);\r\n            } else {\r\n              // For specific queries, use top 3 most relevant chunks\r\n              selectedChunks = ragResult.results.slice(0, 3);\r\n            }\r\n            \r\n            // Extract relevant text chunks and format them as context\r\n            const contextChunks = selectedChunks\r\n              .map((result: RAGResult, index: number) =>\r\n                `[Context ${index + 1} from ${result.source}]:\\n${result.text}`\r\n              )\r\n              .join('\\n\\n');\r\n            \r\n            // Augment the original message with context\r\n            const contextIntro = isComprehensiveQuery \r\n              ? `Based on the following context from ALL documents in your knowledge base`\r\n              : `Based on the following context from your knowledge base`;\r\n            \r\n            augmentedMessage = `${contextIntro}:\\n\\n${contextChunks}\\n\\n---\\n\\nUser Question: ${message}`;\r\n            \r\n            // Collect sources from RAG results\r\n            sources = selectedChunks.map((result: RAGResult) => ({\r\n              type: 'knowledge_base' as const,\r\n              title: result.source,\r\n              score: result.score,\r\n              snippet: result.text.substring(0, 150) + (result.text.length > 150 ? '...' : '')\r\n            }));\r\n\r\n            console.log('🧠 Message augmented with RAG context:', {\r\n              originalLength: message.length,\r\n              augmentedLength: augmentedMessage.length,\r\n              contextChunks: ragResult.results.length,\r\n              sources: sources.length\r\n            });\r\n          } else {\r\n            console.log('🧠 No relevant context found in knowledge base');\r\n          }\r\n\r\n          // Notify UI that knowledge base search is complete\r\n          onKnowledgeBaseSearch?.(false);\r\n        } catch (ragError) {\r\n          console.error('🧠 RAG search failed:', ragError);\r\n          // Notify UI that knowledge base search is complete (even on error)\r\n          onKnowledgeBaseSearch?.(false);\r\n          // Continue with original message if RAG fails\r\n        }\r\n      }\r\n      \r\n      // Handle file attachments with proper OpenRouter vision API format\r\n      let messageContent: string | Array<ContentItem> | { text: string; images: string[] } = augmentedMessage;\r\n\r\n      if (files && files.length > 0) {\r\n        console.log('Processing files:', files.map(f => ({ name: f.name, type: f.type, size: f.size })));\r\n\r\n        const provider = settings.provider;\r\n        console.log('Processing files for provider:', provider, 'Files:', files.map(f => ({ name: f.name, type: f.type })));\r\n\r\n        // Send files directly to providers in their expected format\r\n        console.log('Sending files directly to provider:', provider);\r\n\r\n        if (provider === 'mistral') {\r\n          // Use Mistral's native file processing capabilities\r\n          console.log('🔍 Using Mistral native file processing');\r\n          const mistralProvider = this.getProviderInstance('mistral');\r\n          console.log('🔍 Mistral provider instance:', mistralProvider);\r\n          console.log('🔍 Has processFiles method:', mistralProvider && 'processFiles' in mistralProvider);\r\n\r\n          if (mistralProvider && 'processFiles' in mistralProvider) {\r\n            try {\r\n              console.log('🔍 Calling Mistral processFiles with:', {\r\n                filesCount: files.length,\r\n                fileNames: Array.from(files).map(f => f.name),\r\n                provider: this.getProviderConfig(provider)\r\n              });\r\n\r\n              const processedFiles = await (mistralProvider as {processFiles: (files: File[], settings: ChatSettings, config: unknown) => Promise<unknown[]>}).processFiles(\r\n                Array.from(files),\r\n                settings,\r\n                this.getProviderConfig(provider)\r\n              );\r\n\r\n              const contentArray: Array<ContentItem> = [\r\n                {\r\n                  type: 'text',\r\n                  text: message || 'Please analyze the attached content.'\r\n                },\r\n                ...(processedFiles as ContentItem[])\r\n              ];\r\n\r\n              messageContent = contentArray;\r\n              console.log('✅ Mistral files processed successfully:', {\r\n                processedCount: processedFiles.length,\r\n                contentTypes: processedFiles.map((f: unknown) => (f as {type: string}).type)\r\n              });\r\n            } catch (error) {\r\n              console.error('❌ Mistral file processing failed:', error);\r\n              // Fallback to generic processing\r\n              console.log('🔄 Falling back to generic processing');\r\n              messageContent = await this.processFilesGeneric(files, augmentedMessage, provider);\r\n            }\r\n          } else {\r\n            // Fallback to generic processing\r\n            console.log('🔄 No Mistral provider or processFiles method, using generic processing');\r\n            messageContent = await this.processFilesGeneric(files, augmentedMessage, provider);\r\n          }\r\n        } else if (provider === 'openai' || provider === 'anthropic' || provider === 'gemini' || provider === 'deepseek' || provider === 'openrouter' || provider === 'replicate' || provider === 'requesty' || provider === 'n8n') {\r\n          messageContent = await this.processFilesGeneric(files, augmentedMessage, provider);\r\n        } else if (provider === 'ollama') {\r\n          // Ollama uses a different format with separate images array\r\n          console.log('Using Ollama format');\r\n\r\n          let textContent = augmentedMessage || 'Please analyze the attached content.';\r\n          const images: string[] = [];\r\n\r\n          for (const file of files) {\r\n            if (file.type.startsWith('image/')) {\r\n              // Convert image to base64 for Ollama\r\n              console.log('Converting image for Ollama:', file.name);\r\n              const base64 = await this.fileToBase64(file);\r\n              // Extract just the base64 data without the data URL prefix\r\n              const base64Data = base64.split(',')[1];\r\n              images.push(base64Data);\r\n              console.log('Added image to Ollama format, base64 length:', base64Data.length);\r\n            } else {\r\n              // For all other files (PDF, TXT, CSV, etc.), extract text content\r\n              console.log('Extracting text for Ollama:', file.name);\r\n              const extractedText = await this.extractTextFromFile(file);\r\n              textContent += `\\n\\n[File: ${file.name}]\\n${extractedText}`;\r\n              console.log('Added text content, total length:', textContent.length);\r\n            }\r\n          }\r\n\r\n          // Ollama expects a simple message format with images array\r\n          messageContent = {\r\n            text: textContent,\r\n            images: images\r\n          };\r\n          console.log('Final Ollama message format:', { textLength: textContent.length, imageCount: images.length });\r\n        } else {\r\n          // For all other providers, use simple text format\r\n          console.log('Using simple text format for provider:', provider);\r\n\r\n          let combinedText = augmentedMessage || 'Please analyze the attached content.';\r\n\r\n          for (const file of files) {\r\n            if (file.type.startsWith('image/')) {\r\n              console.log('Adding image placeholder for text-only provider:', file.name);\r\n              combinedText += `\\n\\n[Image attached: ${file.name} - Please describe what you'd like me to analyze about this image.]`;\r\n            } else {\r\n              // Extract text from all other files\r\n              console.log('Extracting text from file:', file.name);\r\n              const textContent = await this.extractTextFromFile(file);\r\n              combinedText += `\\n\\n[File: ${file.name}]\\n${textContent}`;\r\n            }\r\n          }\r\n\r\n          messageContent = combinedText;\r\n          console.log('Final text message content length:', combinedText.length);\r\n        }\r\n      }\r\n\r\n      // Get provider settings and API key from secure storage\r\n      const providerSettings = settings.providers?.[settings.provider] || {};\r\n      const apiKeyData = secureApiKeyService?.getApiKeyData(settings.provider);\r\n      const apiKey = apiKeyData?.apiKey || '';\r\n\r\n      // Merge baseUrl from both sources (secure storage takes precedence)\r\n      const baseUrl = apiKeyData?.baseUrl || providerSettings.baseUrl || '';\r\n\r\n      // Debug provider settings\r\n      console.log('🔍 ChatService provider settings debug:', {\r\n        provider: settings.provider,\r\n        hasProviderSettings: !!providerSettings,\r\n        hasApiKey: !!apiKey,\r\n        apiKeyLength: apiKey?.length || 0,\r\n        apiKeyStart: apiKey?.substring(0, 10) || 'undefined',\r\n        fromSecureStorage: !!apiKeyData,\r\n        baseUrlFromSecure: apiKeyData?.baseUrl || 'none',\r\n        baseUrlFromSettings: providerSettings.baseUrl || 'none',\r\n        finalBaseUrl: baseUrl\r\n      });\r\n\r\n      // Check if API key is required and missing\r\n      // ollama, lmstudio, and n8n don't require API keys\r\n      if (settings.provider !== 'ollama' && settings.provider !== 'lmstudio' && settings.provider !== 'n8n' && !apiKey) {\r\n        throw new Error(`API key is required for ${settings.provider}. Please configure it in Settings.`);\r\n      }\r\n\r\n      const llmSettings: LLMSettings = {\r\n        provider: settings.provider,\r\n        model: settings.model,\r\n        apiKey: apiKey,\r\n        baseUrl: baseUrl,\r\n        temperature: settings.temperature,\r\n        maxTokens: settings.maxTokens,\r\n        systemPrompt: settings.systemPrompt,\r\n        toolCallingEnabled: settings.toolCallingEnabled,\r\n      };\r\n\r\n      console.log('🔍 ChatService: Final LLMSettings for', settings.provider, ':', {\r\n        model: settings.model,\r\n        hasApiKey: !!apiKey,\r\n        baseUrl: baseUrl,\r\n        toolCallingEnabled: settings.toolCallingEnabled\r\n      });\r\n\r\n      // Get conversation history length setting\r\n      const appSettings = settingsService.getSettings();\r\n      const historyLength = appSettings.general.conversationHistoryLength || 10;\r\n\r\n      // Limit conversation history to the specified number of messages\r\n      const limitedHistory = conversationHistory.slice(-historyLength);\r\n      console.log(`🧠 Conversation history limited to ${historyLength} messages (${conversationHistory.length} → ${limitedHistory.length})`);\r\n\r\n      // Convert conversation history to LLM format\r\n      const llmHistory = limitedHistory.map(msg => ({\r\n        role: msg.role,\r\n        content: msg.content\r\n      }));\r\n\r\n      // Send to LLM service with conversation history\r\n      console.log('🔄 Calling llmService.sendMessage with settings:', {\r\n        provider: llmSettings.provider,\r\n        model: llmSettings.model,\r\n        hasApiKey: !!llmSettings.apiKey,\r\n        baseUrl: llmSettings.baseUrl\r\n      });\r\n\r\n      // Track timing for tokens per second calculation\r\n      const startTime = performance.now();\r\n\r\n      // Disable streaming for providers that don't support tool calls in streaming mode\r\n      // DeepSeek: disabled to get usage data\r\n      // Gemini: streaming handler doesn't support function calls yet\r\n      const mcpService = (global as typeof globalThis & { mcpService?: { getConnectedServerIds(): Promise<string[]>; getAvailableTools(): Promise<unknown[]> } }).mcpService;\r\n      const hasTools = settings.toolCallingEnabled && mcpService && (await mcpService.getConnectedServerIds()).length > 0 && (await mcpService.getAvailableTools()).length > 0;\r\n      const useStreaming = onStream &&\r\n        settings.provider !== 'deepseek' &&\r\n        !(settings.provider === 'gemini' && hasTools);\r\n\r\n      console.log(`🔄 Calling LLM with streaming: ${useStreaming}, hasTools: ${hasTools}, toolCallingEnabled: ${settings.toolCallingEnabled}, provider: ${settings.provider}`);\r\n      if (settings.provider === 'lmstudio' && hasTools) {\r\n        console.log(`✅ LM Studio will use streaming WITH tool support`);\r\n      }\r\n\r\n      const response = await llmService.sendMessage(\r\n        messageContent,\r\n        llmSettings,\r\n        llmHistory,\r\n        useStreaming ? onStream : undefined,\r\n        signal,\r\n        conversationId\r\n      );\r\n\r\n      // Extract sources from tool execution content if any web search tools were used\r\n      if (response.toolCalls && response.toolCalls.length > 0) {\r\n        console.log('🔧 Extracting sources from tool calls:', response.toolCalls.map(tc => tc.name));\r\n        const webSearchSources = this.extractSourcesFromResponseContent(response.content, response.toolCalls);\r\n        console.log('📚 Extracted web search sources:', webSearchSources);\r\n        sources = [...sources, ...webSearchSources];\r\n      }\r\n\r\n      console.log('📊 Final sources collected:', sources);\r\n\r\n      const endTime = performance.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // Calculate tokens per second if we have usage data\r\n      let tokensPerSecond: number | undefined;\r\n      if (response.usage?.completionTokens && duration > 0) {\r\n        tokensPerSecond = (response.usage.completionTokens / duration) * 1000; // Convert to tokens per second\r\n      }\r\n\r\n      console.log('✅ LLM response received:', {\r\n        contentLength: response.content?.length || 0,\r\n        hasUsage: !!response.usage,\r\n        usage: response.usage,\r\n        duration: `${duration.toFixed(2)}ms`,\r\n        tokensPerSecond: tokensPerSecond ? `${tokensPerSecond.toFixed(2)} t/s` : 'N/A'\r\n      });\r\n\r\n      // Track token usage in session stats - normalize format\r\n      if (response.usage) {\r\n        // Use the already normalized usage format from llmService\r\n        const normalizedUsage = {\r\n          promptTokens: response.usage.promptTokens || 0,\r\n          completionTokens: response.usage.completionTokens || 0,\r\n          totalTokens: response.usage.totalTokens || (response.usage.promptTokens || 0) + (response.usage.completionTokens || 0)\r\n        };\r\n\r\n        // Prepare cost information if available\r\n        const costInfo = response.cost ? {\r\n          totalCost: response.cost.totalCost,\r\n          currency: response.cost.currency\r\n        } : undefined;\r\n\r\n        console.log('📊 Adding token usage to session:', {\r\n          original: response.usage,\r\n          normalized: normalizedUsage,\r\n          cost: costInfo\r\n        });\r\n        await sessionService.addTokenUsage(normalizedUsage, costInfo);\r\n\r\n        // Also log to window for debugging\r\n        if (typeof window !== 'undefined') {\r\n          (window as Window & { lastTokenUsage?: unknown }).lastTokenUsage = {\r\n            usage: response.usage,\r\n            timestamp: new Date().toISOString()\r\n          };\r\n        }\r\n      } else {\r\n        console.warn('⚠️ No usage data in response');\r\n\r\n        // Also log to window for debugging\r\n        if (typeof window !== 'undefined') {\r\n          (window as Window & { lastNoUsageResponse?: unknown }).lastNoUsageResponse = {\r\n            hasResponse: !!response,\r\n            responseKeys: response ? Object.keys(response) : [],\r\n            timestamp: new Date().toISOString()\r\n          };\r\n        }\r\n      }\r\n\r\n      const assistantMessage = {\r\n        id: Date.now().toString(),\r\n        content: response.content,\r\n        role: 'assistant' as const,\r\n        timestamp: new Date(),\r\n        usage: response.usage,\r\n        cost: response.cost,\r\n        timing: {\r\n          startTime,\r\n          endTime,\r\n          duration,\r\n          tokensPerSecond\r\n        },\r\n        toolCalls: response.toolCalls, // Include tool calls in the message\r\n        sources: sources // Always include sources array, even if empty\r\n      };\r\n\r\n      console.log('📋 Created message with toolCalls:', {\r\n        hasToolCalls: !!response.toolCalls,\r\n        toolCallsCount: response.toolCalls?.length || 0,\r\n        toolNames: response.toolCalls?.map(tc => tc.name) || []\r\n      });\r\n\r\n      return assistantMessage;\r\n    } catch (error) {\r\n      console.error('❌ Chat service error:', error);\r\n      throw new Error(`Failed to send message: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Extract sources from response content that contains tool execution results\r\n   */\r\n  extractSourcesFromResponseContent(content: string, toolCalls: Array<{id: string, name: string, arguments: ToolCallArguments}>): Source[] {\r\n    const sources: Source[] = [];\r\n\r\n    // Look for web search tools in the tool calls\r\n    const webSearchTools = toolCalls.filter(tc => this.isWebSearchTool(tc.name));\r\n\r\n    if (webSearchTools.length === 0) {\r\n      return sources;\r\n    }\r\n\r\n    // Extract sources from formatted tool results in the content\r\n    for (const toolCall of webSearchTools) {\r\n      try {\r\n        // Look for tool execution blocks or formatted results\r\n        const toolSources = this.extractSourcesFromToolContent(content, toolCall);\r\n        sources.push(...toolSources);\r\n      } catch (error) {\r\n        console.warn(`Failed to extract sources from tool content ${toolCall.name}:`, error);\r\n      }\r\n    }\r\n\r\n    return sources;\r\n  },\r\n\r\n  /**\r\n   * Extract sources from tool execution content for a specific tool\r\n   */\r\n  extractSourcesFromToolContent(content: string, toolCall: {name: string, arguments: ToolCallArguments}): Source[] {\r\n    const sources: Source[] = [];\r\n    const query = toolCall.arguments.query as string || 'web search';\r\n\r\n    // Pattern 1: Look for structured search results with URLs\r\n    const urlPattern = /(?:https?:\\/\\/[^\\s)]+)/g;\r\n    const urls = content.match(urlPattern) || [];\r\n\r\n    // Pattern 2: Look for numbered search results\r\n    const numberedResultPattern = /(\\d+)\\.\\s*\\*\\*([^*]+)\\*\\*[^\\n]*\\n[^\\n]*🔗\\s*(https?:\\/\\/[^\\s\\n]+)/g;\r\n    let match: RegExpExecArray | null;\r\n    while ((match = numberedResultPattern.exec(content)) !== null) {\r\n      sources.push({\r\n        type: 'web',\r\n        title: match[2].trim(),\r\n        url: match[3],\r\n        snippet: `Search result for: ${query}`\r\n      });\r\n    }\r\n\r\n    // Pattern 3: Look for title and URL pairs\r\n    const titleUrlPattern = /\\*\\*([^*]+)\\*\\*[^\\n]*\\n[^\\n]*(?:🔗|URL:)\\s*(https?:\\/\\/[^\\s\\n]+)/g;\r\n    while ((match = titleUrlPattern.exec(content)) !== null) {\r\n      if (!sources.find(s => s.url === match![2])) { // Avoid duplicates\r\n        sources.push({\r\n          type: 'web',\r\n          title: match![1].trim(),\r\n          url: match![2],\r\n          snippet: `Search result for: ${query}`\r\n        });\r\n      }\r\n    }\r\n\r\n    // Pattern 4: If no structured results found, create generic sources from URLs\r\n    if (sources.length === 0 && urls.length > 0) {\r\n      urls.slice(0, 5).forEach((url, index) => {\r\n        sources.push({\r\n          type: 'web',\r\n          title: `Web result ${index + 1}`,\r\n          url: url,\r\n          snippet: `Search result for: ${query}`\r\n        });\r\n      });\r\n    }\r\n\r\n    // Pattern 5: If still no sources, create a generic web search source\r\n    if (sources.length === 0) {\r\n      sources.push({\r\n        type: 'web',\r\n        title: `Web search: ${query}`,\r\n        snippet: 'Web search was performed but specific sources could not be extracted'\r\n      });\r\n    }\r\n\r\n    return sources;\r\n  },\r\n\r\n  /**\r\n   * Check if a tool name is a web search tool\r\n   */\r\n  isWebSearchTool(toolName: string): boolean {\r\n    const webSearchTools = [\r\n      'web_search', 'web-search', 'search', 'google_search',\r\n      'tavily-search', 'brave_web_search', 'brave_local_search',\r\n      'web-fetch', 'fetch', 'fetch_content'\r\n    ];\r\n    return webSearchTools.includes(toolName);\r\n  },\r\n\r\n  /**\r\n   * Parse web search results to extract sources\r\n   */\r\n  parseWebSearchSources(result: unknown, args: ToolCallArguments): Source[] {\r\n    const sources: Source[] = [];\r\n\r\n    try {\r\n      // Handle different result formats\r\n      if (typeof result === 'string') {\r\n        // Try to parse as JSON\r\n        try {\r\n          const parsed = JSON.parse(result);\r\n          return this.parseWebSearchSources(parsed, args);\r\n        } catch {\r\n          // If not JSON, create a generic source\r\n          const query = args.query as string || 'web search';\r\n          sources.push({\r\n            type: 'web',\r\n            title: `Web search: ${query}`,\r\n            snippet: result.substring(0, 150) + (result.length > 150 ? '...' : '')\r\n          });\r\n        }\r\n      } else if (typeof result === 'object' && result !== null) {\r\n        const resultObj = result as Record<string, unknown>;\r\n\r\n        // Handle Tavily search results\r\n        if (resultObj.results && Array.isArray(resultObj.results)) {\r\n          for (const item of resultObj.results) {\r\n            if (typeof item === 'object' && item !== null) {\r\n              const itemObj = item as Record<string, unknown>;\r\n              sources.push({\r\n                type: 'web',\r\n                title: itemObj.title as string || 'Web result',\r\n                url: itemObj.url as string,\r\n                snippet: itemObj.content as string || itemObj.snippet as string\r\n              });\r\n            }\r\n          }\r\n        }\r\n\r\n        // Handle Brave search results\r\n        if (resultObj.web && typeof resultObj.web === 'object') {\r\n          const webObj = resultObj.web as Record<string, unknown>;\r\n          if (webObj.results && Array.isArray(webObj.results)) {\r\n            for (const item of webObj.results) {\r\n              if (typeof item === 'object' && item !== null) {\r\n                const itemObj = item as Record<string, unknown>;\r\n                sources.push({\r\n                  type: 'web',\r\n                  title: itemObj.title as string || 'Web result',\r\n                  url: itemObj.url as string,\r\n                  snippet: itemObj.description as string || itemObj.snippet as string\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Handle generic web search results\r\n        if (resultObj.url || resultObj.title) {\r\n          sources.push({\r\n            type: 'web',\r\n            title: resultObj.title as string || 'Web result',\r\n            url: resultObj.url as string,\r\n            snippet: resultObj.content as string || resultObj.description as string || resultObj.snippet as string\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to parse web search sources:', error);\r\n    }\r\n\r\n    return sources;\r\n  },\r\n\r\n  async testConnection(settings: ChatSettings): Promise<boolean> {\r\n    try {\r\n      const providerSettings = settings.providers[settings.provider];\r\n      const apiKeyData = secureApiKeyService?.getApiKeyData(settings.provider);\r\n      const apiKey = apiKeyData?.apiKey || '';\r\n\r\n      const llmSettings: LLMSettings = {\r\n        provider: settings.provider,\r\n        model: settings.model,\r\n        apiKey: apiKey,\r\n        baseUrl: providerSettings?.baseUrl,\r\n        temperature: settings.temperature,\r\n        maxTokens: 100, // Use fewer tokens for testing\r\n        systemPrompt: settings.systemPrompt,\r\n      };\r\n\r\n      return await llmService.testConnection(llmSettings);\r\n    } catch (error) {\r\n      console.error('Connection test failed:', error);\r\n      return false;\r\n    }\r\n  },\r\n\r\n  getProviders() {\r\n    return llmService.getProviders();\r\n  },\r\n\r\n  getProvider(id: string) {\r\n    return llmService.getProvider(id);\r\n  },\r\n\r\n  async fetchModels(providerId: string, apiKey?: string, baseUrl?: string): Promise<string[]> {\r\n    return await llmService.fetchModels(providerId, apiKey, baseUrl);\r\n  },\r\n\r\n  clearModelCache(providerId?: string): void {\r\n    return llmService.clearModelCache(providerId);\r\n  },\r\n\r\n  // Force refresh API keys and clear any cached data\r\n  async forceRefreshApiKeys(): Promise<void> {\r\n    console.log('🔄 ChatService: Force refreshing API keys...');\r\n    try {\r\n      // Force reload API keys from secure storage\r\n      if (secureApiKeyService) {\r\n        await secureApiKeyService.forceReloadApiKeys();\r\n      }\r\n\r\n      // Clear model cache to force fresh fetch with new API keys\r\n      this.clearModelCache();\r\n\r\n      console.log('✅ ChatService: API keys and cache refreshed successfully');\r\n    } catch (error) {\r\n      console.error('❌ ChatService: Failed to refresh API keys:', error);\r\n    }\r\n  },\r\n\r\n  // Helper method to get provider instance\r\n  getProviderInstance(providerId: string) {\r\n    // Get the actual provider instance from ProviderFactory via llmService's adapter\r\n    return llmService.getProviderAdapter().getProvider(providerId);\r\n  },\r\n\r\n  // Helper method to get provider config\r\n  getProviderConfig(providerId: string) {\r\n    const providers = llmService.getProviders();\r\n    return providers.find(p => p.id === providerId);\r\n  },\r\n\r\n  // Generic file processing for non-Mistral providers\r\n  async processFilesGeneric(files: File[], message: string, provider: string): Promise<Array<ContentItem>> {\r\n    const contentArray: Array<ContentItem> = [\r\n      {\r\n        type: 'text',\r\n        text: message || 'Please analyze the attached content.'\r\n      }\r\n    ];\r\n\r\n    // Process each file\r\n    for (const file of files) {\r\n      console.log('Processing file:', file.name, file.type);\r\n\r\n      if (file.type.startsWith('image/')) {\r\n        // Convert image to base64 data URL\r\n        console.log('Converting image to base64...');\r\n        const base64 = await this.fileToBase64(file);\r\n        console.log('Image converted, base64 length:', base64.length);\r\n\r\n        contentArray.push({\r\n          type: 'image_url',\r\n          image_url: {\r\n            url: base64\r\n          }\r\n        });\r\n      } else {\r\n        const nativelySupported = file.type === 'application/pdf' || file.type.startsWith('text/') || file.type === 'text/csv';\r\n\r\n        // Check if provider supports this file type natively\r\n        if (nativelySupported && provider === 'anthropic') {\r\n          // Anthropic supports native document handling for PDFs and text files\r\n          console.log('Sending document to Anthropic:', file.name);\r\n          const base64 = await this.fileToBase64(file);\r\n          const base64Data = base64.split(',')[1]; // Remove data URL prefix\r\n\r\n          contentArray.push({\r\n            type: 'document',\r\n            document: {\r\n              name: file.name,\r\n              media_type: file.type,\r\n              data: base64Data\r\n            }\r\n          } as ContentItem);\r\n        } else {\r\n          // For all other cases, extract text content using DocumentParserService\r\n          console.log('Extracting text content for provider:', provider, file.name);\r\n          const textContent = await this.extractTextFromFile(file);\r\n          console.log('Text extracted, length:', textContent.length);\r\n          contentArray[0].text += `\\n\\n[File: ${file.name}]\\n${textContent}`;\r\n        }\r\n      }\r\n    }\r\n\r\n    return contentArray;\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\commands\\filesystemCommands.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":250,"column":16,"nodeType":null,"messageId":"refactorFunction","endLine":250,"endColumn":26}],"suppressedMessages":[{"ruleId":"prefer-const","severity":2,"message":"'cmdArgs' is never reassigned. Use 'const' instead.","line":266,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":266,"endColumn":26,"fix":{"range":[6828,6855],"text":"const cmdArgs: string[] = [];"},"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Filesystem Command Implementations\n * Implements DesktopCommanderMCP filesystem functionality as internal commands\n */\n\nimport {\n  CommandResult,\n  InternalCommandTool,\n  ReadFileArgs,\n  ReadMultipleFilesArgs,\n  WriteFileArgs,\n  CreateDirectoryArgs,\n  ListDirectoryArgs,\n  MoveFileArgs,\n  SearchFilesArgs,\n  SearchCodeArgs,\n  GetFileInfoArgs,\n  DeleteFileArgs\n} from '../../types/internalCommands';\nimport { filesystemManager } from '../filesystemManager';\nimport { internalCommandService } from '../internalCommandService';\nimport { processManager } from '../processManager';\n\n/**\n * Read file contents with optional offset and length\n */\nasync function readFile(args: unknown): Promise<CommandResult> {\n  try {\n    const { path, isUrl, offset, length } = args as ReadFileArgs;\n\n    const result = await filesystemManager.readFile(path, isUrl, offset, length);\n\n    if (result.isImage) {\n      return {\n        success: true,\n        content: [\n          {\n            type: 'text',\n            text: `Image file: ${path} (${result.mimeType})\\n`\n          },\n          {\n            type: 'image',\n            data: result.content,\n            mimeType: result.mimeType\n          }\n        ]\n      };\n    } else {\n      return {\n        success: true,\n        content: [{\n          type: 'text',\n          text: result.content\n        }]\n      };\n    }\n\n  } catch (error) {\n    return internalCommandService.createErrorResponse(\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Read multiple files simultaneously\n */\nasync function readMultipleFiles(args: unknown): Promise<CommandResult> {\n  try {\n    const { paths } = args as ReadMultipleFilesArgs;\n\n    const results = await filesystemManager.readMultipleFiles(paths);\n\n    // Create summary\n    const summary = results.map(result => {\n      if (result.error) {\n        return `${result.path}: Error - ${result.error}`;\n      } else if (result.mimeType) {\n        return `${result.path}: ${result.mimeType} ${result.isImage ? '(image)' : '(text)'}`;\n      } else {\n        return `${result.path}: Unknown type`;\n      }\n    }).join('\\n');\n\n    // Create content items\n    const contentItems: Array<{type: 'text' | 'image', text?: string, data?: string, mimeType?: string}> = [];\n    \n    contentItems.push({ type: 'text', text: summary });\n\n    // Add each file content\n    for (const result of results) {\n      if (!result.error && result.content !== undefined) {\n        if (result.isImage && result.mimeType) {\n          contentItems.push({\n            type: 'image',\n            data: result.content,\n            mimeType: result.mimeType\n          });\n        } else {\n          contentItems.push({\n            type: 'text',\n            text: `\\n--- ${result.path} contents: ---\\n${result.content}`\n          });\n        }\n      }\n    }\n\n    return {\n      success: true,\n      content: contentItems\n    };\n\n  } catch (error) {\n    return internalCommandService.createErrorResponse(\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Write file contents\n */\nasync function writeFile(args: unknown): Promise<CommandResult> {\n  try {\n    const { path, content, mode } = args as WriteFileArgs;\n\n    await filesystemManager.writeFile(path, content, mode);\n\n    const lines = content.split('\\n');\n    const lineCount = lines.length;\n    const modeMessage = mode === 'append' ? 'appended to' : 'wrote to';\n\n    // Get line limit from configuration for performance tip\n    const config = internalCommandService.getConfiguration();\n    const maxLines = config.fileWriteLineLimit;\n\n    let message = `Successfully ${modeMessage} ${path} (${lineCount} lines)`;\n    \n    if (lineCount > maxLines) {\n      message += `\\n💡 Performance tip: For optimal speed, consider chunking files into ≤${maxLines} line pieces in future operations.`;\n    }\n\n    return internalCommandService.createSuccessResponse(message);\n\n  } catch (error) {\n    return internalCommandService.createErrorResponse(\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Create directory\n */\nasync function createDirectory(args: unknown): Promise<CommandResult> {\n  try {\n    const { path } = args as CreateDirectoryArgs;\n\n    await filesystemManager.createDirectory(path);\n\n    return internalCommandService.createSuccessResponse(\n      `Successfully created directory ${path}`\n    );\n\n  } catch (error) {\n    return internalCommandService.createErrorResponse(\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * List directory contents\n */\nasync function listDirectory(args: unknown): Promise<CommandResult> {\n  try {\n    const { path } = args as ListDirectoryArgs;\n\n    const entries = await filesystemManager.listDirectory(path);\n\n    return {\n      success: true,\n      content: [{\n        type: 'text',\n        text: entries.join('\\n')\n      }]\n    };\n\n  } catch (error) {\n    return internalCommandService.createErrorResponse(\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Move or rename file/directory\n */\nasync function moveFile(args: unknown): Promise<CommandResult> {\n  try {\n    const { source, destination } = args as MoveFileArgs;\n\n    await filesystemManager.moveFile(source, destination);\n\n    return internalCommandService.createSuccessResponse(\n      `Successfully moved ${source} to ${destination}`\n    );\n\n  } catch (error) {\n    return internalCommandService.createErrorResponse(\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Search for files by name pattern\n */\nasync function searchFiles(args: unknown): Promise<CommandResult> {\n  try {\n    const { path, pattern, timeoutMs } = args as SearchFilesArgs;\n\n    const results = await filesystemManager.searchFiles(path, pattern, timeoutMs);\n\n    if (results.length === 0) {\n      const timeoutMsg = timeoutMs ? ` or search timed out after ${timeoutMs}ms` : '';\n      return internalCommandService.createSuccessResponse(\n        `No matches found${timeoutMsg}.`\n      );\n    }\n\n    return {\n      success: true,\n      content: [{\n        type: 'text',\n        text: results.join('\\n')\n      }]\n    };\n\n  } catch (error) {\n    return internalCommandService.createErrorResponse(\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Search for code/text patterns within files\n */\nasync function searchCode(args: unknown): Promise<CommandResult> {\n  try {\n    const { \n      path, \n      pattern, \n      filePattern, \n      ignoreCase, \n      maxResults, \n      includeHidden, \n      contextLines, \n      timeoutMs \n    } = args as SearchCodeArgs;\n\n    // Use ripgrep-like command for code search\n    const command = process.platform === 'win32' ? 'findstr' : 'grep';\n    // eslint-disable-next-line prefer-const\n    let cmdArgs: string[] = [];\n\n    if (process.platform === 'win32') {\n      // Windows findstr\n      if (ignoreCase) cmdArgs.push('/I');\n      cmdArgs.push('/N', '/S');\n      if (pattern) cmdArgs.push(`\"${pattern}\"`);\n      cmdArgs.push(`\"${path}\\\\*\"`);\n    } else {\n      // Unix grep\n      cmdArgs.push('-r', '-n');\n      if (ignoreCase) cmdArgs.push('-i');\n      if (contextLines) cmdArgs.push(`-C${contextLines}`);\n      if (maxResults) cmdArgs.push(`-m${maxResults}`);\n      if (includeHidden) cmdArgs.push('-a');\n      if (filePattern) cmdArgs.push(`--include=${filePattern}`);\n      cmdArgs.push(pattern, path);\n    }\n\n    const fullCommand = `${command} ${cmdArgs.join(' ')}`;\n    const processInfo = await processManager.startProcess(fullCommand);\n    const output = await processManager.readProcessOutput(processInfo.pid, timeoutMs || 30000);\n    \n    // Clean up the process\n    await processManager.forceTerminate(processInfo.pid);\n\n    if (!output || output.trim() === '') {\n      const timeoutMsg = timeoutMs ? ` or search timed out after ${timeoutMs}ms` : '';\n      return internalCommandService.createSuccessResponse(\n        `No matches found${timeoutMsg}.`\n      );\n    }\n\n    return {\n      success: true,\n      content: [{\n        type: 'text',\n        text: output\n      }]\n    };\n\n  } catch (error) {\n    return internalCommandService.createErrorResponse(\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Get file information\n */\nasync function getFileInfo(args: unknown): Promise<CommandResult> {\n  try {\n    const { path } = args as GetFileInfoArgs;\n\n    const info = await filesystemManager.getFileInfo(path);\n\n    const infoText = Object.entries(info)\n      .map(([key, value]) => `${key}: ${value}`)\n      .join('\\n');\n\n    return {\n      success: true,\n      content: [{\n        type: 'text',\n        text: infoText\n      }]\n    };\n\n  } catch (error) {\n    return internalCommandService.createErrorResponse(\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Delete file or directory\n */\nasync function deleteFile(args: unknown): Promise<CommandResult> {\n  try {\n    const { path, useRecycleBin = true } = args as DeleteFileArgs;\n\n    await filesystemManager.deleteFile(path, useRecycleBin);\n\n    const deleteMethod = useRecycleBin ? 'moved to Recycle Bin' : 'permanently deleted';\n    return internalCommandService.createSuccessResponse(\n      `Successfully ${deleteMethod}: ${path}`\n    );\n\n  } catch (error) {\n    return internalCommandService.createErrorResponse(\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n// Export filesystem command tools\nexport const filesystemCommands: InternalCommandTool[] = [\n  {\n    name: 'read_file',\n    description: `Read the contents of a file from the file system or a URL with optional offset and length parameters.\n\nSupports partial file reading with:\n- 'offset' (start line, default: 0)\n  * Positive: Start from line N (0-based indexing)\n  * Negative: Read last N lines from end (tail behavior)\n- 'length' (max lines to read, default: configurable limit)\n\nExamples:\n- offset: 0, length: 10 → First 10 lines\n- offset: 100, length: 5 → Lines 100-104\n- offset: -20 → Last 20 lines\n\nCan fetch content from URLs when isUrl parameter is set to true.\nHandles text files normally and image files are returned as viewable images.\n\nParameters:\n- path: File path or URL to read\n- isUrl: Whether the path is a URL (optional)\n- offset: Start line or negative for tail (optional)\n- length: Maximum lines to read (optional)`,\n    category: 'filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: { type: 'string', description: 'File path or URL' },\n        isUrl: { type: 'boolean', description: 'Whether path is a URL' },\n        offset: { type: 'number', description: 'Start line or negative for tail' },\n        length: { type: 'number', description: 'Maximum lines to read' }\n      },\n      required: ['path']\n    },\n    handler: readFile\n  },\n  {\n    name: 'read_multiple_files',\n    description: `Read the contents of multiple files simultaneously.\n\nEach file's content is returned with its path as a reference.\nHandles text files normally and renders images as viewable content.\nFailed reads for individual files won't stop the entire operation.\n\nParameters:\n- paths: Array of file paths to read`,\n    category: 'filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        paths: {\n          type: 'array',\n          items: { type: 'string' },\n          description: 'Array of file paths to read'\n        }\n      },\n      required: ['paths']\n    },\n    handler: readMultipleFiles\n  },\n  {\n    name: 'write_file',\n    description: `Write or append to file contents.\n\nCHUNKING IS STANDARD PRACTICE: Always write files in chunks of 25-30 lines maximum.\n\nSTANDARD PROCESS FOR ANY FILE:\n1. FIRST → write_file(filePath, firstChunk, {mode: 'rewrite'}) [≤30 lines]\n2. THEN → write_file(filePath, secondChunk, {mode: 'append'}) [≤30 lines]\n3. CONTINUE → write_file(filePath, nextChunk, {mode: 'append'}) [≤30 lines]\n\nParameters:\n- path: File path to write\n- content: Content to write\n- mode: 'rewrite' or 'append' (optional, default: 'rewrite')`,\n    category: 'filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: { type: 'string', description: 'File path to write' },\n        content: { type: 'string', description: 'Content to write' },\n        mode: {\n          type: 'string',\n          enum: ['rewrite', 'append'],\n          description: 'Write mode: rewrite or append'\n        }\n      },\n      required: ['path', 'content']\n    },\n    handler: writeFile\n  },\n  {\n    name: 'create_directory',\n    description: `Create a new directory or ensure a directory exists.\n\nCan create multiple nested directories in one operation.\n\nParameters:\n- path: Directory path to create`,\n    category: 'filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: { type: 'string', description: 'Directory path to create' }\n      },\n      required: ['path']\n    },\n    handler: createDirectory\n  },\n  {\n    name: 'list_directory',\n    description: `Get a detailed listing of all files and directories in a specified path.\n\nResults distinguish between files and directories with [FILE] and [DIR] prefixes.\n\nParameters:\n- path: Directory path to list`,\n    category: 'filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: { type: 'string', description: 'Directory path to list' }\n      },\n      required: ['path']\n    },\n    handler: listDirectory\n  },\n  {\n    name: 'move_file',\n    description: `Move or rename files and directories.\n\nCan move files between directories and rename them in a single operation.\n\nParameters:\n- source: Source file/directory path\n- destination: Destination file/directory path`,\n    category: 'filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        source: { type: 'string', description: 'Source path' },\n        destination: { type: 'string', description: 'Destination path' }\n      },\n      required: ['source', 'destination']\n    },\n    handler: moveFile\n  },\n  {\n    name: 'search_files',\n    description: `Find files by name using case-insensitive substring matching.\n\nSearches through all subdirectories from the starting path.\nHas a default timeout of 30 seconds which can be customized.\n\nParameters:\n- path: Starting directory path\n- pattern: Search pattern (substring)\n- timeoutMs: Timeout in milliseconds (optional)`,\n    category: 'filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: { type: 'string', description: 'Starting directory path' },\n        pattern: { type: 'string', description: 'Search pattern' },\n        timeoutMs: { type: 'number', description: 'Timeout in milliseconds' }\n      },\n      required: ['path', 'pattern']\n    },\n    handler: searchFiles\n  },\n  {\n    name: 'search_code',\n    description: `Search for text/code patterns within file contents using grep/findstr.\n\nFast and powerful search similar to VS Code search functionality.\nSupports regular expressions, file pattern filtering, and context lines.\n\nParameters:\n- path: Directory to search in\n- pattern: Text/regex pattern to search for\n- filePattern: File pattern filter (optional)\n- ignoreCase: Case-insensitive search (optional)\n- maxResults: Maximum number of results (optional)\n- includeHidden: Include hidden files (optional)\n- contextLines: Lines of context around matches (optional)\n- timeoutMs: Timeout in milliseconds (optional)`,\n    category: 'filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: { type: 'string', description: 'Directory to search' },\n        pattern: { type: 'string', description: 'Search pattern' },\n        filePattern: { type: 'string', description: 'File pattern filter' },\n        ignoreCase: { type: 'boolean', description: 'Case-insensitive search' },\n        maxResults: { type: 'number', description: 'Maximum results' },\n        includeHidden: { type: 'boolean', description: 'Include hidden files' },\n        contextLines: { type: 'number', description: 'Context lines' },\n        timeoutMs: { type: 'number', description: 'Timeout in milliseconds' }\n      },\n      required: ['path', 'pattern']\n    },\n    handler: searchCode\n  },\n  {\n    name: 'get_file_info',\n    description: `Retrieve detailed metadata about a file or directory.\n\nReturns information including:\n- size, creation time, last modified time\n- permissions, type\n- lineCount (for text files)\n- lastLine (zero-indexed number of last line, for text files)\n- appendPosition (line number for appending, for text files)\n\nParameters:\n- path: File or directory path`,\n    category: 'filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: { type: 'string', description: 'File or directory path' }\n      },\n      required: ['path']\n    },\n    handler: getFileInfo\n  },\n  {\n    name: 'delete_file',\n    description: `Delete a file or directory.\n\nBy default, files are moved to the Windows Recycle Bin for safety.\nCan be configured to permanently delete files if needed.\n\nParameters:\n- path: File or directory path to delete\n- useRecycleBin: Whether to move to Recycle Bin (true) or permanently delete (false). Default: true`,\n    category: 'filesystem',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: { type: 'string', description: 'File or directory path to delete' },\n        useRecycleBin: { type: 'boolean', description: 'Move to Recycle Bin (true) or permanently delete (false)', default: true }\n      },\n      required: ['path']\n    },\n    handler: deleteFile\n  }\n];\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\commands\\terminalCommands.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\commands\\textEditingCommands.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 18 to the 15 allowed.","line":17,"column":16,"nodeType":null,"messageId":"refactorFunction","endLine":17,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Text Editing Command Implementations\n * Implements DesktopCommanderMCP text editing functionality as internal commands\n */\n\nimport {\n  CommandResult,\n  InternalCommandTool,\n  EditBlockArgs\n} from '../../types/internalCommands';\nimport { filesystemManager } from '../filesystemManager';\nimport { internalCommandService } from '../internalCommandService';\n\n/**\n * Apply surgical text replacements to files\n */\nasync function editBlock(args: unknown): Promise<CommandResult> {\n  try {\n    const { file_path, old_string, new_string, expected_replacements } = args as EditBlockArgs;\n\n    // Path validation will be handled in the main process\n\n    // Read the current file content\n    const fileResult = await filesystemManager.readFile(file_path);\n    if (fileResult.isImage) {\n      throw new Error('Cannot edit binary/image files');\n    }\n\n    const content = fileResult.content;\n\n    // Perform the replacement\n    const replacementCount = expected_replacements || 1;\n    let actualReplacements = 0;\n    let newContent = content;\n\n    if (replacementCount === 1) {\n      // Single replacement\n      const index = content.indexOf(old_string);\n      if (index !== -1) {\n        newContent = content.substring(0, index) + new_string + content.substring(index + old_string.length);\n        actualReplacements = 1;\n      }\n    } else {\n      // Multiple replacements\n      const regex = new RegExp(escapeRegExp(old_string), 'g');\n      const matches = content.match(regex);\n      actualReplacements = matches ? matches.length : 0;\n      \n      if (actualReplacements > 0) {\n        newContent = content.replace(regex, new_string);\n      }\n    }\n\n    // Check if replacement was successful\n    if (actualReplacements === 0) {\n      // Try fuzzy search to help user understand what went wrong\n      const fuzzyResult = await performFuzzySearch(content, old_string);\n      \n      let errorMessage = `No exact matches found for the search text in ${file_path}.`;\n      \n      if (fuzzyResult.bestMatch) {\n        errorMessage += `\\n\\nClosest match found (${fuzzyResult.similarity}% similar):\\n`;\n        errorMessage += `\"${fuzzyResult.bestMatch}\"\\n\\n`;\n        errorMessage += `Character differences:\\n${fuzzyResult.diff}`;\n      }\n      \n      return internalCommandService.createErrorResponse(errorMessage);\n    }\n\n    if (expected_replacements && actualReplacements !== expected_replacements) {\n      return internalCommandService.createErrorResponse(\n        `Expected ${expected_replacements} replacements but found ${actualReplacements} matches`\n      );\n    }\n\n    // Write the modified content back to the file\n    await filesystemManager.writeFile(file_path, newContent, 'rewrite');\n\n    // Check line count for performance warning\n    const lines = newContent.split('\\n');\n    const config = internalCommandService.getConfiguration();\n    const maxLines = config.fileWriteLineLimit;\n\n    let message = `Successfully applied ${actualReplacements} replacement(s) in ${file_path}`;\n    \n    if (lines.length > maxLines) {\n      message += `\\n💡 Performance tip: File has ${lines.length} lines. Consider breaking edits into smaller, more focused changes.`;\n    }\n\n    return internalCommandService.createSuccessResponse(message);\n\n  } catch (error) {\n    return internalCommandService.createErrorResponse(\n      error instanceof Error ? error.message : String(error)\n    );\n  }\n}\n\n/**\n * Perform fuzzy search to find closest match\n */\nasync function performFuzzySearch(content: string, searchText: string): Promise<{\n  bestMatch: string | null;\n  similarity: number;\n  diff: string;\n}> {\n  const lines = content.split('\\n');\n  let bestMatch: string | null = null;\n  let bestSimilarity = 0;\n  let bestDiff = '';\n\n  // Search for the best matching substring\n  const searchLength = searchText.length;\n  const threshold = 0.6; // Minimum similarity threshold\n\n  for (let i = 0; i < content.length - searchLength + 1; i++) {\n    const substring = content.substring(i, i + searchLength);\n    const similarity = calculateSimilarity(searchText, substring);\n    \n    if (similarity > bestSimilarity && similarity >= threshold) {\n      bestSimilarity = similarity;\n      bestMatch = substring;\n      bestDiff = generateCharacterDiff(searchText, substring);\n    }\n  }\n\n  // Also check line-by-line for better context\n  for (const line of lines) {\n    const similarity = calculateSimilarity(searchText, line);\n    if (similarity > bestSimilarity && similarity >= threshold) {\n      bestSimilarity = similarity;\n      bestMatch = line;\n      bestDiff = generateCharacterDiff(searchText, line);\n    }\n  }\n\n  return {\n    bestMatch,\n    similarity: Math.round(bestSimilarity * 100),\n    diff: bestDiff\n  };\n}\n\n/**\n * Calculate similarity between two strings using Levenshtein distance\n */\nfunction calculateSimilarity(str1: string, str2: string): number {\n  const len1 = str1.length;\n  const len2 = str2.length;\n  \n  if (len1 === 0) return len2 === 0 ? 1 : 0;\n  if (len2 === 0) return 0;\n\n  const matrix = Array(len2 + 1).fill(null).map(() => Array(len1 + 1).fill(null));\n\n  for (let i = 0; i <= len1; i++) matrix[0][i] = i;\n  for (let j = 0; j <= len2; j++) matrix[j][0] = j;\n\n  for (let j = 1; j <= len2; j++) {\n    for (let i = 1; i <= len1; i++) {\n      const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\n      matrix[j][i] = Math.min(\n        matrix[j - 1][i] + 1,     // deletion\n        matrix[j][i - 1] + 1,     // insertion\n        matrix[j - 1][i - 1] + cost // substitution\n      );\n    }\n  }\n\n  const maxLen = Math.max(len1, len2);\n  return (maxLen - matrix[len2][len1]) / maxLen;\n}\n\n/**\n * Generate character-level diff showing differences\n */\nfunction generateCharacterDiff(expected: string, actual: string): string {\n  let result = '';\n  let i = 0, j = 0;\n\n  while (i < expected.length || j < actual.length) {\n    if (i < expected.length && j < actual.length && expected[i] === actual[j]) {\n      result += expected[i];\n      i++;\n      j++;\n    } else if (i < expected.length && (j >= actual.length || expected[i] !== actual[j])) {\n      result += `{-${expected[i]}-}`;\n      i++;\n    } else if (j < actual.length) {\n      result += `{+${actual[j]}+}`;\n      j++;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Escape special regex characters\n */\nfunction escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n// Export text editing command tools\nexport const textEditingCommands: InternalCommandTool[] = [\n  {\n    name: 'edit_block',\n    description: `Apply surgical text replacements to files.\n    \nBEST PRACTICE: Make multiple small, focused edits rather than one large edit.\nEach edit_block call should change only what needs to be changed - include just enough context to uniquely identify the text being modified.\n\nTakes:\n- file_path: Path to the file to edit\n- old_string: Text to replace\n- new_string: Replacement text\n- expected_replacements: Optional parameter for number of replacements\n\nBy default, replaces only ONE occurrence of the search text. To replace multiple occurrences, provide the expected_replacements parameter with the exact number of matches expected.\n\nUNIQUENESS REQUIREMENT: When expected_replacements=1 (default), include the minimal amount of context necessary (typically 1-3 lines) before and after the change point, with exact whitespace and indentation.\n\nWhen a close but non-exact match is found, a character-level diff is shown in the format:\ncommon_prefix{-removed-}{+added+}common_suffix\nto help you identify what's different.\n\nParameters:\n- file_path: Path to the file to edit\n- old_string: Text to find and replace\n- new_string: Replacement text\n- expected_replacements: Number of expected replacements (optional, default: 1)`,\n    category: 'textEditing',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        file_path: { type: 'string', description: 'Path to the file to edit' },\n        old_string: { type: 'string', description: 'Text to find and replace' },\n        new_string: { type: 'string', description: 'Replacement text' },\n        expected_replacements: { \n          type: 'number', \n          description: 'Number of expected replacements (default: 1)' \n        }\n      },\n      required: ['file_path', 'old_string', 'new_string']\n    },\n    handler: editBlock\n  }\n];\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\conversationHistoryService.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":49,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":49,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2093,2168],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2258,2327],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2900,2967],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3650,3711],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":130,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4516,4590],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4620,4692],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4789,4848],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5186,5242],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5273,5345],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6322,6398],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7051,7104],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":204,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":204,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7201,7258],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":304,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":304,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10586,10646],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":315,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":315,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10996,11064],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":319,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":319,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11106,11177],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":321,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":321,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11213,11309],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":324,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":324,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11392,11444],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":329,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":329,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11547,11598],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":332,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":332,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11647,11701],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getStorageItem } from '../utils/storage';\r\nimport type { Message } from './chatService';\r\nimport type { ElectronAPI } from '../types/electron';\r\n\r\n// Type for conversation data from storage\r\ninterface ConversationData {\r\n  id: string;\r\n  title: string;\r\n  messages: Array<{\r\n    id: string;\r\n    content: string;\r\n    role: string;\r\n    timestamp: string | Date;\r\n    usage?: unknown;\r\n    timing?: unknown;\r\n    toolCalls?: unknown;\r\n  }>;\r\n  createdAt: string | Date;\r\n  updatedAt: string | Date;\r\n  toolsHash?: string;\r\n}\r\n\r\n// Type for tool objects\r\ninterface ToolObject {\r\n  name?: string;\r\n  description?: string;\r\n  parameters?: unknown;\r\n  function?: {\r\n    name?: string;\r\n    description?: string;\r\n    parameters?: unknown;\r\n  };\r\n}\r\n\r\nexport interface Conversation {\r\n  id: string;\r\n  title: string;\r\n  messages: Message[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  toolsHash?: string; // Hash of tools sent to track changes\r\n}\r\n\r\nclass ConversationHistoryService {\r\n  private conversations: Conversation[] = [];\r\n  private currentConversationId: string | null = null;\r\n  private initialized = false;\r\n\r\n  async initialize() {\r\n    if (this.initialized) return;\r\n\r\n    try {\r\n      // Load conversation index from disk (contains metadata for ALL conversations)\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        const electronAPI = window.electronAPI as unknown as ElectronAPI;\r\n        const conversationIndex = await electronAPI.loadConversationIndex();\r\n\r\n        if (conversationIndex && Array.isArray(conversationIndex)) {\r\n          // Convert index entries back to Conversation objects (without full messages)\r\n          this.conversations = conversationIndex.map((conv: unknown) => {\r\n            const convData = conv as ConversationData;\r\n            return {\r\n              ...convData,\r\n              createdAt: new Date(convData.createdAt),\r\n              updatedAt: new Date(convData.updatedAt),\r\n              messages: [] // Messages will be loaded on-demand when conversation is opened\r\n            };\r\n          });\r\n\r\n          console.log(`Loaded ${this.conversations.length} conversations from disk`);\r\n        } else {\r\n          // Fallback: try loading from old storage system\r\n          console.log('No conversation index found, trying legacy storage...');\r\n          const stored = await getStorageItem('conversation-history');\r\n          if (stored && Array.isArray(stored)) {\r\n            this.conversations = stored.map(conv => ({\r\n              ...conv,\r\n              createdAt: new Date(conv.createdAt),\r\n              updatedAt: new Date(conv.updatedAt),\r\n              messages: conv.messages.map((msg: ConversationData['messages'][0]) => ({\r\n                ...msg,\r\n                timestamp: new Date(msg.timestamp)\r\n              }))\r\n            }));\r\n\r\n            // Migrate to new file-based system\r\n            console.log('Migrating conversations to new file-based system...');\r\n            await this.migrateToFileSystem();\r\n          }\r\n        }\r\n      } else {\r\n        // Fallback for environments without Electron API\r\n        const stored = await getStorageItem('conversation-history');\r\n        if (stored && Array.isArray(stored)) {\r\n          this.conversations = stored.map(conv => ({\r\n            ...conv,\r\n            createdAt: new Date(conv.createdAt),\r\n            updatedAt: new Date(conv.updatedAt),\r\n            messages: conv.messages.map((msg: ConversationData['messages'][0]) => ({\r\n              ...msg,\r\n              timestamp: new Date(msg.timestamp)\r\n            }))\r\n          }));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load conversation history:', error);\r\n      this.conversations = [];\r\n    }\r\n\r\n    this.initialized = true;\r\n  }\r\n\r\n  // Save individual conversation to its own JSON file\r\n  private async saveConversationToFile(conversation: Conversation) {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI?.saveConversationToFile) {\r\n        const serializedConversation = {\r\n          ...conversation,\r\n          createdAt: conversation.createdAt.toISOString(),\r\n          updatedAt: conversation.updatedAt.toISOString(),\r\n          messages: conversation.messages.map(msg => ({\r\n            ...msg,\r\n            timestamp: msg.timestamp.toISOString()\r\n          }))\r\n        };\r\n\r\n        const success = await window.electronAPI.saveConversationToFile(conversation.id, serializedConversation);\r\n        if (success) {\r\n          console.log(`Conversation ${conversation.id} saved to file successfully`);\r\n        } else {\r\n          console.error(`Failed to save conversation ${conversation.id} to file`);\r\n        }\r\n        return success;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error saving conversation to file:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Migrate conversations from old storage system to new file-based system\r\n  private async migrateToFileSystem() {\r\n    try {\r\n      for (const conversation of this.conversations) {\r\n        await this.saveConversationToFile(conversation);\r\n      }\r\n      await this.saveConversationIndex();\r\n      console.log('Migration to file-based system completed');\r\n    } catch (error) {\r\n      console.error('Failed to migrate conversations to file system:', error);\r\n    }\r\n  }\r\n\r\n  // Load full conversation data from file (including messages)\r\n  async loadFullConversation(conversationId: string): Promise<Conversation | null> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        const electronAPI = window.electronAPI as unknown as ElectronAPI;\r\n        const conversationData = await electronAPI.loadConversationFromFile(conversationId);\r\n\r\n        if (conversationData) {\r\n          const data = conversationData as ConversationData;\r\n          return {\r\n            ...data,\r\n            createdAt: new Date(data.createdAt),\r\n            updatedAt: new Date(data.updatedAt),\r\n            messages: data.messages.map((msg: ConversationData['messages'][0]) => ({\r\n              ...msg,\r\n              role: msg.role as 'user' | 'assistant',\r\n              timestamp: new Date(msg.timestamp)\r\n            } as Message))\r\n          };\r\n        }\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error(`Failed to load full conversation ${conversationId}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Save conversation list (just metadata) to index file\r\n  private async saveConversationIndex() {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI?.saveConversationIndex) {\r\n        const conversationIndex = this.conversations.map(conv => ({\r\n          id: conv.id,\r\n          title: conv.title,\r\n          createdAt: conv.createdAt.toISOString(),\r\n          updatedAt: conv.updatedAt.toISOString(),\r\n          messageCount: conv.messages.length\r\n        }));\r\n\r\n        const success = await window.electronAPI.saveConversationIndex(conversationIndex);\r\n        if (success) {\r\n          console.log('Conversation index saved successfully');\r\n        }\r\n        return success;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error saving conversation index:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private generateTitle(messages: Message[]): string {\r\n    // Generate title from first user message\r\n    const firstUserMessage = messages.find(m => m.role === 'user');\r\n    if (firstUserMessage && typeof firstUserMessage.content === 'string') {\r\n      const content = firstUserMessage.content.trim();\r\n      if (content.length > 50) {\r\n        return content.substring(0, 47) + '...';\r\n      }\r\n      return content;\r\n    }\r\n    return `Chat ${new Date().toLocaleDateString()}`;\r\n  }\r\n\r\n  async createNewConversation(messages: Message[]): Promise<string> {\r\n    await this.initialize();\r\n\r\n    const conversationId = Date.now().toString();\r\n    const conversation: Conversation = {\r\n      id: conversationId,\r\n      title: this.generateTitle(messages),\r\n      messages: [...messages],\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n\r\n    this.conversations.unshift(conversation); // Add to beginning\r\n    this.currentConversationId = conversationId;\r\n\r\n    // Keep only last 50 conversations\r\n    if (this.conversations.length > 50) {\r\n      this.conversations = this.conversations.slice(0, 50);\r\n    }\r\n\r\n    // Save individual conversation to its own JSON file\r\n    await this.saveConversationToFile(conversation);\r\n    // Update the conversation index\r\n    await this.saveConversationIndex();\r\n\r\n    return conversationId;\r\n  }\r\n\r\n  async updateConversation(conversationId: string, messages: Message[]) {\r\n    await this.initialize();\r\n\r\n    const conversation = this.conversations.find(c => c.id === conversationId);\r\n    if (conversation) {\r\n      conversation.messages = [...messages];\r\n      conversation.updatedAt = new Date();\r\n\r\n      // Update title if it's still the default\r\n      if (conversation.title.startsWith('Chat ')) {\r\n        conversation.title = this.generateTitle(messages);\r\n      }\r\n\r\n      // Save updated conversation to its own JSON file\r\n      await this.saveConversationToFile(conversation);\r\n      // Update the conversation index\r\n      await this.saveConversationIndex();\r\n    }\r\n  }\r\n\r\n  async getAllConversations(): Promise<Conversation[]> {\r\n    await this.initialize();\r\n    // Return conversation metadata (without full messages for performance)\r\n    // Messages will be loaded on-demand when conversation is opened\r\n    return [...this.conversations];\r\n  }\r\n\r\n  async getConversation(conversationId: string): Promise<Conversation | null> {\r\n    await this.initialize();\r\n\r\n    // First check if we have the conversation in memory\r\n    const conversation = this.conversations.find(c => c.id === conversationId);\r\n    if (!conversation) {\r\n      return null;\r\n    }\r\n\r\n    // If conversation has no messages (loaded from index), load full data from file\r\n    if (conversation.messages.length === 0) {\r\n      const fullConversation = await this.loadFullConversation(conversationId);\r\n      if (fullConversation) {\r\n        // Update the in-memory conversation with full data\r\n        const index = this.conversations.findIndex(c => c.id === conversationId);\r\n        if (index !== -1) {\r\n          this.conversations[index] = fullConversation;\r\n        }\r\n        return fullConversation;\r\n      }\r\n    }\r\n\r\n    return conversation;\r\n  }\r\n\r\n  async deleteConversation(conversationId: string) {\r\n    await this.initialize();\r\n    console.log(`🗑️ Deleting conversation: ${conversationId}`);\r\n\r\n    // Remove from in-memory array\r\n    this.conversations = this.conversations.filter(c => c.id !== conversationId);\r\n\r\n    if (this.currentConversationId === conversationId) {\r\n      this.currentConversationId = null;\r\n    }\r\n\r\n    // Update the index (file deletion is now handled by IPC handler)\r\n    await this.saveConversationIndex();\r\n    console.log(`✅ Conversation ${conversationId} deleted from memory`);\r\n  }\r\n\r\n  async clearAllHistory() {\r\n    console.log('🗑️ ConversationHistoryService.clearAllHistory() called');\r\n    await this.initialize();\r\n    console.log('🗑️ Service initialized, current conversations count:', this.conversations.length);\r\n\r\n    // Clear in-memory data (file deletion is now handled by IPC handler)\r\n    console.log('🗑️ Clearing in-memory conversations');\r\n    this.conversations = [];\r\n    this.currentConversationId = null;\r\n\r\n    // Save empty index\r\n    console.log('🗑️ Saving empty conversation index');\r\n    await this.saveConversationIndex();\r\n\r\n    console.log('✅ All chat history cleared from memory');\r\n  }\r\n\r\n  getCurrentConversationId(): string | null {\r\n    return this.currentConversationId;\r\n  }\r\n\r\n  setCurrentConversationId(id: string | null) {\r\n    this.currentConversationId = id;\r\n  }\r\n\r\n  // Tool state management for conversation-level optimization\r\n  async getToolsHashForConversation(conversationId: string): Promise<string | null> {\r\n    await this.initialize();\r\n    const conversation = this.conversations.find(c => c.id === conversationId);\r\n    return conversation?.toolsHash || null;\r\n  }\r\n\r\n  async setToolsHashForConversation(conversationId: string, toolsHash: string) {\r\n    await this.initialize();\r\n    const conversation = this.conversations.find(c => c.id === conversationId);\r\n    if (conversation) {\r\n      conversation.toolsHash = toolsHash;\r\n      conversation.updatedAt = new Date();\r\n\r\n      // Save updated conversation\r\n      await this.saveConversationToFile(conversation);\r\n      await this.saveConversationIndex();\r\n    }\r\n  }\r\n\r\n  // Helper to generate hash from tools array\r\n  generateToolsHash(tools: ToolObject[]): string {\r\n    const toolsString = JSON.stringify(tools.map(tool => ({\r\n      name: tool.name || tool.function?.name || 'unknown',\r\n      description: tool.description || tool.function?.description || '',\r\n      parameters: tool.parameters || tool.function?.parameters || {}\r\n    })).filter(tool => tool.name !== 'unknown').sort((a, b) => a.name.localeCompare(b.name)));\r\n\r\n    // Simple hash function\r\n    let hash = 0;\r\n    for (let i = 0; i < toolsString.length; i++) {\r\n      const char = toolsString.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return hash.toString();\r\n  }\r\n}\r\n\r\nexport const conversationHistoryService = new ConversationHistoryService();\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\debugLogger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[463,466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[463,466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2000,2003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2000,2003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":96,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":96,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3601,3636],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3828,3867],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4074,4114],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4320,4360],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4570,4608],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"time"},"fix":{"range":[4770,4806],"text":""},"desc":"Remove the console.time()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":169,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":169,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"timeEnd"},"fix":{"range":[4959,4998],"text":""},"desc":"Remove the console.timeEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5183,5221],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"table"},"fix":{"range":[5228,5248],"text":""},"desc":"Remove the console.table()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"group"},"fix":{"range":[5404,5441],"text":""},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":200,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":200,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"fix":{"range":[5585,5604],"text":""},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":250,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":250,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6920,6997],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":261,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":261,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"group"},"fix":{"range":[7271,7326],"text":""},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":262,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":262,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7333,7368],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7375,7409],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"fix":{"range":[7416,7435],"text":""},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":276,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":276,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7846,7902],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8830,8833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8830,8833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8875,8878],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8875,8878],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":298,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":298,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8911,8954],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8959,9017],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":304,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":304,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9269,9301],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Debug Logger Service\n *\n * Provides controlled debug logging that can be enabled/disabled by user preference.\n * Only logs debug messages when debug logging is enabled in settings.\n */\n\nimport { serviceRegistry, SERVICE_NAMES, SettingsServiceInterface } from './serviceRegistry';\n\nexport class DebugLogger {\n  private static instance: DebugLogger;\n  private isDebugEnabled = false;\n  private hasInitialized = false;\n  private settingsListener: ((settings: any) => void) | null = null;\n\n  private constructor() {\n    // Start with debug STRICTLY disabled - no fallbacks\n    this.isDebugEnabled = false;\n    this.hasInitialized = false;\n\n    // Register with service registry to break circular dependencies\n    serviceRegistry.registerService(SERVICE_NAMES.DEBUG_LOGGER, this);\n\n    // NO automatic initialization - only initialize when explicitly called\n    // This prevents circular dependencies and unwanted debug output\n  }\n\n  public static getInstance(): DebugLogger {\n    if (!DebugLogger.instance) {\n      DebugLogger.instance = new DebugLogger();\n    }\n    return DebugLogger.instance;\n  }\n\n  /**\n   * Ensure the debug logger is initialized (lazy initialization)\n   */\n  private ensureInitialized(): void {\n    if (!this.hasInitialized) {\n      this.updateDebugState();\n      this.setupSettingsListener();\n      this.hasInitialized = true;\n    }\n  }\n\n  /**\n   * Set up real-time settings listener for debug logging changes\n   */\n  private setupSettingsListener(): void {\n    // Use service registry to avoid circular dependency\n    const settingsService = serviceRegistry.getService<SettingsServiceInterface>(SERVICE_NAMES.SETTINGS_SERVICE);\n\n    if (settingsService && typeof settingsService.addListener === 'function') {\n      // Remove existing listener if any\n      if (this.settingsListener) {\n        settingsService.removeListener(this.settingsListener);\n      }\n\n      // Create new listener that updates debug state when settings change\n      this.settingsListener = (settings: any) => {\n        const newDebugState = settings?.general?.debugLogging === true;\n        if (newDebugState !== this.isDebugEnabled) {\n          this.isDebugEnabled = newDebugState;\n          // No console output - this would create spam\n        }\n      };\n\n      // Add the listener\n      settingsService.addListener(this.settingsListener);\n    }\n  }\n\n  private updateDebugState(): void {\n    // Use service registry to avoid circular dependency\n    const settingsService = serviceRegistry.getService<SettingsServiceInterface>(SERVICE_NAMES.SETTINGS_SERVICE);\n\n    // STRICT: If settings service is not available, debug is DISABLED\n    if (!settingsService || typeof settingsService.getSettings !== 'function') {\n      this.isDebugEnabled = false;\n      return;\n    }\n\n    // Check if settings service is properly initialized\n    if (!settingsService.isInitialized || !settingsService.isInitialized()) {\n      this.isDebugEnabled = false;\n      return;\n    }\n\n    try {\n      const settings = settingsService.getSettings();\n\n      // STRICT: Only enable if explicitly set to true in settings\n      this.isDebugEnabled = settings?.general?.debugLogging === true;\n\n      // NO console output about debug state - this would create spam\n    } catch (error) {\n      // STRICT: Any error means debug is DISABLED\n      this.isDebugEnabled = false;\n      // Don't log the error - this could create circular logging\n    }\n  }\n\n  /**\n   * Log a debug message (only if debug logging is enabled)\n   */\n  public debug(...args: unknown[]): void {\n    this.ensureInitialized();\n    if (this.isDebugEnabled) {\n      console.log('🐛 [DEBUG]', ...args);\n    }\n  }\n\n  /**\n   * Log debug info with a specific prefix\n   */\n  public info(prefix: string, ...args: unknown[]): void {\n    this.ensureInitialized();\n    if (this.isDebugEnabled) {\n      console.log(`ℹ️ [${prefix}]`, ...args);\n    }\n  }\n\n  /**\n   * Log debug warning (only if debug logging is enabled)\n   */\n  public warn(prefix: string, ...args: unknown[]): void {\n    this.ensureInitialized();\n    if (this.isDebugEnabled) {\n      console.warn(`⚠️ [${prefix}]`, ...args);\n    }\n  }\n\n  /**\n   * Log debug error (only if debug logging is enabled)\n   */\n  public error(prefix: string, ...args: unknown[]): void {\n    this.ensureInitialized();\n    if (this.isDebugEnabled) {\n      console.error(`❌ [${prefix}]`, ...args);\n    }\n  }\n\n  /**\n   * Log debug success (only if debug logging is enabled)\n   */\n  public success(prefix: string, ...args: unknown[]): void {\n    this.ensureInitialized();\n    if (this.isDebugEnabled) {\n      console.log(`✅ [${prefix}]`, ...args);\n    }\n  }\n\n  /**\n   * Log debug timing information\n   */\n  public time(label: string): void {\n    this.ensureInitialized();\n    if (this.isDebugEnabled) {\n      console.time(`⏱️ [DEBUG] ${label}`);\n    }\n  }\n\n  /**\n   * End debug timing\n   */\n  public timeEnd(label: string): void {\n    this.ensureInitialized();\n    if (this.isDebugEnabled) {\n      console.timeEnd(`⏱️ [DEBUG] ${label}`);\n    }\n  }\n\n  /**\n   * Log debug table (only if debug logging is enabled)\n   */\n  public table(data: unknown): void {\n    this.ensureInitialized();\n    if (this.isDebugEnabled) {\n      console.log('📊 [DEBUG] Table data:');\n      console.table(data);\n    }\n  }\n\n  /**\n   * Log debug group start\n   */\n  public group(label: string): void {\n    this.ensureInitialized();\n    if (this.isDebugEnabled) {\n      console.group(`📁 [DEBUG] ${label}`);\n    }\n  }\n\n  /**\n   * Log debug group end\n   */\n  public groupEnd(): void {\n    this.ensureInitialized();\n    if (this.isDebugEnabled) {\n      console.groupEnd();\n    }\n  }\n\n  /**\n   * Check if debug logging is currently enabled\n   */\n  public isEnabled(): boolean {\n    return this.isDebugEnabled;\n  }\n\n  /**\n   * Force enable/disable debug logging (for testing)\n   */\n  public setEnabled(enabled: boolean): void {\n    this.isDebugEnabled = enabled;\n    // NO console output - this would create spam\n  }\n\n  /**\n   * Force update debug state from current settings (for immediate testing)\n   */\n  public forceUpdateFromSettings(): void {\n    this.updateDebugState();\n  }\n\n  /**\n   * Refresh debug state from settings (call this when settings are updated)\n   */\n  public refreshFromSettings(): void {\n    // Update debug state immediately without re-initialization\n    this.updateDebugState();\n\n    // Ensure settings listener is set up if not already\n    if (!this.settingsListener) {\n      this.setupSettingsListener();\n    }\n  }\n\n  /**\n   * Clean up resources (remove settings listener)\n   */\n  public cleanup(): void {\n    if (this.settingsListener) {\n      try {\n        const settingsService = serviceRegistry.getService<SettingsServiceInterface>(SERVICE_NAMES.SETTINGS_SERVICE);\n        if (settingsService && typeof settingsService.removeListener === 'function') {\n          settingsService.removeListener(this.settingsListener);\n        }\n      } catch (error) {\n        console.error('❌ Failed to clean up debug logger settings listener:', error);\n      }\n      this.settingsListener = null;\n    }\n  }\n\n  /**\n   * Log tool execution details (only if debug logging is enabled)\n   */\n  public logToolExecution(toolName: string, args: unknown, result: unknown, duration: number): void {\n    if (this.isDebugEnabled) {\n      console.group(`🔧 [TOOL] ${toolName} (${duration}ms)`);\n      console.log('📥 Arguments:', args);\n      console.log('📤 Result:', result);\n      console.groupEnd();\n    }\n  }\n\n  /**\n   * Log streaming content (only if debug logging is enabled)\n   */\n  public logStreaming(provider: string, content: string, isFollowUp = false): void {\n    this.ensureInitialized();\n    if (this.isDebugEnabled) {\n      const prefix = isFollowUp ? '🔄 [STREAM-FOLLOWUP]' : '📡 [STREAM]';\n      const truncatedContent = content.length > 100 ? content.substring(0, 100) + '...' : content;\n      console.log(`${prefix} ${provider}:`, truncatedContent);\n    }\n  }\n}\n\n// Export singleton instance\nexport const debugLogger = DebugLogger.getInstance();\n\n// Export convenience functions\nexport const debug = (...args: unknown[]) => debugLogger.debug(...args);\nexport const debugInfo = (prefix: string, ...args: unknown[]) => debugLogger.info(prefix, ...args);\nexport const debugWarn = (prefix: string, ...args: unknown[]) => debugLogger.warn(prefix, ...args);\nexport const debugError = (prefix: string, ...args: unknown[]) => debugLogger.error(prefix, ...args);\nexport const debugSuccess = (prefix: string, ...args: unknown[]) => debugLogger.success(prefix, ...args);\nexport const debugTime = (label: string) => debugLogger.time(label);\nexport const debugTimeEnd = (label: string) => debugLogger.timeEnd(label);\nexport const debugTable = (data: unknown) => debugLogger.table(data);\n\n// Make debug logger available globally for testing\nif (typeof window !== 'undefined') {\n  (window as any).debugLogger = debugLogger;\n  (window as any).testDebugLogging = () => {\n    console.log('🧪 Testing debug logging...');\n    console.log('🧪 Debug enabled:', debugLogger.isEnabled());\n    debugLogger.debug('This is a test debug message');\n    debugLogger.info('TEST', 'This is a test info message');\n    debugLogger.warn('TEST', 'This is a test warning message');\n    debugLogger.success('TEST', 'This is a test success message');\n    console.log('🧪 Test complete');\n  };\n}\nexport const debugGroup = (label: string) => debugLogger.group(label);\nexport const debugGroupEnd = () => debugLogger.groupEnd();\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\filesystemManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":329,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":329,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[9562,9616],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 19 to the 15 allowed.","line":336,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":336,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Filesystem Manager for Internal Commands\n * Handles file operations with directory restrictions\n */\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport os from 'os';\nimport { FileInfo } from '../types/internalCommands';\n// internalCommandService import removed - validation handled in main process\n\nexport class FilesystemManager {\n  \n  /**\n   * Read file contents with optional offset and length\n   */\n  async readFile(filePath: string, isUrl = false, offset = 0, length?: number): Promise<{\n    content: string;\n    isImage: boolean;\n    mimeType?: string;\n  }> {\n    if (isUrl) {\n      return this.readFromUrl(filePath);\n    }\n\n    // Path validation will be handled in the main process\n\n    try {\n      const stats = await fs.stat(filePath);\n      if (!stats.isFile()) {\n        throw new Error(`Path is not a file: ${filePath}`);\n      }\n\n      // Check if it's an image file\n      const isImage = this.isImageFile(filePath);\n      if (isImage) {\n        const buffer = await fs.readFile(filePath);\n        return {\n          content: buffer.toString('base64'),\n          isImage: true,\n          mimeType: this.getMimeType(filePath)\n        };\n      }\n\n      // Read text file with offset/length support\n      const content = await this.readTextFileWithOffset(filePath, offset, length);\n      return {\n        content,\n        isImage: false\n      };\n\n    } catch (error) {\n      throw new Error(`Failed to read file ${filePath}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Read multiple files simultaneously\n   */\n  async readMultipleFiles(filePaths: string[]): Promise<Array<{\n    path: string;\n    content?: string;\n    error?: string;\n    isImage?: boolean;\n    mimeType?: string;\n  }>> {\n    const results = await Promise.allSettled(\n      filePaths.map(async (filePath) => {\n        try {\n          const result = await this.readFile(filePath);\n          return {\n            path: filePath,\n            content: result.content,\n            isImage: result.isImage,\n            mimeType: result.mimeType\n          };\n        } catch (error) {\n          return {\n            path: filePath,\n            error: error instanceof Error ? error.message : String(error)\n          };\n        }\n      })\n    );\n\n    return results.map((result, index) => {\n      if (result.status === 'fulfilled') {\n        return result.value;\n      } else {\n        return {\n          path: filePaths[index],\n          error: result.reason instanceof Error ? result.reason.message : String(result.reason)\n        };\n      }\n    });\n  }\n\n  /**\n   * Write file contents\n   */\n  async writeFile(filePath: string, content: string, mode: 'rewrite' | 'append' = 'rewrite'): Promise<void> {\n    // Path validation will be handled in the main process\n\n    try {\n      if (mode === 'append') {\n        await fs.appendFile(filePath, content);\n      } else {\n        await fs.writeFile(filePath, content, 'utf8');\n      }\n    } catch (error) {\n      throw new Error(`Failed to write file ${filePath}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Create directory\n   */\n  async createDirectory(dirPath: string): Promise<void> {\n    // Path validation will be handled in the main process\n\n    try {\n      await fs.mkdir(dirPath, { recursive: true });\n    } catch (error) {\n      throw new Error(`Failed to create directory ${dirPath}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * List directory contents\n   */\n  async listDirectory(dirPath: string): Promise<string[]> {\n    // Path validation will be handled in the main process\n\n    try {\n      const entries = await fs.readdir(dirPath, { withFileTypes: true });\n      return entries.map(entry => {\n        const prefix = entry.isDirectory() ? '[DIR]' : '[FILE]';\n        return `${prefix} ${entry.name}`;\n      });\n    } catch (error) {\n      throw new Error(`Failed to list directory ${dirPath}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Move/rename file or directory\n   */\n  async moveFile(source: string, destination: string): Promise<void> {\n    // Path validation will be handled in the main process\n\n    try {\n      await fs.rename(source, destination);\n    } catch (error) {\n      throw new Error(`Failed to move ${source} to ${destination}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Search for files by name pattern\n   */\n  async searchFiles(searchPath: string, pattern: string, timeoutMs?: number): Promise<string[]> {\n    // Path validation will be handled in the main process\n\n    const results: string[] = [];\n    const searchPattern = pattern.toLowerCase();\n\n    try {\n      await this.searchFilesRecursive(searchPath, searchPattern, results, timeoutMs);\n      return results;\n    } catch (error) {\n      throw new Error(`Failed to search files in ${searchPath}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Get file information\n   */\n  async getFileInfo(filePath: string): Promise<FileInfo> {\n    // Path validation will be handled in the main process\n\n    try {\n      const stats = await fs.stat(filePath);\n      const info: FileInfo = {\n        path: filePath,\n        size: stats.size,\n        created: stats.birthtime,\n        modified: stats.mtime,\n        permissions: stats.mode.toString(8),\n        type: stats.isDirectory() ? 'directory' : 'file'\n      };\n\n      // Add line count for text files\n      if (stats.isFile() && !this.isImageFile(filePath)) {\n        try {\n          const content = await fs.readFile(filePath, 'utf8');\n          const lines = content.split('\\n');\n          info.lineCount = lines.length;\n          info.lastLine = lines.length - 1;\n          info.appendPosition = lines.length;\n        } catch {\n          // Ignore errors for binary files\n        }\n      }\n\n      return info;\n    } catch (error) {\n      throw new Error(`Failed to get file info for ${filePath}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Read text file with offset and length support\n   */\n  private async readTextFileWithOffset(filePath: string, offset: number, length?: number): Promise<string> {\n    const content = await fs.readFile(filePath, 'utf8');\n    const lines = content.split('\\n');\n\n    if (offset < 0) {\n      // Negative offset: read from end (tail behavior)\n      const tailLines = Math.abs(offset);\n      return lines.slice(-tailLines).join('\\n');\n    } else {\n      // Positive offset: read from start with optional length\n      const startLine = offset;\n      const endLine = length ? startLine + length : lines.length;\n      return lines.slice(startLine, endLine).join('\\n');\n    }\n  }\n\n  /**\n   * Read from URL\n   */\n  private async readFromUrl(url: string): Promise<{\n    content: string;\n    isImage: boolean;\n    mimeType?: string;\n  }> {\n    try {\n      const response = await fetch(url, {\n        headers: {\n          'User-Agent': 'LittleLLM/1.0'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const contentType = response.headers.get('content-type') || '';\n      const isImage = contentType.startsWith('image/');\n\n      if (isImage) {\n        const buffer = await response.arrayBuffer();\n        return {\n          content: Buffer.from(buffer).toString('base64'),\n          isImage: true,\n          mimeType: contentType\n        };\n      } else {\n        const content = await response.text();\n        return {\n          content,\n          isImage: false,\n          mimeType: contentType\n        };\n      }\n    } catch (error) {\n      throw new Error(`Failed to fetch URL ${url}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Check if file is an image based on extension\n   */\n  private isImageFile(filePath: string): boolean {\n    const ext = path.extname(filePath).toLowerCase();\n    return ['.png', '.jpg', '.jpeg', '.gif', '.webp', '.bmp', '.svg'].includes(ext);\n  }\n\n  /**\n   * Get MIME type based on file extension\n   */\n  private getMimeType(filePath: string): string {\n    const ext = path.extname(filePath).toLowerCase();\n    const mimeTypes: Record<string, string> = {\n      '.png': 'image/png',\n      '.jpg': 'image/jpeg',\n      '.jpeg': 'image/jpeg',\n      '.gif': 'image/gif',\n      '.webp': 'image/webp',\n      '.bmp': 'image/bmp',\n      '.svg': 'image/svg+xml'\n    };\n    return mimeTypes[ext] || 'application/octet-stream';\n  }\n\n  /**\n   * Recursive file search helper\n   */\n  private async searchFilesRecursive(\n    dirPath: string, \n    pattern: string, \n    results: string[], \n    timeoutMs?: number,\n    startTime?: number\n  ): Promise<void> {\n    const currentTime = Date.now();\n    if (!startTime) startTime = currentTime;\n    \n    if (timeoutMs && (currentTime - startTime) > timeoutMs) {\n      return; // Timeout reached\n    }\n\n    try {\n      const entries = await fs.readdir(dirPath, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        const fullPath = path.join(dirPath, entry.name);\n        \n        if (entry.isFile() && entry.name.toLowerCase().includes(pattern)) {\n          results.push(fullPath);\n        } else if (entry.isDirectory() && !entry.name.startsWith('.')) {\n          // Recursively search subdirectories\n          await this.searchFilesRecursive(fullPath, pattern, results, timeoutMs, startTime);\n        }\n      }\n    } catch (error) {\n      // Ignore permission errors and continue\n      console.warn(`Search warning for ${dirPath}:`, error);\n    }\n  }\n\n  /**\n   * Delete file or directory\n   */\n  async deleteFile(filePath: string, useRecycleBin = true): Promise<void> {\n    // Path validation will be handled in the main process\n\n    try {\n      if (useRecycleBin) {\n        // Use shell command to move to recycle bin on Windows\n        if (process.platform === 'win32') {\n          const { exec } = await import('child_process');\n          const { promisify } = await import('util');\n          const execAsync = promisify(exec);\n\n          // Use PowerShell to move file to recycle bin\n          const escapedPath = filePath.replace(/'/g, \"''\");\n          const command = `powershell -Command \"Add-Type -AssemblyName Microsoft.VisualBasic; [Microsoft.VisualBasic.FileIO.FileSystem]::DeleteFile('${escapedPath}', 'OnlyErrorDialogs', 'SendToRecycleBin')\"`;\n\n          await execAsync(command);\n        } else {\n          // On macOS/Linux, move to trash using system commands\n          const { exec } = await import('child_process');\n          const { promisify } = await import('util');\n          const execAsync = promisify(exec);\n\n          if (process.platform === 'darwin') {\n            // macOS: use osascript to move to trash\n            const escapedPath = filePath.replace(/'/g, \"\\\\'\");\n            await execAsync(`osascript -e 'tell application \"Finder\" to delete POSIX file \"${escapedPath}\"'`);\n          } else {\n            // Linux: use gio trash if available, otherwise move to ~/.local/share/Trash\n            try {\n              await execAsync(`gio trash \"${filePath}\"`);\n            } catch {\n              // Fallback: create .trash directory and move file there\n              const trashDir = path.join(os.homedir(), '.local', 'share', 'Trash', 'files');\n              await fs.mkdir(trashDir, { recursive: true });\n              const fileName = path.basename(filePath);\n              const trashPath = path.join(trashDir, fileName);\n              await fs.rename(filePath, trashPath);\n            }\n          }\n        }\n      } else {\n        // Permanent deletion\n        const stats = await fs.stat(filePath);\n        if (stats.isDirectory()) {\n          await fs.rmdir(filePath, { recursive: true });\n        } else {\n          await fs.unlink(filePath);\n        }\n      }\n    } catch (error) {\n      throw new Error(`Failed to delete ${filePath}: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n}\n\n// Export singleton instance\nexport const filesystemManager = new FilesystemManager();\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\initializationManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2522,2579],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2835,2899],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4794,4855],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":194,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":194,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5384,5453],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5681,5684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5681,5684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Initialization Manager\n * \n * Centralized service to manage initialization state and prevent duplicate initialization\n * across all services in the application.\n */\n\nexport interface InitializationState {\n  isInitialized: boolean;\n  isInitializing: boolean;\n  initializationPromise: Promise<void> | null;\n  error: Error | null;\n  timestamp: number;\n}\n\nclass InitializationManager {\n  private static instance: InitializationManager;\n  private services: Map<string, InitializationState> = new Map();\n  private globalInitialized = false;\n\n  private constructor() {}\n\n  public static getInstance(): InitializationManager {\n    if (!InitializationManager.instance) {\n      InitializationManager.instance = new InitializationManager();\n    }\n    return InitializationManager.instance;\n  }\n\n  /**\n   * Register a service for initialization tracking\n   */\n  registerService(serviceName: string): void {\n    if (!this.services.has(serviceName)) {\n      this.services.set(serviceName, {\n        isInitialized: false,\n        isInitializing: false,\n        initializationPromise: null,\n        error: null,\n        timestamp: 0\n      });\n    }\n  }\n\n  /**\n   * Check if a service is initialized\n   */\n  isServiceInitialized(serviceName: string): boolean {\n    const state = this.services.get(serviceName);\n    return state?.isInitialized || false;\n  }\n\n  /**\n   * Check if a service is currently initializing\n   */\n  isServiceInitializing(serviceName: string): boolean {\n    const state = this.services.get(serviceName);\n    return state?.isInitializing || false;\n  }\n\n  /**\n   * Start initialization for a service\n   */\n  async startInitialization<T>(\n    serviceName: string, \n    initFunction: () => Promise<T>\n  ): Promise<T> {\n    this.registerService(serviceName);\n    const state = this.services.get(serviceName)!;\n\n    // If already initialized, return immediately\n    if (state.isInitialized) {\n      return Promise.resolve() as Promise<T>;\n    }\n\n    // If currently initializing, wait for existing initialization\n    if (state.isInitializing && state.initializationPromise) {\n      await state.initializationPromise;\n      return Promise.resolve() as Promise<T>;\n    }\n\n    // Start new initialization\n    state.isInitializing = true;\n    state.error = null;\n    state.timestamp = Date.now();\n\n    const initPromise = (async () => {\n      try {\n        const result = await initFunction();\n        state.isInitialized = true;\n        state.isInitializing = false;\n        state.initializationPromise = null;\n        console.log(`✅ ${serviceName} initialized successfully`);\n        return result;\n      } catch (error) {\n        state.isInitialized = false;\n        state.isInitializing = false;\n        state.initializationPromise = null;\n        state.error = error instanceof Error ? error : new Error(String(error));\n        console.error(`❌ ${serviceName} initialization failed:`, error);\n        throw error;\n      }\n    })();\n\n    state.initializationPromise = initPromise.then(() => {});\n    return initPromise;\n  }\n\n  /**\n   * Wait for a service to be initialized\n   */\n  async waitForService(serviceName: string, timeoutMs = 10000): Promise<void> {\n    const state = this.services.get(serviceName);\n    \n    if (!state) {\n      throw new Error(`Service ${serviceName} not registered`);\n    }\n\n    if (state.isInitialized) {\n      return;\n    }\n\n    if (state.initializationPromise) {\n      // Wait for existing initialization with timeout\n      const timeoutPromise = new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error(`Timeout waiting for ${serviceName} initialization`)), timeoutMs);\n      });\n\n      await Promise.race([state.initializationPromise, timeoutPromise]);\n      return;\n    }\n\n    throw new Error(`Service ${serviceName} is not initializing`);\n  }\n\n  /**\n   * Reset a service's initialization state (for testing or error recovery)\n   */\n  resetService(serviceName: string): void {\n    const state = this.services.get(serviceName);\n    if (state) {\n      state.isInitialized = false;\n      state.isInitializing = false;\n      state.initializationPromise = null;\n      state.error = null;\n      state.timestamp = 0;\n    }\n  }\n\n  /**\n   * Get initialization state for a service\n   */\n  getServiceState(serviceName: string): InitializationState | null {\n    return this.services.get(serviceName) || null;\n  }\n\n  /**\n   * Get all service states (for debugging)\n   */\n  getAllServiceStates(): Record<string, InitializationState> {\n    const states: Record<string, InitializationState> = {};\n    for (const [name, state] of this.services.entries()) {\n      states[name] = { ...state };\n    }\n    return states;\n  }\n\n  /**\n   * Mark global initialization as complete\n   */\n  setGlobalInitialized(): void {\n    this.globalInitialized = true;\n    console.log('🎯 Global application initialization complete');\n  }\n\n  /**\n   * Check if global initialization is complete\n   */\n  isGlobalInitialized(): boolean {\n    return this.globalInitialized;\n  }\n\n  /**\n   * Wait for all registered services to be initialized\n   */\n  async waitForAllServices(timeoutMs = 30000): Promise<void> {\n    const serviceNames = Array.from(this.services.keys());\n    const promises = serviceNames.map(name => this.waitForService(name, timeoutMs));\n    \n    try {\n      await Promise.all(promises);\n      this.setGlobalInitialized();\n    } catch (error) {\n      console.error('❌ Not all services initialized successfully:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const initializationManager = InitializationManager.getInstance();\n\n// Make available globally for debugging\nif (typeof window !== 'undefined') {\n  (window as any).initializationManager = initializationManager;\n}\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\internalCommandService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1994,2095],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2219,2296],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2369,2474],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2548,2624],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2999,3062],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3282,3371],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3458,3542],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3616,3705],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3760,3823],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3861,3947],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 18 times.","line":141,"column":69,"nodeType":"Literal","endLine":141,"endColumn":97},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":380,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":380,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12891,12959],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":381,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":381,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12964,13027],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":382,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":382,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13032,13103],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":383,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":383,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13108,13177],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":386,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":386,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13221,13289],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"isEnabled\".","line":392,"column":9,"nodeType":"LogicalExpression","messageId":"doImmediateAction","endLine":395,"endColumn":79,"fix":{"range":[13383,13772],"text":"return (tool.category === 'terminal' && commandSettings.enabledCommands.terminal) ||\n        (tool.category === 'filesystem' && commandSettings.enabledCommands.filesystem) ||\n        (tool.category === 'textEditing' && commandSettings.enabledCommands.textEditing) ||\n        (tool.category === 'system' && commandSettings.enabledCommands.system)"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":400,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":400,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13787,13851],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13894,14013],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":419,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":419,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":435,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":435,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14800,14866],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":440,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":440,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14983,15040],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":447,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":447,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15297,15355],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":470,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":470,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15982,16045],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":512,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":512,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17196,17269],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * Internal Command Service (Browser-compatible)\n * Provides DesktopCommanderMCP-like functionality as internal tools\n * with directory-scoped security restrictions\n *\n * This service runs in the renderer process and communicates with\n * the Electron main process via IPC for actual command execution\n */\n\nimport {\n  CommandResult,\n  InternalCommandTool,\n  InternalCommandConfig\n} from '../types/internalCommands';\nimport { settingsService } from './settingsService';\nimport { initializationManager } from './initializationManager';\nimport { serviceRegistry, SERVICE_NAMES, DebugLoggerInterface } from './serviceRegistry';\n\nclass InternalCommandService {\n  static readonly SERVICE_NAME = 'InternalCommandService';\n\n  private availableTools: InternalCommandTool[] = [];\n  private isElectron = false;\n  private initialized = false;\n\n  constructor() {\n    // Check if running in Electron\n    this.isElectron = typeof window !== 'undefined' && window.electronAPI !== undefined;\n\n    // Register with initialization manager\n    initializationManager.registerService(InternalCommandService.SERVICE_NAME);\n\n    // Register with service registry to break circular dependencies\n    serviceRegistry.registerService(SERVICE_NAMES.INTERNAL_COMMAND_SERVICE, this);\n  }\n\n  /**\n   * Initialize the service and load configuration\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) {\n      // Already initialized, don't do it again\n      return;\n    }\n\n    // Use service registry to avoid circular dependency\n    const debugLogger = serviceRegistry.getService<DebugLoggerInterface>(SERVICE_NAMES.DEBUG_LOGGER);\n    if (debugLogger) {\n      debugLogger.debug('Loading internal commands settings:', settingsService.getSettings().internalCommands);\n      debugLogger.debug('Setting internal commands state:', { isElectron: this.isElectron });\n    }\n\n    if (this.isElectron) {\n      // Send configuration to Electron main process\n      const settings = settingsService.getSettings();\n      console.log(`🔧 InternalCommandService: Sending config to main process:`, settings.internalCommands);\n      await this.sendConfigToMainProcess(settings.internalCommands);\n\n      // Get available tools from main process\n      console.log(`🔧 InternalCommandService: Getting tools from main process...`);\n      this.availableTools = await this.getToolsFromMainProcess();\n      console.log(`🔧 InternalCommandService: Received ${this.availableTools.length} tools from main process`);\n    } else {\n      // In browser mode, use static tool definitions\n      console.log(`🔧 InternalCommandService: Browser mode - using static tools`);\n      this.defineStaticTools();\n    }\n\n    this.initialized = true;\n  }\n\n  /**\n   * Send configuration to main process\n   */\n  private async sendConfigToMainProcess(config: InternalCommandConfig): Promise<void> {\n    if (this.isElectron && window.electronAPI) {\n      try {\n        await window.electronAPI.setInternalCommandsConfig(config);\n      } catch (error) {\n        console.error('Failed to send config to main process:', error);\n      }\n    }\n  }\n\n  /**\n   * Get available tools from main process\n   */\n  private async getToolsFromMainProcess(): Promise<InternalCommandTool[]> {\n    if (this.isElectron && window.electronAPI) {\n      try {\n        console.log(`🔧 InternalCommandService: Calling electronAPI.getInternalCommandsTools()`);\n        const response = await window.electronAPI.getInternalCommandsTools();\n        console.log(`🔧 InternalCommandService: Raw response from main process:`, response);\n        const tools = (response as InternalCommandTool[]) || [];\n        console.log(`🔧 InternalCommandService: Parsed ${tools.length} tools from main process`);\n        return tools;\n      } catch (error) {\n        console.error('Failed to get tools from main process:', error);\n        return [];\n      }\n    }\n    console.log(`🔧 InternalCommandService: Not in Electron or no electronAPI available`);\n    return [];\n  }\n\n  /**\n   * Initialize tools (browser-compatible)\n   */\n  private initializeTools(): void {\n    // In browser mode, tools are defined statically and execution happens via IPC\n    this.defineStaticTools();\n  }\n\n  /**\n   * Define static tool definitions for browser environment\n   */\n  private defineStaticTools(): void {\n    // These are just the tool definitions - actual execution happens in main process\n    this.availableTools = this.getAllToolDefinitions();\n  }\n\n  /**\n   * Get all tool definitions for browser environment\n   */\n  private getAllToolDefinitions(): InternalCommandTool[] {\n    return [\n      // Terminal commands\n      {\n        name: 'start_process',\n        description: 'Start a new terminal process',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            command: { type: 'string' },\n            timeout_ms: { type: 'number' },\n            shell: { type: 'string' }\n          },\n          required: ['command', 'timeout_ms']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'read_process_output',\n        description: 'Read output from a running process',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            pid: { type: 'number' },\n            timeout_ms: { type: 'number' }\n          },\n          required: ['pid']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'interact_with_process',\n        description: 'Send input to an interactive process',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            pid: { type: 'number' },\n            input: { type: 'string' },\n            timeout_ms: { type: 'number' }\n          },\n          required: ['pid', 'input']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'force_terminate',\n        description: 'Force terminate a process',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            pid: { type: 'number' }\n          },\n          required: ['pid']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'list_sessions',\n        description: 'List all active terminal sessions',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'kill_process',\n        description: 'Kill a system process by PID',\n        category: 'terminal',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            pid: { type: 'number' }\n          },\n          required: ['pid']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'list_processes',\n        description: 'List all running processes on the system with CPU and memory usage',\n        category: 'system',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'get_cpu_usage',\n        description: 'Get current CPU usage percentage and system performance metrics. Works on Windows (PowerShell), macOS (zsh/bash), and Linux (bash).',\n        category: 'system',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'get_memory_usage',\n        description: 'Get current memory usage statistics including total, used, and available memory. Works on Windows (PowerShell), macOS (zsh/bash), and Linux (bash).',\n        category: 'system',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'get_system_info',\n        description: 'Get comprehensive system information including OS, CPU, memory, and disk usage. Works across all platforms.',\n        category: 'system',\n        inputSchema: {\n          type: 'object',\n          properties: {},\n          required: []\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      // Filesystem commands\n      {\n        name: 'read_file',\n        description: 'Read file contents (supports images, documents, code)',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            path: { type: 'string' },\n            isUrl: { type: 'boolean' },\n            offset: { type: 'number' },\n            length: { type: 'number' }\n          },\n          required: ['path']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'write_file',\n        description: 'Write or append to files',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            path: { type: 'string' },\n            content: { type: 'string' },\n            mode: { type: 'string' }\n          },\n          required: ['path', 'content']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'create_directory',\n        description: 'Create directories',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            path: { type: 'string' }\n          },\n          required: ['path']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'list_directory',\n        description: 'List directory contents',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            path: { type: 'string' }\n          },\n          required: ['path']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'move_file',\n        description: 'Move or rename files/directories',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            source: { type: 'string' },\n            destination: { type: 'string' }\n          },\n          required: ['source', 'destination']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'search_files',\n        description: 'Find files by name patterns',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            path: { type: 'string' },\n            pattern: { type: 'string' },\n            timeoutMs: { type: 'number' }\n          },\n          required: ['path', 'pattern']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      {\n        name: 'get_file_info',\n        description: 'Get detailed file metadata',\n        category: 'filesystem',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            path: { type: 'string' }\n          },\n          required: ['path']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      },\n      // Text editing commands\n      {\n        name: 'edit_block',\n        description: 'Apply surgical text replacements',\n        category: 'textEditing',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            file_path: { type: 'string' },\n            old_string: { type: 'string' },\n            new_string: { type: 'string' },\n            expected_replacements: { type: 'number' }\n          },\n          required: ['file_path', 'old_string', 'new_string']\n        },\n        handler: async () => ({ success: false, content: [], error: 'Not implemented in browser' })\n      }\n    ];\n  }\n\n  /**\n   * Get all available tools (filtered by enabled categories)\n   */\n  getAvailableTools(): InternalCommandTool[] {\n    const settings = settingsService.getSettings();\n    const commandSettings = settings.internalCommands;\n\n    console.log(`🔧 InternalCommandService.getAvailableTools() called`);\n    console.log(`🔧 Settings enabled: ${commandSettings.enabled}`);\n    console.log(`🔧 Available tools count: ${this.availableTools.length}`);\n    console.log(`🔧 Enabled commands:`, commandSettings.enabledCommands);\n\n    if (!commandSettings.enabled) {\n      console.log(`🔧 Internal commands disabled, returning empty array`);\n      return [];\n    }\n\n    const filteredTools = this.availableTools.filter(tool => {\n      const isEnabled =\n        (tool.category === 'terminal' && commandSettings.enabledCommands.terminal) ||\n        (tool.category === 'filesystem' && commandSettings.enabledCommands.filesystem) ||\n        (tool.category === 'textEditing' && commandSettings.enabledCommands.textEditing) ||\n        (tool.category === 'system' && commandSettings.enabledCommands.system);\n\n      return isEnabled;\n    });\n\n    console.log(`🔧 Filtered tools count: ${filteredTools.length}`);\n    if (filteredTools.length > 0) {\n      console.log(`🔧 Sample filtered tools:`, filteredTools.slice(0, 3).map(t => ({ name: t.name, category: t.category })));\n    }\n\n    return filteredTools;\n  }\n\n  /**\n   * Check if internal commands are enabled\n   */\n  isEnabled(): boolean {\n    const settings = settingsService.getSettings();\n    return settings.internalCommands.enabled;\n  }\n\n  /**\n   * Execute an internal command tool (via IPC in Electron)\n   */\n  async executeCommand(toolName: string, args: unknown): Promise<CommandResult> {\n    try {\n      // Check if service is enabled\n      if (!this.isEnabled()) {\n        return {\n          success: false,\n          content: [{\n            type: 'text',\n            text: 'Internal commands are disabled'\n          }],\n          error: 'Internal commands are disabled'\n        };\n      }\n\n      // In Electron, delegate to main process\n      if (this.isElectron && window.electronAPI) {\n        console.log(`🔧 Executing internal command via IPC: ${toolName}`);\n\n        try {\n          const result = await window.electronAPI.executeInternalCommand(toolName, args);\n\n          console.log(`✅ Internal command completed: ${toolName}`);\n          return (result as CommandResult) || {\n            success: false,\n            content: [{ type: 'text', text: 'No response from main process' }],\n            error: 'No response from main process'\n          };\n        } catch (error) {\n          console.error(`❌ IPC command failed: ${toolName}`, error);\n          return {\n            success: false,\n            content: [{\n              type: 'text',\n              text: `IPC Error: ${error instanceof Error ? error.message : String(error)}`\n            }],\n            error: error instanceof Error ? error.message : String(error)\n          };\n        }\n      }\n\n      // Fallback for non-Electron environments\n      return {\n        success: false,\n        content: [{\n          type: 'text',\n          text: 'Internal commands are only available in Electron environment'\n        }],\n        error: 'Not available in browser environment'\n      };\n\n    } catch (error) {\n      console.error(`❌ Internal command failed: ${toolName}`, error);\n\n      return {\n        success: false,\n        content: [{\n          type: 'text',\n          text: `Error executing ${toolName}: ${error instanceof Error ? error.message : String(error)}`\n        }],\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfiguration(): InternalCommandConfig {\n    const settings = settingsService.getSettings();\n    return settings.internalCommands;\n  }\n\n  /**\n   * Update configuration\n   */\n  async updateConfiguration(updates: Partial<InternalCommandConfig>): Promise<boolean> {\n    try {\n      const currentSettings = settingsService.getSettings();\n      const updatedSettings = {\n        ...currentSettings,\n        internalCommands: {\n          ...currentSettings.internalCommands,\n          ...updates\n        }\n      };\n\n      const success = await settingsService.updateSettings(updatedSettings);\n      if (success && this.isElectron) {\n        // Update configuration in main process\n        await this.sendConfigToMainProcess(updatedSettings.internalCommands);\n      }\n      return success;\n    } catch (error) {\n      console.error('Failed to update internal command configuration:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create error response helper\n   */\n  createErrorResponse(message: string): CommandResult {\n    return {\n      success: false,\n      content: [{\n        type: 'text',\n        text: `Error: ${message}`\n      }],\n      error: message\n    };\n  }\n\n  /**\n   * Create success response helper\n   */\n  createSuccessResponse(text: string): CommandResult {\n    return {\n      success: true,\n      content: [{\n        type: 'text',\n        text\n      }]\n    };\n  }\n}\n\n// Export singleton instance\nexport const internalCommandService = new InternalCommandService();\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\llmService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":240,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":240,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6773,6846],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6902,6985],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7803,7894],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[8817,8882],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9581,9648],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":309,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":309,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9728,9771],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":326,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":326,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10255,10322],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":341,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":341,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10686,10762],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":344,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":344,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10817,10899],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":367,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":367,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11528,11576],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":378,"column":16,"nodeType":null,"messageId":"refactorFunction","endLine":378,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":380,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":380,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11773,11835],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":381,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":381,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11843,11898],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":382,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":382,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11906,11986],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":386,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":386,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12095,12167],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":391,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":391,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12264,12329],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":393,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":393,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12402,12485],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":397,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":397,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12593,12704],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":400,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":400,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12800,12890],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12952,13049],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":407,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":407,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13204,13540],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":415,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":415,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13619,13685],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":417,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":417,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13728,13837],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":420,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":420,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13952,14068],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":443,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":443,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15000,15060],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":453,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":453,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15344,15393],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":455,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":455,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15423,15501],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":476,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":476,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16163,16239],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":478,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":478,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16269,16395],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":482,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":482,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16425,16545],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":485,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":485,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16614,16677],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":490,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":490,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16805,16895],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":493,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":493,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16954,17005],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 36 to the 15 allowed.","line":498,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":498,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":506,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":506,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[17356,17434],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":510,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":510,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17464,17533],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":514,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":514,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17623,17676],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":516,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":516,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17757,17829],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":521,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":521,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17982,18040],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":532,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":532,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18430,18507],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":539,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":539,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18738,18799],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":544,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":544,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18971,19026],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":549,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":549,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19280,19347],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":553,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":553,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19410,19470],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":556,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":556,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19531,19582],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":561,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":561,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19842,19900],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":567,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":567,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20009,20059],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":578,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":578,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20431,20500],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":599,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":599,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21377,21436],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":612,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":612,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21858,21920],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":621,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":621,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22125,22187],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"errorMessage\".","line":624,"column":28,"nodeType":"CallExpression","messageId":"doImmediateAction","endLine":624,"endColumn":75,"fix":{"range":[22259,22355],"text":"return this.categorizeToolError(toolName, error, args)"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":714,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":714,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27245,27349],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":716,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":716,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27375,27470],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":721,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":721,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[27538,27589],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":730,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":730,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27792,27862],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":734,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":734,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27985,28040],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":736,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":736,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28110,28206],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":739,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":739,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28276,28342],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":743,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":743,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28487,28572],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":745,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":745,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[28618,28692],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":751,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":751,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28821,28904],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":754,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":754,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[28958,29067],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":755,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":755,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[29077,29195],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":760,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":760,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[29267,29335],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":854,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":854,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32354,32450],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":858,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":858,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[32501,32566],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":881,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":881,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33074,33199],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":890,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":890,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33510,33607],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":895,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":895,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33853,33935],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":906,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":906,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[34191,34280],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":940,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":940,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35286,35413],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":959,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":959,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35805,35885],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":967,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":967,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36146,36230],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":971,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":971,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36387,36469],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":982,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":982,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[36725,36817],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1007,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1007,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[37601,37687],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1025,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1025,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38290,38414],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":75,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Extend Window interface for tool thinking trigger\r\ndeclare global {\r\n  interface Window {\r\n    triggerToolThinking?: (toolName: string) => void;\r\n  }\r\n}\r\n\r\nexport interface LLMProvider {\r\n  id: string;\r\n  name: string;\r\n  baseUrl: string;\r\n  requiresApiKey: boolean;\r\n  models: string[];\r\n  logo: string; // Path to the provider logo (dark theme)\r\n  logoLight?: string; // Path to the provider logo (light theme)\r\n}\r\n\r\nexport interface LLMSettings {\r\n  provider: string;\r\n  model: string;\r\n  apiKey: string;\r\n  baseUrl?: string;\r\n  temperature: number;\r\n  maxTokens: number;\r\n  systemPrompt?: string;\r\n  toolCallingEnabled?: boolean;\r\n  promptCachingEnabled?: boolean; // Enable prompt caching when supported\r\n  memoryContext?: MemoryContext; // Memory context for provider-specific integration\r\n}\r\n\r\nimport { mcpService } from './mcpService';\r\nimport { getMemoryMCPTools, executeMemoryTool, isMemoryTool } from './memoryMCPTools';\r\nimport { memoryContextService, MemoryContext } from './memoryContextService';\r\nimport { internalCommandService } from './internalCommandService';\r\nimport { settingsService } from './settingsService';\r\nimport { ProviderAdapter } from './providers/ProviderAdapter';\r\nimport { debugLogger } from './debugLogger';\r\nimport {\r\n  ToolObject,\r\n  MessageContent,\r\n  ContentItem,\r\n  LLMResponse\r\n} from './providers/types';\r\n\r\n// Type guards for tool types\r\ninterface MCPTool {\r\n  name: string;\r\n  description: string;\r\n  inputSchema?: Record<string, unknown>;\r\n  serverId?: string;\r\n}\r\n\r\n// interface MemoryTool {\r\n//   type: string;\r\n//   function: {\r\n//     name: string;\r\n//     description: string;\r\n//     parameters: Record<string, unknown>;\r\n//   };\r\n// }\r\n\r\n// Types are imported from providers/types\r\n\r\n// Tool call arguments interface\r\nexport interface ToolCallArguments {\r\n  [key: string]: unknown;\r\n}\r\n\r\n// Tool execution result interface\r\nexport interface ToolExecutionResult {\r\n  success: boolean;\r\n  result?: unknown;\r\n  error?: string;\r\n  toolName: string;\r\n  arguments: ToolCallArguments;\r\n}\r\n\r\n// Combined tool type for MCP and Memory tools (currently unused)\r\n// type CombinedTool = MCPTool | MemoryTool;\r\n\r\n// Type guard functions (currently unused but kept for potential future use)\r\n// function isMCPTool(tool: CombinedTool): tool is MCPTool {\r\n//   return 'name' in tool && 'description' in tool && !('function' in tool);\r\n// }\r\n\r\n// function isMemoryToolType(tool: CombinedTool): tool is MemoryTool {\r\n//   return 'type' in tool && 'function' in tool;\r\n// }\r\n\r\n// Helper function to check if a tool is an internal command\r\nfunction isInternalCommand(toolName: string): boolean {\r\n  const internalCommandNames = [\r\n    // Terminal commands (from executeSpecificCommand)\r\n    'start_process', 'read_process_output', 'interact_with_process',\r\n    'force_terminate', 'list_sessions', 'kill_process', 'list_processes',\r\n    // System commands (from executeSpecificCommand)\r\n    'get_cpu_usage', 'get_memory_usage', 'get_system_info',\r\n    // Filesystem commands (from executeSpecificCommand)\r\n    'read_file', 'write_file', 'create_directory', 'list_directory',\r\n    'move_file', 'search_files', 'get_file_info', 'delete_file',\r\n    // Text editing commands (from executeSpecificCommand)\r\n    'edit_block'\r\n  ];\r\n  return internalCommandNames.includes(toolName);\r\n}\r\n\r\n// ToolObject is imported from providers/types\r\n\r\n// Default providers configuration\r\nconst DEFAULT_PROVIDERS: LLMProvider[] = [\r\n  {\r\n    id: 'openai',\r\n    name: 'OpenAI',\r\n    baseUrl: 'https://api.openai.com/v1',\r\n    requiresApiKey: true,\r\n    models: [],\r\n    logo: '/assets/providers/openai.png'\r\n  },\r\n  {\r\n    id: 'anthropic',\r\n    name: 'Anthropic',\r\n    baseUrl: 'https://api.anthropic.com/v1',\r\n    requiresApiKey: true,\r\n    models: [],\r\n    logo: '/assets/providers/anthropic.png'\r\n  },\r\n  {\r\n    id: 'gemini',\r\n    name: 'Google Gemini',\r\n    baseUrl: 'https://generativelanguage.googleapis.com/v1beta',\r\n    requiresApiKey: true,\r\n    models: [],\r\n    logo: '/assets/providers/gemini.png'\r\n  },\r\n  {\r\n    id: 'mistral',\r\n    name: 'Mistral AI',\r\n    baseUrl: 'https://api.mistral.ai/v1',\r\n    requiresApiKey: true,\r\n    models: [],\r\n    logo: '/assets/providers/mistral.png'\r\n  },\r\n  {\r\n    id: 'deepseek',\r\n    name: 'DeepSeek',\r\n    baseUrl: 'https://api.deepseek.com/v1',\r\n    requiresApiKey: true,\r\n    models: [],\r\n    logo: '/assets/providers/deepseek.png'\r\n  },\r\n  {\r\n    id: 'deepinfra',\r\n    name: 'Deepinfra',\r\n    baseUrl: 'https://api.deepinfra.com/v1/openai',\r\n    requiresApiKey: true,\r\n    models: [],\r\n    logo: '/assets/providers/deepinfra.png',\r\n    logoLight: '/assets/providers/deepinfra-light.png'\r\n  },\r\n  {\r\n    id: 'lmstudio',\r\n    name: 'LM Studio',\r\n    baseUrl: 'http://localhost:1234/v1',\r\n    requiresApiKey: false,\r\n    models: [],\r\n    logo: '/assets/providers/lmstudio.png'\r\n  },\r\n  {\r\n    id: 'jan',\r\n    name: 'Jan AI',\r\n    baseUrl: 'http://127.0.0.1:1337/v1',\r\n    requiresApiKey: true,\r\n    models: [],\r\n    logo: '/assets/providers/jan.svg'\r\n  },\r\n  {\r\n    id: 'ollama',\r\n    name: 'Ollama (Local)',\r\n    baseUrl: '',\r\n    requiresApiKey: false,\r\n    models: [],\r\n    logo: '/assets/providers/ollama.png'\r\n  },\r\n  {\r\n    id: 'openrouter',\r\n    name: 'OpenRouter',\r\n    baseUrl: 'https://openrouter.ai/api/v1',\r\n    requiresApiKey: true,\r\n    models: [],\r\n    logo: '/assets/providers/openrouter.png'\r\n  },\r\n  {\r\n    id: 'requesty',\r\n    name: 'Requesty',\r\n    baseUrl: 'https://router.requesty.ai/v1',\r\n    requiresApiKey: true,\r\n    models: [],\r\n    logo: '/assets/providers/requesty.svg'\r\n  },\r\n  {\r\n    id: 'replicate',\r\n    name: 'Replicate',\r\n    baseUrl: 'https://api.replicate.com/v1',\r\n    requiresApiKey: true,\r\n    models: [],\r\n    logo: '/assets/providers/replicate.png'\r\n  },\r\n  {\r\n    id: 'n8n',\r\n    name: 'n8n Workflow',\r\n    baseUrl: '',\r\n    requiresApiKey: false,\r\n    models: [],\r\n    logo: '/assets/providers/n8n.png'\r\n  }\r\n];\r\n\r\n// FALLBACK_MODELS removed - providers now properly throw errors instead of masking failures\r\n\r\nclass LLMService {\r\n  private providers: LLMProvider[] = DEFAULT_PROVIDERS;\r\n  private modelCache: Map<string, { models: string[], timestamp: number }> = new Map();\r\n  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n  private providerAdapter: ProviderAdapter;\r\n\r\n  constructor() {\r\n    // Initialize provider adapter and inject dependencies\r\n    this.providerAdapter = new ProviderAdapter();\r\n    this.setupProviderAdapter();\r\n\r\n    // Initialize internal command service\r\n    this.initializeInternalCommands();\r\n  }\r\n\r\n  private async initializeInternalCommands() {\r\n    try {\r\n      // Only initialize once - service handles duplicate initialization prevention\r\n      await internalCommandService.initialize();\r\n    } catch (error) {\r\n      console.error('❌ Failed to initialize internal command service:', error);\r\n    }\r\n  }\r\n\r\n  private setupProviderAdapter() {\r\n    console.log(`🔧 LLMService: Setting up ProviderAdapter with dependency injection`);\r\n\r\n    // Inject dependencies into the provider adapter\r\n    this.providerAdapter.setMCPToolsGetter(this.getMCPToolsForProvider.bind(this));\r\n    this.providerAdapter.setToolExecutor(this.executeMCPTool.bind(this));\r\n    this.providerAdapter.setToolShouldSendChecker(this.shouldSendTools.bind(this));\r\n    this.providerAdapter.setMemoryCreator(this.createMemoryFromConversation.bind(this));\r\n\r\n    // Inject new tool execution dependencies\r\n    this.providerAdapter.setMultipleToolsExecutor(this.executeMultipleToolsParallel.bind(this));\r\n    this.providerAdapter.setToolResultsSummarizer(this.summarizeToolResultsForModel.bind(this));\r\n    this.providerAdapter.setToolResultsAggregator(this.aggregateToolResults.bind(this));\r\n    this.providerAdapter.setToolResultFormatter(this.formatToolResult.bind(this));\r\n\r\n    console.log(`✅ LLMService: ProviderAdapter setup complete with all dependencies injected`);\r\n  }\r\n\r\n  getProviders(): LLMProvider[] {\r\n    return this.providers;\r\n  }\r\n\r\n  getProvider(id: string): LLMProvider | undefined {\r\n    return this.providers.find(p => p.id === id);\r\n  }\r\n\r\n  // Get the provider adapter for accessing actual provider instances\r\n  getProviderAdapter(): ProviderAdapter {\r\n    return this.providerAdapter;\r\n  }\r\n\r\n  async getModels(providerId: string, apiKey?: string, baseUrl?: string): Promise<string[]> {\r\n    const cacheKey = `${providerId}-${apiKey || 'no-key'}-${baseUrl || 'default'}`;\r\n    const cached = this.modelCache.get(cacheKey);\r\n\r\n    if (cached && Date.now() - cached.timestamp < this.CACHE_DURATION) {\r\n      return cached.models;\r\n    }\r\n\r\n    try {\r\n      const models = await this.providerAdapter.fetchModels(providerId, apiKey || '', baseUrl);\r\n      this.modelCache.set(cacheKey, { models, timestamp: Date.now() });\r\n      return models;\r\n    } catch (error) {\r\n      console.warn(`Failed to fetch models for ${providerId}:`, error);\r\n      // Don't return fallback models - let the UI handle the empty state\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Alias for backward compatibility with frontend\r\n  async fetchModels(providerId: string, apiKey?: string, baseUrl?: string): Promise<string[]> {\r\n    return this.getModels(providerId, apiKey, baseUrl);\r\n  }\r\n\r\n  // Clear model cache for a specific provider (useful when API keys change)\r\n  clearModelCache(providerId?: string): void {\r\n    if (providerId) {\r\n      // Clear cache for specific provider\r\n      const keysToDelete = Array.from(this.modelCache.keys()).filter(key => key.startsWith(`${providerId}-`));\r\n      keysToDelete.forEach(key => this.modelCache.delete(key));\r\n      console.log(`🗑️ Cleared model cache for provider: ${providerId}`);\r\n    } else {\r\n      // Clear all cache\r\n      this.modelCache.clear();\r\n      console.log('🗑️ Cleared all model cache');\r\n    }\r\n  }\r\n\r\n  async sendMessage(\r\n    message: string | MessageContent,\r\n    settings: LLMSettings,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    const provider = this.getProvider(settings.provider);\r\n    if (!provider) {\r\n      throw new Error(`Provider ${settings.provider} not found`);\r\n    }\r\n\r\n    console.log(`🚀 LLMService: Sending message via ${provider.name}`);\r\n\r\n    try {\r\n      // Use the new ProviderAdapter for all providers\r\n      const response = await this.providerAdapter.sendMessage(\r\n        settings.provider, // providerId is the first parameter\r\n        message,\r\n        settings,\r\n        provider,\r\n        conversationHistory,\r\n        onStream,\r\n        signal,\r\n        conversationId\r\n      );\r\n\r\n      console.log(`✅ LLMService: Message sent successfully via ${provider.name}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`❌ LLMService: Error sending message via ${provider.name}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async testConnection(settings: LLMSettings): Promise<boolean> {\r\n    try {\r\n      const provider = this.getProvider(settings.provider);\r\n      if (!provider) {\r\n        return false;\r\n      }\r\n\r\n      // Test with a simple message\r\n      const testMessage = \"Hello\";\r\n      const testSettings = {\r\n        ...settings,\r\n        maxTokens: 10, // Minimal tokens for testing\r\n        toolCallingEnabled: false // Disable tools for connection test\r\n      };\r\n\r\n      await this.sendMessage(testMessage, testSettings, [], undefined, undefined);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Connection test failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // MCP Integration Methods\r\n\r\n  public async getMCPToolsForProvider(provider: string, settings?: LLMSettings): Promise<unknown[]> {\r\n    try {\r\n      console.log(`🔍 Getting MCP tools for provider: ${provider}`);\r\n      console.log(`🔍 MCP Service available:`, !!mcpService);\r\n      console.log(`🔍 Tool calling enabled:`, settings?.toolCallingEnabled !== false);\r\n\r\n      // Check if tool calling is disabled\r\n      if (settings?.toolCallingEnabled === false) {\r\n        console.log(`🚫 Tool calling is disabled, returning empty tools array`);\r\n        return [];\r\n      }\r\n\r\n      // Get tools directly from enabled servers in JSON\r\n      console.log(`🔍 Reading MCP servers directly from JSON file...`);\r\n      const mcpTools = await this.getToolsFromEnabledServers();\r\n      console.log(`📋 Tools from enabled servers (${mcpTools.length} tools):`, mcpTools);\r\n\r\n      // Add memory tools to the available tools\r\n      const memoryTools = getMemoryMCPTools();\r\n      console.log(`🧠 Memory tools available (${memoryTools.length} tools):`, memoryTools.map(t => t.function.name));\r\n\r\n      // Get internal command tools if enabled (ensure service is initialized first)\r\n      console.log(`🔧 Ensuring settings are fully loaded before checking internal commands...`);\r\n      await settingsService.waitForInitialization();\r\n      console.log(`🔧 Settings initialization complete, now initializing internal command service...`);\r\n      await internalCommandService.initialize();\r\n\r\n      // Debug settings loading\r\n      const currentSettings = settingsService.getSettings();\r\n      console.log(`🔧 Current settings for internal commands:`, {\r\n        enabled: currentSettings.internalCommands?.enabled,\r\n        enabledCommands: currentSettings.internalCommands?.enabledCommands,\r\n        hasInternalCommands: !!currentSettings.internalCommands,\r\n        settingsInitialized: settingsService.isInitialized()\r\n      });\r\n\r\n      const isInternalEnabled = internalCommandService.isEnabled();\r\n      console.log(`🔧 Internal commands enabled: ${isInternalEnabled}`);\r\n      if (!isInternalEnabled) {\r\n        console.log(`💡 To enable internal commands: Go to Settings > Internal Commands > Enable Internal Commands`);\r\n      }\r\n      const internalTools = isInternalEnabled ? internalCommandService.getAvailableTools() : [];\r\n      console.log(`🔧 Internal command tools available (${internalTools.length} tools):`, internalTools.map(t => t.name));\r\n\r\n      // Convert all tools to a unified format that providers can handle\r\n      const unifiedTools: Array<{type: string, function: {name: string, description: string, parameters: unknown}, serverId?: string}> = [];\r\n      const toolNames = new Set<string>(); // Track tool names to prevent duplicates\r\n\r\n      // First, add internal command tools (highest priority)\r\n      for (const tool of internalTools) {\r\n        if (!toolNames.has(tool.name)) {\r\n          unifiedTools.push({\r\n            type: 'function',\r\n            function: {\r\n              name: tool.name,\r\n              description: tool.description,\r\n              parameters: tool.inputSchema || {\r\n                type: 'object',\r\n                properties: {},\r\n                required: []\r\n              }\r\n            },\r\n            serverId: 'internal-commands' // Mark as internal command\r\n          });\r\n          toolNames.add(tool.name);\r\n          console.log(`🔧 Added internal command tool: ${tool.name}`);\r\n        }\r\n      }\r\n\r\n      // Then add memory tools (medium priority)\r\n      for (const tool of memoryTools) {\r\n        const toolName = tool.function.name;\r\n        if (!toolNames.has(toolName)) {\r\n          unifiedTools.push(tool);\r\n          toolNames.add(toolName);\r\n          console.log(`🧠 Added memory tool: ${toolName}`);\r\n        } else {\r\n          console.log(`⚠️ Skipped duplicate memory tool: ${toolName} (already exists)`);\r\n        }\r\n      }\r\n\r\n      // Finally, add MCP tools (lowest priority - skip if name conflicts)\r\n      for (const tool of mcpTools) {\r\n        if (!toolNames.has(tool.name)) {\r\n          unifiedTools.push({\r\n            type: 'function',\r\n            function: {\r\n              name: tool.name,\r\n              description: tool.description,\r\n              parameters: tool.inputSchema || {\r\n                type: 'object',\r\n                properties: {},\r\n                required: []\r\n              }\r\n            },\r\n            serverId: tool.serverId // Keep server ID for execution routing\r\n          });\r\n          toolNames.add(tool.name);\r\n          console.log(`📋 Added MCP tool: ${tool.name} from server ${tool.serverId}`);\r\n        } else {\r\n          console.log(`⚠️ Skipped duplicate MCP tool: ${tool.name} from server ${tool.serverId} (conflicts with higher priority tool)`);\r\n        }\r\n      }\r\n\r\n      console.log(`📋 Total unified tools available (${unifiedTools.length} tools):`, unifiedTools.map(t => t.function.name));\r\n\r\n      if (!unifiedTools || unifiedTools.length === 0) {\r\n        console.log(`⚠️ No tools available for provider: ${provider}`);\r\n        return [];\r\n      }\r\n\r\n      // Return unified tools - all in the same format for consistent provider handling\r\n      console.log(`✅ Returning ${unifiedTools.length} unified tools for ${provider} to format`);\r\n      return unifiedTools;\r\n    } catch (error) {\r\n      console.error('❌ Failed to get MCP tools:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private async executeMCPTool(toolName: string, args: Record<string, unknown>): Promise<string> {\r\n    try {\r\n      // Parse arguments if they're a JSON string\r\n      let parsedArgs = args;\r\n      if (typeof args === 'string') {\r\n        try {\r\n          parsedArgs = JSON.parse(args);\r\n        } catch {\r\n          console.warn(`⚠️ Failed to parse tool arguments as JSON, using as-is:`, args);\r\n        }\r\n      }\r\n\r\n      console.log(`🔧 Executing tool: ${toolName} with args:`, parsedArgs);\r\n\r\n      // Check if this is a memory tool\r\n      if (isMemoryTool(toolName)) {\r\n        console.log(`🧠 Executing memory tool: ${toolName}`);\r\n        const result = await executeMemoryTool(toolName, parsedArgs);\r\n        console.log(`✅ Memory tool ${toolName} executed successfully:`, result);\r\n        return JSON.stringify(result);\r\n      }\r\n      // Check if this is an internal command\r\n      else if (isInternalCommand(toolName)) {\r\n        console.log(`🔧 Executing internal command: ${toolName}`);\r\n\r\n        // Trigger thinking indicator for tool execution\r\n        if (typeof window !== 'undefined' && window.triggerToolThinking) {\r\n          window.triggerToolThinking(toolName);\r\n        }\r\n\r\n        const startTime = Date.now();\r\n        const result = await internalCommandService.executeCommand(toolName, parsedArgs);\r\n        const duration = Date.now() - startTime;\r\n\r\n        console.log(`✅ Internal command ${toolName} executed successfully:`, result);\r\n\r\n        // Automatically log tool execution for debugging\r\n        debugLogger.logToolExecution(toolName, parsedArgs, result, duration);\r\n\r\n        // Format result for LLM consumption\r\n        if (result.success) {\r\n          console.log(`🔧 Internal command result structure:`, result);\r\n          const textContent = result.content\r\n            .filter(item => item.type === 'text')\r\n            .map(item => item.text)\r\n            .join('\\n');\r\n          console.log(`🔧 Extracted text content:`, textContent);\r\n\r\n          // Ensure we have meaningful content to return to the LLM\r\n          if (!textContent || textContent.trim() === '') {\r\n            const fallbackResult = `The ${toolName} command executed successfully but returned no output.`;\r\n            console.log(`🔧 No text content, using fallback:`, fallbackResult);\r\n            return fallbackResult;\r\n          }\r\n\r\n          console.log(`🔧 Final result being returned:`, textContent);\r\n          return textContent;\r\n        } else {\r\n          console.log(`🔧 Internal command failed:`, result);\r\n\r\n          // Format error in a user-friendly way for the LLM\r\n          const errorMessage = result.error || 'Command failed';\r\n          const friendlyError = `The ${toolName} command failed. ${this.formatErrorForLLM(errorMessage, toolName)}`;\r\n          console.log(`🔧 Formatted error for LLM:`, friendlyError);\r\n          return friendlyError;\r\n        }\r\n      }\r\n      else {\r\n        // Execute as MCP tool\r\n        console.log(`🔧 Executing MCP tool: ${toolName}`);\r\n\r\n        // Trigger thinking indicator for tool execution\r\n        if (typeof window !== 'undefined' && window.triggerToolThinking) {\r\n          window.triggerToolThinking(toolName);\r\n        }\r\n\r\n        const startTime = Date.now();\r\n        const result = await mcpService.callTool(toolName, parsedArgs);\r\n        const duration = Date.now() - startTime;\r\n\r\n        console.log(`✅ MCP tool ${toolName} executed successfully:`, result);\r\n\r\n        // Automatically log MCP tool execution for debugging\r\n        debugLogger.logToolExecution(toolName, parsedArgs, result, duration);\r\n\r\n        // Format MCP tool results consistently\r\n        if (result && typeof result === 'object') {\r\n          const resultObj = result as {\r\n            content?: Array<{ type: string; text?: string }>;\r\n            text?: string;\r\n            error?: unknown;\r\n          }; // Type assertion for MCP result object\r\n\r\n          // If result has content, extract it\r\n          if (resultObj.content && Array.isArray(resultObj.content)) {\r\n            const textContent = resultObj.content\r\n              .filter((item: { type: string; text?: string }) => item.type === 'text')\r\n              .map((item: { type: string; text?: string }) => item.text)\r\n              .join('\\n');\r\n\r\n            if (textContent) {\r\n              console.log(`🔧 Extracted MCP text content:`, textContent);\r\n              return textContent;\r\n            }\r\n          }\r\n\r\n          // If result has a direct text property\r\n          if (resultObj.text) {\r\n            return resultObj.text;\r\n          }\r\n\r\n          // If result has error information\r\n          if (resultObj.error) {\r\n            const friendlyError = `The ${toolName} tool failed. ${this.formatErrorForLLM(String(resultObj.error), toolName)}`;\r\n            console.log(`🔧 Formatted MCP error for LLM:`, friendlyError);\r\n            return friendlyError;\r\n          }\r\n        }\r\n\r\n        // Fallback to JSON string if no specific format found\r\n        return JSON.stringify(result);\r\n      }\r\n    } catch (error) {\r\n      console.error(`❌ Failed to execute tool ${toolName}:`, error);\r\n\r\n      // Categorize and provide user-friendly error messages\r\n      const errorMessage = this.categorizeToolError(toolName, error, args);\r\n      return errorMessage;\r\n    }\r\n  }\r\n\r\n  // Enhanced error categorization for better user feedback\r\n  private categorizeToolError(toolName: string, error: unknown, args: Record<string, unknown>): string {\r\n    const errorStr = error instanceof Error ? error.message : String(error);\r\n    const errorLower = errorStr.toLowerCase();\r\n\r\n    // Network/Connection Errors\r\n    if (errorLower.includes('network') || errorLower.includes('connection') ||\r\n        errorLower.includes('timeout') || errorLower.includes('econnrefused') ||\r\n        errorLower.includes('fetch failed') || errorLower.includes('socket')) {\r\n      return `🌐 Network Error: Unable to connect to the service for ${toolName}. Please check your internet connection and try again.`;\r\n    }\r\n\r\n    // Tool Not Found Errors\r\n    if (errorLower.includes('not found') || errorLower.includes('unknown tool') ||\r\n        errorLower.includes('tool') && errorLower.includes('not available')) {\r\n      return `🔧 Tool Unavailable: The ${toolName} tool is not currently available. This might be due to a service configuration issue or the tool being temporarily disabled.`;\r\n    }\r\n\r\n    // Authentication/Permission Errors\r\n    if (errorLower.includes('unauthorized') || errorLower.includes('forbidden') ||\r\n        errorLower.includes('authentication') || errorLower.includes('api key') ||\r\n        errorLower.includes('permission denied')) {\r\n      return `🔐 Authentication Error: Access denied for ${toolName}. Please check your API credentials or permissions.`;\r\n    }\r\n\r\n    // Rate Limiting Errors\r\n    if (errorLower.includes('rate limit') || errorLower.includes('too many requests') ||\r\n        errorLower.includes('quota exceeded') || errorLower.includes('429')) {\r\n      return `⏱️ Rate Limit: Too many requests to ${toolName}. Please wait a moment before trying again.`;\r\n    }\r\n\r\n    // Invalid Arguments Errors\r\n    if (errorLower.includes('invalid') && (errorLower.includes('argument') || errorLower.includes('parameter')) ||\r\n        errorLower.includes('missing required') || errorLower.includes('validation error')) {\r\n      const argsList = Object.keys(args).length > 0 ? `\\nProvided arguments: ${JSON.stringify(args, null, 2)}` : '\\nNo arguments provided.';\r\n      return `📝 Invalid Arguments: The ${toolName} tool received invalid or missing parameters.${argsList}\\nPlease check the tool documentation for required parameters.`;\r\n    }\r\n\r\n    // Service Unavailable Errors\r\n    if (errorLower.includes('service unavailable') || errorLower.includes('502') ||\r\n        errorLower.includes('503') || errorLower.includes('504') ||\r\n        errorLower.includes('server error') || errorLower.includes('internal error')) {\r\n      return `🚫 Service Unavailable: The ${toolName} service is temporarily unavailable. Please try again later.`;\r\n    }\r\n\r\n    // JSON/Parsing Errors\r\n    if (errorLower.includes('json') || errorLower.includes('parse') ||\r\n        errorLower.includes('syntax error') || errorLower.includes('unexpected token')) {\r\n      return `📄 Data Format Error: The ${toolName} tool returned malformed data. This is likely a temporary issue with the service.`;\r\n    }\r\n\r\n    // Timeout Errors\r\n    if (errorLower.includes('timeout') || errorLower.includes('timed out') ||\r\n        errorLower.includes('deadline exceeded')) {\r\n      return `⏰ Timeout Error: The ${toolName} tool took too long to respond. The service might be overloaded. Please try again.`;\r\n    }\r\n\r\n    // Generic Error with helpful context\r\n    return `❌ Tool Execution Error: ${toolName} failed to execute.\\nError: ${errorStr}\\n\\nThis might be a temporary issue. Please try again or contact support if the problem persists.`;\r\n  }\r\n\r\n  // Helper to determine if tools should be sent based on conversation state\r\n  private async shouldSendTools(conversationId: string | undefined, tools: ToolObject[]): Promise<boolean> {\r\n    if (!conversationId || tools.length === 0) {\r\n      return tools.length > 0; // Send tools if available and no conversation tracking\r\n    }\r\n\r\n    try {\r\n      // Import conversation service dynamically to avoid circular dependencies\r\n      const { conversationHistoryService } = await import('./conversationHistoryService');\r\n\r\n      // Generate current tools hash\r\n      const currentToolsHash = conversationHistoryService.generateToolsHash(tools);\r\n\r\n      // Get stored tools hash for this conversation\r\n      const storedToolsHash = await conversationHistoryService.getToolsHashForConversation(conversationId);\r\n\r\n      // Send tools if:\r\n      // 1. No stored hash (first message in conversation)\r\n      // 2. Tools have changed (different hash)\r\n      const shouldSend = !storedToolsHash || storedToolsHash !== currentToolsHash;\r\n\r\n      if (shouldSend) {\r\n        // Update stored hash for this conversation\r\n        await conversationHistoryService.setToolsHashForConversation(conversationId, currentToolsHash);\r\n        console.log(`🔧 Sending tools to ${conversationId}: ${tools.length} tools (hash: ${currentToolsHash})`);\r\n      } else {\r\n        console.log(`🔧 Skipping tools for ${conversationId}: no changes (hash: ${currentToolsHash})`);\r\n      }\r\n\r\n      return shouldSend;\r\n    } catch (error) {\r\n      console.error('Error checking tool state:', error);\r\n      return tools.length > 0; // Fallback to always send tools\r\n    }\r\n  }\r\n\r\n  // Helper methods for MCP tools\r\n\r\n  private async getToolsFromEnabledServers(): Promise<MCPTool[]> {\r\n    try {\r\n      console.log(`🔍 Attempting to get MCP tools from enabled servers...`);\r\n      \r\n      // First, check if we can get the server list\r\n      const servers = await mcpService.getServers();\r\n      console.log(`📊 MCP servers found: ${servers.length}`);\r\n      const enabledServers = servers.filter(s => s.enabled);\r\n      console.log(`✅ Enabled MCP servers: ${enabledServers.length}`, enabledServers.map(s => s.name));\r\n      \r\n      // Check if servers need to be connected first\r\n      console.log(`🔗 Attempting to connect to enabled MCP servers...`);\r\n      for (const server of enabledServers) {\r\n        try {\r\n          const connected = await mcpService.connectServer(server.id);\r\n          console.log(`🔗 Server ${server.name} (${server.id}) connection result:`, connected);\r\n        } catch (connectError) {\r\n          console.error(`❌ Failed to connect server ${server.name}:`, connectError);\r\n        }\r\n      }\r\n      \r\n      // Now try to get tools\r\n      const mcpTools = await mcpService.getAvailableTools();\r\n      console.log(`📋 Raw MCP tools from service (${mcpTools.length} tools):`, mcpTools);\r\n      \r\n      if (mcpTools.length === 0) {\r\n        console.warn(`⚠️ No MCP tools retrieved despite enabled servers. This indicates an MCP connectivity issue.`);\r\n        console.warn(`⚠️ Possible causes: 1) Servers not connected, 2) Tool extraction failing, 3) IPC communication broken`);\r\n      }\r\n      \r\n      return mcpTools;\r\n    } catch (error) {\r\n      console.error(`❌ Failed to get tools from enabled servers:`, error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Format error messages in a user-friendly way for LLM consumption\r\n   */\r\n  private formatErrorForLLM(errorMessage: string, toolName: string): string {\r\n    // Common error patterns and their user-friendly explanations\r\n    const errorPatterns = [\r\n      {\r\n        pattern: /Unknown internal command/i,\r\n        replacement: `The command \"${toolName}\" is not available or not enabled in the current configuration.`\r\n      },\r\n      {\r\n        pattern: /Path is not allowed/i,\r\n        replacement: `Access to the specified path is not permitted. Please check the allowed directories in settings.`\r\n      },\r\n      {\r\n        pattern: /ENOENT|No such file or directory/i,\r\n        replacement: `The specified file or directory does not exist.`\r\n      },\r\n      {\r\n        pattern: /EACCES|Permission denied/i,\r\n        replacement: `Permission denied. The system does not allow access to this resource.`\r\n      },\r\n      {\r\n        pattern: /timeout|timed out/i,\r\n        replacement: `The operation timed out. The command may be taking too long to execute.`\r\n      },\r\n      {\r\n        pattern: /Not implemented in browser/i,\r\n        replacement: `This command is not available in the current environment.`\r\n      }\r\n    ];\r\n\r\n    // Try to match and replace with user-friendly message\r\n    for (const { pattern, replacement } of errorPatterns) {\r\n      if (pattern.test(errorMessage)) {\r\n        return replacement;\r\n      }\r\n    }\r\n\r\n    // If no pattern matches, return a generic friendly message\r\n    return `An error occurred: ${errorMessage}. Please check your configuration and try again.`;\r\n  }\r\n\r\n  private truncateToolNameForAnthropic(name: string): string {\r\n    if (name.length <= 64) return name;\r\n\r\n    // Try to truncate intelligently by removing common prefixes/suffixes\r\n    let truncated = name;\r\n\r\n    // Remove common prefixes\r\n    const prefixes = ['mcp_', 'tool_', 'function_'];\r\n    for (const prefix of prefixes) {\r\n      if (truncated.startsWith(prefix)) {\r\n        truncated = truncated.substring(prefix.length);\r\n        break;\r\n      }\r\n    }\r\n\r\n    // If still too long, truncate from the end\r\n    if (truncated.length > 64) {\r\n      truncated = truncated.substring(0, 61) + '...';\r\n    }\r\n\r\n    return truncated;\r\n  }\r\n\r\n\r\n\r\n  private async createMemoryFromConversation(\r\n    userMessage: string,\r\n    aiResponse: string,\r\n    conversationHistory: Array<{role: string, content: string}> = [],\r\n    conversationId?: string,\r\n    projectId?: string\r\n  ): Promise<void> {\r\n    try {\r\n      // Analyze the conversation to determine if memory should be created\r\n      const analysis = memoryContextService.analyzeMessage(userMessage, conversationHistory);\r\n\r\n      if (analysis.shouldCreateMemory) {\r\n        const success = await memoryContextService.createMemoryFromConversation(\r\n          userMessage,\r\n          aiResponse,\r\n          analysis,\r\n          conversationId,\r\n          projectId\r\n        );\r\n\r\n        if (success) {\r\n          console.log(`🧠 Auto-created memory from conversation (type: ${analysis.suggestedMemoryType})`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating memory from conversation:', error);\r\n    }\r\n  }\r\n\r\n  // Private helper methods for tool execution\r\n\r\n  /**\r\n   * Execute multiple tools in parallel with proper routing (internal commands vs MCP tools)\r\n   */\r\n  private async executeMultipleToolsParallel(\r\n    toolCalls: Array<{\r\n      id?: string;\r\n      name: string;\r\n      arguments: Record<string, unknown>;\r\n    }>,\r\n    provider = 'unknown'\r\n  ): Promise<Array<{\r\n    id?: string;\r\n    name: string;\r\n    result: string;\r\n    success: boolean;\r\n    executionTime: number;\r\n  }>> {\r\n    console.log(`🚀 Executing ${toolCalls.length} tools in parallel (optimized) for ${provider}:`, toolCalls.map(tc => tc.name));\r\n\r\n    const startTime = Date.now();\r\n\r\n    // IMPORTANT: Use executeMCPTool for each tool to ensure proper routing\r\n    // This handles internal commands vs MCP tools correctly\r\n    const toolPromises = toolCalls.map(async (toolCall, index) => {\r\n      const toolStartTime = Date.now();\r\n      try {\r\n        console.log(`🔧 [${index}] Starting parallel execution of ${toolCall.name} with proper routing`);\r\n\r\n        // Use executeMCPTool which has the correct routing logic for internal commands\r\n        const result = await this.executeMCPTool(toolCall.name, toolCall.arguments);\r\n        const executionTime = Date.now() - toolStartTime;\r\n        console.log(`✅ [${index}] Tool ${toolCall.name} completed in ${executionTime}ms`);\r\n\r\n        return {\r\n          id: toolCall.id,\r\n          name: toolCall.name,\r\n          result,\r\n          success: true,\r\n          executionTime\r\n        };\r\n      } catch (error) {\r\n        const executionTime = Date.now() - toolStartTime;\r\n        console.error(`❌ [${index}] Tool ${toolCall.name} failed in ${executionTime}ms:`, error);\r\n\r\n        return {\r\n          id: toolCall.id,\r\n          name: toolCall.name,\r\n          result: error instanceof Error ? error.message : String(error),\r\n          success: false,\r\n          executionTime\r\n        };\r\n      }\r\n    });\r\n\r\n    // Execute all tools in parallel using Promise.allSettled for proper error handling\r\n    const results = await Promise.allSettled(toolPromises);\r\n    const totalTime = Date.now() - startTime;\r\n\r\n    // Process results\r\n    const processedResults = results.map((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        return result.value;\r\n      } else {\r\n        return {\r\n          id: toolCalls[index].id,\r\n          name: toolCalls[index].name,\r\n          result: `Tool execution failed: ${result.reason}`,\r\n          success: false,\r\n          executionTime: 0\r\n        };\r\n      }\r\n    });\r\n\r\n    const successCount = processedResults.filter(r => r.success).length;\r\n    const failureCount = processedResults.length - successCount;\r\n\r\n    console.log(`🏁 Optimized parallel execution completed in ${totalTime}ms: ${successCount} successful, ${failureCount} failed`);\r\n\r\n    return processedResults;\r\n  }\r\n\r\n  /**\r\n   * Legacy parallel execution method (fallback)\r\n   */\r\n  private async executeMultipleToolsLegacy(toolCalls: Array<{\r\n    id?: string;\r\n    name: string;\r\n    arguments: Record<string, unknown>;\r\n  }>): Promise<Array<{\r\n    id?: string;\r\n    name: string;\r\n    result: string;\r\n    success: boolean;\r\n    executionTime: number;\r\n  }>> {\r\n    console.log(`🔄 Using legacy parallel execution for ${toolCalls.length} tools`);\r\n\r\n    const startTime = Date.now();\r\n\r\n    // Execute all tools in parallel using Promise.allSettled for proper error handling\r\n    const toolPromises = toolCalls.map(async (toolCall, index) => {\r\n      const toolStartTime = Date.now();\r\n      try {\r\n        console.log(`🔧 [${index}] Starting legacy parallel execution of ${toolCall.name}`);\r\n\r\n        const result = await this.executeMCPTool(toolCall.name, toolCall.arguments);\r\n        const executionTime = Date.now() - toolStartTime;\r\n        console.log(`✅ [${index}] Tool ${toolCall.name} completed in ${executionTime}ms`);\r\n\r\n        return {\r\n          id: toolCall.id,\r\n          name: toolCall.name,\r\n          result,\r\n          success: true,\r\n          executionTime\r\n        };\r\n      } catch (error) {\r\n        const executionTime = Date.now() - toolStartTime;\r\n        console.error(`❌ [${index}] Tool ${toolCall.name} failed after ${executionTime}ms:`, error);\r\n\r\n        return {\r\n          id: toolCall.id,\r\n          name: toolCall.name,\r\n          result: JSON.stringify({\r\n            error: `Legacy parallel execution failed: ${error instanceof Error ? error.message : String(error)}`,\r\n            toolName: toolCall.name,\r\n            args: toolCall.arguments\r\n          }),\r\n          success: false,\r\n          executionTime\r\n        };\r\n      }\r\n    });\r\n\r\n    // Wait for all tools to complete (successful or failed)\r\n    const results = await Promise.allSettled(toolPromises);\r\n    const totalTime = Date.now() - startTime;\r\n\r\n    // Process results and extract values\r\n    const processedResults = results.map((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        return result.value;\r\n      } else {\r\n        console.error(`❌ Promise rejected for tool ${toolCalls[index].name}:`, result.reason);\r\n        return {\r\n          id: toolCalls[index].id,\r\n          name: toolCalls[index].name,\r\n          result: JSON.stringify({\r\n            error: `Promise execution failed: ${result.reason instanceof Error ? result.reason.message : String(result.reason)}`,\r\n            toolName: toolCalls[index].name,\r\n            args: toolCalls[index].arguments\r\n          }),\r\n          success: false,\r\n          executionTime: 0\r\n        };\r\n      }\r\n    });\r\n\r\n    const successCount = processedResults.filter(r => r.success).length;\r\n    const failureCount = processedResults.length - successCount;\r\n\r\n    console.log(`🏁 Legacy parallel execution completed in ${totalTime}ms: ${successCount} successful, ${failureCount} failed`);\r\n\r\n    return processedResults;\r\n  }\r\n\r\n  /**\r\n   * Create user-friendly summary of tool execution results (for model context)\r\n   */\r\n  private summarizeToolResultsForModel(results: Array<{\r\n    id?: string;\r\n    name: string;\r\n    result: string;\r\n    success: boolean;\r\n    executionTime: number;\r\n  }>): string {\r\n    const successfulResults = results.filter(r => r.success);\r\n    const failedResults = results.filter(r => !r.success);\r\n\r\n    let summary = '';\r\n\r\n    // Add collapsible tool execution details (similar to <think> blocks)\r\n    summary += `<tool_execution>\\n`;\r\n    summary += `**Tool Execution Summary:** ${successfulResults.length}/${results.length} tools completed successfully.\\n\\n`;\r\n\r\n    // Add formatted results for the model to work with\r\n    successfulResults.forEach((result) => {\r\n      summary += `**${result.name} Result:**\\n`;\r\n\r\n      try {\r\n        const parsedResult = JSON.parse(result.result);\r\n        const formattedResult = this.formatToolResult(result.name, parsedResult);\r\n        summary += `${formattedResult}\\n\\n`;\r\n      } catch {\r\n        // If not JSON, add as plain text\r\n        const cleanResult = result.result.replace(/^\"|\"$/g, '');\r\n        summary += `${cleanResult}\\n\\n`;\r\n      }\r\n    });\r\n\r\n    // Add failed results if any\r\n    if (failedResults.length > 0) {\r\n      summary += `**Failed Tools:**\\n`;\r\n      failedResults.forEach((result) => {\r\n        summary += `- ${result.name}: ${result.result}\\n`;\r\n      });\r\n    }\r\n\r\n    summary += `</tool_execution>\\n\\n`;\r\n\r\n    return summary;\r\n  }\r\n\r\n  /**\r\n   * Enhanced aggregation and formatting of results from multiple tool executions (for debugging)\r\n   */\r\n  private aggregateToolResults(results: Array<{\r\n    id?: string;\r\n    name: string;\r\n    result: string;\r\n    success: boolean;\r\n    executionTime: number;\r\n  }>): string {\r\n    const successfulResults = results.filter(r => r.success);\r\n    const failedResults = results.filter(r => !r.success);\r\n\r\n    let aggregatedContent = '';\r\n\r\n    // Add execution summary with enhanced formatting\r\n    aggregatedContent += `## 🛠️ Multi-Tool Execution Results\\n`;\r\n    aggregatedContent += `**Executed:** ${results.length} tools | **✅ Success:** ${successfulResults.length} | **❌ Failed:** ${failedResults.length}\\n\\n`;\r\n\r\n    // Add successful results with intelligent formatting\r\n    if (successfulResults.length > 0) {\r\n      aggregatedContent += `### ✅ Successful Results\\n\\n`;\r\n      successfulResults.forEach((result) => {\r\n        aggregatedContent += `#### 🔧 **${result.name}** \\`${result.executionTime}ms\\`\\n`;\r\n\r\n        try {\r\n          const parsedResult = JSON.parse(result.result);\r\n          const formattedResult = this.formatToolResult(result.name, parsedResult);\r\n          aggregatedContent += `${formattedResult}\\n\\n`;\r\n        } catch {\r\n          // If not JSON, add as plain text with basic formatting\r\n          const cleanResult = result.result.replace(/^\"|\"$/g, ''); // Remove surrounding quotes\r\n          aggregatedContent += `${cleanResult}\\n\\n`;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Add failed results if any\r\n    if (failedResults.length > 0) {\r\n      aggregatedContent += `### ❌ Failed Results\\n\\n`;\r\n      failedResults.forEach((result) => {\r\n        aggregatedContent += `#### 🚨 **${result.name}** \\`${result.executionTime}ms\\`\\n`;\r\n        aggregatedContent += `**Error:** ${result.result}\\n\\n`;\r\n      });\r\n    }\r\n\r\n    return aggregatedContent;\r\n  }\r\n\r\n  /**\r\n   * Format individual tool results based on tool type and content\r\n   */\r\n  private formatToolResult(toolName: string, result: unknown): string {\r\n    const toolType = this.identifyToolType(toolName);\r\n\r\n    switch (toolType) {\r\n      case 'search':\r\n        return this.formatSearchResult(result as { results?: Array<{ title?: string; content?: string; snippet?: string; url?: string }> });\r\n      case 'memory':\r\n        return this.formatMemoryResult(result as { success?: boolean; memories?: Array<{ title?: string; content?: string }>; id?: string });\r\n      case 'file':\r\n        return this.formatFileResult(result as { content?: string; [key: string]: unknown });\r\n      case 'api':\r\n        return this.formatApiResult(result as { status?: string; data?: unknown; [key: string]: unknown });\r\n      case 'datetime':\r\n        return this.formatDateTimeResult(result as string | { content?: Array<{ text?: string }>; [key: string]: unknown });\r\n      case 'weather':\r\n        return this.formatWeatherResult(result as string | { weather?: string; temperature?: string; condition?: string; [key: string]: unknown });\r\n      default:\r\n        return this.formatGenericResult(result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Identify tool type based on tool name\r\n   */\r\n  private identifyToolType(toolName: string): string {\r\n    const name = toolName.toLowerCase();\r\n\r\n    if (name.includes('search') || name.includes('web')) {\r\n      return 'search';\r\n    } else if (name.includes('memory')) {\r\n      return 'memory';\r\n    } else if (name.includes('file') || name.includes('read') || name.includes('write')) {\r\n      return 'file';\r\n    } else if (name.includes('api') || name.includes('http') || name.includes('fetch')) {\r\n      return 'api';\r\n    } else if (name.includes('datetime') || name.includes('date') || name.includes('time')) {\r\n      return 'datetime';\r\n    } else if (name.includes('weather')) {\r\n      return 'weather';\r\n    }\r\n\r\n    return 'generic';\r\n  }\r\n\r\n  /**\r\n   * Format search tool results\r\n   */\r\n  private formatSearchResult(result: { results?: Array<{ title?: string; content?: string; snippet?: string; url?: string }> }): string {\r\n    if (result.results && Array.isArray(result.results)) {\r\n      let formatted = `**Found ${result.results.length} results:**\\n\\n`;\r\n      result.results.slice(0, 5).forEach((item: { title?: string; content?: string; snippet?: string; url?: string }, index: number) => {\r\n        formatted += `${index + 1}. **${item.title || 'No title'}**\\n`;\r\n        if (item.url) formatted += `   🔗 ${item.url}\\n`;\r\n        if (item.content || item.snippet) {\r\n          const content = (item.content || item.snippet || '').substring(0, 200);\r\n          formatted += `   ${content}${content.length >= 200 ? '...' : ''}\\n\\n`;\r\n        }\r\n      });\r\n      if (result.results.length > 5) {\r\n        formatted += `... and ${result.results.length - 5} more results\\n`;\r\n      }\r\n      return formatted;\r\n    }\r\n\r\n    return this.formatGenericResult(result);\r\n  }\r\n\r\n  /**\r\n   * Format memory tool results\r\n   */\r\n  private formatMemoryResult(result: { success?: boolean; memories?: Array<{ title?: string; content?: string }>; id?: string }): string {\r\n    if (result.success && result.memories && Array.isArray(result.memories)) {\r\n      let formatted = `**Retrieved ${result.memories.length} memory entries:**\\n\\n`;\r\n      result.memories.forEach((memory: { title?: string; content?: string }, index: number) => {\r\n        formatted += `${index + 1}. **${memory.title || 'Untitled'}**\\n`;\r\n        formatted += `   ${memory.content?.substring(0, 150)}${(memory.content?.length || 0) > 150 ? '...' : ''}\\n\\n`;\r\n      });\r\n      return formatted;\r\n    } else if (result.id) {\r\n      return `**Memory saved successfully** (ID: ${result.id})\\n`;\r\n    }\r\n\r\n    return this.formatGenericResult(result);\r\n  }\r\n\r\n  /**\r\n   * Format file tool results\r\n   */\r\n  private formatFileResult(result: { content?: string; [key: string]: unknown }): string {\r\n    if (result.content) {\r\n      const content = result.content.substring(0, 500);\r\n      return `**File Content:**\\n\\`\\`\\`\\n${content}${result.content.length > 500 ? '\\n... (truncated)' : ''}\\n\\`\\`\\`\\n`;\r\n    }\r\n\r\n    return this.formatGenericResult(result);\r\n  }\r\n\r\n  /**\r\n   * Format API tool results\r\n   */\r\n  private formatApiResult(result: { status?: string; data?: unknown; [key: string]: unknown }): string {\r\n    if (result.status && result.data) {\r\n      return `**API Response (${result.status}):**\\n\\`\\`\\`json\\n${JSON.stringify(result.data, null, 2)}\\n\\`\\`\\`\\n`;\r\n    }\r\n\r\n    return this.formatGenericResult(result);\r\n  }\r\n\r\n  /**\r\n   * Format datetime tool results\r\n   */\r\n  private formatDateTimeResult(result: string | { content?: Array<{ text?: string }>; [key: string]: unknown }): string {\r\n    if (typeof result === 'string') {\r\n      return `**Current Date/Time:** ${result}\\n`;\r\n    } else if (result.content && Array.isArray(result.content)) {\r\n      const text = result.content.map(item => item.text).join(' ');\r\n      return `**Date/Time Information:** ${text}\\n`;\r\n    }\r\n\r\n    return this.formatGenericResult(result);\r\n  }\r\n\r\n  /**\r\n   * Format weather tool results\r\n   */\r\n  private formatWeatherResult(result: string | { weather?: string; temperature?: string; condition?: string; [key: string]: unknown }): string {\r\n    if (typeof result === 'string') {\r\n      return `**Weather:** ${result}\\n`;\r\n    } else if (result.weather || result.temperature || result.condition) {\r\n      let formatted = `**Weather Information:**\\n`;\r\n      if (result.condition) formatted += `- Condition: ${result.condition}\\n`;\r\n      if (result.temperature) formatted += `- Temperature: ${result.temperature}\\n`;\r\n      if (result.weather) formatted += `- Details: ${result.weather}\\n`;\r\n      return formatted;\r\n    }\r\n\r\n    return this.formatGenericResult(result);\r\n  }\r\n\r\n  /**\r\n   * Format generic tool results\r\n   */\r\n  private formatGenericResult(result: unknown): string {\r\n    if (typeof result === 'string') {\r\n      return result;\r\n    } else if (typeof result === 'object' && result !== null) {\r\n      return `\\`\\`\\`json\\n${JSON.stringify(result, null, 2)}\\n\\`\\`\\`\\n`;\r\n    } else {\r\n      return String(result);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport const llmService = new LLMService();\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\mcpService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1302,1353],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1657,1707],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2049,2102],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2375,2428],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2771,2825],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3108,3165],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":120,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":120,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3406,3468],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3781,3839],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4150,4199],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately throw this expression instead of assigning it to the temporary variable \"enhancedError\".","line":144,"column":29,"nodeType":"CallExpression","messageId":"doImmediateAction","endLine":144,"endColumn":72,"fix":{"range":[4249,4342],"text":"throw this.enhanceMCPError(toolName, error, args)"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4926,5006],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6564,6691],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8829,8896],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9359,9428],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":329,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":329,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10542,10604],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":340,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":340,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10876,10929],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":353,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":353,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11351,11411],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":364,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":364,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11716,11766],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":377,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":377,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[12188,12248],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":388,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":388,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[12525,12588],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":398,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":398,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[12849,12918],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":410,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":410,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13224,13292],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":423,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":423,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13735,13790],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":434,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":434,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14111,14170],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// MCP Service for renderer process - uses IPC to communicate with main process\r\n// The actual MCP SDK runs in the main process to avoid Node.js module conflicts\r\n\r\nexport interface MCPServer {\r\n  id: string;\r\n  name: string;\r\n  command: string;\r\n  args: string[];\r\n  env?: Record<string, string>;\r\n  enabled: boolean;\r\n  description?: string;\r\n  version?: string;\r\n}\r\n\r\nexport interface MCPTool {\r\n  name: string;\r\n  description: string;\r\n  inputSchema: Record<string, unknown>;\r\n  serverId: string;\r\n}\r\n\r\nexport interface MCPResource {\r\n  uri: string;\r\n  name: string;\r\n  description?: string;\r\n  mimeType?: string;\r\n  serverId: string;\r\n}\r\n\r\nexport interface MCPPrompt {\r\n  name: string;\r\n  description: string;\r\n  arguments: Array<{\r\n    name: string;\r\n    description: string;\r\n    required: boolean;\r\n  }>;\r\n  serverId: string;\r\n}\r\n\r\nclass MCPService {\r\n  constructor() {\r\n    // Renderer process MCP service - delegates to main process via IPC\r\n  }\r\n\r\n  // Server Management - delegates to main process\r\n  public async getServers(): Promise<MCPServer[]> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        const mcpData = await window.electronAPI.getMCPServers();\r\n        return (mcpData.servers as MCPServer[]) || [];\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to load MCP servers:', error);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  public async addServer(server: Omit<MCPServer, 'id'>): Promise<MCPServer> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return (await window.electronAPI.addMCPServer(server)) as MCPServer;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to add MCP server:', error);\r\n    }\r\n    throw new Error('Failed to add MCP server');\r\n  }\r\n\r\n  public async updateServer(id: string, updates: Partial<MCPServer>): Promise<boolean> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return await window.electronAPI.updateMCPServer(id, updates);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update MCP server:', error);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async removeServer(id: string): Promise<boolean> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return await window.electronAPI.removeMCPServer(id);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to remove MCP server:', error);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Connection Management - delegates to main process\r\n  public async connectServer(serverId: string): Promise<boolean> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return await window.electronAPI.connectMCPServer(serverId);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to connect MCP server:', error);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async disconnectServer(serverId: string): Promise<void> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        await window.electronAPI.disconnectMCPServer(serverId);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to disconnect MCP server:', error);\r\n    }\r\n  }\r\n\r\n  public async disconnectAll(): Promise<void> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        await window.electronAPI.disconnectAllMCPServers();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to disconnect all MCP servers:', error);\r\n    }\r\n  }\r\n\r\n  // Tool Operations - delegates to main process\r\n  public async getAvailableTools(): Promise<MCPTool[]> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return (await window.electronAPI.getAllMCPTools()) as MCPTool[];\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to get available MCP tools:', error);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  public async callTool(toolName: string, args: Record<string, unknown>): Promise<unknown> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return await window.electronAPI.callMCPTool(toolName, args);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to call MCP tool:', error);\r\n      // Enhance error with more context\r\n      const enhancedError = this.enhanceMCPError(toolName, error, args);\r\n      throw enhancedError;\r\n    }\r\n    throw new Error(`🔧 Tool Unavailable: The ${toolName} tool is not currently available. This might be due to a service configuration issue or the tool being temporarily disabled.`);\r\n  }\r\n\r\n  /**\r\n   * Execute multiple MCP tools concurrently with optimized performance\r\n   */\r\n  public async callMultipleTools(toolCalls: Array<{\r\n    name: string;\r\n    args: Record<string, unknown>;\r\n    id?: string;\r\n  }>): Promise<Array<{\r\n    id?: string;\r\n    name: string;\r\n    result: unknown;\r\n    success: boolean;\r\n    error?: string;\r\n    executionTime: number;\r\n  }>> {\r\n    console.log(`🚀 MCP Service: Executing ${toolCalls.length} tools concurrently`);\r\n\r\n    const startTime = Date.now();\r\n\r\n    // Execute all tools in parallel using Promise.allSettled for proper error handling\r\n    const toolPromises = toolCalls.map(async (toolCall) => {\r\n      const toolStartTime = Date.now();\r\n      try {\r\n        const result = await this.callTool(toolCall.name, toolCall.args);\r\n        const executionTime = Date.now() - toolStartTime;\r\n\r\n        return {\r\n          id: toolCall.id,\r\n          name: toolCall.name,\r\n          result,\r\n          success: true,\r\n          executionTime\r\n        };\r\n      } catch (error) {\r\n        const executionTime = Date.now() - toolStartTime;\r\n\r\n        return {\r\n          id: toolCall.id,\r\n          name: toolCall.name,\r\n          result: null,\r\n          success: false,\r\n          error: error instanceof Error ? error.message : String(error),\r\n          executionTime\r\n        };\r\n      }\r\n    });\r\n\r\n    const results = await Promise.allSettled(toolPromises);\r\n    const totalTime = Date.now() - startTime;\r\n\r\n    // Process results and handle any promise rejections\r\n    const processedResults = results.map((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        return result.value;\r\n      } else {\r\n        return {\r\n          id: toolCalls[index].id,\r\n          name: toolCalls[index].name,\r\n          result: null,\r\n          success: false,\r\n          error: `Promise execution failed: ${result.reason}`,\r\n          executionTime: 0\r\n        };\r\n      }\r\n    });\r\n\r\n    const successCount = processedResults.filter(r => r.success).length;\r\n    console.log(`✅ MCP Service: Concurrent execution completed in ${totalTime}ms: ${successCount}/${toolCalls.length} successful`);\r\n\r\n    return processedResults;\r\n  }\r\n\r\n  /**\r\n   * Enhanced error handling for MCP tool execution\r\n   */\r\n  private enhanceMCPError(toolName: string, error: unknown, args: Record<string, unknown>): Error {\r\n    const errorStr = error instanceof Error ? error.message : String(error);\r\n    const errorLower = errorStr.toLowerCase();\r\n\r\n    // MCP-specific error patterns\r\n    if (errorLower.includes('server not connected') || errorLower.includes('connection closed')) {\r\n      return new Error(`🔌 Connection Error: The MCP server for ${toolName} is not connected. Please check the server configuration.`);\r\n    }\r\n\r\n    if (errorLower.includes('method not found') || errorLower.includes('unknown method')) {\r\n      return new Error(`🔧 Tool Error: The ${toolName} tool method is not available on the MCP server. The server might need to be updated.`);\r\n    }\r\n\r\n    if (errorLower.includes('invalid params') || errorLower.includes('parameter validation')) {\r\n      const argsList = Object.keys(args).length > 0 ? `\\nProvided: ${JSON.stringify(args, null, 2)}` : '\\nNo arguments provided.';\r\n      return new Error(`📝 Parameter Error: Invalid parameters for ${toolName}.${argsList}`);\r\n    }\r\n\r\n    if (errorLower.includes('server error') || errorLower.includes('internal error')) {\r\n      return new Error(`🚫 Server Error: The MCP server encountered an internal error while executing ${toolName}. Please try again.`);\r\n    }\r\n\r\n    // Return enhanced error with context\r\n    return new Error(`❌ MCP Tool Error: ${toolName} execution failed.\\nDetails: ${errorStr}`);\r\n  }\r\n\r\n  /**\r\n   * Enhanced tool execution with performance monitoring and optimization\r\n   */\r\n  public async callToolsOptimized(toolCalls: Array<{\r\n    name: string;\r\n    args: Record<string, unknown>;\r\n    id?: string;\r\n  }>): Promise<Array<{\r\n    id?: string;\r\n    name: string;\r\n    result: unknown;\r\n    success: boolean;\r\n    error?: string;\r\n    executionTime: number;\r\n    serverUsed?: string;\r\n  }>> {\r\n    // For now, use sequential execution directly to avoid console errors\r\n    // TODO: Implement parallel execution when Electron API is available\r\n    console.log(`🔄 Executing ${toolCalls.length} tools sequentially`);\r\n    return await this.callMultipleToolsSequential(toolCalls);\r\n  }\r\n\r\n  /**\r\n   * Fallback sequential execution for when concurrent execution fails\r\n   */\r\n  private async callMultipleToolsSequential(toolCalls: Array<{\r\n    name: string;\r\n    args: Record<string, unknown>;\r\n    id?: string;\r\n  }>): Promise<Array<{\r\n    id?: string;\r\n    name: string;\r\n    result: unknown;\r\n    success: boolean;\r\n    error?: string;\r\n    executionTime: number;\r\n  }>> {\r\n    console.log(`🔄 Sequential execution for ${toolCalls.length} tools`);\r\n\r\n    const results = [];\r\n\r\n    for (const toolCall of toolCalls) {\r\n      const startTime = Date.now();\r\n      try {\r\n        const result = await this.callTool(toolCall.name, toolCall.args);\r\n        const executionTime = Date.now() - startTime;\r\n\r\n        results.push({\r\n          id: toolCall.id,\r\n          name: toolCall.name,\r\n          result,\r\n          success: true,\r\n          executionTime\r\n        });\r\n      } catch (error) {\r\n        const executionTime = Date.now() - startTime;\r\n\r\n        results.push({\r\n          id: toolCall.id,\r\n          name: toolCall.name,\r\n          result: null,\r\n          success: false,\r\n          error: error instanceof Error ? error.message : String(error),\r\n          executionTime\r\n        });\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  // Resource Operations - delegates to main process\r\n  public async getAvailableResources(): Promise<MCPResource[]> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return (await window.electronAPI.getAllMCPResources()) as MCPResource[];\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to get available MCP resources:', error);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  public async readResource(uri: string): Promise<unknown> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return await window.electronAPI.readMCPResource(uri);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to read MCP resource:', error);\r\n      throw error;\r\n    }\r\n    throw new Error(`Resource ${uri} not found in any connected MCP server`);\r\n  }\r\n\r\n  // Prompt Operations - delegates to main process\r\n  public async getAvailablePrompts(): Promise<MCPPrompt[]> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return (await window.electronAPI.getAllMCPPrompts()) as MCPPrompt[];\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to get available MCP prompts:', error);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  public async getPrompt(name: string, args: Record<string, unknown>): Promise<unknown> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return await window.electronAPI.getMCPPrompt(name, args);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get MCP prompt:', error);\r\n      throw error;\r\n    }\r\n    throw new Error(`Prompt ${name} not found in any connected MCP server`);\r\n  }\r\n\r\n  // Connection Status - delegates to main process\r\n  public async getConnectionStatus(): Promise<Record<string, boolean>> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return await window.electronAPI.getMCPConnectionStatus();\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to get MCP connection status:', error);\r\n    }\r\n    return {};\r\n  }\r\n\r\n  public async getConnectedServerIds(): Promise<string[]> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return await window.electronAPI.getConnectedMCPServerIds();\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to get connected MCP server IDs:', error);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  public async isServerConnected(serverId: string): Promise<boolean> {\r\n    try {\r\n      const connectionStatus = await this.getConnectionStatus();\r\n      return connectionStatus[serverId] || false;\r\n    } catch (error) {\r\n      console.warn('Failed to check MCP server connection status:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Auto-connect enabled servers\r\n  public async connectEnabledServers(): Promise<void> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        await window.electronAPI.connectEnabledMCPServers();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to auto-connect enabled MCP servers:', error);\r\n    }\r\n  }\r\n\r\n  // Restart all MCP servers (useful after environment variable changes)\r\n  public async restartAllServers(): Promise<void> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        // Disconnect all servers first, then reconnect them\r\n        await window.electronAPI.disconnectAllMCPServers();\r\n        await window.electronAPI.connectEnabledMCPServers();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to restart MCP servers:', error);\r\n    }\r\n  }\r\n\r\n  public async getDetailedStatus(): Promise<unknown> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        return await window.electronAPI.getMCPDetailedStatus();\r\n      }\r\n      return { totalServers: 0, connectedServers: 0, servers: [] };\r\n    } catch (error) {\r\n      console.error('Failed to get detailed MCP status:', error);\r\n      return { totalServers: 0, connectedServers: 0, servers: [] };\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nexport const mcpService = new MCPService();\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\memoryCleanupService.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 51 to the 15 allowed.","line":43,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":43,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1940,2006],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4924,5053],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":154,"column":86,"nodeType":"Literal","endLine":154,"endColumn":101},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":332,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":332,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10426,10476],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Memory Cleanup Service for LiteLLM\n * Handles automatic memory maintenance, archiving, and optimization\n */\n\nimport { memoryService } from './memoryService';\nimport { MemoryEntry } from '../types/memory';\n\nexport interface CleanupConfig {\n  maxMemories: number;\n  maxAge: number; // days\n  maxSize: number; // bytes\n  archiveOldMemories: boolean;\n  removeUnusedMemories: boolean;\n  consolidateDuplicates: boolean;\n  minAccessCount: number;\n}\n\nexport interface CleanupResult {\n  success: boolean;\n  deleted: number;\n  archived: number;\n  consolidated: number;\n  errors: string[];\n  sizeBefore: number;\n  sizeAfter: number;\n}\n\nclass MemoryCleanupService {\n  private readonly DEFAULT_CONFIG: CleanupConfig = {\n    maxMemories: 1000,\n    maxAge: 365, // 1 year\n    maxSize: 50 * 1024 * 1024, // 50MB\n    archiveOldMemories: true,\n    removeUnusedMemories: false,\n    consolidateDuplicates: true,\n    minAccessCount: 0\n  };\n\n  /**\n   * Perform automatic memory cleanup\n   */\n  async performCleanup(config: Partial<CleanupConfig> = {}): Promise<CleanupResult> {\n    const finalConfig = { ...this.DEFAULT_CONFIG, ...config };\n    const result: CleanupResult = {\n      success: true,\n      deleted: 0,\n      archived: 0,\n      consolidated: 0,\n      errors: [],\n      sizeBefore: 0,\n      sizeAfter: 0\n    };\n\n    try {\n      // Get current stats\n      const statsResult = await memoryService.getMemoryStats();\n      if (statsResult.success && statsResult.data) {\n        result.sizeBefore = statsResult.data.totalSize;\n      }\n\n      // Get all memories for analysis\n      const searchResult = await memoryService.searchMemories({\n        query: { limit: 10000 }\n      });\n\n      if (!searchResult.success || !searchResult.data) {\n        result.success = false;\n        result.errors.push('Failed to retrieve memories for cleanup');\n        return result;\n      }\n\n      const memories = searchResult.data.results.map(r => r.entry);\n      console.log(`🧹 Starting cleanup of ${memories.length} memories`);\n\n      // 1. Remove old memories\n      if (finalConfig.maxAge > 0) {\n        const oldMemories = this.findOldMemories(memories, finalConfig.maxAge);\n        for (const memory of oldMemories) {\n          if (finalConfig.archiveOldMemories) {\n            // Archive instead of delete\n            await this.archiveMemory(memory);\n            result.archived++;\n          } else {\n            const deleteResult = await memoryService.deleteMemory({ id: memory.id });\n            if (deleteResult.success) {\n              result.deleted++;\n            } else {\n              result.errors.push(`Failed to delete old memory ${memory.id}: ${deleteResult.error}`);\n            }\n          }\n        }\n      }\n\n      // 2. Remove unused memories\n      if (finalConfig.removeUnusedMemories) {\n        const unusedMemories = this.findUnusedMemories(memories, finalConfig.minAccessCount);\n        for (const memory of unusedMemories) {\n          const deleteResult = await memoryService.deleteMemory({ id: memory.id });\n          if (deleteResult.success) {\n            result.deleted++;\n          } else {\n            result.errors.push(`Failed to delete unused memory ${memory.id}: ${deleteResult.error}`);\n          }\n        }\n      }\n\n      // 3. Consolidate duplicates\n      if (finalConfig.consolidateDuplicates) {\n        const duplicateGroups = this.findDuplicateMemories(memories);\n        for (const group of duplicateGroups) {\n          const consolidateResult = await this.consolidateDuplicates(group);\n          if (consolidateResult.success) {\n            result.consolidated += consolidateResult.consolidated;\n          } else {\n            result.errors.push(`Failed to consolidate duplicates: ${consolidateResult.error}`);\n          }\n        }\n      }\n\n      // 4. Enforce memory limits\n      if (finalConfig.maxMemories > 0) {\n        const remainingMemories = memories.length - result.deleted;\n        if (remainingMemories > finalConfig.maxMemories) {\n          const excessCount = remainingMemories - finalConfig.maxMemories;\n          const oldestMemories = this.findOldestMemories(memories, excessCount);\n          \n          for (const memory of oldestMemories) {\n            if (finalConfig.archiveOldMemories) {\n              await this.archiveMemory(memory);\n              result.archived++;\n            } else {\n              const deleteResult = await memoryService.deleteMemory({ id: memory.id });\n              if (deleteResult.success) {\n                result.deleted++;\n              } else {\n                result.errors.push(`Failed to delete excess memory ${memory.id}: ${deleteResult.error}`);\n              }\n            }\n          }\n        }\n      }\n\n      // Get final stats\n      const finalStatsResult = await memoryService.getMemoryStats();\n      if (finalStatsResult.success && finalStatsResult.data) {\n        result.sizeAfter = finalStatsResult.data.totalSize;\n      }\n\n      console.log(`🧹 Cleanup completed: ${result.deleted} deleted, ${result.archived} archived, ${result.consolidated} consolidated`);\n\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Cleanup failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Find memories older than specified days\n   */\n  private findOldMemories(memories: MemoryEntry[], maxAgeDays: number): MemoryEntry[] {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - maxAgeDays);\n\n    return memories.filter(memory => {\n      const memoryDate = new Date(memory.createdAt);\n      return memoryDate < cutoffDate;\n    });\n  }\n\n  /**\n   * Find memories with low access counts\n   */\n  private findUnusedMemories(memories: MemoryEntry[], minAccessCount: number): MemoryEntry[] {\n    return memories.filter(memory => {\n      const accessCount = memory.metadata.accessCount || 0;\n      return accessCount < minAccessCount;\n    });\n  }\n\n  /**\n   * Find oldest memories for removal\n   */\n  private findOldestMemories(memories: MemoryEntry[], count: number): MemoryEntry[] {\n    return memories\n      .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\n      .slice(0, count);\n  }\n\n  /**\n   * Find duplicate memories based on content similarity\n   */\n  private findDuplicateMemories(memories: MemoryEntry[]): MemoryEntry[][] {\n    const duplicateGroups: MemoryEntry[][] = [];\n    const processed = new Set<string>();\n\n    for (const memory of memories) {\n      if (processed.has(memory.id)) continue;\n\n      const duplicates = memories.filter(other => \n        other.id !== memory.id && \n        !processed.has(other.id) &&\n        this.areSimilar(memory, other)\n      );\n\n      if (duplicates.length > 0) {\n        const group = [memory, ...duplicates];\n        duplicateGroups.push(group);\n        \n        // Mark all as processed\n        group.forEach(m => processed.add(m.id));\n      }\n    }\n\n    return duplicateGroups;\n  }\n\n  /**\n   * Check if two memories are similar enough to be considered duplicates\n   */\n  private areSimilar(memory1: MemoryEntry, memory2: MemoryEntry): boolean {\n    // Same type and similar title\n    if (memory1.type === memory2.type && \n        this.calculateSimilarity(memory1.title, memory2.title) > 0.8) {\n      return true;\n    }\n\n    // Similar content\n    if (this.calculateSimilarity(memory1.content, memory2.content) > 0.9) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Calculate text similarity (simple implementation)\n   */\n  private calculateSimilarity(text1: string, text2: string): number {\n    const words1 = text1.toLowerCase().split(/\\s+/);\n    const words2 = text2.toLowerCase().split(/\\s+/);\n    \n    const set1 = new Set(words1);\n    const set2 = new Set(words2);\n    \n    const intersection = new Set(Array.from(set1).filter(x => set2.has(x)));\n    const union = new Set([...Array.from(set1), ...Array.from(set2)]);\n    \n    return intersection.size / union.size;\n  }\n\n  /**\n   * Consolidate duplicate memories\n   */\n  private async consolidateDuplicates(duplicates: MemoryEntry[]): Promise<{ success: boolean; consolidated: number; error?: string }> {\n    try {\n      if (duplicates.length < 2) {\n        return { success: true, consolidated: 0 };\n      }\n\n      // Find the best memory to keep (most recent or most accessed)\n      const keeper = duplicates.reduce((best, current) => {\n        const bestAccess = best.metadata.accessCount || 0;\n        const currentAccess = current.metadata.accessCount || 0;\n        \n        if (currentAccess > bestAccess) return current;\n        if (currentAccess === bestAccess) {\n          return new Date(current.updatedAt) > new Date(best.updatedAt) ? current : best;\n        }\n        return best;\n      });\n\n      // Merge tags from all duplicates\n      const allTags = new Set<string>();\n      duplicates.forEach(memory => {\n        memory.metadata.tags.forEach(tag => allTags.add(tag));\n      });\n\n      // Update the keeper with merged information\n      const updateResult = await memoryService.updateMemory({\n        id: keeper.id,\n        title: keeper.title,\n        content: keeper.content,\n        tags: Array.from(allTags),\n        type: keeper.type\n      });\n\n      if (!updateResult.success) {\n        return { success: false, consolidated: 0, error: updateResult.error };\n      }\n\n      // Delete the duplicates\n      let consolidated = 0;\n      for (const duplicate of duplicates) {\n        if (duplicate.id !== keeper.id) {\n          const deleteResult = await memoryService.deleteMemory({ id: duplicate.id });\n          if (deleteResult.success) {\n            consolidated++;\n          }\n        }\n      }\n\n      return { success: true, consolidated };\n    } catch (error) {\n      return {\n        success: false,\n        consolidated: 0,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Archive a memory (mark as archived instead of deleting)\n   */\n  private async archiveMemory(memory: MemoryEntry): Promise<boolean> {\n    try {\n      // Add archive tag and update\n      const archiveTags = [...memory.metadata.tags, 'archived'];\n      const updateResult = await memoryService.updateMemory({\n        id: memory.id,\n        title: `[ARCHIVED] ${memory.title}`,\n        content: memory.content,\n        tags: archiveTags,\n        type: memory.type\n      });\n\n      return updateResult.success;\n    } catch (error) {\n      console.error('Failed to archive memory:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get cleanup recommendations\n   */\n  async getCleanupRecommendations(): Promise<{\n    oldMemories: number;\n    unusedMemories: number;\n    duplicateGroups: number;\n    totalSize: number;\n    recommendations: string[];\n  }> {\n    const recommendations: string[] = [];\n    \n    try {\n      // Get all memories\n      const searchResult = await memoryService.searchMemories({\n        query: { limit: 10000 }\n      });\n\n      if (!searchResult.success || !searchResult.data) {\n        return {\n          oldMemories: 0,\n          unusedMemories: 0,\n          duplicateGroups: 0,\n          totalSize: 0,\n          recommendations: ['Unable to analyze memories for cleanup recommendations']\n        };\n      }\n\n      const memories = searchResult.data.results.map(r => r.entry);\n      \n      // Analyze old memories\n      const oldMemories = this.findOldMemories(memories, 365);\n      if (oldMemories.length > 0) {\n        recommendations.push(`${oldMemories.length} memories are older than 1 year and could be archived`);\n      }\n\n      // Analyze unused memories\n      const unusedMemories = this.findUnusedMemories(memories, 1);\n      if (unusedMemories.length > 0) {\n        recommendations.push(`${unusedMemories.length} memories have never been accessed`);\n      }\n\n      // Analyze duplicates\n      const duplicateGroups = this.findDuplicateMemories(memories);\n      if (duplicateGroups.length > 0) {\n        const totalDuplicates = duplicateGroups.reduce((sum, group) => sum + group.length - 1, 0);\n        recommendations.push(`${duplicateGroups.length} groups of duplicates found (${totalDuplicates} duplicates total)`);\n      }\n\n      // Get size info\n      const statsResult = await memoryService.getMemoryStats();\n      const totalSize = statsResult.success ? statsResult.data!.totalSize : 0;\n\n      if (totalSize > 10 * 1024 * 1024) { // 10MB\n        recommendations.push(`Memory storage is ${Math.round(totalSize / 1024 / 1024)}MB - consider cleanup`);\n      }\n\n      if (memories.length > 500) {\n        recommendations.push(`${memories.length} total memories - consider setting limits`);\n      }\n\n      if (recommendations.length === 0) {\n        recommendations.push('No cleanup needed - memory system is well maintained');\n      }\n\n      return {\n        oldMemories: oldMemories.length,\n        unusedMemories: unusedMemories.length,\n        duplicateGroups: duplicateGroups.length,\n        totalSize,\n        recommendations\n      };\n    } catch (error) {\n      return {\n        oldMemories: 0,\n        unusedMemories: 0,\n        duplicateGroups: 0,\n        totalSize: 0,\n        recommendations: [`Error analyzing memories: ${error instanceof Error ? error.message : 'Unknown error'}`]\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const memoryCleanupService = new MemoryCleanupService();\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\memoryContextService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4235,4289],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5371,5459],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5504,5570],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5629,5694],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Memory Context Service for LiteLLM\n * Provides memory-aware conversation enhancements\n */\n\nimport { memoryService } from './memoryService';\nimport { MemoryType, SearchQuery, MemoryEntry } from '../types/memory';\n\nexport interface ContextMemory {\n  id: string;\n  type: MemoryType;\n  title: string;\n  content: string;\n  relevanceScore: number;\n  tags: string[];\n}\n\nexport interface MemoryContext {\n  relevantMemories: ContextMemory[];\n  contextSummary: string;\n  totalMemories: number;\n}\n\nexport interface ConversationAnalysis {\n  topics: string[];\n  intent: string;\n  entities: string[];\n  memoryTriggers: string[];\n  shouldCreateMemory: boolean;\n  suggestedMemoryType?: MemoryType;\n}\n\nclass MemoryContextService {\n  private readonly MAX_CONTEXT_MEMORIES = 5;\n  private readonly MAX_CONTEXT_LENGTH = 2000; // characters\n  private readonly MEMORY_RELEVANCE_THRESHOLD = 0.3;\n\n  /**\n   * Analyze user message to extract topics, intent, and memory triggers\n   */\n  analyzeMessage(message: string, conversationHistory: Array<{role: string, content: string}> = []): ConversationAnalysis {\n    const messageText = message.toLowerCase();\n    const recentHistory = conversationHistory.slice(-3); // Last 3 messages for context\n    \n    // Extract topics (simple keyword extraction)\n    const topics = this.extractTopics(messageText);\n    \n    // Determine intent\n    const intent = this.determineIntent(messageText);\n    \n    // Extract entities (names, projects, technologies)\n    const entities = this.extractEntities(messageText);\n    \n    // Identify memory triggers\n    const memoryTriggers = this.identifyMemoryTriggers(messageText);\n    \n    // Determine if we should create a memory\n    const shouldCreateMemory = this.shouldCreateMemory(messageText, intent, recentHistory);\n    \n    // Suggest memory type if we should create one\n    const suggestedMemoryType = shouldCreateMemory ? this.suggestMemoryType(messageText, intent) : undefined;\n\n    return {\n      topics,\n      intent,\n      entities,\n      memoryTriggers,\n      shouldCreateMemory,\n      suggestedMemoryType\n    };\n  }\n\n  /**\n   * Get relevant memory context for a conversation\n   */\n  async getMemoryContext(\n    message: string, \n    conversationId?: string, \n    projectId?: string,\n    conversationHistory: Array<{role: string, content: string}> = []\n  ): Promise<MemoryContext> {\n    try {\n      const analysis = this.analyzeMessage(message, conversationHistory);\n      const searchQueries = this.buildSearchQueries(analysis, conversationId, projectId);\n      \n      const allMemories: Array<{\n        id: string;\n        type: MemoryType;\n        title: string;\n        content: string;\n        relevanceScore: number;\n        tags: string[];\n      }> = [];\n\n      // Execute multiple search queries and combine results\n      for (const query of searchQueries) {\n        const searchResult = await memoryService.searchMemories({ query });\n        \n        if (searchResult.success && searchResult.data) {\n          for (const result of searchResult.data.results) {\n            // Calculate relevance score based on multiple factors\n            const relevanceScore = this.calculateRelevanceScore(\n              result.entry,\n              analysis,\n              result.relevanceScore || 1.0\n            );\n\n            if (relevanceScore >= this.MEMORY_RELEVANCE_THRESHOLD) {\n              allMemories.push({\n                id: result.entry.id,\n                type: result.entry.type,\n                title: result.entry.title,\n                content: result.entry.content,\n                relevanceScore,\n                tags: result.entry.metadata.tags\n              });\n            }\n          }\n        }\n      }\n\n      // Remove duplicates and sort by relevance\n      const uniqueMemories = this.deduplicateMemories(allMemories);\n      const sortedMemories = uniqueMemories\n        .sort((a, b) => b.relevanceScore - a.relevanceScore)\n        .slice(0, this.MAX_CONTEXT_MEMORIES);\n\n      // Create context summary\n      const contextSummary = this.createContextSummary(sortedMemories);\n\n      return {\n        relevantMemories: sortedMemories,\n        contextSummary,\n        totalMemories: uniqueMemories.length\n      };\n    } catch (error) {\n      console.error('Error getting memory context:', error);\n      return {\n        relevantMemories: [],\n        contextSummary: '',\n        totalMemories: 0\n      };\n    }\n  }\n\n  /**\n   * Create memory from conversation automatically\n   */\n  async createMemoryFromConversation(\n    userMessage: string,\n    aiResponse: string,\n    analysis: ConversationAnalysis,\n    conversationId?: string,\n    projectId?: string\n  ): Promise<boolean> {\n    if (!analysis.shouldCreateMemory || !analysis.suggestedMemoryType) {\n      return false;\n    }\n\n    try {\n      // Extract key information for memory\n      const memoryContent = this.extractMemoryContent(userMessage, aiResponse, analysis);\n      const memoryTitle = this.generateMemoryTitle(userMessage, analysis);\n      const memoryTags = this.generateMemoryTags(analysis);\n\n      const storeResult = await memoryService.storeMemory({\n        type: analysis.suggestedMemoryType,\n        title: memoryTitle,\n        content: memoryContent,\n        tags: memoryTags,\n        conversationId,\n        projectId,\n        source: 'auto_conversation'\n      });\n\n      if (storeResult.success) {\n        console.log(`🧠 Auto-created memory: ${memoryTitle} (${analysis.suggestedMemoryType})`);\n        return true;\n      } else {\n        console.error('Failed to auto-create memory:', storeResult.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('Error creating memory from conversation:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Build enhanced system prompt with memory context\n   */\n  buildMemoryEnhancedPrompt(originalPrompt: string, memoryContext: MemoryContext): string {\n    if (memoryContext.relevantMemories.length === 0) {\n      return originalPrompt;\n    }\n\n    const memorySection = `\n\n🧠 RELEVANT CONTEXT FROM PREVIOUS CONVERSATIONS 🧠\n\nYou have access to the following information from previous interactions:\n\n${memoryContext.relevantMemories.map((memory) =>\n  `• ${memory.content}`\n).join('\\n')}\n\nPlease use this context naturally when relevant to the conversation. You can reference this information when it helps answer questions or provide better assistance.`;\n\n    return originalPrompt + memorySection;\n  }\n\n  // Private helper methods\n  private extractTopics(message: string): string[] {\n    const topics: string[] = [];\n    \n    // Technology keywords\n    const techKeywords = ['react', 'javascript', 'typescript', 'python', 'node', 'api', 'database', 'ui', 'frontend', 'backend'];\n    techKeywords.forEach(keyword => {\n      if (message.includes(keyword)) topics.push(keyword);\n    });\n\n    // Action keywords\n    const actionKeywords = ['create', 'build', 'fix', 'debug', 'implement', 'design', 'optimize'];\n    actionKeywords.forEach(keyword => {\n      if (message.includes(keyword)) topics.push(keyword);\n    });\n\n    return Array.from(new Set(topics)); // Remove duplicates\n  }\n\n  private determineIntent(message: string): string {\n    if (message.includes('prefer') || message.includes('like') || message.includes('want')) {\n      return 'preference';\n    }\n    if (message.includes('how') || message.includes('what') || message.includes('?')) {\n      return 'question';\n    }\n    if (message.includes('create') || message.includes('build') || message.includes('make')) {\n      return 'creation';\n    }\n    if (message.includes('fix') || message.includes('error') || message.includes('problem')) {\n      return 'troubleshooting';\n    }\n    return 'general';\n  }\n\n  private extractEntities(message: string): string[] {\n    const entities: string[] = [];\n    \n    // Simple entity extraction (can be enhanced with NLP)\n    const words = message.split(/\\s+/);\n    words.forEach(word => {\n      // Capitalized words might be entities\n      if (word.length > 2 && word[0] === word[0].toUpperCase() && word.slice(1) === word.slice(1).toLowerCase()) {\n        entities.push(word);\n      }\n    });\n\n    return entities;\n  }\n\n  private identifyMemoryTriggers(message: string): string[] {\n    const triggers: string[] = [];\n    \n    // Preference indicators\n    if (message.includes('prefer') || message.includes('like') || message.includes('always')) {\n      triggers.push('preference');\n    }\n    \n    // Solution indicators\n    if (message.includes('worked') || message.includes('solved') || message.includes('fixed')) {\n      triggers.push('solution');\n    }\n    \n    // Knowledge sharing\n    if (message.includes('remember') || message.includes('note') || message.includes('important')) {\n      triggers.push('knowledge');\n    }\n\n    return triggers;\n  }\n\n  private shouldCreateMemory(message: string, intent: string, history: Array<{role: string, content: string}>): boolean {\n    // Create memory for preferences\n    if (intent === 'preference') return true;\n    \n    // Create memory for successful solutions\n    if (intent === 'troubleshooting' && history.some(h => h.content.includes('worked') || h.content.includes('solved'))) {\n      return true;\n    }\n    \n    // Create memory for important information\n    if (message.includes('remember') || message.includes('important') || message.includes('note')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private suggestMemoryType(message: string, intent: string): MemoryType {\n    if (intent === 'preference') return 'user_preference';\n    if (intent === 'troubleshooting') return 'solution';\n    if (message.includes('code') || message.includes('function')) return 'code_snippet';\n    if (message.includes('project')) return 'project_knowledge';\n    return 'general';\n  }\n\n  private buildSearchQueries(analysis: ConversationAnalysis, conversationId?: string, projectId?: string): SearchQuery[] {\n    const queries: SearchQuery[] = [];\n\n    // Search by topics\n    if (analysis.topics.length > 0) {\n      queries.push({\n        text: analysis.topics.join(' '),\n        limit: 3\n      });\n    }\n\n    // Search by entities\n    if (analysis.entities.length > 0) {\n      queries.push({\n        text: analysis.entities.join(' '),\n        limit: 2\n      });\n    }\n\n    // Search by project\n    if (projectId) {\n      queries.push({\n        projectId,\n        limit: 3\n      });\n    }\n\n    // Search by conversation\n    if (conversationId) {\n      queries.push({\n        conversationId,\n        limit: 2\n      });\n    }\n\n    // Search preferences if intent suggests it\n    if (analysis.intent === 'preference' || analysis.memoryTriggers.includes('preference')) {\n      queries.push({\n        type: 'user_preference',\n        limit: 3\n      });\n    }\n\n    return queries;\n  }\n\n  private calculateRelevanceScore(memory: MemoryEntry, analysis: ConversationAnalysis, baseScore: number): number {\n    let score = baseScore;\n\n    // Boost score for matching topics\n    const memoryText = (memory.title + ' ' + memory.content + ' ' + memory.metadata.tags.join(' ')).toLowerCase();\n    analysis.topics.forEach(topic => {\n      if (memoryText.includes(topic)) score += 0.2;\n    });\n\n    // Boost score for matching entities\n    analysis.entities.forEach(entity => {\n      if (memoryText.includes(entity.toLowerCase())) score += 0.3;\n    });\n\n    // Boost score for recent memories\n    const daysSinceCreated = (Date.now() - new Date(memory.createdAt).getTime()) / (1000 * 60 * 60 * 24);\n    if (daysSinceCreated < 7) score += 0.1;\n\n    // Boost score for frequently accessed memories\n    if (memory.metadata.accessCount && memory.metadata.accessCount > 5) score += 0.1;\n\n    return Math.min(score, 1.0); // Cap at 1.0\n  }\n\n  private deduplicateMemories(memories: ContextMemory[]): ContextMemory[] {\n    const seen = new Set();\n    return memories.filter(memory => {\n      if (seen.has(memory.id)) return false;\n      seen.add(memory.id);\n      return true;\n    });\n  }\n\n  private createContextSummary(memories: ContextMemory[]): string {\n    if (memories.length === 0) return '';\n\n    const summaryParts: string[] = [];\n    \n    // Group by type\n    const byType = memories.reduce((acc, memory) => {\n      if (!acc[memory.type]) acc[memory.type] = [];\n      acc[memory.type].push(memory);\n      return acc;\n    }, {} as Record<string, ContextMemory[]>);\n\n    Object.entries(byType).forEach(([type, mems]) => {\n      const typeLabel = type.replace('_', ' ').toUpperCase();\n      summaryParts.push(`${typeLabel}: ${mems.map(m => m.title).join(', ')}`);\n    });\n\n    return summaryParts.join(' | ');\n  }\n\n  private extractMemoryContent(userMessage: string, aiResponse: string, analysis: ConversationAnalysis): string {\n    // Create meaningful memory content based on the conversation\n    if (analysis.suggestedMemoryType === 'user_preference') {\n      return `User preference: ${userMessage}`;\n    }\n    \n    if (analysis.suggestedMemoryType === 'solution') {\n      return `Problem: ${userMessage}\\n\\nSolution: ${aiResponse}`;\n    }\n    \n    if (analysis.suggestedMemoryType === 'code_snippet') {\n      // Extract code from AI response\n      const codeMatch = aiResponse.match(/```[\\s\\S]*?```/);\n      return codeMatch ? codeMatch[0] : aiResponse;\n    }\n\n    return `${userMessage}\\n\\nResponse: ${aiResponse}`;\n  }\n\n  private generateMemoryTitle(userMessage: string, analysis: ConversationAnalysis): string {\n    const words = userMessage.split(' ').slice(0, 6).join(' ');\n    const type = analysis.suggestedMemoryType?.replace('_', ' ') || 'conversation';\n    return `${type}: ${words}${words.length < userMessage.length ? '...' : ''}`;\n  }\n\n  private generateMemoryTags(analysis: ConversationAnalysis): string[] {\n    const tags = [...analysis.topics, ...analysis.entities.map(e => e.toLowerCase())];\n    tags.push(analysis.intent);\n    return Array.from(new Set(tags)).filter(tag => tag.length > 1);\n  }\n}\n\n// Export singleton instance\nexport const memoryContextService = new MemoryContextService();\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\memoryExportService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3858,3908],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":145,"column":57,"nodeType":"Literal","endLine":145,"endColumn":81},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 30 to the 15 allowed.","line":153,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":153,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8595,8645],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":318,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":318,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9570,9621],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Memory Export/Import Service for LiteLLM\n * Handles backup, restore, and migration of memory data\n */\n\nimport { memoryService } from './memoryService';\nimport { MemoryEntry, MemoryIndex, MemoryStats, MemoryType } from '../types/memory';\n\ninterface ElectronSaveResult {\n  success: boolean;\n  filename?: string;\n  error?: string;\n}\n\ninterface ElectronLoadResult {\n  success: boolean;\n  data?: MemoryExport;\n  error?: string;\n}\n\nexport interface MemoryExport {\n  version: string;\n  exportDate: Date;\n  totalEntries: number;\n  memories: MemoryEntry[];\n  index: MemoryIndex;\n  stats: MemoryStats;\n  metadata: {\n    exportedBy: string;\n    source: string;\n    description?: string;\n  };\n}\n\nexport interface ExportOptions {\n  includeTypes?: string[];\n  excludeTypes?: string[];\n  dateRange?: {\n    start: Date;\n    end: Date;\n  };\n  projectId?: string;\n  tags?: string[];\n  description?: string;\n}\n\nexport interface ImportResult {\n  success: boolean;\n  imported: number;\n  skipped: number;\n  errors: string[];\n  duplicates: number;\n}\n\nclass MemoryExportService {\n  private readonly EXPORT_VERSION = '1.0.0';\n\n  /**\n   * Export memories to a JSON file\n   */\n  async exportMemories(options: ExportOptions = {}): Promise<{ success: boolean; data?: MemoryExport; error?: string }> {\n    try {\n      // Get all memories based on filters\n      const searchResult = await memoryService.searchMemories({\n        query: {\n          type: options.includeTypes?.[0] as MemoryType,\n          tags: options.tags,\n          projectId: options.projectId,\n          dateRange: options.dateRange,\n          limit: 10000 // Large limit to get all memories\n        }\n      });\n\n      if (!searchResult.success || !searchResult.data) {\n        return {\n          success: false,\n          error: 'Failed to retrieve memories for export'\n        };\n      }\n\n      let memories = searchResult.data.results.map(r => r.entry);\n\n      // Apply additional filters\n      if (options.excludeTypes && options.excludeTypes.length > 0) {\n        memories = memories.filter(memory => !options.excludeTypes!.includes(memory.type));\n      }\n\n      if (options.includeTypes && options.includeTypes.length > 0) {\n        memories = memories.filter(memory => options.includeTypes!.includes(memory.type));\n      }\n\n      // Get current stats\n      const statsResult = await memoryService.getMemoryStats();\n      const stats: MemoryStats = statsResult.success ? statsResult.data! : {\n        totalEntries: memories.length,\n        entriesByType: {\n          user_preference: 0,\n          conversation_context: 0,\n          project_knowledge: 0,\n          code_snippet: 0,\n          solution: 0,\n          general: 0\n        },\n        totalSize: 0\n      };\n\n      // Create export data\n      const exportData: MemoryExport = {\n        version: this.EXPORT_VERSION,\n        exportDate: new Date(),\n        totalEntries: memories.length,\n        memories,\n        index: {\n          entries: memories.map(memory => ({\n            id: memory.id,\n            type: memory.type,\n            title: memory.title,\n            tags: memory.metadata.tags,\n            timestamp: memory.metadata.timestamp,\n            relevanceScore: memory.metadata.relevanceScore,\n            projectId: memory.metadata.projectId,\n            conversationId: memory.metadata.conversationId,\n            fileSize: JSON.stringify(memory).length\n          })),\n          lastUpdated: new Date(),\n          totalEntries: memories.length,\n          version: this.EXPORT_VERSION\n        },\n        stats,\n        metadata: {\n          exportedBy: 'LiteLLM Memory System',\n          source: 'manual_export',\n          description: options.description || `Memory export containing ${memories.length} entries`\n        }\n      };\n\n      return {\n        success: true,\n        data: exportData\n      };\n    } catch (error) {\n      console.error('Error exporting memories:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  /**\n   * Import memories from exported data\n   */\n  async importMemories(exportData: MemoryExport, options: { \n    overwriteExisting?: boolean;\n    skipDuplicates?: boolean;\n    validateData?: boolean;\n  } = {}): Promise<ImportResult> {\n    const result: ImportResult = {\n      success: true,\n      imported: 0,\n      skipped: 0,\n      errors: [],\n      duplicates: 0\n    };\n\n    try {\n      // Validate export data\n      if (options.validateData !== false) {\n        const validation = this.validateExportData(exportData);\n        if (!validation.valid) {\n          result.success = false;\n          result.errors = validation.errors;\n          return result;\n        }\n      }\n\n      // Process each memory\n      for (const memory of exportData.memories) {\n        try {\n          // Check if memory already exists\n          const existingResult = await memoryService.retrieveMemory({ id: memory.id });\n          \n          if (existingResult.success && existingResult.data) {\n            // Memory exists\n            if (options.skipDuplicates) {\n              result.duplicates++;\n              result.skipped++;\n              continue;\n            } else if (options.overwriteExisting) {\n              // Update existing memory\n              const updateResult = await memoryService.updateMemory({\n                id: memory.id,\n                title: memory.title,\n                content: memory.content,\n                tags: memory.metadata.tags,\n                type: memory.type\n              });\n\n              if (updateResult.success) {\n                result.imported++;\n              } else {\n                result.errors.push(`Failed to update memory ${memory.id}: ${updateResult.error}`);\n              }\n            } else {\n              result.duplicates++;\n              result.skipped++;\n            }\n          } else {\n            // Memory doesn't exist, create new one\n            const storeResult = await memoryService.storeMemory({\n              type: memory.type,\n              title: memory.title,\n              content: memory.content,\n              tags: memory.metadata.tags,\n              projectId: memory.metadata.projectId,\n              conversationId: memory.metadata.conversationId,\n              source: 'import'\n            });\n\n            if (storeResult.success) {\n              result.imported++;\n            } else {\n              result.errors.push(`Failed to import memory ${memory.id}: ${storeResult.error}`);\n            }\n          }\n        } catch (error) {\n          result.errors.push(`Error processing memory ${memory.id}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      // Set overall success based on whether any imports succeeded\n      result.success = result.imported > 0 || result.errors.length === 0;\n\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Import failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Save export data to file (Electron)\n   */\n  async saveExportToFile(exportData: MemoryExport, filename?: string): Promise<{ success: boolean; filename?: string; error?: string }> {\n    try {\n      if (typeof window !== 'undefined' && window.electronAPI) {\n        const defaultFilename = filename || `littlellm-memories-${new Date().toISOString().split('T')[0]}.json`;\n        \n        // Use Electron's save dialog\n        const result = await window.electronAPI.saveMemoryExport?.(exportData, defaultFilename) as unknown as ElectronSaveResult;\n        \n        if (result?.success) {\n          return {\n            success: true,\n            filename: result.filename\n          };\n        } else {\n          return {\n            success: false,\n            error: result?.error || 'Failed to save export file'\n          };\n        }\n      } else {\n        // Fallback for non-Electron environments\n        const dataStr = JSON.stringify(exportData, null, 2);\n        const dataBlob = new Blob([dataStr], { type: 'application/json' });\n        \n        const url = URL.createObjectURL(dataBlob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = filename || `littlellm-memories-${new Date().toISOString().split('T')[0]}.json`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n\n        return {\n          success: true,\n          filename: link.download\n        };\n      }\n    } catch (error) {\n      console.error('Error saving export file:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  /**\n   * Load export data from file (Electron)\n   */\n  async loadExportFromFile(): Promise<{ success: boolean; data?: MemoryExport; error?: string }> {\n    try {\n      if (typeof window !== 'undefined' && window.electronAPI) {\n        const result = await window.electronAPI.loadMemoryExport?.() as unknown as ElectronLoadResult;\n        \n        if (result?.success) {\n          return {\n            success: true,\n            data: result.data\n          };\n        } else {\n          return {\n            success: false,\n            error: result?.error || 'Failed to load export file'\n          };\n        }\n      } else {\n        return {\n          success: false,\n          error: 'File loading not available in this environment'\n        };\n      }\n    } catch (error) {\n      console.error('Error loading export file:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n\n  /**\n   * Validate export data structure\n   */\n  private validateExportData(exportData: unknown): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!exportData || typeof exportData !== 'object') {\n      errors.push('Export data is null, undefined, or not an object');\n      return { valid: false, errors };\n    }\n\n    const data = exportData as Record<string, unknown>;\n\n    if (!data.version) {\n      errors.push('Missing version information');\n    }\n\n    if (!data.memories || !Array.isArray(data.memories)) {\n      errors.push('Invalid or missing memories array');\n    }\n\n    if (!data.exportDate) {\n      errors.push('Missing export date');\n    }\n\n    if (Array.isArray(data.memories)) {\n      data.memories.forEach((memory: unknown, index: number) => {\n        if (!memory || typeof memory !== 'object') {\n          errors.push(`Memory at index ${index} is not a valid object`);\n          return;\n        }\n\n        const memoryObj = memory as Record<string, unknown>;\n\n        if (!memoryObj.id) {\n          errors.push(`Memory at index ${index} missing ID`);\n        }\n        if (!memoryObj.type) {\n          errors.push(`Memory at index ${index} missing type`);\n        }\n        if (!memoryObj.title) {\n          errors.push(`Memory at index ${index} missing title`);\n        }\n        if (!memoryObj.content) {\n          errors.push(`Memory at index ${index} missing content`);\n        }\n      });\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Get export statistics\n   */\n  async getExportStats(exportData: MemoryExport): Promise<{\n    totalSize: number;\n    memoriesByType: Record<string, number>;\n    dateRange: { oldest: Date; newest: Date };\n    topTags: Array<{ tag: string; count: number }>;\n  }> {\n    const stats = {\n      totalSize: JSON.stringify(exportData).length,\n      memoriesByType: {} as Record<string, number>,\n      dateRange: { oldest: new Date(), newest: new Date(0) },\n      topTags: [] as Array<{ tag: string; count: number }>\n    };\n\n    const tagCounts: Record<string, number> = {};\n\n    exportData.memories.forEach(memory => {\n      // Count by type\n      stats.memoriesByType[memory.type] = (stats.memoriesByType[memory.type] || 0) + 1;\n\n      // Track date range\n      const memoryDate = new Date(memory.createdAt);\n      if (memoryDate < stats.dateRange.oldest) {\n        stats.dateRange.oldest = memoryDate;\n      }\n      if (memoryDate > stats.dateRange.newest) {\n        stats.dateRange.newest = memoryDate;\n      }\n\n      // Count tags\n      memory.metadata.tags.forEach(tag => {\n        tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n      });\n    });\n\n    // Get top 10 tags\n    stats.topTags = Object.entries(tagCounts)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 10)\n      .map(([tag, count]) => ({ tag, count }));\n\n    return stats;\n  }\n}\n\n// Export singleton instance\nexport const memoryExportService = new MemoryExportService();\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\memoryMCPTools.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5142,5212],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":189,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":189,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5948,6006],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Memory MCP Tools for LiteLLM\n * Provides MCP tools for AI models to interact with the memory system\n */\n\nimport { memoryService } from './memoryService';\nimport {\n  MemoryStoreRequest,\n  MemorySearchRequest,\n  MemoryRetrieveRequest,\n  MemoryUpdateRequest,\n  MemoryDeleteRequest,\n  MemoryToolResponse\n} from '../types/memory';\n\n// MCP Tool definitions for memory operations\nexport const memoryMCPTools = [\n  {\n    name: 'memory-store',\n    description: 'Store information in persistent memory for future reference. Use this to remember important user preferences, project details, successful solutions, or any information that should persist across conversations.',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        type: {\n          type: 'string',\n          enum: ['user_preference', 'conversation_context', 'project_knowledge', 'code_snippet', 'solution', 'general'],\n          description: 'The type of memory being stored'\n        },\n        title: {\n          type: 'string',\n          description: 'A descriptive title for this memory entry'\n        },\n        content: {\n          type: 'string',\n          description: 'The detailed content to store in memory'\n        },\n        tags: {\n          type: 'array',\n          items: { type: 'string' },\n          description: 'Optional tags to help categorize and search for this memory'\n        },\n        projectId: {\n          type: 'string',\n          description: 'Optional project identifier if this memory is project-specific'\n        },\n        conversationId: {\n          type: 'string',\n          description: 'Optional conversation identifier if this memory relates to a specific conversation'\n        },\n        source: {\n          type: 'string',\n          description: 'Optional source information (e.g., \"user_input\", \"ai_solution\", \"documentation\")'\n        }\n      },\n      required: ['type', 'title', 'content']\n    }\n  },\n  {\n    name: 'memory-search',\n    description: 'Search through stored memories to find relevant information. Use this to recall previous conversations, user preferences, project details, or solutions.',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        text: {\n          type: 'string',\n          description: 'Text to search for in memory titles, content, and tags'\n        },\n        type: {\n          type: 'string',\n          enum: ['user_preference', 'conversation_context', 'project_knowledge', 'code_snippet', 'solution', 'general'],\n          description: 'Filter by memory type'\n        },\n        tags: {\n          type: 'array',\n          items: { type: 'string' },\n          description: 'Filter by specific tags'\n        },\n        projectId: {\n          type: 'string',\n          description: 'Filter by project identifier'\n        },\n        conversationId: {\n          type: 'string',\n          description: 'Filter by conversation identifier'\n        },\n        limit: {\n          type: 'number',\n          description: 'Maximum number of results to return (default: 10)',\n          default: 10\n        },\n        offset: {\n          type: 'number',\n          description: 'Number of results to skip for pagination (default: 0)',\n          default: 0\n        }\n      }\n    }\n  },\n  {\n    name: 'memory-retrieve',\n    description: 'Retrieve a specific memory entry by its ID. Use this when you have a memory ID from a search result and need the full details.',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'The unique identifier of the memory entry to retrieve'\n        }\n      },\n      required: ['id']\n    }\n  },\n  {\n    name: 'memory-update',\n    description: 'Update an existing memory entry. Use this to modify or enhance previously stored information.',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'The unique identifier of the memory entry to update'\n        },\n        title: {\n          type: 'string',\n          description: 'New title for the memory entry'\n        },\n        content: {\n          type: 'string',\n          description: 'New content for the memory entry'\n        },\n        tags: {\n          type: 'array',\n          items: { type: 'string' },\n          description: 'New tags for the memory entry'\n        },\n        type: {\n          type: 'string',\n          enum: ['user_preference', 'conversation_context', 'project_knowledge', 'code_snippet', 'solution', 'general'],\n          description: 'New type for the memory entry'\n        }\n      },\n      required: ['id']\n    }\n  },\n  {\n    name: 'memory-delete',\n    description: 'Delete a memory entry permanently. Use this to remove outdated or incorrect information.',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'The unique identifier of the memory entry to delete'\n        }\n      },\n      required: ['id']\n    }\n  }\n];\n\n// Tool execution functions\nexport async function executeMemoryTool(toolName: string, args: unknown): Promise<MemoryToolResponse<unknown>> {\n  console.log(`🧠 Executing memory tool: ${toolName} with args:`, args);\n\n  try {\n    switch (toolName) {\n      case 'memory-store':\n        return await memoryService.storeMemory(args as MemoryStoreRequest);\n\n      case 'memory-search':\n        return await memoryService.searchMemories({ query: args } as MemorySearchRequest);\n\n      case 'memory-retrieve':\n        return await memoryService.retrieveMemory(args as MemoryRetrieveRequest);\n\n      case 'memory-update':\n        return await memoryService.updateMemory(args as MemoryUpdateRequest);\n\n      case 'memory-delete':\n        return await memoryService.deleteMemory(args as MemoryDeleteRequest);\n\n      default:\n        return {\n          success: false,\n          error: `Unknown memory tool: ${toolName}`\n        };\n    }\n  } catch (error) {\n    console.error(`❌ Memory tool ${toolName} failed:`, error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred'\n    };\n  }\n}\n\n// Helper function to get memory tools in MCP format\nexport function getMemoryMCPTools() {\n  return memoryMCPTools.map(tool => ({\n    type: 'function',\n    function: {\n      name: tool.name,\n      description: tool.description,\n      parameters: tool.inputSchema\n    }\n  }));\n}\n\n// Helper function to check if a tool is a memory tool\nexport function isMemoryTool(toolName: string): boolean {\n  return memoryMCPTools.some(tool => tool.name === toolName);\n}\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\memoryService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1296,1384],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1677,1717],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2005,2066],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2905,2952],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2982,3027],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":104,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":104,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3103,3154],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5617,5663],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 6 times.","line":186,"column":57,"nodeType":"Literal","endLine":186,"endColumn":81},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7174,7223],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 52 to the 15 allowed.","line":240,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":240,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":386,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":386,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13040,13090],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 21 to the 15 allowed.","line":394,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":394,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":511,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":511,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17241,17288],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":553,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":553,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[18639,18686],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":617,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":617,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[20638,20690],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Memory Service for LiteLLM\r\n * Handles persistent memory storage, retrieval, and search functionality\r\n */\r\n\r\nimport { \r\n  MemoryEntry, \r\n  MemoryIndex, \r\n  MemoryIndexEntry, \r\n  MemoryType, \r\n  SearchQuery, \r\n  SearchResult, \r\n  SearchResponse,\r\n  MemoryStats,\r\n  MemoryStoreRequest,\r\n  MemorySearchRequest,\r\n  MemoryRetrieveRequest,\r\n  MemoryUpdateRequest,\r\n  MemoryDeleteRequest,\r\n  MemoryToolResponse\r\n} from '../types/memory';\r\n\r\n// Memory operations will be available on the existing ElectronAPI interface\r\n\r\nclass MemoryService {\r\n  private memoryIndex: MemoryIndex | null = null;\r\n  private initialized = false;\r\n  private readonly MEMORY_VERSION = '1.0.0';\r\n\r\n  async initialize(): Promise<void> {\r\n    if (this.initialized) return;\r\n\r\n    try {\r\n      // Load memory index from disk\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        const index = await window.electronAPI.loadMemoryIndex();\r\n        \r\n        if (index) {\r\n          this.memoryIndex = {\r\n            ...index,\r\n            lastUpdated: new Date(index.lastUpdated),\r\n            entries: index.entries.map((entry: MemoryIndexEntry & {timestamp: string | Date}) => ({\r\n              ...entry,\r\n              timestamp: new Date(entry.timestamp)\r\n            }))\r\n          };\r\n          console.log(`Loaded ${this.memoryIndex?.entries.length || 0} memory entries from disk`);\r\n        } else {\r\n          // Create new index if none exists\r\n          this.memoryIndex = {\r\n            entries: [],\r\n            lastUpdated: new Date(),\r\n            totalEntries: 0,\r\n            version: this.MEMORY_VERSION\r\n          };\r\n          await this.saveIndex();\r\n          console.log('Created new memory index');\r\n        }\r\n      } else {\r\n        // Fallback for non-Electron environments\r\n        this.memoryIndex = {\r\n          entries: [],\r\n          lastUpdated: new Date(),\r\n          totalEntries: 0,\r\n          version: this.MEMORY_VERSION\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to initialize memory service:', error);\r\n      this.memoryIndex = {\r\n        entries: [],\r\n        lastUpdated: new Date(),\r\n        totalEntries: 0,\r\n        version: this.MEMORY_VERSION\r\n      };\r\n    }\r\n\r\n    this.initialized = true;\r\n  }\r\n\r\n  private async saveIndex(): Promise<boolean> {\r\n    if (!this.memoryIndex) return false;\r\n\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI?.saveMemoryIndex) {\r\n        const serializedIndex = {\r\n          ...this.memoryIndex,\r\n          lastUpdated: this.memoryIndex.lastUpdated.toISOString(),\r\n          entries: this.memoryIndex.entries.map(entry => ({\r\n            ...entry,\r\n            timestamp: entry.timestamp.toISOString()\r\n          }))\r\n        };\r\n\r\n        const success = await window.electronAPI.saveMemoryIndex(serializedIndex as unknown as MemoryIndex);\r\n        if (success) {\r\n          console.log('Memory index saved successfully');\r\n        } else {\r\n          console.error('Failed to save memory index');\r\n        }\r\n        return success;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving memory index:', error);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private generateId(): string {\r\n    return `mem_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private createSearchableText(title: string, content: string, tags: string[]): string {\r\n    return [title, content, ...tags].join(' ').toLowerCase();\r\n  }\r\n\r\n  async storeMemory(request: MemoryStoreRequest): Promise<MemoryToolResponse<MemoryEntry>> {\r\n    await this.initialize();\r\n\r\n    try {\r\n      const id = this.generateId();\r\n      const now = new Date();\r\n      \r\n      const entry: MemoryEntry = {\r\n        id,\r\n        type: request.type,\r\n        title: request.title,\r\n        content: request.content,\r\n        metadata: {\r\n          tags: request.tags || [],\r\n          timestamp: now,\r\n          projectId: request.projectId,\r\n          conversationId: request.conversationId,\r\n          source: request.source,\r\n          accessCount: 0\r\n        },\r\n        searchableText: this.createSearchableText(request.title, request.content, request.tags || []),\r\n        createdAt: now,\r\n        updatedAt: now\r\n      };\r\n\r\n      // Save entry to file\r\n      if (typeof window !== 'undefined' && window.electronAPI?.saveMemoryEntry) {\r\n        const success = await window.electronAPI.saveMemoryEntry(entry);\r\n        if (!success) {\r\n          return {\r\n            success: false,\r\n            error: 'Failed to save memory entry to disk'\r\n          };\r\n        }\r\n      }\r\n\r\n      // Add to index\r\n      const indexEntry: MemoryIndexEntry = {\r\n        id: entry.id,\r\n        type: entry.type,\r\n        title: entry.title,\r\n        tags: entry.metadata.tags,\r\n        timestamp: entry.metadata.timestamp,\r\n        relevanceScore: entry.metadata.relevanceScore,\r\n        projectId: entry.metadata.projectId,\r\n        conversationId: entry.metadata.conversationId,\r\n        fileSize: JSON.stringify(entry).length\r\n      };\r\n\r\n      this.memoryIndex!.entries.unshift(indexEntry);\r\n      this.memoryIndex!.totalEntries = this.memoryIndex!.entries.length;\r\n      this.memoryIndex!.lastUpdated = now;\r\n\r\n      // Keep only last 1000 entries in index for performance\r\n      if (this.memoryIndex!.entries.length > 1000) {\r\n        this.memoryIndex!.entries = this.memoryIndex!.entries.slice(0, 1000);\r\n      }\r\n\r\n      await this.saveIndex();\r\n\r\n      return {\r\n        success: true,\r\n        data: entry,\r\n        message: `Memory stored successfully with ID: ${id}`\r\n      };\r\n    } catch (error) {\r\n      console.error('Error storing memory:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\r\n      };\r\n    }\r\n  }\r\n\r\n  async retrieveMemory(request: MemoryRetrieveRequest): Promise<MemoryToolResponse<MemoryEntry>> {\r\n    await this.initialize();\r\n\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI?.loadMemoryEntry) {\r\n        const entry = await window.electronAPI.loadMemoryEntry(request.id);\r\n        \r\n        if (entry) {\r\n          // Update access tracking\r\n          entry.metadata.lastAccessed = new Date();\r\n          entry.metadata.accessCount = (entry.metadata.accessCount || 0) + 1;\r\n          \r\n          // Save updated entry\r\n          await window.electronAPI.saveMemoryEntry(entry);\r\n\r\n          return {\r\n            success: true,\r\n            data: {\r\n              ...entry,\r\n              createdAt: new Date(entry.createdAt),\r\n              updatedAt: new Date(entry.updatedAt),\r\n              metadata: {\r\n                ...entry.metadata,\r\n                timestamp: new Date(entry.metadata.timestamp),\r\n                lastAccessed: entry.metadata.lastAccessed\r\n              }\r\n            }\r\n          };\r\n        } else {\r\n          return {\r\n            success: false,\r\n            error: `Memory entry with ID ${request.id} not found`\r\n          };\r\n        }\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        error: 'Memory retrieval not available in this environment'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error retrieving memory:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\r\n      };\r\n    }\r\n  }\r\n\r\n  async searchMemories(request: MemorySearchRequest): Promise<MemoryToolResponse<SearchResponse>> {\r\n    await this.initialize();\r\n\r\n    try {\r\n      const query = request.query;\r\n      const startTime = performance.now();\r\n\r\n      if (!this.memoryIndex) {\r\n        return {\r\n          success: false,\r\n          error: 'Memory index not available'\r\n        };\r\n      }\r\n\r\n      // Filter entries based on query criteria\r\n      let filteredEntries = this.memoryIndex.entries;\r\n\r\n      // Filter by type\r\n      if (query.type) {\r\n        filteredEntries = filteredEntries.filter(entry => entry.type === query.type);\r\n      }\r\n\r\n      // Filter by tags\r\n      if (query.tags && query.tags.length > 0) {\r\n        filteredEntries = filteredEntries.filter(entry =>\r\n          query.tags!.some(tag => entry.tags.includes(tag))\r\n        );\r\n      }\r\n\r\n      // Filter by project ID\r\n      if (query.projectId) {\r\n        filteredEntries = filteredEntries.filter(entry => entry.projectId === query.projectId);\r\n      }\r\n\r\n      // Filter by conversation ID\r\n      if (query.conversationId) {\r\n        filteredEntries = filteredEntries.filter(entry => entry.conversationId === query.conversationId);\r\n      }\r\n\r\n      // Filter by date range\r\n      if (query.dateRange) {\r\n        filteredEntries = filteredEntries.filter(entry => {\r\n          const entryDate = entry.timestamp;\r\n          return entryDate >= query.dateRange!.start && entryDate <= query.dateRange!.end;\r\n        });\r\n      }\r\n\r\n      // Enhanced text search - search in title, tags, AND content\r\n      if (query.text) {\r\n        const searchText = query.text.toLowerCase();\r\n        const searchTerms = searchText.split(/\\s+/).filter(term => term.length > 0);\r\n\r\n        filteredEntries = filteredEntries.filter(entry => {\r\n          // Load full entry to search content\r\n          const entryText = (entry.title + ' ' + entry.tags.join(' ')).toLowerCase();\r\n\r\n          // Check if any search term matches title or tags\r\n          const titleTagMatch = searchTerms.some(term =>\r\n            entryText.includes(term)\r\n          );\r\n\r\n          if (titleTagMatch) return true;\r\n\r\n          // For more thorough search, we need to load the full entry content\r\n          // This is a simplified approach - in production, you'd want to index content\r\n          return false; // Will be enhanced with content search below\r\n        });\r\n\r\n        // Enhanced search: Load full entries and search content\r\n        const enhancedResults = [];\r\n        for (const indexEntry of filteredEntries) {\r\n          if (typeof window !== 'undefined' && window.electronAPI?.loadMemoryEntry) {\r\n            const fullEntry = await window.electronAPI.loadMemoryEntry(indexEntry.id);\r\n            if (fullEntry) {\r\n              const fullText = (fullEntry.title + ' ' + fullEntry.content + ' ' + fullEntry.metadata.tags.join(' ')).toLowerCase();\r\n              const hasMatch = searchTerms.some(term => fullText.includes(term));\r\n              if (hasMatch) {\r\n                enhancedResults.push(indexEntry);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Also search entries that didn't match title/tags but might match content\r\n        const remainingEntries = this.memoryIndex.entries.filter(entry => !filteredEntries.includes(entry));\r\n        for (const indexEntry of remainingEntries.slice(0, 50)) { // Limit to avoid performance issues\r\n          if (typeof window !== 'undefined' && window.electronAPI?.loadMemoryEntry) {\r\n            const fullEntry = await window.electronAPI.loadMemoryEntry(indexEntry.id);\r\n            if (fullEntry) {\r\n              const fullText = (fullEntry.title + ' ' + fullEntry.content + ' ' + fullEntry.metadata.tags.join(' ')).toLowerCase();\r\n              const hasMatch = searchTerms.some(term => fullText.includes(term));\r\n              if (hasMatch) {\r\n                enhancedResults.push(indexEntry);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        filteredEntries = enhancedResults;\r\n      }\r\n\r\n      // Sort by relevance (timestamp for now, can be enhanced)\r\n      filteredEntries.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\r\n\r\n      // Apply pagination\r\n      const offset = query.offset || 0;\r\n      const limit = query.limit || 50;\r\n      const paginatedEntries = filteredEntries.slice(offset, offset + limit);\r\n\r\n      // Load full entries for results\r\n      const results: SearchResult[] = [];\r\n\r\n      for (const indexEntry of paginatedEntries) {\r\n        if (typeof window !== 'undefined' && window.electronAPI?.loadMemoryEntry) {\r\n          const fullEntry = await window.electronAPI.loadMemoryEntry(indexEntry.id);\r\n          if (fullEntry) {\r\n            results.push({\r\n              entry: {\r\n                ...fullEntry,\r\n                createdAt: new Date(fullEntry.createdAt),\r\n                updatedAt: new Date(fullEntry.updatedAt),\r\n                metadata: {\r\n                  ...fullEntry.metadata,\r\n                  timestamp: new Date(fullEntry.metadata.timestamp),\r\n                  lastAccessed: fullEntry.metadata.lastAccessed ? new Date(fullEntry.metadata.lastAccessed) : undefined\r\n                }\r\n              },\r\n              relevanceScore: indexEntry.relevanceScore || 1.0,\r\n              matchedFields: this.getMatchedFields(fullEntry, query)\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      const executionTime = performance.now() - startTime;\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          results,\r\n          totalCount: filteredEntries.length,\r\n          query,\r\n          executionTime\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error searching memories:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\r\n      };\r\n    }\r\n  }\r\n\r\n  private getMatchedFields(entry: MemoryEntry, query: SearchQuery): string[] {\r\n    const matchedFields: string[] = [];\r\n\r\n    if (query.text) {\r\n      const searchText = query.text.toLowerCase();\r\n      const searchTerms = searchText.split(/\\s+/).filter(term => term.length > 0);\r\n\r\n      // Check title matches\r\n      const titleText = entry.title.toLowerCase();\r\n      if (searchTerms.some(term => titleText.includes(term))) {\r\n        matchedFields.push('title');\r\n      }\r\n\r\n      // Check content matches\r\n      const contentText = entry.content.toLowerCase();\r\n      if (searchTerms.some(term => contentText.includes(term))) {\r\n        matchedFields.push('content');\r\n      }\r\n\r\n      // Check tag matches\r\n      const tagText = entry.metadata.tags.join(' ').toLowerCase();\r\n      if (searchTerms.some(term => tagText.includes(term))) {\r\n        matchedFields.push('tags');\r\n      }\r\n\r\n      // Add fuzzy matching for better results\r\n      if (matchedFields.length === 0) {\r\n        // Try partial word matching\r\n        const allText = (titleText + ' ' + contentText + ' ' + tagText);\r\n        for (const term of searchTerms) {\r\n          if (term.length >= 3) { // Only for terms 3+ chars\r\n            // Check if any word starts with the search term\r\n            const words = allText.split(/\\s+/);\r\n            if (words.some(word => word.startsWith(term))) {\r\n              matchedFields.push('partial_match');\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return matchedFields;\r\n  }\r\n\r\n  async updateMemory(request: MemoryUpdateRequest): Promise<MemoryToolResponse<MemoryEntry>> {\r\n    await this.initialize();\r\n\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI?.loadMemoryEntry) {\r\n        const existingEntry = await window.electronAPI.loadMemoryEntry(request.id);\r\n\r\n        if (!existingEntry) {\r\n          return {\r\n            success: false,\r\n            error: `Memory entry with ID ${request.id} not found`\r\n          };\r\n        }\r\n\r\n        // Update entry fields\r\n        const updatedEntry: MemoryEntry = {\r\n          ...existingEntry,\r\n          title: request.title || existingEntry.title,\r\n          content: request.content || existingEntry.content,\r\n          type: request.type || existingEntry.type,\r\n          metadata: {\r\n            ...existingEntry.metadata,\r\n            tags: request.tags || existingEntry.metadata.tags,\r\n            timestamp: new Date(existingEntry.metadata.timestamp)\r\n          },\r\n          updatedAt: new Date(),\r\n          createdAt: new Date(existingEntry.createdAt)\r\n        };\r\n\r\n        // Regenerate searchable text\r\n        updatedEntry.searchableText = this.createSearchableText(\r\n          updatedEntry.title,\r\n          updatedEntry.content,\r\n          updatedEntry.metadata.tags\r\n        );\r\n\r\n        // Save updated entry\r\n        const success = await window.electronAPI.saveMemoryEntry(updatedEntry);\r\n        if (!success) {\r\n          return {\r\n            success: false,\r\n            error: 'Failed to save updated memory entry'\r\n          };\r\n        }\r\n\r\n        // Update index entry\r\n        const indexEntryIndex = this.memoryIndex!.entries.findIndex(e => e.id === request.id);\r\n        if (indexEntryIndex !== -1) {\r\n          this.memoryIndex!.entries[indexEntryIndex] = {\r\n            ...this.memoryIndex!.entries[indexEntryIndex],\r\n            title: updatedEntry.title,\r\n            type: updatedEntry.type,\r\n            tags: updatedEntry.metadata.tags,\r\n            fileSize: JSON.stringify(updatedEntry).length\r\n          };\r\n\r\n          this.memoryIndex!.lastUpdated = new Date();\r\n          await this.saveIndex();\r\n        }\r\n\r\n        return {\r\n          success: true,\r\n          data: updatedEntry,\r\n          message: `Memory entry ${request.id} updated successfully`\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        error: 'Memory update not available in this environment'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error updating memory:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\r\n      };\r\n    }\r\n  }\r\n\r\n  async deleteMemory(request: MemoryDeleteRequest): Promise<MemoryToolResponse<void>> {\r\n    await this.initialize();\r\n\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI?.deleteMemoryEntry) {\r\n        const success = await window.electronAPI.deleteMemoryEntry(request.id);\r\n\r\n        if (success) {\r\n          // Remove from index\r\n          const indexEntryIndex = this.memoryIndex!.entries.findIndex(e => e.id === request.id);\r\n          if (indexEntryIndex !== -1) {\r\n            this.memoryIndex!.entries.splice(indexEntryIndex, 1);\r\n            this.memoryIndex!.totalEntries = this.memoryIndex!.entries.length;\r\n            this.memoryIndex!.lastUpdated = new Date();\r\n            await this.saveIndex();\r\n          }\r\n\r\n          return {\r\n            success: true,\r\n            message: `Memory entry ${request.id} deleted successfully`\r\n          };\r\n        } else {\r\n          return {\r\n            success: false,\r\n            error: `Failed to delete memory entry ${request.id}`\r\n          };\r\n        }\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        error: 'Memory deletion not available in this environment'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error deleting memory:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getMemoryStats(): Promise<MemoryToolResponse<MemoryStats>> {\r\n    await this.initialize();\r\n\r\n    try {\r\n      if (!this.memoryIndex) {\r\n        return {\r\n          success: false,\r\n          error: 'Memory index not available'\r\n        };\r\n      }\r\n\r\n      const entriesByType: Record<string, number> = {};\r\n      let oldestEntry: Date | undefined;\r\n      let newestEntry: Date | undefined;\r\n      let mostAccessedEntry: MemoryIndexEntry | undefined;\r\n\r\n      for (const entry of this.memoryIndex.entries) {\r\n        // Count by type\r\n        entriesByType[entry.type] = (entriesByType[entry.type] || 0) + 1;\r\n\r\n        // Find oldest and newest\r\n        if (!oldestEntry || entry.timestamp < oldestEntry) {\r\n          oldestEntry = entry.timestamp;\r\n        }\r\n        if (!newestEntry || entry.timestamp > newestEntry) {\r\n          newestEntry = entry.timestamp;\r\n        }\r\n\r\n        // For now, use the most recent entry as \"most accessed\"\r\n        // TODO: Implement proper access tracking in the future\r\n        if (!mostAccessedEntry || entry.timestamp > mostAccessedEntry.timestamp) {\r\n          mostAccessedEntry = entry;\r\n        }\r\n      }\r\n\r\n      // Get total size from Electron API\r\n      let totalSize = 0;\r\n      if (typeof window !== 'undefined' && window.electronAPI?.getMemoryStats) {\r\n        const stats = await window.electronAPI.getMemoryStats();\r\n        totalSize = stats.totalSize;\r\n      }\r\n\r\n      const memoryStats: MemoryStats = {\r\n        totalEntries: this.memoryIndex.totalEntries,\r\n        entriesByType: entriesByType as Record<MemoryType, number>,\r\n        totalSize,\r\n        oldestEntry,\r\n        newestEntry,\r\n        mostAccessedEntry\r\n      };\r\n\r\n      return {\r\n        success: true,\r\n        data: memoryStats\r\n      };\r\n    } catch (error) {\r\n      console.error('Error getting memory stats:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const memoryService = new MemoryService();\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\mistralFileService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1828,1937],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 6 times.","line":77,"column":25,"nodeType":"Literal","endLine":77,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2406,2485],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2928,2992],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3047,3100],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3970,4022],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4642,4692],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5223,5276],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5307,5360],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":212,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5945,6000],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6245,6362],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":241,"column":32,"nodeType":"Literal","endLine":241,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":248,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":248,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7372,7440],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8003,8084],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":271,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":271,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8173,8244],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":276,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":276,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8413,8585],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":283,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":283,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8640,8685],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":309,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":309,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9467,9541],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":313,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":313,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9659,9720],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":331,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":331,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10400,10461],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":339,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":339,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10697,10776],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":347,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":347,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11216,11266],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":355,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":355,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11502,11570],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mistral File Upload and Document AI Service\r\n// Handles file uploads, OCR, and document processing for Mistral AI\r\n\r\nexport interface MistralFileUploadResponse {\r\n  id: string;\r\n  object: string;\r\n  bytes: number;\r\n  created_at: number;\r\n  filename: string;\r\n  purpose: string;\r\n  sample_type?: string;\r\n  num_lines?: number;\r\n  source: string;\r\n}\r\n\r\nexport interface MistralFileListResponse {\r\n  data: MistralFileUploadResponse[];\r\n  object: string;\r\n}\r\n\r\nexport interface MistralOCRResponse {\r\n  content: string;\r\n  metadata?: {\r\n    pages?: number;\r\n    language?: string;\r\n    confidence?: number;\r\n  };\r\n}\r\n\r\nexport type MistralFilePurpose = 'fine-tune' | 'batch' | 'ocr';\r\n\r\nexport class MistralFileService {\r\n  private baseUrl: string;\r\n  private apiKey: string;\r\n\r\n  constructor(apiKey: string, baseUrl = 'https://api.mistral.ai/v1') {\r\n    this.apiKey = apiKey;\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  /**\r\n   * Upload a file to Mistral's file storage\r\n   * Maximum file size: 512 MB (50 MB for OCR)\r\n   * Supported purposes: fine-tune (.jsonl only), batch, ocr\r\n   */\r\n  async uploadFile(\r\n    file: File,\r\n    purpose: MistralFilePurpose = 'batch'\r\n  ): Promise<MistralFileUploadResponse> {\r\n    // Validate file size based on purpose\r\n    let maxSize = 512 * 1024 * 1024; // 512 MB for general uploads\r\n    if (purpose === 'ocr') {\r\n      maxSize = 50 * 1024 * 1024; // 50 MB for OCR\r\n    }\r\n\r\n    if (file.size > maxSize) {\r\n      const limitMB = Math.round(maxSize / 1024 / 1024);\r\n      throw new Error(`File size ${Math.round(file.size / 1024 / 1024)}MB exceeds Mistral's ${limitMB}MB limit for ${purpose}`);\r\n    }\r\n\r\n    // Validate file type for fine-tuning\r\n    if (purpose === 'fine-tune' && !file.name.endsWith('.jsonl')) {\r\n      throw new Error('Fine-tuning only supports .jsonl files');\r\n    }\r\n\r\n    console.log(`📤 Uploading file to Mistral: ${file.name} (${Math.round(file.size / 1024)}KB) for ${purpose}`);\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('purpose', purpose);\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/files`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'User-Agent': 'LittleLLM/1.0'\r\n        },\r\n        body: formData\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`❌ Mistral file upload failed (${response.status}):`, errorText);\r\n        \r\n        let errorMessage = errorText;\r\n        try {\r\n          const errorObj = JSON.parse(errorText);\r\n          errorMessage = errorObj.message || errorObj.error?.message || errorText;\r\n        } catch {\r\n          // Keep original error if not JSON\r\n        }\r\n\r\n        throw new Error(`Mistral file upload failed: ${errorMessage}`);\r\n      }\r\n\r\n      const result = await response.json() as MistralFileUploadResponse;\r\n      console.log(`✅ File uploaded to Mistral successfully:`, result);\r\n      return result;\r\n\r\n    } catch (error) {\r\n      console.error('❌ Mistral file upload error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * List all uploaded files\r\n   */\r\n  async listFiles(\r\n    page = 0,\r\n    pageSize = 100,\r\n    purpose?: MistralFilePurpose\r\n  ): Promise<MistralFileListResponse> {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      page_size: pageSize.toString()\r\n    });\r\n\r\n    if (purpose) {\r\n      params.append('purpose', purpose);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/files?${params}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'User-Agent': 'LittleLLM/1.0'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`Failed to list files: ${errorText}`);\r\n      }\r\n\r\n      return await response.json() as MistralFileListResponse;\r\n    } catch (error) {\r\n      console.error('❌ Mistral list files error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve file information\r\n   */\r\n  async getFile(fileId: string): Promise<MistralFileUploadResponse> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/files/${fileId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'User-Agent': 'LittleLLM/1.0'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`Failed to get file: ${errorText}`);\r\n      }\r\n\r\n      return await response.json() as MistralFileUploadResponse;\r\n    } catch (error) {\r\n      console.error('❌ Mistral get file error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a file\r\n   */\r\n  async deleteFile(fileId: string): Promise<void> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/files/${fileId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'User-Agent': 'LittleLLM/1.0'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`Failed to delete file: ${errorText}`);\r\n      }\r\n\r\n      console.log(`✅ File ${fileId} deleted successfully`);\r\n    } catch (error) {\r\n      console.error('❌ Mistral delete file error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Download file content\r\n   */\r\n  async downloadFile(fileId: string): Promise<Blob> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/files/${fileId}/download`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'User-Agent': 'LittleLLM/1.0'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`Failed to download file: ${errorText}`);\r\n      }\r\n\r\n      return await response.blob();\r\n    } catch (error) {\r\n      console.error('❌ Mistral download file error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process document with OCR using Mistral's Document AI\r\n   * This uses the /v1/ocr endpoint for PDFs and documents\r\n   */\r\n  async processDocumentOCR(file: File): Promise<MistralOCRResponse> {\r\n    console.log(`🔍 Processing document with Mistral OCR: ${file.name} (${file.type}, ${Math.round(file.size/1024)}KB)`);\r\n\r\n    // Validate file size for OCR (50MB limit)\r\n    const maxSize = 50 * 1024 * 1024; // 50 MB\r\n    if (file.size > maxSize) {\r\n      throw new Error(`File size ${Math.round(file.size / 1024 / 1024)}MB exceeds Mistral's 50MB OCR limit`);\r\n    }\r\n\r\n    try {\r\n      // Convert file to base64 for OCR endpoint\r\n      const base64 = await this.fileToBase64(file);\r\n\r\n      // Determine document type and format\r\n      let documentType: 'image_url' | 'document_url';\r\n      let documentUrl: string;\r\n\r\n      if (file.type.startsWith('image/')) {\r\n        documentType = 'image_url';\r\n        documentUrl = base64; // Keep full data URL for images\r\n      } else if (file.type === 'application/pdf' || file.type.includes('document') || file.type.includes('word') || file.type.includes('excel')) {\r\n        documentType = 'document_url';\r\n        documentUrl = base64; // Keep full data URL for documents\r\n      } else {\r\n        throw new Error(`File type ${file.type} not supported for OCR`);\r\n      }\r\n\r\n      console.log(`📡 Calling Mistral OCR endpoint: ${this.baseUrl}/ocr`);\r\n\r\n      const response = await fetch(`${this.baseUrl}/ocr`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.apiKey}`,\r\n          'User-Agent': 'LittleLLM/1.0'\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'mistral-ocr-latest',\r\n          document: {\r\n            type: documentType,\r\n            [documentType === 'image_url' ? 'image_url' : 'document_url']: documentUrl\r\n          },\r\n          include_image_base64: false\r\n        })\r\n      });\r\n\r\n      console.log(`📡 OCR response status: ${response.status} ${response.statusText}`);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`❌ Mistral OCR failed (${response.status}):`, errorText);\r\n        throw new Error(`Mistral OCR failed (${response.status}): ${errorText}`);\r\n      }\r\n\r\n      const result = await response.json() as MistralOCRResponse;\r\n      console.log(`✅ Document processed with Mistral OCR successfully:`, {\r\n        contentLength: result.content?.length || 0,\r\n        hasMetadata: !!result.metadata\r\n      });\r\n      return result;\r\n\r\n    } catch (error) {\r\n      console.error('❌ Mistral OCR error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert file to base64 for vision models\r\n   * This is used when sending files directly to vision-capable models\r\n   */\r\n  async fileToBase64(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const result = reader.result as string;\r\n        resolve(result);\r\n      };\r\n      reader.onerror = error => reject(error);\r\n      reader.readAsDataURL(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Prepare file for Mistral models (vision or OCR)\r\n   * Returns the appropriate format for including in chat completions\r\n   */\r\n  async prepareFileForVision(file: File): Promise<{ type: string; image_url?: { url: string }; text?: string }> {\r\n    console.log(`🔍 Preparing file for Mistral: ${file.name} (${file.type})`);\r\n\r\n    if (file.type.startsWith('image/')) {\r\n      // For images, use vision models with proper image format\r\n      console.log(`🖼️ Processing image for vision: ${file.name}`);\r\n      const base64 = await this.fileToBase64(file);\r\n\r\n      // Ensure proper image format for vision models\r\n      if (!base64.startsWith('data:image/')) {\r\n        throw new Error(`Invalid image format. Expected data:image/*, got: ${base64.substring(0, 20)}...`);\r\n      }\r\n\r\n      return {\r\n        type: 'image_url',\r\n        image_url: { url: base64 }\r\n      };\r\n    } else if (file.type === 'application/pdf' ||\r\n               file.type.includes('document') ||\r\n               file.type.includes('word') ||\r\n               file.type.includes('excel') ||\r\n               file.type.includes('powerpoint')) {\r\n      // For PDFs and documents, use OCR to extract text\r\n      console.log(`📄 Processing document with OCR: ${file.name}`);\r\n      try {\r\n        const ocrResult = await this.processDocumentOCR(file);\r\n        return {\r\n          type: 'text',\r\n          text: `[Document: ${file.name}]\\n${ocrResult.content}`\r\n        };\r\n      } catch (ocrError) {\r\n        console.warn(`⚠️ OCR failed for ${file.name}, providing file info:`, ocrError);\r\n        return {\r\n          type: 'text',\r\n          text: `[Document: ${file.name}]\\nFile type: ${file.type}\\nSize: ${Math.round(file.size / 1024)}KB\\nNote: OCR processing failed: ${ocrError instanceof Error ? ocrError.message : String(ocrError)}`\r\n        };\r\n      }\r\n    } else if (file.type.startsWith('text/') || file.type === 'text/csv' || file.type === 'application/json') {\r\n      // For text files, read content directly\r\n      console.log(`📝 Reading text file: ${file.name}`);\r\n      const text = await this.readTextFile(file);\r\n      return {\r\n        type: 'text',\r\n        text: `[Text File: ${file.name}]\\n${text}`\r\n      };\r\n    } else {\r\n      // For other file types, provide a descriptive message\r\n      console.log(`❓ Unsupported file type: ${file.name} (${file.type})`);\r\n      return {\r\n        type: 'text',\r\n        text: `[File: ${file.name}]\\nFile type: ${file.type}\\nSize: ${Math.round(file.size / 1024)}KB\\nNote: This file type cannot be processed for content extraction, but has been included in the conversation.`\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read text file content (fallback method)\r\n   */\r\n  private async readTextFile(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = error => reject(error);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate if file is supported by Mistral\r\n   */\r\n  static isFileSupported(file: File): { supported: boolean; reason?: string } {\r\n    // Check file size based on type\r\n    let maxSize = 512 * 1024 * 1024; // 512 MB for general files\r\n    let sizeLimit = '512MB';\r\n\r\n    // OCR files have 50MB limit\r\n    if (file.type === 'application/pdf' ||\r\n        file.type.includes('document') ||\r\n        file.type.includes('word') ||\r\n        file.type.includes('excel') ||\r\n        file.type.includes('powerpoint')) {\r\n      maxSize = 50 * 1024 * 1024; // 50 MB for OCR\r\n      sizeLimit = '50MB';\r\n    }\r\n\r\n    if (file.size > maxSize) {\r\n      return {\r\n        supported: false,\r\n        reason: `File size ${Math.round(file.size / 1024 / 1024)}MB exceeds ${sizeLimit} limit`\r\n      };\r\n    }\r\n\r\n    const supportedTypes = [\r\n      // Images (Vision models)\r\n      'image/png',\r\n      'image/jpeg',\r\n      'image/jpg',\r\n      'image/webp',\r\n      'image/gif',\r\n      // Documents (OCR)\r\n      'application/pdf',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // .docx\r\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation', // .pptx\r\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx\r\n      'application/msword', // .doc\r\n      'application/vnd.ms-powerpoint', // .ppt\r\n      'application/vnd.ms-excel', // .xls\r\n      // Text files\r\n      'text/plain',\r\n      'text/csv',\r\n      'text/markdown',\r\n      'application/json'\r\n    ];\r\n\r\n    // Check if file type is supported\r\n    const isSupported = supportedTypes.includes(file.type) ||\r\n                       file.type.startsWith('text/') ||\r\n                       file.type.includes('document') ||\r\n                       file.type.includes('word') ||\r\n                       file.type.includes('excel') ||\r\n                       file.type.includes('powerpoint');\r\n\r\n    if (!isSupported) {\r\n      return {\r\n        supported: false,\r\n        reason: `File type ${file.type} not supported. Supported: images, PDFs, Office documents, text files`\r\n      };\r\n    }\r\n\r\n    return { supported: true };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\pricingService.ts","messages":[{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 64 times.","line":29,"column":85,"nodeType":"Literal","endLine":29,"endColumn":97},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currency' is assigned a value but never used.","line":200,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":200,"endColumn":43},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'currency' is assigned a value but never used. Allowed unused args must match /^_/u.","line":200,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":200,"endColumn":43}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Pricing service for calculating API costs across different providers\r\n// Prices are in USD per 1M tokens unless otherwise specified\r\n\r\nexport interface ModelPricing {\r\n  inputPrice: number;  // Price per 1M input tokens\r\n  outputPrice: number; // Price per 1M output tokens\r\n  currency: string;    // Currency (USD)\r\n  lastUpdated: string; // Date when pricing was last updated\r\n}\r\n\r\nexport interface ProviderPricing {\r\n  [modelName: string]: ModelPricing;\r\n}\r\n\r\nexport interface CostCalculation {\r\n  inputCost: number;\r\n  outputCost: number;\r\n  totalCost: number;\r\n  currency: string;\r\n  provider: string;\r\n  model: string;\r\n}\r\n\r\n// Pricing data for all providers (as of January 2025)\r\n// Note: Prices may change frequently, especially for newer models\r\nexport const PROVIDER_PRICING: { [providerId: string]: ProviderPricing } = {\r\n  openai: {\r\n    // GPT-4 models\r\n    'gpt-4': { inputPrice: 30.00, outputPrice: 60.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gpt-4-turbo': { inputPrice: 10.00, outputPrice: 30.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gpt-4-turbo-preview': { inputPrice: 10.00, outputPrice: 30.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gpt-4-1106-preview': { inputPrice: 10.00, outputPrice: 30.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gpt-4-0125-preview': { inputPrice: 10.00, outputPrice: 30.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gpt-4-vision-preview': { inputPrice: 10.00, outputPrice: 30.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gpt-4o': { inputPrice: 5.00, outputPrice: 15.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gpt-4o-mini': { inputPrice: 0.15, outputPrice: 0.60, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    \r\n    // GPT-3.5 models\r\n    'gpt-3.5-turbo': { inputPrice: 0.50, outputPrice: 1.50, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gpt-3.5-turbo-16k': { inputPrice: 3.00, outputPrice: 4.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gpt-3.5-turbo-1106': { inputPrice: 1.00, outputPrice: 2.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gpt-3.5-turbo-0125': { inputPrice: 0.50, outputPrice: 1.50, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    \r\n    // O1 models\r\n    'o1-preview': { inputPrice: 15.00, outputPrice: 60.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'o1-mini': { inputPrice: 3.00, outputPrice: 12.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n  },\r\n\r\n  anthropic: {\r\n    // Claude 3.5 models\r\n    'claude-3-5-sonnet-20241022': { inputPrice: 3.00, outputPrice: 15.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'claude-3-5-sonnet-20240620': { inputPrice: 3.00, outputPrice: 15.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'claude-3-5-haiku-20241022': { inputPrice: 1.00, outputPrice: 5.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    \r\n    // Claude 3 models\r\n    'claude-3-opus-20240229': { inputPrice: 15.00, outputPrice: 75.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'claude-3-sonnet-20240229': { inputPrice: 3.00, outputPrice: 15.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'claude-3-haiku-20240307': { inputPrice: 0.25, outputPrice: 1.25, currency: 'USD', lastUpdated: '2025-01-01' },\r\n  },\r\n\r\n  gemini: {\r\n    // Gemini Pro models\r\n    'gemini-1.5-pro': { inputPrice: 3.50, outputPrice: 10.50, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gemini-1.5-pro-latest': { inputPrice: 3.50, outputPrice: 10.50, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gemini-1.5-flash': { inputPrice: 0.075, outputPrice: 0.30, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gemini-1.5-flash-latest': { inputPrice: 0.075, outputPrice: 0.30, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gemini-1.0-pro': { inputPrice: 0.50, outputPrice: 1.50, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gemini-pro': { inputPrice: 0.50, outputPrice: 1.50, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'gemini-pro-vision': { inputPrice: 0.25, outputPrice: 0.50, currency: 'USD', lastUpdated: '2025-01-01' },\r\n  },\r\n\r\n  mistral: {\r\n    // Mistral models\r\n    'mistral-large-latest': { inputPrice: 4.00, outputPrice: 12.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'mistral-large-2407': { inputPrice: 4.00, outputPrice: 12.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'mistral-medium-latest': { inputPrice: 2.70, outputPrice: 8.10, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'mistral-small-latest': { inputPrice: 1.00, outputPrice: 3.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'mistral-small-2402': { inputPrice: 1.00, outputPrice: 3.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'open-mistral-7b': { inputPrice: 0.25, outputPrice: 0.25, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'open-mixtral-8x7b': { inputPrice: 0.70, outputPrice: 0.70, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'open-mixtral-8x22b': { inputPrice: 2.00, outputPrice: 6.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n  },\r\n\r\n  deepseek: {\r\n    // DeepSeek models\r\n    'deepseek-chat': { inputPrice: 0.14, outputPrice: 0.28, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'deepseek-coder': { inputPrice: 0.14, outputPrice: 0.28, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'deepseek-v2.5': { inputPrice: 0.14, outputPrice: 0.28, currency: 'USD', lastUpdated: '2025-01-01' },\r\n  },\r\n\r\n  deepinfra: {\r\n    // DeepInfra models (approximate pricing, varies by model)\r\n    'meta-llama/Meta-Llama-3.1-70B-Instruct': { inputPrice: 0.52, outputPrice: 0.75, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'meta-llama/Meta-Llama-3.1-8B-Instruct': { inputPrice: 0.055, outputPrice: 0.055, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'microsoft/WizardLM-2-8x22B': { inputPrice: 0.50, outputPrice: 0.50, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'mistralai/Mixtral-8x7B-Instruct-v0.1': { inputPrice: 0.24, outputPrice: 0.24, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'mistralai/Mixtral-8x22B-Instruct-v0.1': { inputPrice: 0.65, outputPrice: 0.65, currency: 'USD', lastUpdated: '2025-01-01' },\r\n  },\r\n\r\n  // OpenRouter uses dynamic pricing based on underlying models\r\n  // These are approximate averages\r\n  openrouter: {\r\n    'openai/gpt-4': { inputPrice: 30.00, outputPrice: 60.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'openai/gpt-4-turbo': { inputPrice: 10.00, outputPrice: 30.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'openai/gpt-4o': { inputPrice: 5.00, outputPrice: 15.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'openai/gpt-4o-mini': { inputPrice: 0.15, outputPrice: 0.60, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'openai/gpt-3.5-turbo': { inputPrice: 0.50, outputPrice: 1.50, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'anthropic/claude-3.5-sonnet': { inputPrice: 3.00, outputPrice: 15.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'anthropic/claude-3-opus': { inputPrice: 15.00, outputPrice: 75.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'anthropic/claude-3-sonnet': { inputPrice: 3.00, outputPrice: 15.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'anthropic/claude-3-haiku': { inputPrice: 0.25, outputPrice: 1.25, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'google/gemini-pro-1.5': { inputPrice: 3.50, outputPrice: 10.50, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'google/gemini-flash-1.5': { inputPrice: 0.075, outputPrice: 0.30, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'mistralai/mistral-large': { inputPrice: 4.00, outputPrice: 12.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'mistralai/mistral-medium': { inputPrice: 2.70, outputPrice: 8.10, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'meta-llama/llama-3.1-70b-instruct': { inputPrice: 0.52, outputPrice: 0.75, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'meta-llama/llama-3.1-8b-instruct': { inputPrice: 0.055, outputPrice: 0.055, currency: 'USD', lastUpdated: '2025-01-01' },\r\n  },\r\n\r\n  replicate: {\r\n    // Replicate pricing is typically per-second, but we'll estimate per-token costs\r\n    // These are rough estimates based on typical usage patterns\r\n    'meta/meta-llama-3-70b-instruct': { inputPrice: 0.65, outputPrice: 2.75, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'meta/meta-llama-3-8b-instruct': { inputPrice: 0.05, outputPrice: 0.25, currency: 'USD', lastUpdated: '2025-01-01' },\r\n    'mistralai/mixtral-8x7b-instruct-v0.1': { inputPrice: 0.30, outputPrice: 1.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n  },\r\n\r\n  // N8N and Requesty pricing depends on the underlying service they're calling\r\n  // We'll use estimated averages\r\n  n8n: {\r\n    'default': { inputPrice: 2.00, outputPrice: 6.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n  },\r\n\r\n  requesty: {\r\n    'default': { inputPrice: 2.00, outputPrice: 6.00, currency: 'USD', lastUpdated: '2025-01-01' },\r\n  },\r\n};\r\n\r\n// Default pricing for unknown models\r\nexport const DEFAULT_PRICING: ModelPricing = {\r\n  inputPrice: 1.00,\r\n  outputPrice: 3.00,\r\n  currency: 'USD',\r\n  lastUpdated: '2025-01-01'\r\n};\r\n\r\nexport class PricingService {\r\n  /**\r\n   * Calculate the cost for a given provider, model, and token usage\r\n   */\r\n  static calculateCost(\r\n    provider: string,\r\n    model: string,\r\n    promptTokens: number,\r\n    completionTokens: number\r\n  ): CostCalculation {\r\n    const providerPricing = PROVIDER_PRICING[provider.toLowerCase()];\r\n    let modelPricing: ModelPricing;\r\n\r\n    if (providerPricing) {\r\n      // Try exact model match first\r\n      modelPricing = providerPricing[model] || \r\n                   // Try without version suffix (e.g., gpt-4-1106-preview -> gpt-4)\r\n                   providerPricing[model.split('-').slice(0, 2).join('-')] ||\r\n                   // Try first part only (e.g., gpt-4-turbo -> gpt-4)\r\n                   providerPricing[model.split('-')[0]] ||\r\n                   // Use default for this provider if available\r\n                   providerPricing['default'] ||\r\n                   DEFAULT_PRICING;\r\n    } else {\r\n      modelPricing = DEFAULT_PRICING;\r\n    }\r\n\r\n    // Calculate costs (prices are per 1M tokens)\r\n    const inputCost = (promptTokens / 1_000_000) * modelPricing.inputPrice;\r\n    const outputCost = (completionTokens / 1_000_000) * modelPricing.outputPrice;\r\n    const totalCost = inputCost + outputCost;\r\n\r\n    return {\r\n      inputCost: Number(inputCost.toFixed(6)),\r\n      outputCost: Number(outputCost.toFixed(6)),\r\n      totalCost: Number(totalCost.toFixed(6)),\r\n      currency: modelPricing.currency,\r\n      provider,\r\n      model\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if a provider is local (no API costs)\r\n   */\r\n  static isLocalProvider(provider: string): boolean {\r\n    const localProviders = ['ollama', 'lmstudio'];\r\n    return localProviders.includes(provider.toLowerCase());\r\n  }\r\n\r\n  /**\r\n   * Format cost for display\r\n   */\r\n  static formatCost(cost: number, currency = 'USD'): string {\r\n    if (cost < 0.000001) {\r\n      return `<$0.000001`;\r\n    }\r\n    if (cost < 0.01) {\r\n      return `$${cost.toFixed(6)}`;\r\n    }\r\n    return `$${cost.toFixed(4)}`;\r\n  }\r\n\r\n  /**\r\n   * Get pricing information for a specific model\r\n   */\r\n  static getModelPricing(provider: string, model: string): ModelPricing | null {\r\n    const providerPricing = PROVIDER_PRICING[provider.toLowerCase()];\r\n    if (!providerPricing) return null;\r\n\r\n    return providerPricing[model] || \r\n           providerPricing[model.split('-').slice(0, 2).join('-')] ||\r\n           providerPricing[model.split('-')[0]] ||\r\n           providerPricing['default'] ||\r\n           null;\r\n  }\r\n\r\n  /**\r\n   * Get all available models for a provider with their pricing\r\n   */\r\n  static getProviderModels(provider: string): { [model: string]: ModelPricing } {\r\n    return PROVIDER_PRICING[provider.toLowerCase()] || {};\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\processManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1838,1891],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2065,2127],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":200,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":200,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5468,5512],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":204,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":204,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5561,5623],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":231,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":231,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6218,6275],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":273,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":273,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7173,7239],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":278,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":278,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7329,7385],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8038,8087],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Process Manager for Internal Commands\n * Handles terminal process execution and management\n */\n\nimport { spawn, ChildProcess } from 'child_process';\nimport { ProcessSession, ProcessInfo } from '../types/internalCommands';\nimport { EventEmitter } from 'events';\n\nclass ProcessManager extends EventEmitter {\n  private sessions: Map<number, ProcessSession> = new Map();\n  private nextPid = 1000; // Start with a high number to avoid conflicts\n\n  constructor() {\n    super();\n    this.setupCleanup();\n  }\n\n  /**\n   * Start a new process\n   */\n  async startProcess(command: string, shell?: string, timeout?: number): Promise<ProcessInfo> {\n    const pid = this.nextPid++;\n    const startTime = new Date();\n\n    try {\n      // Determine shell to use\n      const useShell = shell || this.getDefaultShell();\n      \n      // Parse command and arguments\n      const { cmd, args } = this.parseCommand(command, useShell);\n      \n      // Spawn the process\n      const childProcess = spawn(cmd, args, {\n        stdio: ['pipe', 'pipe', 'pipe'],\n        shell: useShell === 'bash' || useShell === 'sh',\n        env: { ...process.env },\n        cwd: process.cwd()\n      });\n\n      // Create session\n      const session: ProcessSession = {\n        pid,\n        command,\n        shell: useShell,\n        startTime,\n        lastActivity: startTime,\n        status: 'running',\n        blocked: false,\n        process: childProcess\n      };\n\n      this.sessions.set(pid, session);\n\n      // Set up process event handlers\n      this.setupProcessHandlers(session, childProcess);\n\n      // Set up timeout if specified\n      if (timeout && timeout > 0) {\n        setTimeout(() => {\n          if (this.sessions.has(pid) && this.sessions.get(pid)!.status === 'running') {\n            this.forceTerminate(pid);\n          }\n        }, timeout);\n      }\n\n      console.log(`🚀 Started process ${pid}: ${command}`);\n\n      return {\n        pid,\n        command,\n        status: 'running',\n        startTime,\n        blocked: false,\n        runtime: 0\n      };\n\n    } catch (error) {\n      console.error(`❌ Failed to start process: ${command}`, error);\n      throw new Error(`Failed to start process: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Read output from a process\n   */\n  async readProcessOutput(pid: number, timeoutMs?: number): Promise<string> {\n    const session = this.sessions.get(pid);\n    if (!session) {\n      throw new Error(`Process ${pid} not found`);\n    }\n\n    if (!session.process) {\n      throw new Error(`Process ${pid} has no associated child process`);\n    }\n\n    return new Promise((resolve, reject) => {\n      let output = '';\n      let hasResolved = false;\n\n      const timeout = setTimeout(() => {\n        if (!hasResolved) {\n          hasResolved = true;\n          resolve(output || 'Process timed out or no output available');\n        }\n      }, timeoutMs || 5000);\n\n      // Collect stdout data\n      const onData = (data: Buffer) => {\n        output += data.toString();\n        session.lastActivity = new Date();\n      };\n\n      // Handle process completion\n      const onClose = (code: number | null) => {\n        clearTimeout(timeout);\n        if (!hasResolved) {\n          hasResolved = true;\n          session.status = code === 0 ? 'finished' : 'error';\n          resolve(output);\n        }\n      };\n\n      // Handle errors\n      const onError = (error: Error) => {\n        clearTimeout(timeout);\n        if (!hasResolved) {\n          hasResolved = true;\n          session.status = 'error';\n          reject(error);\n        }\n      };\n\n      const childProcess = session.process as ChildProcess;\n      childProcess.stdout?.on('data', onData);\n      childProcess.stderr?.on('data', onData);\n      childProcess.on('close', onClose);\n      childProcess.on('error', onError);\n\n      // Clean up listeners after resolution\n      const cleanup = () => {\n        childProcess.stdout?.off('data', onData);\n        childProcess.stderr?.off('data', onData);\n        childProcess.off('close', onClose);\n        childProcess.off('error', onError);\n      };\n\n      // Ensure cleanup happens\n      setTimeout(cleanup, (timeoutMs || 5000) + 1000);\n    });\n  }\n\n  /**\n   * Send input to a process\n   */\n  async interactWithProcess(pid: number, input: string, timeoutMs?: number): Promise<string> {\n    const session = this.sessions.get(pid);\n    if (!session) {\n      throw new Error(`Process ${pid} not found`);\n    }\n\n    const childProcess = session.process as ChildProcess;\n    if (!childProcess || !childProcess.stdin) {\n      throw new Error(`Process ${pid} is not accepting input`);\n    }\n\n    // Send input to the process\n    childProcess.stdin.write(input + '\\n');\n    session.lastActivity = new Date();\n\n    // Wait for output\n    return this.readProcessOutput(pid, timeoutMs);\n  }\n\n  /**\n   * Force terminate a process\n   */\n  async forceTerminate(pid: number): Promise<boolean> {\n    const session = this.sessions.get(pid);\n    if (!session) {\n      return false;\n    }\n\n    try {\n      if (session.process) {\n        const childProcess = session.process as ChildProcess;\n        childProcess.kill('SIGTERM');\n\n        // If process doesn't terminate gracefully, force kill\n        setTimeout(() => {\n          if (session.process && !childProcess.killed) {\n            childProcess.kill('SIGKILL');\n          }\n        }, 5000);\n      }\n\n      session.status = 'finished';\n      this.sessions.delete(pid);\n      \n      console.log(`🛑 Terminated process ${pid}`);\n      return true;\n\n    } catch (error) {\n      console.error(`❌ Failed to terminate process ${pid}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * List all active sessions\n   */\n  listSessions(): ProcessInfo[] {\n    return Array.from(this.sessions.values()).map(session => ({\n      pid: session.pid,\n      command: session.command,\n      status: session.status,\n      startTime: session.startTime,\n      blocked: session.blocked,\n      runtime: Date.now() - session.startTime.getTime()\n    }));\n  }\n\n  /**\n   * Kill a process by PID (system-wide)\n   */\n  async killProcess(pid: number): Promise<boolean> {\n    try {\n      process.kill(pid, 'SIGTERM');\n      return true;\n    } catch (error) {\n      console.error(`❌ Failed to kill process ${pid}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Get default shell based on platform\n   */\n  private getDefaultShell(): string {\n    switch (process.platform) {\n      case 'win32':\n        return 'powershell';\n      case 'darwin':\n      case 'linux':\n      default:\n        return 'bash';\n    }\n  }\n\n  /**\n   * Parse command for shell execution\n   */\n  private parseCommand(command: string, shell: string): { cmd: string; args: string[] } {\n    if (shell === 'powershell') {\n      return {\n        cmd: 'powershell',\n        args: ['-Command', command]\n      };\n    } else {\n      return {\n        cmd: shell,\n        args: ['-c', command]\n      };\n    }\n  }\n\n  /**\n   * Set up process event handlers\n   */\n  private setupProcessHandlers(session: ProcessSession, childProcess: ChildProcess): void {\n    childProcess.on('close', (code) => {\n      session.status = code === 0 ? 'finished' : 'error';\n      console.log(`📋 Process ${session.pid} closed with code ${code}`);\n    });\n\n    childProcess.on('error', (error) => {\n      session.status = 'error';\n      console.error(`❌ Process ${session.pid} error:`, error);\n    });\n\n    // Detect if process is blocked (waiting for input)\n    let lastOutputTime = Date.now();\n    childProcess.stdout?.on('data', () => {\n      lastOutputTime = Date.now();\n      session.blocked = false;\n    });\n\n    // Check periodically if process seems blocked\n    const checkBlocked = setInterval(() => {\n      if (session.status === 'running' && Date.now() - lastOutputTime > 2000) {\n        session.blocked = true;\n      }\n    }, 1000);\n\n    childProcess.on('close', () => {\n      clearInterval(checkBlocked);\n    });\n  }\n\n  /**\n   * Set up cleanup on process exit\n   */\n  private setupCleanup(): void {\n    const cleanup = () => {\n      console.log('🧹 Cleaning up process manager...');\n      for (const [pid] of this.sessions) {\n        this.forceTerminate(pid);\n      }\n    };\n\n    process.on('exit', cleanup);\n    process.on('SIGINT', cleanup);\n    process.on('SIGTERM', cleanup);\n  }\n}\n\n// Export singleton instance\nexport const processManager = new ProcessManager();\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\promptsService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[891,946],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1325,1380],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1590,1645],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6598,6648],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import promptsData from '../data/prompts.json';\r\nimport { getStorageItem, setStorageItem } from '../utils/storage';\r\n\r\nexport interface Prompt {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  prompt: string;\r\n  category: string;\r\n  icon: string;\r\n}\r\n\r\nexport interface PromptsData {\r\n  prompts: Prompt[];\r\n}\r\n\r\nclass PromptsService {\r\n  private prompts: Prompt[] = [];\r\n  private customPrompts: Prompt[] = [];\r\n  private initialized = false;\r\n\r\n  constructor() {\r\n    this.loadDefaultPrompts();\r\n    // Only load custom prompts on client side\r\n    if (typeof window !== 'undefined') {\r\n      this.loadCustomPrompts();\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  private ensureInitialized() {\r\n    if (!this.initialized && typeof window !== 'undefined') {\r\n      // Load custom prompts asynchronously but don't block\r\n      this.loadCustomPrompts().catch(error => {\r\n        console.error('Failed to load custom prompts:', error);\r\n      });\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  private loadDefaultPrompts() {\r\n    this.prompts = (promptsData as PromptsData).prompts;\r\n  }\r\n\r\n  private async loadCustomPrompts() {\r\n    try {\r\n      const stored = await getStorageItem('custom-prompts');\r\n      if (stored) {\r\n        this.customPrompts = JSON.parse(stored);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load custom prompts:', error);\r\n      this.customPrompts = [];\r\n    }\r\n  }\r\n\r\n  private async saveCustomPrompts() {\r\n    try {\r\n      await setStorageItem('custom-prompts', JSON.stringify(this.customPrompts));\r\n    } catch (error) {\r\n      console.error('Failed to save custom prompts:', error);\r\n    }\r\n  }\r\n\r\n  getAllPrompts(): Prompt[] {\r\n    this.ensureInitialized();\r\n    return [...this.prompts, ...this.customPrompts];\r\n  }\r\n\r\n  getCustomPrompts(): Prompt[] {\r\n    this.ensureInitialized();\r\n    return [...this.customPrompts];\r\n  }\r\n\r\n  getPromptsByCategory(category: string): Prompt[] {\r\n    const allPrompts = this.getAllPrompts();\r\n    return allPrompts.filter(prompt => prompt.category === category);\r\n  }\r\n\r\n  getPromptById(id: string): Prompt | undefined {\r\n    const allPrompts = this.getAllPrompts();\r\n    return allPrompts.find(prompt => prompt.id === id);\r\n  }\r\n\r\n  getCategories(): string[] {\r\n    const allPrompts = this.getAllPrompts();\r\n    const categories = new Set(allPrompts.map(prompt => prompt.category));\r\n    return Array.from(categories).sort();\r\n  }\r\n\r\n  processPrompt(promptId: string, content: string): string {\r\n    const prompt = this.getPromptById(promptId);\r\n    if (!prompt) {\r\n      throw new Error(`Prompt with id \"${promptId}\" not found`);\r\n    }\r\n\r\n    return prompt.prompt.replace('{content}', content);\r\n  }\r\n\r\n  async addCustomPrompt(prompt: Omit<Prompt, 'id'>): Promise<Prompt> {\r\n    const newPrompt: Prompt = {\r\n      ...prompt,\r\n      id: `custom_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\r\n    };\r\n\r\n    this.customPrompts.push(newPrompt);\r\n    await this.saveCustomPrompts();\r\n    return newPrompt;\r\n  }\r\n\r\n  async updateCustomPrompt(id: string, updates: Partial<Omit<Prompt, 'id'>>): Promise<boolean> {\r\n    const index = this.customPrompts.findIndex(prompt => prompt.id === id);\r\n    if (index === -1) {\r\n      return false;\r\n    }\r\n\r\n    this.customPrompts[index] = { ...this.customPrompts[index], ...updates };\r\n    await this.saveCustomPrompts();\r\n    return true;\r\n  }\r\n\r\n  async updateBuiltinPrompt(id: string, updates: Partial<Omit<Prompt, 'id'>>): Promise<boolean> {\r\n    const index = this.prompts.findIndex(prompt => prompt.id === id);\r\n    if (index === -1) {\r\n      return false;\r\n    }\r\n\r\n    this.prompts[index] = { ...this.prompts[index], ...updates };\r\n    // Note: Built-in prompts are modified in memory only\r\n    // They will revert to original values on app restart\r\n    return true;\r\n  }\r\n\r\n  async updatePrompt(id: string, updates: Partial<Omit<Prompt, 'id'>>): Promise<boolean> {\r\n    // Check if it's a custom prompt first\r\n    if (this.isCustomPrompt(id)) {\r\n      return this.updateCustomPrompt(id, updates);\r\n    } else {\r\n      // It's a built-in prompt\r\n      return this.updateBuiltinPrompt(id, updates);\r\n    }\r\n  }\r\n\r\n  async deleteCustomPrompt(id: string): Promise<boolean> {\r\n    const index = this.customPrompts.findIndex(prompt => prompt.id === id);\r\n    if (index === -1) {\r\n      return false;\r\n    }\r\n\r\n    this.customPrompts.splice(index, 1);\r\n    await this.saveCustomPrompts();\r\n    return true;\r\n  }\r\n\r\n  isCustomPrompt(id: string): boolean {\r\n    return this.customPrompts.some(prompt => prompt.id === id);\r\n  }\r\n\r\n  /**\r\n   * Find existing custom copy of a built-in prompt\r\n   * This helps prevent duplicate custom prompts when editing built-in ones\r\n   */\r\n  findCustomCopyOfBuiltinPrompt(builtinPrompt: Prompt): Prompt | undefined {\r\n    if (this.isCustomPrompt(builtinPrompt.id)) {\r\n      return undefined; // Already a custom prompt\r\n    }\r\n\r\n    // Look for custom prompts that might be copies of this built-in prompt\r\n    // We'll match based on the original name (removing \" (Custom)\" suffix if present)\r\n    const originalName = builtinPrompt.name;\r\n    const customCopyName = `${originalName} (Custom)`;\r\n\r\n    return this.customPrompts.find(customPrompt =>\r\n      customPrompt.name === customCopyName ||\r\n      customPrompt.name === originalName ||\r\n      // Also check if the prompt content is very similar (in case user renamed it)\r\n      (customPrompt.prompt === builtinPrompt.prompt && customPrompt.category === builtinPrompt.category)\r\n    );\r\n  }\r\n\r\n  exportPrompts(): string {\r\n    return JSON.stringify({\r\n      prompts: this.customPrompts\r\n    }, null, 2);\r\n  }\r\n\r\n  async importPrompts(jsonData: string): Promise<boolean> {\r\n    try {\r\n      const data = JSON.parse(jsonData);\r\n      if (data.prompts && Array.isArray(data.prompts)) {\r\n        // Validate prompt structure\r\n        const validPrompts = data.prompts.filter((prompt: unknown) => {\r\n          const p = prompt as Record<string, unknown>;\r\n          return p.name && p.description && p.prompt && p.category;\r\n        });\r\n\r\n        // Add unique IDs if missing\r\n        validPrompts.forEach((prompt: unknown) => {\r\n          const p = prompt as Record<string, unknown>;\r\n          if (!p.id) {\r\n            p.id = `imported_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n          }\r\n          if (!p.icon) {\r\n            p.icon = '📝';\r\n          }\r\n        });\r\n\r\n        this.customPrompts.push(...validPrompts);\r\n        await this.saveCustomPrompts();\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Failed to import prompts:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport const promptsService = new PromptsService();\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\AnthropicProvider.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1974,2029],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2037,2117],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2226,2298],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2390,2473],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2481,2609],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2703,2807],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2815,3097],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3329,3402],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3465,3522],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4306,4378],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 47 to the 15 allowed.","line":132,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":132,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6157,6497],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6610,6816],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":203,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":203,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[8521,8614],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9109,9206],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":302,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":302,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12726,13001],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":320,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":320,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13410,13507],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":344,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":344,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14286,14492],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":350,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":350,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14514,14586],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":353,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":353,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14601,14681],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":360,"column":30,"nodeType":"Literal","endLine":360,"endColumn":42},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":366,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":366,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15002,15085],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":370,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":370,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15164,15220],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":386,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":386,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15835,15906],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":391,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":391,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16055,16111],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16443,16536],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":409,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":409,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16850,16927],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":417,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":417,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17155,17224],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":431,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":431,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[17775,17869],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":459,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":459,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18588,18671],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 148 to the 15 allowed.","line":530,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":530,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":541,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":541,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[21832,21922],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":589,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":589,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23802,23880],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":625,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":625,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25505,25602],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":634,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":634,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25979,26063],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":638,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":638,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26168,26262],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":658,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":658,"endColumn":32,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[27111,27184],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":689,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":689,"endColumn":27,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[28495,28547],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":693,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":693,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[28754,28867],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":707,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":707,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29295,29667],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":716,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":716,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29842,29935],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":745,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":745,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31178,31274],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":752,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":752,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31453,31521],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":753,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":753,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31529,31604],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":755,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":755,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31614,31718],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":794,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":794,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33063,33183],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":833,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":833,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35010,35065],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":840,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":840,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35329,35416],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":850,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":850,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35711,35941],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":868,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":868,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36443,36588],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":884,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":884,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[37344,37408],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":885,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":885,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[37420,37665],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":896,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":896,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[38013,38130],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":912,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":912,"endColumn":27,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[38917,39000],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":920,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":920,"endColumn":32,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[39392,39457],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":930,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":930,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[39673,39789],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":931,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":931,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[39799,39854],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":945,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":945,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[40434,40554],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":946,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":946,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[40562,40636],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":967,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":967,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[41298,41351],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":980,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":980,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[41670,41755],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":985,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":985,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[41850,41938],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":992,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":992,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42209,42279],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":994,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":994,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[42314,42390],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1028,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1028,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[43599,43672],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":562,"column":14,"nodeType":"Literal","messageId":"unexpected","endLine":562,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_settings' is defined but never used.","line":1022,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1022,"endColumn":14,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_conversationHistory' is defined but never used.","line":1023,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1023,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_conversationId' is defined but never used.","line":1024,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1024,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":62,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Anthropic provider implementation\r\n\r\nimport { BaseProvider } from './BaseProvider';\r\nimport { \r\n  LLMSettings, \r\n  LLMResponse, \r\n  MessageContent, \r\n  ContentItem, \r\n  LLMProvider,\r\n  ToolObject,\r\n  ProviderCapabilities\r\n} from './types';\r\n\r\nimport { ToolNameUtils } from './utils';\r\nimport { ANTHROPIC_SYSTEM_PROMPT } from './prompts/anthropic';\r\nimport { PricingService } from '../pricingService';\r\n\r\nexport class AnthropicProvider extends BaseProvider {\r\n  readonly id = 'anthropic';\r\n  readonly name = 'Anthropic';\r\n  readonly capabilities: ProviderCapabilities = {\r\n    supportsVision: true,\r\n    supportsTools: true,\r\n    supportsStreaming: true,\r\n    supportsSystemMessages: true,\r\n    supportsPromptCaching: true,\r\n    promptCachingType: 'manual', // Requires cache_control parameters\r\n    maxToolNameLength: 64,\r\n    toolFormat: 'anthropic'\r\n  };\r\n\r\n  // Injected methods from main service\r\n  private _executeMultipleToolsParallel?: (\r\n    toolCalls: Array<{ id?: string; name: string; arguments: Record<string, unknown> }>,\r\n    provider?: string\r\n  ) => Promise<Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>>;\r\n\r\n  private _summarizeToolResultsForModel?: (\r\n    results: Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>\r\n  ) => string;\r\n\r\n  // Injected tool executor method\r\n  public executeMCPTool?: (toolName: string, args: Record<string, unknown>) => Promise<string>;\r\n\r\n  private _aggregateToolResults?: (\r\n    results: Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>\r\n  ) => string;\r\n\r\n  private _formatToolResult?: (toolName: string, result: unknown) => string;\r\n\r\n  private _getMCPToolsForProvider?: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\r\n\r\n  // Anthropic-specific tool calling methods\r\n  private async getAnthropicTools(settings: LLMSettings): Promise<unknown[]> {\r\n    try {\r\n      console.log(`🔍 Getting tools for Anthropic provider`);\r\n      console.log(`🔍 Tool calling enabled:`, settings?.toolCallingEnabled !== false);\r\n\r\n      // Check if tool calling is disabled\r\n      if (settings?.toolCallingEnabled === false) {\r\n        console.log(`🚫 Tool calling is disabled, returning empty tools array`);\r\n        return [];\r\n      }\r\n\r\n      // Get raw tools from the centralized service\r\n      console.log(`🔧 AnthropicProvider: Calling _getMCPToolsForProvider for anthropic`);\r\n      console.log(`🔧 AnthropicProvider: _getMCPToolsForProvider method exists:`, typeof this._getMCPToolsForProvider === 'function');\r\n\r\n      const rawTools = await this._getMCPToolsForProvider!('anthropic', settings);\r\n      console.log(`🔧 AnthropicProvider: Received ${rawTools.length} raw tools from _getMCPToolsForProvider`);\r\n      console.log(`📋 Raw tools received (${rawTools.length} tools):`, (rawTools as Array<{ function?: { name?: string }, serverId?: string }>).map(t => ({\r\n        name: t.function?.name,\r\n        serverId: t.serverId,\r\n        isInternal: t.serverId === 'internal-commands'\r\n      })));\r\n\r\n      // Format tools specifically for Anthropic\r\n      const formattedTools = this.formatToolsForAnthropic(rawTools as Array<{ type?: string; function?: { name?: string; description?: string; parameters?: unknown } }>);\r\n      console.log(`🔧 Formatted ${formattedTools.length} tools for Anthropic`);\r\n\r\n      return formattedTools;\r\n    } catch (error) {\r\n      console.error('❌ Failed to get Anthropic tools:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private formatToolsForAnthropic(rawTools: Array<{ type?: string; function?: { name?: string; description?: string; parameters?: unknown } }>): unknown[] {\r\n    return rawTools.map(tool => {\r\n      // All tools now come in unified format with type: 'function' and function object\r\n      if (tool.type === 'function' && tool.function) {\r\n        // Convert to Anthropic's custom tool format\r\n        return {\r\n          type: 'custom',\r\n          name: tool.function.name || 'unknown_tool',\r\n          description: tool.function.description || 'No description',\r\n          input_schema: tool.function.parameters || {\r\n            type: 'object',\r\n            properties: {},\r\n            required: []\r\n          }\r\n        };\r\n      }\r\n      \r\n      console.warn(`⚠️ Skipping invalid tool (not in unified format):`, tool);\r\n      return null;\r\n    }).filter(tool => tool !== null);\r\n  }\r\n\r\n  // Method to inject dependencies from main service\r\n  injectDependencies(dependencies: {\r\n    executeMultipleToolsParallel?: (\r\n      toolCalls: Array<{ id?: string; name: string; arguments: Record<string, unknown> }>,\r\n      provider?: string\r\n    ) => Promise<Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>>;\r\n    summarizeToolResultsForModel?: (\r\n      results: Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>\r\n    ) => string;\r\n    aggregateToolResults?: (\r\n      results: Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>\r\n    ) => string;\r\n    formatToolResult?: (toolName: string, result: unknown) => string;\r\n    getMCPToolsForProvider?: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\r\n  }) {\r\n    this._executeMultipleToolsParallel = dependencies.executeMultipleToolsParallel;\r\n    this._summarizeToolResultsForModel = dependencies.summarizeToolResultsForModel;\r\n    this._aggregateToolResults = dependencies.aggregateToolResults;\r\n    this._formatToolResult = dependencies.formatToolResult;\r\n    this._getMCPToolsForProvider = dependencies.getMCPToolsForProvider;\r\n  }\r\n\r\n  async sendMessage(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    // Initialize caching setting early\r\n    const cachingEnabled = settings.promptCachingEnabled ?? true;\r\n\r\n    // Debug API key details\r\n    console.log('🔍 Anthropic API key debug:', {\r\n      hasApiKey: !!settings.apiKey,\r\n      keyLength: settings.apiKey?.length || 0,\r\n      keyStart: settings.apiKey?.substring(0, 10) || 'undefined',\r\n      keyType: typeof settings.apiKey,\r\n      startsWithSkAnt: settings.apiKey?.startsWith('sk-ant-') || false,\r\n      cachingEnabled\r\n    });\r\n\r\n    // Validate API key format\r\n    if (!settings.apiKey || !settings.apiKey.startsWith('sk-ant-')) {\r\n      console.error('❌ Anthropic API key validation failed:', {\r\n        apiKey: settings.apiKey,\r\n        hasApiKey: !!settings.apiKey,\r\n        startsWithSkAnt: settings.apiKey?.startsWith('sk-ant-')\r\n      });\r\n      throw new Error('Invalid Anthropic API key format. Key should start with \"sk-ant-\"');\r\n    }\r\n\r\n    // Adjust max_tokens based on Claude model limits\r\n    let maxTokens = settings.maxTokens;\r\n    if (settings.model.includes('claude-3-5-haiku')) {\r\n      maxTokens = Math.min(maxTokens, 8192);\r\n    } else if (settings.model.includes('claude-3-opus') || settings.model.includes('claude-3-sonnet') || settings.model.includes('claude-3-haiku')) {\r\n      // Claude 3 models have 4096 max output tokens\r\n      maxTokens = Math.min(maxTokens, 4096);\r\n    } else if (settings.model.includes('claude-3-5-sonnet')) {\r\n      maxTokens = Math.min(maxTokens, 8192);\r\n    } else {\r\n      // Default Claude limit\r\n      maxTokens = Math.min(maxTokens, 4096);\r\n    }\r\n\r\n    const messages = [];\r\n\r\n    // Add conversation history - filter out empty messages for Anthropic\r\n    for (const historyMessage of conversationHistory) {\r\n      let content: string;\r\n      if (typeof historyMessage.content === 'string') {\r\n        content = historyMessage.content.trim();\r\n      } else if (Array.isArray(historyMessage.content)) {\r\n        // Extract text from array format\r\n        content = historyMessage.content.map((item: ContentItem | string) => {\r\n          if (typeof item === 'string') return item;\r\n          if (item.type === 'text') return item.text;\r\n          return '[Non-text content]';\r\n        }).join(' ').trim();\r\n      } else {\r\n        content = String(historyMessage.content).trim();\r\n      }\r\n\r\n      // Only add messages with non-empty content\r\n      if (content) {\r\n        messages.push({\r\n          role: historyMessage.role,\r\n          content: content\r\n        });\r\n      } else {\r\n        console.warn(`⚠️ Skipping empty message in Anthropic conversation history:`, historyMessage);\r\n      }\r\n    }\r\n\r\n    // Add current message\r\n    if (typeof message === 'string') {\r\n      // For large string messages, add cache_control if caching is enabled\r\n      if (cachingEnabled && message.length > 4096) { // ~1024 tokens\r\n        const contentWithCaching = [\r\n          {\r\n            type: 'text',\r\n            text: message,\r\n            cache_control: { type: 'ephemeral' }\r\n          }\r\n        ];\r\n        messages.push({ role: 'user', content: contentWithCaching });\r\n        console.log(`🔧 Anthropic: Added cache_control to large user message (${message.length} chars)`);\r\n      } else {\r\n        messages.push({ role: 'user', content: message });\r\n      }\r\n    } else if (Array.isArray(message)) {\r\n      // Handle ContentItem array format (from chatService.ts)\r\n      const anthropicContent = message.map((item: ContentItem, index) => {\r\n        if (item.type === 'text') {\r\n          // Add cache_control to large text content and make it the last cacheable item\r\n          const textItem = { type: 'text', text: item.text };\r\n          if (cachingEnabled && item.text && item.text.length > 4096 && index === message.length - 1) {\r\n            return { ...textItem, cache_control: { type: 'ephemeral' } };\r\n          }\r\n          return textItem;\r\n        } else if (item.type === 'image_url') {\r\n          // Convert OpenAI format to Anthropic format\r\n          const imageUrl = item.image_url?.url || '';\r\n\r\n          // Determine media type from data URL\r\n          const mediaType = imageUrl.includes('data:image/png') ? 'image/png' :\r\n                           imageUrl.includes('data:image/gif') ? 'image/gif' :\r\n                           imageUrl.includes('data:image/webp') ? 'image/webp' : 'image/jpeg';\r\n\r\n          return {\r\n            type: 'image',\r\n            source: {\r\n              type: 'base64',\r\n              media_type: mediaType,\r\n              data: imageUrl.split(',')[1] // Remove data:image/jpeg;base64, prefix\r\n            }\r\n          };\r\n        } else if (item.type === 'document') {\r\n          // Handle document format for Anthropic\r\n          return {\r\n            type: 'document',\r\n            source: {\r\n              type: 'base64',\r\n              media_type: item.document?.media_type || 'application/pdf',\r\n              data: item.document?.data || ''\r\n            }\r\n          };\r\n        }\r\n        return item; // Pass through other types as-is\r\n      });\r\n\r\n      messages.push({ role: 'user', content: anthropicContent });\r\n    } else {\r\n      // Handle legacy vision format (for backward compatibility)\r\n      const messageWithImages = message as { text: string; images: string[] };\r\n      const content = [];\r\n      content.push({ type: 'text', text: messageWithImages.text });\r\n\r\n      // Add images in Anthropic format\r\n      for (const imageUrl of messageWithImages.images) {\r\n        // Determine media type from data URL\r\n        const mediaType = imageUrl.includes('data:image/png') ? 'image/png' :\r\n                         imageUrl.includes('data:image/gif') ? 'image/gif' :\r\n                         imageUrl.includes('data:image/webp') ? 'image/webp' : 'image/jpeg';\r\n\r\n        content.push({\r\n          type: 'image',\r\n          source: {\r\n            type: 'base64',\r\n            media_type: mediaType,\r\n            data: imageUrl.split(',')[1] // Remove data:image/jpeg;base64, prefix\r\n          }\r\n        });\r\n      }\r\n      messages.push({ role: 'user', content });\r\n    }\r\n\r\n    // Get Anthropic-specific formatted tools\r\n    const anthropicTools = await this.getAnthropicTools(settings);\r\n\r\n    // Use behavioral system prompt only (no tool descriptions)\r\n    // Tools are sent separately in the tools parameter\r\n    // Check for meaningful system prompt, not just empty string or generic default\r\n    const hasCustomSystemPrompt = settings.systemPrompt &&\r\n      settings.systemPrompt.trim() &&\r\n      settings.systemPrompt !== \"You are a helpful AI assistant. Please provide concise and helpful responses.\";\r\n\r\n    const systemPrompt = hasCustomSystemPrompt ? settings.systemPrompt! : this.getSystemPrompt();\r\n\r\n    console.log(`🔍 Anthropic system prompt source:`, {\r\n      hasCustom: hasCustomSystemPrompt,\r\n      usingCustom: hasCustomSystemPrompt,\r\n      promptLength: systemPrompt?.length || 0,\r\n      promptStart: systemPrompt?.substring(0, 100) + '...',\r\n      cachingEnabled\r\n    });\r\n\r\n    // Add cache_control to system prompt if caching is enabled and content is large enough\r\n    let systemWithCaching: unknown = systemPrompt;\r\n    if (cachingEnabled && systemPrompt && systemPrompt.length > 4096) { // ~1024 tokens\r\n      systemWithCaching = [\r\n        {\r\n          type: 'text',\r\n          text: systemPrompt,\r\n          cache_control: { type: 'ephemeral' }\r\n        }\r\n      ];\r\n      console.log(`🔧 Anthropic: Added cache_control to system prompt (${systemPrompt.length} chars)`);\r\n    }\r\n\r\n    const requestBody: Record<string, unknown> = {\r\n      model: settings.model,\r\n      max_tokens: maxTokens,\r\n      temperature: settings.temperature,\r\n      system: systemWithCaching || undefined,\r\n      messages: messages,\r\n      stream: !!onStream\r\n    };\r\n\r\n    // Add tools if available\r\n    if (anthropicTools.length > 0) {\r\n      requestBody.tools = anthropicTools;\r\n\r\n      // For Claude 3.7 Sonnet, encourage parallel tool use\r\n      if (settings.model.includes('claude-3-7-sonnet') || settings.model.includes('claude-sonnet-3-7')) {\r\n        // Don't disable parallel tool use to encourage multiple tool calls\r\n      }\r\n\r\n      // Use auto tool choice to allow Claude to decide when to use tools\r\n      requestBody.tool_choice = { type: \"auto\" };\r\n\r\n      console.log(`🚀 Anthropic API call with ${anthropicTools.length} tools:`, {\r\n        model: settings.model,\r\n        toolCount: anthropicTools.length,\r\n        toolChoice: requestBody.tool_choice\r\n      });\r\n    } else {\r\n      console.log(`🚀 Anthropic API call without tools (no tools available)`);\r\n    }\r\n\r\n    console.log('🔍 Anthropic request body:', JSON.stringify(requestBody, null, 2));\r\n\r\n    const response = await fetch(`${provider.baseUrl}/messages`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-api-key': settings.apiKey,\r\n        'anthropic-version': '2023-06-01'\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n      signal\r\n    });\r\n\r\n    console.log('🔍 Anthropic response status:', response.status, response.statusText);\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error('❌ Anthropic API error response:', error);\r\n      if (response.status === 401) {\r\n        throw new Error(`Anthropic API authentication failed. Please check your API key in Settings. The key may be expired or invalid. Error: ${error}`);\r\n      }\r\n      throw new Error(`Anthropic API error: ${error}`);\r\n    }\r\n\r\n    if (onStream) {\r\n      return this.handleStreamResponse(response, onStream, settings, provider, conversationHistory, signal);\r\n    } else {\r\n      return this.handleNonStreamResponse(response, settings, conversationHistory, conversationId);\r\n    }\r\n  }\r\n\r\n  async fetchModels(apiKey: string): Promise<string[]> {\r\n    if (!apiKey) {\r\n      console.error('❌ No Anthropic API key provided - cannot fetch models');\r\n      throw new Error('Anthropic API key is required to fetch available models. Please add your API key in settings.');\r\n    }\r\n\r\n    try {\r\n      console.log('🔍 Fetching Anthropic models from API...');\r\n      const response = await fetch('https://api.anthropic.com/v1/models', {\r\n        headers: {\r\n          'x-api-key': apiKey,\r\n          'anthropic-version': '2023-06-01',\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`❌ Anthropic API error: ${response.status} ${response.statusText}`, errorText);\r\n        throw new Error(`Failed to fetch Anthropic models: ${response.status} ${response.statusText} - ${errorText}`);\r\n      }\r\n\r\n      const data = await response.json() as { data: Array<{ id: string; display_name: string }> };\r\n      const models = data.data?.map((model) => model.id)?.sort() || [];\r\n\r\n      console.log(`✅ Fetched ${models.length} Anthropic models from API:`, models);\r\n\r\n      if (models.length === 0) {\r\n        throw new Error('No Anthropic models returned from API. This may indicate an API issue or insufficient permissions.');\r\n      }\r\n\r\n      return models;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch Anthropic models from API:', error);\r\n      throw error instanceof Error ? error : new Error(`Failed to fetch Anthropic models: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  formatTools(tools: ToolObject[]): unknown[] {\r\n    // Anthropic format with name length validation (max 64 characters)\r\n    return tools.map(tool => {\r\n      const originalName = tool.name || tool.function?.name || '';\r\n      const truncatedName = originalName.length > 64\r\n        ? ToolNameUtils.truncateToolNameForAnthropic(originalName)\r\n        : originalName;\r\n\r\n      if (originalName !== truncatedName) {\r\n        console.warn(`⚠️ Truncated tool name for Anthropic: \"${originalName}\" -> \"${truncatedName}\"`);\r\n      }\r\n\r\n      return {\r\n        name: truncatedName,\r\n        description: tool.description || tool.function?.description,\r\n        input_schema: tool.parameters || tool.function?.parameters || {\r\n          type: 'object',\r\n          properties: {},\r\n          required: []\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  getSystemPrompt(): string {\r\n    return ANTHROPIC_SYSTEM_PROMPT;\r\n  }\r\n\r\n\r\n\r\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\r\n    if (tools.length === 0) {\r\n      return basePrompt;\r\n    }\r\n\r\n    // Anthropic uses structured tool calling with tools parameter and tool_choice\r\n    // Don't add XML tool instructions as they conflict with native function calling\r\n    console.log(`🔧 Anthropic using structured tools, skipping XML tool instructions`);\r\n    return basePrompt;\r\n  }\r\n\r\n  validateToolCall(toolCall: { id?: string; name: string; arguments: Record<string, unknown> }): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!toolCall.name || typeof toolCall.name !== 'string') {\r\n      errors.push('Tool call must have a valid name');\r\n    }\r\n\r\n    // Anthropic uses tool_use blocks with specific format\r\n    if (toolCall.arguments && typeof toolCall.arguments !== 'object') {\r\n      errors.push(`Anthropic tool call arguments must be object: ${toolCall.name}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  validateTool(tool: unknown): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!tool || typeof tool !== 'object') {\r\n      errors.push('Tool must be an object');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const toolObj = tool as Record<string, unknown>;\r\n\r\n    if (!toolObj.name) {\r\n      errors.push('Anthropic tools must have name property');\r\n    }\r\n\r\n    if (!toolObj.description) {\r\n      errors.push('Anthropic tools must have description property');\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Legacy methods for backward compatibility (now use injected dependencies)\r\n  private async getMCPToolsForProvider(providerId: string, settings: LLMSettings): Promise<unknown[]> {\r\n    return this._getMCPToolsForProvider ? await this._getMCPToolsForProvider(providerId, settings) : [];\r\n  }\r\n\r\n  private async executeMultipleToolsParallel(\r\n    toolCalls: Array<{ id?: string; name: string; arguments: Record<string, unknown> }>,\r\n    provider?: string\r\n  ): Promise<Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>> {\r\n    return this._executeMultipleToolsParallel ? await this._executeMultipleToolsParallel(toolCalls, provider) : [];\r\n  }\r\n\r\n  private summarizeToolResultsForModel(\r\n    results: Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>\r\n  ): string {\r\n    return this._summarizeToolResultsForModel ? this._summarizeToolResultsForModel(results) : '';\r\n  }\r\n\r\n  private aggregateToolResults(\r\n    results: Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>\r\n  ): string {\r\n    return this._aggregateToolResults ? this._aggregateToolResults(results) : '';\r\n  }\r\n\r\n  private formatToolResult(toolName: string, result: unknown): string {\r\n    return this._formatToolResult ? this._formatToolResult(toolName, result) : JSON.stringify(result);\r\n  }\r\n\r\n  private static streamingCallCount = 0;\r\n  private static readonly MAX_STREAMING_CALLS = 5;\r\n\r\n  private async handleStreamResponse(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    signal?: AbortSignal\r\n  ): Promise<LLMResponse> {\r\n    // Prevent infinite recursion\r\n    AnthropicProvider.streamingCallCount++;\r\n    if (AnthropicProvider.streamingCallCount > AnthropicProvider.MAX_STREAMING_CALLS) {\r\n      console.error('❌ CRITICAL: Too many streaming calls detected - preventing infinite loop');\r\n      AnthropicProvider.streamingCallCount = 0;\r\n      throw new Error('Maximum streaming calls exceeded - preventing infinite loop');\r\n    }\r\n\r\n    try {\r\n    const reader = response.body?.getReader();\r\n    if (!reader) {\r\n      throw new Error('No response body');\r\n    }\r\n\r\n    let fullContent = '';\r\n    let usage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined = undefined;\r\n    const decoder = new TextDecoder();\r\n    const toolCalls: Array<{ id?: string; name?: string; arguments?: unknown; result?: string; isError?: boolean; parseError?: string }> = [];\r\n    const toolInputBuffers: { [index: number]: string } = {};\r\n    const currentToolBlocks: { [index: number]: Record<string, unknown> } = {};\r\n    const assistantContent: Array<Record<string, unknown>> = [];\r\n\r\n    try {\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n\r\n        const chunk = decoder.decode(value);\r\n        const lines = chunk.split('\\n');\r\n\r\n        for (const line of lines) {\r\n          if (line.startsWith('event: ')) {\r\n            // Skip event type lines\r\n            continue;\r\n          }\r\n\r\n          if (line.startsWith('data: ')) {\r\n            const data = line.slice(6).trim();\r\n            if (!data || data === '[DONE]') continue;\r\n\r\n            try {\r\n              const parsed = JSON.parse(data);\r\n\r\n              // Handle content_block_start for text\r\n              if (parsed.type === 'content_block_start' && parsed.content_block?.type === 'text') {\r\n                assistantContent.push({ type: 'text', text: '' });\r\n              }\r\n\r\n              // Handle content_block_start for tool_use\r\n              if (parsed.type === 'content_block_start' && parsed.content_block?.type === 'tool_use') {\r\n                console.log(`🔧 Anthropic streaming tool use started:`, parsed.content_block);\r\n                currentToolBlocks[parsed.index] = parsed.content_block;\r\n                toolInputBuffers[parsed.index] = '';\r\n                assistantContent.push({\r\n                  type: 'tool_use',\r\n                  id: parsed.content_block.id,\r\n                  name: parsed.content_block.name,\r\n                  input: {}\r\n                });\r\n\r\n                // Show tool usage in chat\r\n                const toolMessage = `\\n\\n🔧 **Using tool: ${parsed.content_block.name}**\\n`;\r\n                fullContent += toolMessage;\r\n                onStream(toolMessage);\r\n              }\r\n\r\n              // Handle content_block_delta events with text_delta\r\n              if (parsed.type === 'content_block_delta' &&\r\n                  parsed.delta?.type === 'text_delta' &&\r\n                  parsed.delta?.text) {\r\n                const content = parsed.delta.text;\r\n                fullContent += content;\r\n                onStream(content);\r\n\r\n                // Update assistant content\r\n                if (assistantContent[parsed.index] && assistantContent[parsed.index].type === 'text') {\r\n                  assistantContent[parsed.index].text += content;\r\n                }\r\n              }\r\n\r\n              // Handle content_block_delta events with input_json_delta (tool parameters)\r\n              if (parsed.type === 'content_block_delta' &&\r\n                  parsed.delta?.type === 'input_json_delta' &&\r\n                  parsed.delta?.partial_json !== undefined) {\r\n                const index = parsed.index;\r\n                toolInputBuffers[index] += parsed.delta.partial_json;\r\n                console.log(`🔧 Anthropic streaming tool input:`, { index, partial: parsed.delta.partial_json });\r\n              }\r\n\r\n              // Handle content_block_stop for tool_use\r\n              if (parsed.type === 'content_block_stop' && currentToolBlocks[parsed.index]?.type === 'tool_use') {\r\n                const index = parsed.index;\r\n                const toolBlock = currentToolBlocks[index];\r\n                const inputJson = toolInputBuffers[index];\r\n\r\n                console.log(`🔧 Anthropic streaming tool use completed:`, { toolBlock, inputJson });\r\n\r\n                try {\r\n                  const toolInput = JSON.parse(inputJson);\r\n                  console.log(`🔧 Collected streaming tool for parallel execution:`, toolBlock.name, toolInput);\r\n\r\n                  // Update assistant content with final input\r\n                  if (assistantContent[index] && assistantContent[index].type === 'tool_use') {\r\n                    assistantContent[index].input = toolInput;\r\n                  }\r\n\r\n                  // Collect tool for parallel execution (don't execute yet)\r\n                  toolCalls.push({\r\n                    id: toolBlock.id as string,\r\n                    name: toolBlock.name as string,\r\n                    arguments: toolInput\r\n                  });\r\n\r\n                  // Show that we're preparing the tool (don't execute yet)\r\n                  const preparingMessage = `⚙️ Preparing ${toolBlock.name}...\\n`;\r\n                  fullContent += preparingMessage;\r\n                  onStream(preparingMessage);\r\n\r\n                } catch (error) {\r\n                  console.error(`❌ Anthropic streaming tool input parsing failed:`, error);\r\n\r\n                  // Show parsing error in chat\r\n                  const errorMessage = `❌ Tool ${toolBlock.name} input parsing failed: ${error instanceof Error ? error.message : String(error)}\\n`;\r\n                  fullContent += errorMessage;\r\n                  onStream(errorMessage);\r\n\r\n                  // Still collect the tool call for potential execution\r\n                  toolCalls.push({\r\n                    id: toolBlock.id as string,\r\n                    name: toolBlock.name as string,\r\n                    arguments: {},\r\n                    parseError: error instanceof Error ? error.message : String(error)\r\n                  });\r\n                }\r\n\r\n                // Clean up\r\n                delete currentToolBlocks[index];\r\n                delete toolInputBuffers[index];\r\n              }\r\n\r\n              // Handle message_delta events with usage data\r\n              if (parsed.type === 'message_delta' && parsed.usage) {\r\n                usage = {\r\n                  prompt_tokens: parsed.usage.input_tokens,\r\n                  completion_tokens: parsed.usage.output_tokens,\r\n                  total_tokens: parsed.usage.input_tokens + parsed.usage.output_tokens\r\n                };\r\n              }\r\n            } catch (e) {\r\n              // Skip invalid JSON\r\n              console.warn('Failed to parse streaming event:', e);\r\n\r\n              // Prevent infinite loops from debug logger errors\r\n              if (e instanceof Error && e.message.includes('debugLogger') && e.message.includes('is not a function')) {\r\n                console.error('❌ Critical: Debug logger method missing - breaking streaming loop to prevent infinite recursion');\r\n                break; // Exit the streaming loop\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n      // Reset counter when streaming completes normally\r\n      AnthropicProvider.streamingCallCount = Math.max(0, AnthropicProvider.streamingCallCount - 1);\r\n    }\r\n\r\n    // If we have tool calls, execute them in parallel and make a follow-up streaming call\r\n    console.log(`🔍 Anthropic tool execution check:`, {\r\n      toolCallsCount: toolCalls.length,\r\n      hasExecuteMultipleToolsParallel: !!this._executeMultipleToolsParallel,\r\n      hasSummarizeToolResultsForModel: !!this._summarizeToolResultsForModel,\r\n      hasAggregateToolResults: !!this._aggregateToolResults,\r\n      hasFormatToolResult: !!this._formatToolResult\r\n    });\r\n\r\n    if (toolCalls.length > 0 && this._executeMultipleToolsParallel && this._summarizeToolResultsForModel && this._aggregateToolResults && this._formatToolResult) {\r\n      console.log(`🚀 Executing ${toolCalls.length} Anthropic tools in parallel before follow-up`);\r\n\r\n      // Show parallel execution message\r\n      const parallelMessage = `\\n🚀 Executing ${toolCalls.length} tools in parallel...\\n`;\r\n      fullContent += parallelMessage;\r\n      onStream(parallelMessage);\r\n\r\n      // Filter and prepare tool calls for parallel execution\r\n      const validToolCalls = toolCalls\r\n        .filter(tc => tc.id && tc.name && tc.arguments !== undefined)\r\n        .map(tc => ({\r\n          id: tc.id!,\r\n          name: tc.name!,\r\n          arguments: tc.arguments as Record<string, unknown>\r\n        }));\r\n\r\n      // Execute all tools in parallel\r\n      const parallelResults = await this._executeMultipleToolsParallel(validToolCalls, 'anthropic');\r\n\r\n      // Show completion message\r\n      const successCount = parallelResults.filter(r => r.success).length;\r\n      const completionMessage = `✅ Parallel execution completed: ${successCount}/${parallelResults.length} successful\\n\\n`;\r\n      fullContent += completionMessage;\r\n      onStream(completionMessage);\r\n\r\n      // Add user-friendly summary for the model to work with (not the detailed debug output)\r\n      const toolSummary = this._summarizeToolResultsForModel(parallelResults);\r\n\r\n      // Log detailed results for debugging (not shown to user)\r\n      console.log('🔧 Detailed tool execution results:', this._aggregateToolResults(parallelResults));\r\n\r\n      // Only add the clean summary to the content stream\r\n      fullContent += toolSummary;\r\n      onStream(toolSummary);\r\n\r\n      // Log tool execution for debugging\r\n      console.log(`🔍 Executed tools:`, parallelResults.map(r => r.name));\r\n      console.log(`🔍 Tool execution completed, proceeding with follow-up call`);\r\n\r\n      console.log(`🔄 Making follow-up Anthropic streaming call with ${parallelResults.length} tool results`);\r\n\r\n      // Reconstruct the conversation with tool results\r\n      const messages = conversationHistory ? [...conversationHistory] : [];\r\n\r\n      // Add the assistant's message with tool calls (proper Anthropic format)\r\n      messages.push({\r\n        role: 'assistant',\r\n        content: assistantContent as unknown as Array<ContentItem>\r\n      });\r\n\r\n      // Add tool results as user message using parallel execution results (proper Anthropic format)\r\n      const toolResults = parallelResults.map(result => {\r\n        let content = result.result;\r\n\r\n        // Parse JSON results and format them properly for Claude\r\n        try {\r\n          const parsedResult = JSON.parse(result.result);\r\n          content = this._formatToolResult!(result.name, parsedResult);\r\n        } catch {\r\n          // If not JSON, use as-is but clean up quotes\r\n          content = result.result.replace(/^\"|\"$/g, '');\r\n        }\r\n\r\n        return {\r\n          type: 'tool_result',\r\n          tool_use_id: result.id || '',\r\n          content: content,\r\n          is_error: !result.success\r\n        };\r\n      });\r\n\r\n      messages.push({\r\n        role: 'user',\r\n        content: toolResults as unknown as Array<ContentItem>\r\n      });\r\n\r\n      // Get tools for continued agentic behavior\r\n      const anthropicTools = await this.getAnthropicTools(settings);\r\n      console.log(`🔧 Anthropic follow-up call with ${anthropicTools.length} tools available for continued agentic behavior`);\r\n\r\n      // Use behavioral system prompt only for follow-up (no tool descriptions)\r\n      // Tools are sent separately in the tools parameter\r\n      const hasCustomSystemPromptFollowUp = settings.systemPrompt &&\r\n        settings.systemPrompt.trim() &&\r\n        settings.systemPrompt !== \"You are a helpful AI assistant. Please provide concise and helpful responses.\";\r\n\r\n      const baseSystemPrompt = hasCustomSystemPromptFollowUp ? settings.systemPrompt! : this.getSystemPrompt();\r\n      const followUpSystemPrompt = baseSystemPrompt +\r\n        `\\n\\n## Follow-up Context\\n\\nBased on the tool results provided above, analyze the information and provide a complete, helpful response to the user's original question. Use the tool results to give specific, detailed information. If you need additional tools to provide a better answer, use them, but always conclude with a final response to the user.`;\r\n\r\n      // Make follow-up streaming call with tools enabled for agentic behavior\r\n      const followUpRequestBody = {\r\n        model: settings.model,\r\n        max_tokens: settings.maxTokens,\r\n        temperature: settings.temperature,\r\n        system: followUpSystemPrompt,\r\n        messages: messages,\r\n        stream: true,\r\n        // Include tools to allow continued agentic behavior\r\n        ...(anthropicTools.length > 0 && {\r\n          tools: anthropicTools,\r\n          tool_choice: { type: \"auto\" }\r\n        })\r\n      };\r\n\r\n      const followUpResponse = await fetch(`${provider.baseUrl}/messages`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-api-key': settings.apiKey,\r\n          'anthropic-version': '2023-06-01'\r\n        },\r\n        body: JSON.stringify(followUpRequestBody),\r\n        signal\r\n      });\r\n\r\n      if (followUpResponse.ok) {\r\n        console.log(`✅ Starting follow-up streaming response`);\r\n\r\n        try {\r\n          // Stream the follow-up response with updated conversation history for agentic behavior\r\n          const followUpResult = await this.handleStreamResponse(\r\n            followUpResponse,\r\n            (chunk: string) => {\r\n              console.log(`🔄 Anthropic streaming follow-up chunk:`, chunk.substring(0, 50) + '...');\r\n              // DISABLED: debugLogger.logStreaming('Anthropic', chunk, true);\r\n              onStream(chunk);\r\n            },\r\n            settings,\r\n            provider,\r\n            messages, // Use updated messages that include tool results\r\n            signal\r\n          );\r\n\r\n          console.log(`✅ Follow-up streaming completed:`, {\r\n            contentLength: followUpResult.content?.length || 0,\r\n            hasUsage: !!followUpResult.usage,\r\n            hasToolCalls: !!followUpResult.toolCalls\r\n          });\r\n\r\n          // Combine tool calls from initial response AND follow-up response\r\n          const initialToolCalls = toolCalls\r\n            .filter(tc => tc.id && tc.name)\r\n            .map(tc => ({\r\n              id: tc.id!,\r\n              name: tc.name!,\r\n              arguments: tc.arguments as Record<string, unknown>\r\n            }));\r\n\r\n          const followUpToolCalls = followUpResult.toolCalls || [];\r\n          const allToolCalls = [...initialToolCalls, ...followUpToolCalls];\r\n\r\n          console.log(`🔧 Combined tool calls: ${initialToolCalls.length} initial + ${followUpToolCalls.length} follow-up = ${allToolCalls.length} total`);\r\n\r\n          return {\r\n            content: fullContent + followUpResult.content,\r\n            usage: followUpResult.usage ? {\r\n              promptTokens: (usage?.prompt_tokens || 0) + (followUpResult.usage?.promptTokens || 0),\r\n              completionTokens: (usage?.completion_tokens || 0) + (followUpResult.usage?.completionTokens || 0),\r\n              totalTokens: (usage?.total_tokens || 0) + (followUpResult.usage?.totalTokens || 0)\r\n            } : usage ? {\r\n              promptTokens: usage.prompt_tokens || 0,\r\n              completionTokens: usage.completion_tokens || 0,\r\n              totalTokens: usage.total_tokens || 0\r\n            } : undefined,\r\n            toolCalls: allToolCalls\r\n          };\r\n        } catch (error) {\r\n          console.error(`❌ Anthropic follow-up streaming failed:`, error);\r\n          console.error(`❌ Error details:`, {\r\n            errorType: typeof error,\r\n            errorMessage: error instanceof Error ? error.message : String(error),\r\n            errorStack: error instanceof Error ? error.stack : undefined\r\n          });\r\n\r\n          // Reset streaming counter on error to prevent permanent lockout\r\n          AnthropicProvider.streamingCallCount = 0;\r\n\r\n          // Prevent infinite loops by not retrying on specific errors\r\n          if (error instanceof Error && error.message.includes('debugLogger') && error.message.includes('is not a function')) {\r\n            console.error('❌ Critical: Debug logger method missing - this would cause infinite loops. Stopping retry attempts.');\r\n            // Don't retry, just provide fallback response\r\n          }\r\n\r\n          // Provide a fallback response with tool results\r\n          const fallbackMessage = `\\n\\n**Tool execution completed successfully, but follow-up response failed. Here are the tool results:**\\n\\n`;\r\n          onStream(fallbackMessage);\r\n\r\n          // Stream the tool summary as fallback\r\n          const toolSummary = this._summarizeToolResultsForModel!(parallelResults);\r\n          onStream(toolSummary);\r\n\r\n          // Check if it's a rate limit error and try local execution\r\n          if (error && typeof error === 'object' && 'error' in error) {\r\n            const apiError = error as { error?: { type?: string } };\r\n            if (apiError.error?.type === 'rate_limit_error') {\r\n              console.warn('⚠️ Anthropic: Rate limit exceeded, attempting local tool execution');\r\n\r\n              // Try to execute tools locally if methods are available\r\n              if (this.executeMCPTool && toolCalls.length > 0) {\r\n                try {\r\n                  const localResults = await this.executeToolsLocally(toolCalls, fullContent, usage);\r\n                  return localResults as unknown as LLMResponse;\r\n                } catch (localError) {\r\n                  console.error('❌ Local tool execution also failed:', localError);\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // Fall through to return original response\r\n        }\r\n      } else {\r\n        const errorText = await followUpResponse.text();\r\n        console.error(`❌ Anthropic follow-up streaming call failed:`, followUpResponse.status, followUpResponse.statusText);\r\n        console.error(`❌ Follow-up error details:`, errorText);\r\n\r\n        // Provide a fallback response with tool results\r\n        const fallbackMessage = `\\n\\n**Tool execution completed successfully, but follow-up request failed (${followUpResponse.status}). Here are the tool results:**\\n\\n`;\r\n        onStream(fallbackMessage);\r\n\r\n        // Stream the tool summary as fallback\r\n        const toolSummary = this._summarizeToolResultsForModel!(parallelResults);\r\n        onStream(toolSummary);\r\n      }\r\n    }\r\n\r\n    // If we reach here, either no tool calls or tool execution methods not available\r\n    if (toolCalls.length > 0) {\r\n      console.warn(`⚠️ Anthropic: Tool calls detected but execution methods not available. Tool calls will not be executed.`);\r\n      console.warn(`⚠️ Anthropic: Returning tool calls for external handling.`);\r\n    }\r\n\r\n    return {\r\n      content: fullContent,\r\n      usage: usage ? {\r\n        promptTokens: usage.prompt_tokens || 0,\r\n        completionTokens: usage.completion_tokens || 0,\r\n        totalTokens: usage.total_tokens || 0\r\n      } : undefined,\r\n      toolCalls: toolCalls.length > 0 ? toolCalls\r\n        .filter(tc => tc.id && tc.name)\r\n        .map(tc => ({\r\n          id: tc.id!,\r\n          name: tc.name!,\r\n          arguments: tc.arguments as Record<string, unknown>\r\n        })) : undefined\r\n    };\r\n    } catch (error) {\r\n      // Reset streaming counter on error to prevent permanent lockout\r\n      AnthropicProvider.streamingCallCount = 0;\r\n      console.error('❌ Anthropic streaming error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute tools locally when API calls fail (e.g., rate limits)\r\n   */\r\n  private async executeToolsLocally(\r\n    toolCalls: Array<Record<string, unknown>>,\r\n    content: string,\r\n    usage: Record<string, unknown> | undefined\r\n  ): Promise<Record<string, unknown>> {\r\n    console.log(`🔧 Executing ${toolCalls.length} tools locally due to API limitations`);\r\n\r\n    const toolResults = [];\r\n    for (const toolCall of toolCalls) {\r\n      try {\r\n        console.log(`🔧 Executing local tool: ${toolCall.name} with args:`, toolCall.arguments);\r\n        const result = await this.executeMCPTool!(String(toolCall.name), toolCall.arguments as Record<string, unknown>);\r\n        toolResults.push({\r\n          toolCallId: toolCall.id,\r\n          toolName: toolCall.name,\r\n          result: result\r\n        });\r\n        console.log(`✅ Local tool execution successful for ${toolCall.name}`);\r\n      } catch (error) {\r\n        console.error(`❌ Local tool execution failed for ${toolCall.name}:`, error);\r\n        toolResults.push({\r\n          toolCallId: toolCall.id,\r\n          toolName: toolCall.name,\r\n          result: `Error: ${error instanceof Error ? error.message : String(error)}`\r\n        });\r\n      }\r\n    }\r\n\r\n    // Format results for display\r\n    const resultsText = toolResults.map(tr =>\r\n      `**${tr.toolName}**: ${tr.result.substring(0, 500)}${tr.result.length > 500 ? '...' : ''}`\r\n    ).join('\\n\\n');\r\n\r\n    return {\r\n      content: `${content}\\n\\n**Tool Execution Results:**\\n\\n${resultsText}`,\r\n      usage: usage ? {\r\n        promptTokens: usage.prompt_tokens || 0,\r\n        completionTokens: usage.completion_tokens || 0,\r\n        totalTokens: usage.total_tokens || 0\r\n      } : undefined,\r\n      toolCalls: undefined // Clear tool calls since they've been executed\r\n    };\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNonStreamResponse(\r\n    response: Response,\r\n    _settings: LLMSettings,\r\n    _conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    _conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    const data = await response.json();\r\n    console.log('🔍 Anthropic raw response:', JSON.stringify(data, null, 2));\r\n\r\n    // Handle tool calls in Anthropic format\r\n    let content = '';\r\n    const toolUseBlocks = [];\r\n\r\n    // First pass: collect text content and tool use blocks\r\n    for (const contentBlock of data.content) {\r\n      if (contentBlock.type === 'text') {\r\n        content += contentBlock.text;\r\n      } else if (contentBlock.type === 'tool_use') {\r\n        toolUseBlocks.push(contentBlock);\r\n      }\r\n    }\r\n\r\n    // Create toolCalls array for compatibility\r\n    const toolCalls = toolUseBlocks.map(block => ({\r\n      id: block.id,\r\n      name: block.name,\r\n      arguments: block.input || {}\r\n    }));\r\n\r\n    const { usage, cost } = this.createUsageAndCost(settings.model, data.usage);\r\n    return {\r\n      content,\r\n      usage,\r\n      cost,\r\n      toolCalls: toolCalls.length > 0 ? toolCalls : undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create usage and cost information from Anthropic API response\r\n   */\r\n  private createUsageAndCost(model: string, usage?: { input_tokens?: number; output_tokens?: number }) {\r\n    if (!usage) return { usage: undefined, cost: undefined };\r\n\r\n    const usageInfo = {\r\n      promptTokens: usage.input_tokens || 0,\r\n      completionTokens: usage.output_tokens || 0,\r\n      totalTokens: (usage.input_tokens || 0) + (usage.output_tokens || 0)\r\n    };\r\n\r\n    const costInfo = PricingService.calculateCost('anthropic', model, usageInfo.promptTokens, usageInfo.completionTokens);\r\n\r\n    return { usage: usageInfo, cost: costInfo };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\BaseProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\DeepSeekProvider.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2840,3013],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3035,3110],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3892,3962],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":134,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4458,4527],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4996,5055],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6073,6155],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'signal' is defined but never used. Allowed unused args must match /^_/u.","line":238,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":238,"endColumn":11},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.","line":284,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":284,"endColumn":40},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'settings' is defined but never used. Allowed unused args must match /^_/u.","line":286,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":286,"endColumn":13},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used. Allowed unused args must match /^_/u.","line":287,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":287,"endColumn":24},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used. Allowed unused args must match /^_/u.","line":288,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":288,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":292,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":292,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10123,10280],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":303,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":303,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10517,10623],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":307,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":307,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10980,11064],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":322,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":322,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11946,12084],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":337,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":337,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12697,12755],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":350,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":350,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[13220,13324],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'signal' is defined but never used.","line":238,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":238,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_toolName' is defined but never used.","line":253,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":253,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_args' is defined but never used.","line":253,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":253,"endColumn":56,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'settings' is defined but never used.","line":286,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":286,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used.","line":287,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":287,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used.","line":288,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":288,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":5,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// DeepSeek provider implementation\r\n\r\nimport { BaseProvider } from './BaseProvider';\r\nimport {\r\n  LLMSettings,\r\n  LLMResponse,\r\n  MessageContent,\r\n  ContentItem,\r\n  LLMProvider,\r\n  ToolObject,\r\n  ProviderCapabilities,\r\n  APIResponseData\r\n} from './types';\r\n\r\nimport { DEEPSEEK_SYSTEM_PROMPT } from './prompts/deepseek';\r\nimport { OpenAICompatibleStreaming } from './shared/OpenAICompatibleStreaming';\r\n\r\nexport class DeepSeekProvider extends BaseProvider {\r\n  readonly id = 'deepseek';\r\n  readonly name = 'DeepSeek';\r\n  readonly capabilities: ProviderCapabilities = {\r\n    supportsVision: false,\r\n    supportsTools: false, // DeepSeek has limited tool support\r\n    supportsStreaming: true,\r\n    supportsSystemMessages: true,\r\n    maxToolNameLength: undefined,\r\n    toolFormat: 'openai'\r\n  };\r\n\r\n  async sendMessage(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    // DeepSeek uses OpenAI-compatible API\r\n    const messages = [];\r\n\r\n    const systemPrompt = settings.systemPrompt || this.getSystemPrompt();\r\n    if (systemPrompt) {\r\n      messages.push({ role: 'system', content: systemPrompt });\r\n    }\r\n\r\n    // Add conversation history\r\n    messages.push(...conversationHistory);\r\n\r\n    // Add current message\r\n    if (typeof message === 'string') {\r\n      messages.push({ role: 'user', content: message });\r\n    } else if (Array.isArray(message)) {\r\n      // Handle ContentItem array format (from chatService.ts)\r\n      // DeepSeek uses OpenAI-compatible format, so we can pass through as-is\r\n      messages.push({ role: 'user', content: message });\r\n    } else {\r\n      // Handle legacy vision format (convert to OpenAI format)\r\n      const messageWithImages = message as { text: string; images: string[] };\r\n      const content: ContentItem[] = [{ type: 'text', text: messageWithImages.text }];\r\n\r\n      for (const imageUrl of messageWithImages.images) {\r\n        content.push({\r\n          type: 'image_url',\r\n          image_url: { url: imageUrl }\r\n        });\r\n      }\r\n      messages.push({ role: 'user', content });\r\n    }\r\n\r\n    // Get MCP tools for DeepSeek (limited support)\r\n    const mcpTools = await this.getMCPToolsForProvider('deepseek', settings);\r\n\r\n    const requestBody: Record<string, unknown> = {\r\n      model: settings.model,\r\n      messages: messages,\r\n      temperature: settings.temperature,\r\n      max_tokens: settings.maxTokens,\r\n      stream: !!onStream\r\n    };\r\n\r\n    // Add tools if available (DeepSeek has limited tool support)\r\n    if (mcpTools.length > 0) {\r\n      requestBody.tools = mcpTools;\r\n      requestBody.tool_choice = 'auto';\r\n      console.log(`🚀 DeepSeek API call with ${mcpTools.length} tools:`, {\r\n        model: settings.model,\r\n        toolCount: mcpTools.length,\r\n        tools: mcpTools\r\n      });\r\n    } else {\r\n      console.log(`🚀 DeepSeek API call without tools (no MCP tools available)`);\r\n    }\r\n\r\n    const response = await fetch(`${provider.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n      signal\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      throw new Error(`DeepSeek API error: ${error}`);\r\n    }\r\n\r\n    if (onStream) {\r\n      return this.handleStreamResponse(response, onStream, settings, provider, conversationHistory, signal);\r\n    } else {\r\n      return this.handleNonStreamResponse(response, settings, conversationHistory, conversationId);\r\n    }\r\n  }\r\n\r\n  async fetchModels(apiKey: string): Promise<string[]> {\r\n    if (!apiKey) {\r\n      console.error('❌ No DeepSeek API key provided - cannot fetch models');\r\n      throw new Error('DeepSeek API key is required to fetch available models. Please add your API key in settings.');\r\n    }\r\n\r\n    try {\r\n      // DeepSeek models endpoint (OpenAI-compatible)\r\n      const response = await fetch('https://api.deepseek.com/v1/models', {\r\n        headers: {\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`❌ DeepSeek API error: ${response.status}`, errorText);\r\n        throw new Error(`Failed to fetch DeepSeek models: ${response.status} - ${errorText}`);\r\n      }\r\n\r\n      const data = await response.json() as APIResponseData;\r\n      const models = data.data?.map((model) => model.id)?.sort() || [];\r\n\r\n      if (models.length === 0) {\r\n        throw new Error('No DeepSeek models returned from API. This may indicate an API issue or insufficient permissions.');\r\n      }\r\n\r\n      return models;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch DeepSeek models:', error);\r\n      throw error instanceof Error ? error : new Error(`Failed to fetch DeepSeek models: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  formatTools(tools: ToolObject[]): unknown[] {\r\n    // DeepSeek uses OpenAI-compatible format (limited support)\r\n    return tools.map(tool => ({\r\n      type: 'function',\r\n      function: {\r\n        name: tool.name || tool.function?.name,\r\n        description: tool.description || tool.function?.description,\r\n        parameters: tool.parameters || tool.function?.parameters || {\r\n          type: 'object',\r\n          properties: {},\r\n          required: []\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  getSystemPrompt(): string {\r\n    return DEEPSEEK_SYSTEM_PROMPT;\r\n  }\r\n\r\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\r\n    if (tools.length === 0) {\r\n      return basePrompt;\r\n    }\r\n\r\n    // DeepSeek uses structured tool calling with tools parameter and tool_choice\r\n    // Don't add XML tool instructions as they conflict with native function calling\r\n    console.log(`🔧 DeepSeek using structured tools, skipping XML tool instructions`);\r\n    return basePrompt;\r\n  }\r\n\r\n  validateToolCall(toolCall: { id?: string; name: string; arguments: Record<string, unknown> }): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!toolCall.id) {\r\n      errors.push(`DeepSeek tool call missing required id: ${toolCall.name}`);\r\n    }\r\n\r\n    if (!toolCall.name || typeof toolCall.name !== 'string') {\r\n      errors.push('Tool call must have a valid name');\r\n    }\r\n\r\n    if (!toolCall.arguments || typeof toolCall.arguments !== 'object') {\r\n      errors.push('Tool call must have valid arguments object');\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  validateTool(tool: unknown): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!tool || typeof tool !== 'object') {\r\n      errors.push('Tool must be an object');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const toolObj = tool as Record<string, unknown>;\r\n\r\n    if (!toolObj.type || toolObj.type !== 'function') {\r\n      errors.push('DeepSeek tools must have type: \"function\"');\r\n    }\r\n\r\n    if (!toolObj.function || typeof toolObj.function !== 'object') {\r\n      errors.push('DeepSeek tools must have function object');\r\n    } else {\r\n      const func = toolObj.function as Record<string, unknown>;\r\n      if (!func.name) {\r\n        errors.push('DeepSeek tools must have function.name');\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Private helper methods\r\n  // This method is injected by the ProviderAdapter from the LLMService\r\n  private getMCPToolsForProvider!: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleStreamResponse(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    signal?: AbortSignal\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    return OpenAICompatibleStreaming.handleStreamResponse(\r\n      response,\r\n      onStream,\r\n      settings,\r\n      provider,\r\n      conversationHistory,\r\n      'DeepSeek',\r\n      this.executeToolsAndFollowUp.bind(this)\r\n    );\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private async executeMCPTool(_toolName: string, _args: Record<string, unknown>): Promise<string> {\r\n    // This will be injected by the main service\r\n    return JSON.stringify({ error: 'Tool execution not available' });\r\n  }\r\n\r\n  private async executeToolsAndFollowUp(\r\n    toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }>,\r\n    initialContent: string,\r\n    initialUsage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    return OpenAICompatibleStreaming.executeToolsAndFollowUp(\r\n      toolCalls,\r\n      initialContent,\r\n      initialUsage,\r\n      settings,\r\n      provider,\r\n      conversationHistory,\r\n      onStream,\r\n      'DeepSeek',\r\n      this.executeMCPTool.bind(this),\r\n      {},\r\n      () => this.getMCPToolsForProvider(provider.id, settings)\r\n      // No enhanced system prompt function - tools sent separately in tools parameter\r\n    );\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNonStreamResponse(\r\n    response: Response,\r\n    settings: LLMSettings,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    const data = await response.json();\r\n    console.log('🔍 DeepSeek non-streaming response:', {\r\n      hasUsage: !!data.usage,\r\n      usage: data.usage,\r\n      responseKeys: Object.keys(data)\r\n    });\r\n\r\n    const choice = data.choices[0];\r\n    const message = choice.message;\r\n\r\n    // Handle tool calls (same as OpenAI format) - execute immediately like Anthropic\r\n    if (message.tool_calls && message.tool_calls.length > 0) {\r\n      console.log(`🔧 DeepSeek response contains ${message.tool_calls.length} tool calls:`, message.tool_calls);\r\n\r\n      // Check if we have the parallel execution method injected\r\n      if ((this as unknown as {executeMultipleToolsParallel?: unknown, summarizeToolResultsForModel?: unknown}).executeMultipleToolsParallel && (this as unknown as {executeMultipleToolsParallel?: unknown, summarizeToolResultsForModel?: unknown}).summarizeToolResultsForModel) {\r\n        console.log(`🚀 Executing ${message.tool_calls.length} DeepSeek tools immediately`);\r\n\r\n        // Format tool calls for execution\r\n        const toolCallsForExecution = message.tool_calls.map((toolCall: { id: string; function: { name: string; arguments: string } }) => ({\r\n          id: toolCall.id,\r\n          name: toolCall.function.name,\r\n          arguments: JSON.parse(toolCall.function.arguments)\r\n        }));\r\n\r\n        // Execute tools in parallel immediately\r\n        const executeMultipleToolsParallel = (this as unknown as {executeMultipleToolsParallel: unknown}).executeMultipleToolsParallel;\r\n        const summarizeToolResultsForModel = (this as unknown as {summarizeToolResultsForModel: unknown}).summarizeToolResultsForModel;\r\n        \r\n        try {\r\n          const parallelResults = await (executeMultipleToolsParallel as (calls: unknown[], provider: string) => Promise<Array<{success: boolean}>>)(toolCallsForExecution, 'deepseek');\r\n          console.log(`✅ DeepSeek tool execution completed: ${parallelResults.filter(r => r.success).length}/${parallelResults.length} successful`);\r\n\r\n          // Get tool results summary for the model\r\n          const toolSummary = (summarizeToolResultsForModel as (results: unknown[]) => string)(parallelResults);\r\n          \r\n          // Return response with tool results included\r\n          return {\r\n            content: (message.content || '') + '\\n\\n' + toolSummary,\r\n            usage: data.usage ? {\r\n              promptTokens: data.usage.prompt_tokens,\r\n              completionTokens: data.usage.completion_tokens,\r\n              totalTokens: data.usage.total_tokens\r\n            } : undefined\r\n          };\r\n        } catch (error) {\r\n          console.error(`❌ DeepSeek tool execution failed:`, error);\r\n          // Fall back to returning tool calls for external handling\r\n          return {\r\n            content: message.content || '',\r\n            usage: data.usage ? {\r\n              promptTokens: data.usage.prompt_tokens,\r\n              completionTokens: data.usage.completion_tokens,\r\n              totalTokens: data.usage.total_tokens\r\n            } : undefined,\r\n            toolCalls: toolCallsForExecution\r\n          };\r\n        }\r\n      } else {\r\n        console.warn(`⚠️ DeepSeek provider missing tool execution methods - falling back to external handling`);\r\n        // Fall back to external handling if methods not injected\r\n        return {\r\n          content: message.content || '',\r\n          usage: data.usage ? {\r\n            promptTokens: data.usage.prompt_tokens,\r\n            completionTokens: data.usage.completion_tokens,\r\n            totalTokens: data.usage.total_tokens\r\n          } : undefined,\r\n          toolCalls: message.tool_calls.map((tc: { id: string; function: { name: string; arguments: string } }) => ({\r\n            id: tc.id,\r\n            name: tc.function.name,\r\n            arguments: JSON.parse(tc.function.arguments)\r\n          }))\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      content: message.content,\r\n      usage: data.usage ? {\r\n        promptTokens: data.usage.prompt_tokens,\r\n        completionTokens: data.usage.completion_tokens,\r\n        totalTokens: data.usage.total_tokens\r\n      } : undefined\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\DeepinfraProvider.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1775,2022],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3329,3524],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3544,3595],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3607,3687],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3976,4059],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4134,4190],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5038,5118],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5447,5524],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":189,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":189,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6142,6211],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":202,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":202,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6553,6623],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":213,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":213,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7035,7118],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7168,7228],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_toolName' is defined but never used.","line":267,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":267,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_args' is defined but never used.","line":267,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":267,"endColumn":56,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Deepinfra provider implementation\n// Uses OpenAI-compatible API at https://api.deepinfra.com/v1/openai\n\nimport { BaseProvider } from './BaseProvider';\nimport {\n  LLMSettings,\n  LLMResponse,\n  MessageContent,\n  ContentItem,\n  LLMProvider,\n  ToolObject,\n  ProviderCapabilities\n} from './types';\n// No fallback models - providers now properly throw errors instead of masking failures\nimport { DEEPINFRA_SYSTEM_PROMPT } from './prompts/deepinfra';\nimport { OpenAICompatibleStreaming } from './shared/OpenAICompatibleStreaming';\n\nexport class DeepinfraProvider extends BaseProvider {\n  readonly id = 'deepinfra';\n  readonly name = 'Deepinfra';\n  readonly capabilities: ProviderCapabilities = {\n    supportsVision: true, // Many models support multimodal\n    supportsTools: true, // Function calling supported for Llama, Mixtral, Mistral models\n    supportsStreaming: true,\n    supportsSystemMessages: true,\n    maxToolNameLength: 64,\n    toolFormat: 'openai'\n  };\n\n  async sendMessage(\n    message: MessageContent,\n    settings: LLMSettings,\n    provider: LLMProvider,\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\n    onStream?: (chunk: string) => void,\n    signal?: AbortSignal,\n    conversationId?: string\n  ): Promise<LLMResponse> {\n    const messages = [];\n\n    // Get MCP tools for this provider\n    const mcpTools = await this.getMCPToolsForProvider('deepinfra', settings);\n\n    // Use behavioral system prompt\n    const hasCustomSystemPrompt = settings.systemPrompt &&\n      settings.systemPrompt.trim() &&\n      settings.systemPrompt !== \"You are a helpful AI assistant. Please provide concise and helpful responses.\";\n\n    const systemPrompt = hasCustomSystemPrompt ? settings.systemPrompt! : this.getSystemPrompt();\n\n    console.log(`🔍 Deepinfra system prompt source:`, {\n      hasCustom: hasCustomSystemPrompt,\n      usingCustom: hasCustomSystemPrompt,\n      promptLength: systemPrompt?.length || 0,\n      promptStart: systemPrompt?.substring(0, 100) + '...'\n    });\n\n    if (systemPrompt) {\n      messages.push({ role: 'system', content: systemPrompt });\n    }\n\n    // Add conversation history\n    messages.push(...conversationHistory);\n\n    // Add current message (handle both string and array formats)\n    if (typeof message === 'string') {\n      messages.push({ role: 'user', content: message });\n    } else if (Array.isArray(message)) {\n      // Handle ContentItem array format (images, text)\n      messages.push({ role: 'user', content: message });\n    } else {\n      // Handle legacy vision format (convert to OpenAI format)\n      const messageWithImages = message as { text: string; images: string[] };\n      const content: ContentItem[] = [{ type: 'text', text: messageWithImages.text }];\n\n      for (const imageUrl of messageWithImages.images) {\n        content.push({\n          type: 'image_url',\n          image_url: { url: imageUrl }\n        });\n      }\n      messages.push({ role: 'user', content });\n    }\n\n    const requestBody: Record<string, unknown> = {\n      model: settings.model,\n      messages,\n      temperature: settings.temperature,\n      max_tokens: settings.maxTokens,\n      stream: !!onStream\n    };\n\n    // Add tools if available\n    if (mcpTools.length > 0) {\n      requestBody.tools = mcpTools;\n      requestBody.tool_choice = 'auto';\n      console.log(`🚀 Deepinfra API call with ${mcpTools.length} tools:`, {\n        model: settings.model,\n        toolCount: mcpTools.length,\n        conversationId: conversationId || 'none'\n      });\n    } else {\n      console.log(`🚀 Deepinfra API call without tools`);\n    }\n\n    console.log('🔍 Deepinfra request body:', JSON.stringify(requestBody, null, 2));\n\n    const response = await fetch(`${provider.baseUrl}/chat/completions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${settings.apiKey}`\n      },\n      body: JSON.stringify(requestBody),\n      signal\n    });\n\n    console.log('🔍 Deepinfra response status:', response.status, response.statusText);\n\n    if (!response.ok) {\n      const error = await response.text();\n      console.error('❌ Deepinfra API error response:', error);\n\n      if (response.status === 401) {\n        throw new Error(`Deepinfra API authentication failed. Please check your API key in Settings. Error: ${error}`);\n      }\n\n      throw new Error(`Deepinfra API error: ${error}`);\n    }\n\n    if (onStream) {\n      return OpenAICompatibleStreaming.handleStreamResponse(\n        response,\n        onStream,\n        settings,\n        provider,\n        conversationHistory,\n        'Deepinfra',\n        this.executeToolsAndFollowUp.bind(this)\n      );\n    } else {\n      return this.handleNonStreamResponse(response, settings, conversationHistory);\n    }\n  }\n\n  private async handleNonStreamResponse(\n    response: Response,\n    settings: LLMSettings,\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>\n  ): Promise<LLMResponse> {\n    const data = await response.json();\n    console.log('🔍 Deepinfra non-stream response:', JSON.stringify(data, null, 2));\n\n    const choice = data.choices?.[0];\n    if (!choice) {\n      throw new Error('No choices in Deepinfra response');\n    }\n\n    const message = choice.message;\n    const content = message?.content || '';\n    const toolCalls = message?.tool_calls || [];\n\n    // Handle tool calls if present\n    if (toolCalls.length > 0) {\n      console.log(`🔧 Deepinfra response contains ${toolCalls.length} tool calls`);\n      return this.executeToolsAndFollowUp(\n        toolCalls,\n        content,\n        data.usage,\n        settings,\n        { baseUrl: 'https://api.deepinfra.com/v1/openai' } as LLMProvider,\n        conversationHistory,\n        () => {} // No-op function for non-streaming tool execution\n      );\n    }\n\n    return {\n      content,\n      usage: {\n        promptTokens: data.usage?.prompt_tokens || 0,\n        completionTokens: data.usage?.completion_tokens || 0,\n        totalTokens: data.usage?.total_tokens || 0\n      }\n    };\n  }\n\n  async fetchModels(apiKey: string): Promise<string[]> {\n    if (!apiKey) {\n      console.log('❌ No Deepinfra API key provided - cannot fetch models');\n      throw new Error('Deepinfra API key is required to fetch models');\n    }\n\n    try {\n      const response = await fetch('https://api.deepinfra.com/v1/openai/models', {\n        headers: {\n          'Authorization': `Bearer ${apiKey}`\n        }\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`❌ Deepinfra API error: ${response.status}`, errorText);\n        throw new Error(`Failed to fetch Deepinfra models: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      const models = data.data?.map((model: { id: string }) => model.id)?.sort() || [];\n\n      if (models.length === 0) {\n        throw new Error('No Deepinfra models returned from API. This may indicate an API issue or insufficient permissions.');\n      }\n\n      console.log(`✅ Fetched ${models.length} Deepinfra models (sorted alphabetically)`);\n      return models;\n    } catch (error) {\n      console.error('❌ Failed to fetch Deepinfra models:', error);\n      throw error instanceof Error ? error : new Error(`Failed to fetch Deepinfra models: ${String(error)}`);\n    }\n  }\n\n  formatTools(tools: ToolObject[]): unknown[] {\n    // OpenAI format - array of tool objects with type: 'function'\n    return tools.map(tool => ({\n      type: 'function',\n      function: {\n        name: tool.name || tool.function?.name,\n        description: tool.description || tool.function?.description,\n        parameters: tool.parameters || tool.function?.parameters || {\n          type: 'object',\n          properties: {},\n          required: []\n        }\n      }\n    }));\n  }\n\n  getSystemPrompt(): string {\n    return DEEPINFRA_SYSTEM_PROMPT;\n  }\n\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\n    if (tools.length === 0) {\n      return basePrompt;\n    }\n\n    const toolDescriptions = tools.map(tool => {\n      const name = tool.name || tool.function?.name || 'unknown';\n      const description = tool.description || tool.function?.description || 'No description';\n      return `- ${name}: ${description}`;\n    }).join('\\n');\n\n    return `${basePrompt}\n\n## Available Tools\n\nYou have access to the following tools:\n${toolDescriptions}\n\nUse these tools when they can help provide better, more accurate, or more current information to answer the user's questions.`;\n  }\n\n  // Private helper methods\n  // These methods are injected by the ProviderAdapter from the LLMService\n  private getMCPToolsForProvider!: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private async executeMCPTool(_toolName: string, _args: Record<string, unknown>): Promise<string> {\n    // This will be injected by the main service\n    return JSON.stringify({ error: 'Tool execution not available' });\n  }\n\n  private async executeToolsAndFollowUp(\n    toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }>,\n    initialContent: string,\n    initialUsage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined,\n    settings: LLMSettings,\n    provider: LLMProvider,\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\n    onStream: (chunk: string) => void\n  ): Promise<LLMResponse> {\n    return OpenAICompatibleStreaming.executeToolsAndFollowUp(\n      toolCalls,\n      initialContent,\n      initialUsage,\n      settings,\n      provider,\n      conversationHistory,\n      onStream,\n      'Deepinfra',\n      this.executeMCPTool.bind(this),\n      {}, // No additional headers needed\n      () => this.getMCPToolsForProvider('deepinfra', settings),\n      (tools: unknown[]) => this.enhanceSystemPromptWithTools(this.getSystemPrompt(), tools as ToolObject[])\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\GeminiProvider.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 77 to the 15 allowed.","line":31,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":31,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1174,1227],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1851,2237],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2857,2966],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3733,3838],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3932,4049],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6132,6208],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6214,6337],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6425,6528],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":151,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":151,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6534,6765],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6599,6602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6599,6602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7753,7861],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8129,8249],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":199,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":199,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8427,8720],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":206,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":206,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8742,8815],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9029,9185],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9200,9277],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":237,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":237,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9613,9693],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":241,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":241,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9772,9825],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":254,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":254,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10234,10302],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10679,10746],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11443,11500],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11677,11976],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":308,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":308,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12983,13181],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":321,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":321,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13350,13433],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":349,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":349,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14173,14250],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":357,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":357,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[14408,14493],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":373,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":373,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14923,15003],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 58 to the 15 allowed.","line":414,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":414,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":423,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":423,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16981,17076],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":472,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":472,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18638,18701],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":500,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":500,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19714,19799],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":523,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":523,"endColumn":31,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[20778,20847],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":539,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":539,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21371,21454],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":552,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":552,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[21868,21957],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":565,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":565,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22613,22668],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":566,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":566,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22676,22905],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":614,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":614,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24499,24579],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":627,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":627,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24956,25116],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":655,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":655,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25937,25990],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 27 to the 15 allowed.","line":672,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":672,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":697,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":697,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27491,27572],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":726,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":726,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28878,28955],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 68 to the 15 allowed.","line":744,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":744,"endColumn":37},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'signal' is defined but never used. Allowed unused args must match /^_/u.","line":750,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":750,"endColumn":11},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":753,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":753,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29691,29753],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":780,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":780,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30766,30841],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":794,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":794,"endColumn":32,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31337,31406],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":827,"column":23,"nodeType":"MemberExpression","messageId":"unexpected","endLine":827,"endColumn":36,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[32774,32835],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":855,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":855,"endColumn":27,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[34027,34086],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used. Allowed unused args must match /^_/u.","line":888,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":888,"endColumn":24},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used. Allowed unused args must match /^_/u.","line":889,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":889,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":893,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":893,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35259,35311],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":895,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":895,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35362,35432],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":899,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":899,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[35564,35633],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":907,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":907,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35831,35898],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":912,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":912,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36063,36140],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":930,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":930,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[36664,36723],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_toolName' is defined but never used.","line":409,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":409,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_args' is defined but never used.","line":409,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":409,"endColumn":56,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":486,"column":18,"nodeType":"Literal","messageId":"unexpected","endLine":486,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'signal' is defined but never used.","line":750,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":750,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":766,"column":14,"nodeType":"Literal","messageId":"unexpected","endLine":766,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used.","line":888,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":888,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used.","line":889,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":889,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":7,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Google Gemini provider implementation\r\n\r\nimport { BaseProvider } from './BaseProvider';\r\nimport {\r\n  LLMSettings,\r\n  LLMResponse,\r\n  MessageContent,\r\n  ContentItem,\r\n  LLMProvider,\r\n  ToolObject,\r\n  ProviderCapabilities\r\n} from './types';\r\n\r\nimport { GEMINI_SYSTEM_PROMPT } from './prompts/gemini';\r\nimport { PricingService } from '../pricingService';\r\n\nexport class GeminiProvider extends BaseProvider {\r\n  readonly id = 'gemini';\r\n  readonly name = 'Google Gemini';\r\n  readonly capabilities: ProviderCapabilities = {\r\n    supportsVision: true,\r\n    supportsTools: true,\r\n    supportsStreaming: true,\r\n    supportsSystemMessages: true,\r\n    supportsPromptCaching: true,\r\n    promptCachingType: 'both', // Supports both implicit (automatic) and explicit (manual) caching\r\n    maxToolNameLength: undefined,\r\n    toolFormat: 'gemini'\r\n  };\r\n\r\n  async sendMessage(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    console.log('🧠 Gemini: Integrating memory context');\r\n\r\n    // Use behavioral system prompt only (no tool descriptions)\r\n    // System instruction will be set in request body, not as user/model messages\r\n    // Check for meaningful system prompt, not just empty string or generic default\r\n    const hasCustomSystemPrompt = settings.systemPrompt &&\r\n      settings.systemPrompt.trim() &&\r\n      settings.systemPrompt !== \"You are a helpful AI assistant. Please provide concise and helpful responses.\";\r\n\r\n    const systemPrompt = hasCustomSystemPrompt ? settings.systemPrompt! : this.getSystemPrompt();\r\n    const cachingEnabled = settings.promptCachingEnabled ?? true;\r\n\r\n    console.log(`🔍 Gemini system prompt source:`, {\r\n      hasCustom: hasCustomSystemPrompt,\r\n      usingCustom: hasCustomSystemPrompt,\r\n      promptLength: systemPrompt?.length || 0,\r\n      promptStart: systemPrompt?.substring(0, 100) + '...',\r\n      cachingEnabled,\r\n      implicitCachingEligible: systemPrompt && systemPrompt.length > 8192 ? 'yes' : 'no' // 2048 tokens for Pro\r\n    });\r\n\r\n    const contents = [];\r\n\r\n    // NO system prompt in contents - it goes in systemInstruction parameter\r\n\r\n    // Add conversation history\r\n    for (const msg of conversationHistory) {\r\n      contents.push({\r\n        role: msg.role === 'assistant' ? 'model' : 'user',\r\n        parts: [{ text: typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content) }]\r\n      });\r\n    }\r\n\r\n    // Add current message\r\n    if (typeof message === 'string') {\r\n      // For large string messages, log caching eligibility\r\n      if (cachingEnabled && message.length > 8192) { // ~2048 tokens for Gemini Pro\r\n        console.log(`🔧 Gemini: User message eligible for implicit caching (${message.length} chars, ≥2048 tokens)`);\r\n      }\r\n      contents.push({\r\n        role: 'user',\r\n        parts: [{ text: message }]\r\n      });\r\n    } else if (Array.isArray(message)) {\r\n      // Handle ContentItem array format (from chatService.ts)\r\n      const parts: Array<{ text: string; cache_control?: { type: 'ephemeral' } } | { inline_data: { mime_type: string; data: string } }> = [];\r\n\r\n      for (const item of message as ContentItem[]) {\r\n        if (item.type === 'text') {\r\n          // Add explicit cache_control for large text content if caching enabled\r\n          const textPart: { text: string; cache_control?: { type: 'ephemeral' } } = { text: item.text || '' };\r\n          if (cachingEnabled && item.cache_control) {\r\n            textPart.cache_control = item.cache_control;\r\n            console.log(`🔧 Gemini: Added explicit cache_control to text content (${item.text?.length || 0} chars)`);\r\n          } else if (cachingEnabled && item.text && item.text.length > 8192) {\r\n            console.log(`🔧 Gemini: Large text content eligible for implicit caching (${item.text.length} chars, ≥2048 tokens)`);\r\n          }\r\n          parts.push(textPart);\r\n        } else if (item.type === 'image_url') {\r\n          // Convert OpenAI format to Gemini format\r\n          const imageUrl = item.image_url?.url || '';\r\n\r\n          // Determine mime type from data URL\r\n          const mimeType = imageUrl.includes('data:image/png') ? 'image/png' :\r\n                          imageUrl.includes('data:image/gif') ? 'image/gif' :\r\n                          imageUrl.includes('data:image/webp') ? 'image/webp' : 'image/jpeg';\r\n\r\n          parts.push({\r\n            inline_data: {\r\n              mime_type: mimeType,\r\n              data: imageUrl.split(',')[1] // Remove data:image/jpeg;base64, prefix\r\n            }\r\n          });\r\n        } else if (item.type === 'document') {\r\n          // For documents, convert to text or handle as needed\r\n          // Gemini doesn't have native document support like Anthropic\r\n          parts.push({\r\n            text: `[Document: ${item.document?.name || 'document'}]`\r\n          });\r\n        }\r\n      }\r\n\r\n      contents.push({ role: 'user', parts });\r\n    } else {\r\n      // Handle vision format\r\n      const messageWithImages = message as { text: string; images: string[] };\r\n      const parts: Array<{ text: string } | { inline_data: { mime_type: string; data: string } }> = [{ text: messageWithImages.text }];\r\n\r\n      // Add images in Gemini format\r\n      for (const imageUrl of messageWithImages.images) {\r\n        // Determine mime type from data URL\r\n        const mimeType = imageUrl.includes('data:image/png') ? 'image/png' :\r\n                        imageUrl.includes('data:image/gif') ? 'image/gif' :\r\n                        imageUrl.includes('data:image/webp') ? 'image/webp' : 'image/jpeg';\r\n\r\n        parts.push({\r\n          inline_data: {\r\n            mime_type: mimeType,\r\n            data: imageUrl.split(',')[1] // Remove data:image/jpeg;base64, prefix\r\n          }\r\n        } as { inline_data: { mime_type: string; data: string } });\r\n      }\r\n      contents.push({ role: 'user', parts });\r\n    }\r\n\r\n    // Get MCP tools for Gemini\r\n    console.log(`🔧 GeminiProvider: Calling getMCPToolsForProvider for gemini`);\r\n    console.log(`🔧 GeminiProvider: getMCPToolsForProvider method exists:`, typeof this.getMCPToolsForProvider === 'function');\r\n\r\n    const rawMcpTools = await this.getMCPToolsForProvider('gemini', settings);\r\n    console.log(`🔧 GeminiProvider: Received ${rawMcpTools.length} raw tools from getMCPToolsForProvider`);\r\n    console.log(`🔧 GeminiProvider: Raw tools:`, rawMcpTools.map((t: any) => ({\r\n      name: t.function?.name || t.name,\r\n      type: t.type,\r\n      serverId: t.serverId,\r\n      isInternal: t.serverId === 'internal-commands'\r\n    })));\r\n\r\n    // Format tools for Gemini (clean schemas)\r\n    const formattedTools = rawMcpTools.length > 0 ? this.formatTools(rawMcpTools as ToolObject[]) : [];\r\n\r\n    const endpoint = onStream ? 'streamGenerateContent?alt=sse' : 'generateContent';\r\n    const url = `${provider.baseUrl}/models/${settings.model}:${endpoint}${onStream ? '' : '?key=' + settings.apiKey}`;\r\n\r\n    const requestBody: Record<string, unknown> = {\r\n      contents,\r\n      generationConfig: {\r\n        temperature: settings.temperature,\r\n        maxOutputTokens: settings.maxTokens\r\n      }\r\n    };\r\n\r\n    // Add system instruction with potential caching\r\n    if (systemPrompt) {\r\n      if (cachingEnabled && systemPrompt.length > 8192) {\r\n        // For large system prompts, add explicit cache_control\r\n        requestBody.systemInstruction = {\r\n          parts: [\r\n            {\r\n              text: systemPrompt,\r\n              cache_control: { type: 'ephemeral' }\r\n            }\r\n          ]\r\n        };\r\n        console.log(`🔧 Gemini: Added explicit cache_control to system instruction (${systemPrompt.length} chars)`);\r\n      } else {\r\n        // Regular system instruction (may still benefit from implicit caching)\r\n        requestBody.systemInstruction = {\r\n          parts: [{ text: systemPrompt }]\r\n        };\r\n        if (cachingEnabled && systemPrompt.length > 8192) {\r\n          console.log(`🔧 Gemini: System instruction eligible for implicit caching (${systemPrompt.length} chars, ≥2048 tokens)`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Add tools if available (Gemini uses its own format)\r\n    if (formattedTools.length > 0) {\r\n      requestBody.tools = formattedTools;\r\n      console.log(`🚀 Gemini API call with ${rawMcpTools.length} raw tools formatted to ${formattedTools.length} Gemini tools:`, {\r\n        model: settings.model,\r\n        rawToolCount: rawMcpTools.length,\r\n        formattedToolCount: formattedTools.length,\r\n        tools: formattedTools\r\n      });\r\n    } else {\r\n      console.log(`🚀 Gemini API call without tools (no MCP tools available)`);\r\n    }\r\n\r\n    // Set system instruction (behavioral prompt only - no tool descriptions)\r\n    if (systemPrompt) {\r\n      requestBody.system_instruction = {\r\n        parts: [{ text: systemPrompt }]\r\n      };\r\n      console.log(`🔧 Gemini system instruction set:`, {\r\n        length: systemPrompt.length,\r\n        preview: systemPrompt.substring(0, 100) + '...'\r\n      });\r\n    }\r\n\r\n    console.log('🔍 Gemini request body:', JSON.stringify(requestBody, null, 2));\r\n\r\n    const headers: Record<string, string> = {\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    if (onStream) {\r\n      headers['x-goog-api-key'] = settings.apiKey;\r\n    }\r\n\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers,\r\n      body: JSON.stringify(requestBody),\r\n      signal\r\n    });\r\n\r\n    console.log('🔍 Gemini response status:', response.status, response.statusText);\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error('❌ Gemini API error response:', error);\r\n      throw new Error(`Gemini API error: ${error}`);\r\n    }\r\n\r\n    if (onStream) {\r\n      return this.handleStreamResponse(response, onStream, settings, provider, conversationHistory, signal);\r\n    } else {\r\n      return this.handleNonStreamResponse(response, settings, conversationHistory, conversationId);\r\n    }\r\n  }\r\n\r\n  async fetchModels(apiKey: string): Promise<string[]> {\r\n    if (!apiKey) {\r\n      console.error('❌ No Gemini API key provided - cannot fetch models');\r\n      throw new Error('Gemini API key is required to fetch available models. Please add your API key in settings.');\r\n    }\r\n\r\n    try {\r\n      // Google Gemini models endpoint\r\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`❌ Gemini API error: ${response.status}`, errorText);\r\n        throw new Error(`Failed to fetch Gemini models: ${response.status} - ${errorText}`);\r\n      }\r\n\r\n      const data = await response.json() as { models?: Array<{ name: string; supportedGenerationMethods?: string[] }> };\r\n      const models = data.models\r\n        ?.filter((model) => model.name.includes('gemini') && model.supportedGenerationMethods?.includes('generateContent'))\r\n        ?.map((model) => model.name.replace('models/', ''))\r\n        ?.sort() || [];\r\n\r\n      if (models.length === 0) {\r\n        throw new Error('No Gemini models returned from API. This may indicate an API issue or insufficient permissions.');\r\n      }\r\n\r\n      return models;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch Gemini models:', error);\r\n      throw error instanceof Error ? error : new Error(`Failed to fetch Gemini models: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  formatTools(tools: ToolObject[]): unknown[] {\r\n    console.log(`🔧 Gemini formatTools received ${tools.length} tools:`, tools.map(t => ({\r\n      keys: Object.keys(t),\r\n      name: t.name,\r\n      functionName: t.function?.name,\r\n      type: (t as {type?: string}).type,\r\n      structure: JSON.stringify(t, null, 2).substring(0, 200) + '...'\r\n    })));\r\n\r\n    // Gemini format - single array of function declarations with cleaned schemas\r\n    const formattedTools = [{\r\n      functionDeclarations: tools.map(tool => {\r\n        // Try multiple ways to get the tool name\r\n        const originalName = tool.name || tool.function?.name || (tool as {function_name?: string}).function_name || (tool as {toolName?: string}).toolName || 'unknown_tool';\r\n        const sanitizedName = this.sanitizeToolNameForGemini(originalName);\r\n\r\n        // Try multiple ways to get the description\r\n        const description = tool.description || tool.function?.description || (tool as {function_description?: string}).function_description || `Tool: ${sanitizedName}`;\r\n\r\n        // Try multiple ways to get the parameters\r\n        const parameters = tool.parameters || tool.function?.parameters || (tool as {input_schema?: unknown}).input_schema || (tool as {parameters?: unknown}).parameters;\r\n        const cleanedParameters = this.cleanSchemaForGemini(parameters);\r\n\r\n        console.log(`🔧 Gemini tool formatting - ${originalName} -> ${sanitizedName}:`, {\r\n          originalTool: tool,\r\n          cleanedParameters: JSON.stringify(cleanedParameters, null, 2)\r\n        });\r\n\r\n        return {\r\n          name: sanitizedName,\r\n          description: description,\r\n          parameters: cleanedParameters\r\n        };\r\n      })\r\n    }];\r\n\r\n    console.log(`🔧 Gemini formatted tools:`, JSON.stringify(formattedTools, null, 2));\r\n    return formattedTools;\r\n  }\r\n\r\n  private sanitizeToolNameForGemini(name: string): string {\r\n    if (!name) return 'unknown_tool';\r\n\r\n    // Gemini requirements: Must start with letter or underscore, alphanumeric + _ . -, max 64 chars\r\n    let sanitized = name;\r\n\r\n    // Replace invalid characters with underscores\r\n    sanitized = sanitized.replace(/[^a-zA-Z0-9_.-]/g, '_');\r\n\r\n    // Ensure it starts with letter or underscore\r\n    if (!/^[a-zA-Z_]/.test(sanitized)) {\r\n      sanitized = '_' + sanitized;\r\n    }\r\n\r\n    // Truncate to 64 characters\r\n    if (sanitized.length > 64) {\r\n      sanitized = sanitized.substring(0, 64);\r\n    }\r\n\r\n    // Ensure it's not empty\r\n    if (!sanitized) {\r\n      sanitized = 'tool';\r\n    }\r\n\r\n    console.log(`🔧 Gemini tool name sanitization: \"${name}\" -> \"${sanitized}\"`);\r\n    return sanitized;\r\n  }\r\n\r\n  private safeParseJSON(jsonString: string): unknown {\r\n    try {\r\n      return JSON.parse(jsonString);\r\n    } catch {\r\n      console.warn(`🚫 Gemini: Failed to parse JSON \"${jsonString}\", returning as string`);\r\n      return { result: jsonString };\r\n    }\r\n  }\r\n\r\n  getSystemPrompt(): string {\r\n    return GEMINI_SYSTEM_PROMPT;\r\n  }\r\n\r\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\r\n    if (tools.length === 0) {\r\n      return basePrompt;\r\n    }\r\n\r\n    // Gemini uses structured tool calling with tools parameter\r\n    // Don't add XML tool instructions as they conflict with native function calling\r\n    console.log(`🔧 Gemini using structured tools, skipping XML tool instructions`);\r\n    return basePrompt;\r\n  }\r\n\r\n  validateToolCall(toolCall: { id?: string; name: string; arguments: Record<string, unknown> }): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!toolCall.name || typeof toolCall.name !== 'string') {\r\n      errors.push('Tool call must have a valid name');\r\n    }\r\n\r\n    // Google/Gemini has specific requirements\r\n    if (toolCall.arguments && typeof toolCall.arguments !== 'object') {\r\n      errors.push(`Google/Gemini tool call arguments must be object: ${toolCall.name}`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  validateTool(tool: unknown): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!tool || typeof tool !== 'object') {\r\n      errors.push('Tool must be an object');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    // Gemini-specific validation would go here\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Private helper methods\r\n  // This method is injected by the ProviderAdapter from the LLMService\r\n  private getMCPToolsForProvider!: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private async executeMCPTool(_toolName: string, _args: Record<string, unknown>): Promise<string> {\r\n    // This will be injected by the main service\r\n    return JSON.stringify({ error: 'Tool execution not available' });\r\n  }\r\n\r\n  private async executeGeminiFollowUp(\r\n    toolCalls: Array<{ id?: string; name?: string; arguments?: unknown; result?: string; isError?: boolean }>,\r\n    initialContent: string,\r\n    initialUsage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔄 Making follow-up Gemini streaming call with ${toolCalls.length} tool results`);\r\n\r\n    try {\r\n      if (!settings.apiKey) {\r\n        throw new Error('No Gemini API key available for follow-up');\r\n      }\r\n\r\n      // Build follow-up request with tool results\r\n      const userMessages = conversationHistory.filter(msg => msg.role === 'user');\r\n      const userParts = userMessages.length > 0\r\n        ? userMessages.map(msg => ({ text: typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content) }))\r\n        : [{ text: 'Please provide a response based on the tool results.' }];\r\n\r\n      const followupContents = [\r\n        {\r\n          role: 'user',\r\n          parts: userParts\r\n        },\r\n        {\r\n          role: 'model',\r\n          parts: [\r\n            { text: initialContent },\r\n            ...toolCalls.map(tc => ({\r\n              functionResponse: {\r\n                name: tc.name,\r\n                response: tc.isError ? { error: tc.result } : this.safeParseJSON(tc.result || '{}')\r\n              }\r\n            }))\r\n          ]\r\n        }\r\n      ];\r\n\r\n      const followupBody = {\r\n        contents: followupContents,\r\n        generationConfig: {\r\n          temperature: settings.temperature,\r\n          maxOutputTokens: settings.maxTokens\r\n        }\r\n      };\r\n\r\n      const followupResponse = await fetch(`${provider.baseUrl}/models/${settings.model}:streamGenerateContent?alt=sse&key=${settings.apiKey}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(followupBody)\r\n      });\r\n\r\n      if (followupResponse.ok) {\r\n        console.log(`✅ Getting Gemini follow-up response (streaming)`);\r\n\r\n        // Handle streaming response\r\n        const reader = followupResponse.body?.getReader();\r\n        if (!reader) {\r\n          throw new Error('Gemini follow-up response has no readable stream');\r\n        }\r\n\r\n        let followupText = '';\r\n        let followupUsage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined = undefined;\r\n        const decoder = new TextDecoder();\r\n\r\n        try {\r\n          // eslint-disable-next-line no-constant-condition\r\n          while (true) {\r\n            const { done, value } = await reader.read();\r\n            if (done) break;\r\n\r\n            const chunk = decoder.decode(value);\r\n            const lines = chunk.split('\\n');\r\n\r\n            for (const line of lines) {\r\n              if (line.startsWith('data: ')) {\r\n                const data = line.slice(6).trim();\r\n                if (!data || data === '[DONE]') continue;\r\n\r\n                try {\r\n                  const parsed = JSON.parse(data);\r\n                  console.log('🔍 Gemini follow-up streaming chunk:', JSON.stringify(parsed, null, 2));\r\n\r\n                  if (parsed.candidates && parsed.candidates[0]?.content?.parts) {\r\n                    const parts = parsed.candidates[0].content.parts;\r\n\r\n                    for (const part of parts) {\r\n                      // Handle text content\r\n                      if (part.text) {\r\n                        followupText += part.text;\r\n                        onStream(part.text); // Stream immediately\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  // Gemini provides usage metadata in streaming responses\r\n                  if (parsed.usageMetadata) {\r\n                    followupUsage = {\r\n                      prompt_tokens: parsed.usageMetadata.promptTokenCount,\r\n                      completion_tokens: parsed.usageMetadata.candidatesTokenCount,\r\n                      total_tokens: parsed.usageMetadata.totalTokenCount\r\n                    };\r\n                  }\r\n                } catch (e) {\r\n                  console.warn('Failed to parse Gemini follow-up streaming chunk:', e);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } finally {\r\n          reader.releaseLock();\r\n        }\r\n\r\n        // Combine usage data\r\n        const combinedUsage = {\r\n          promptTokens: (initialUsage?.prompt_tokens || 0) + (followupUsage?.prompt_tokens || 0),\r\n          completionTokens: (initialUsage?.completion_tokens || 0) + (followupUsage?.completion_tokens || 0),\r\n          totalTokens: (initialUsage?.total_tokens || 0) + (followupUsage?.total_tokens || 0)\r\n        };\r\n\r\n        console.log(`✅ Gemini follow-up streaming completed with tool results integrated`);\r\n\r\n        return {\r\n          content: initialContent + followupText,\r\n          usage: combinedUsage,\r\n          toolCalls: toolCalls.map(tc => ({\r\n            id: tc.id || `gemini-${Date.now()}`,\r\n            name: tc.name || '',\r\n            arguments: tc.arguments as Record<string, unknown> || {}\r\n          }))\r\n        };\r\n      } else {\r\n        const errorText = await followupResponse.text();\r\n        console.error(`❌ Gemini follow-up call failed (${followupResponse.status}):`, errorText);\r\n\r\n        // Provide a fallback response with tool results\r\n        const fallbackMessage = `\\n\\n**Tool execution completed successfully, but follow-up request failed (${followupResponse.status}). Here are the tool results:**\\n\\n`;\r\n        onStream(fallbackMessage);\r\n\r\n        // Stream the tool results as fallback\r\n        const toolSummary = toolCalls.map(tc =>\r\n          `**${tc.name}**: ${typeof tc.result === 'string' ? tc.result.substring(0, 200) : JSON.stringify(tc.result).substring(0, 200)}${(tc.result && tc.result.length > 200) ? '...' : ''}`\r\n        ).join('\\n\\n');\r\n        onStream(toolSummary);\r\n      }\r\n    } catch (error) {\r\n      console.error(`❌ Gemini follow-up call error:`, error);\r\n      console.error(`❌ Error details:`, {\r\n        errorType: typeof error,\r\n        errorMessage: error instanceof Error ? error.message : String(error),\r\n        errorStack: error instanceof Error ? error.stack : undefined\r\n      });\r\n\r\n      // Provide a fallback response with tool results\r\n      const fallbackMessage = `\\n\\n**Tool execution completed successfully, but follow-up call failed. Here are the tool results:**\\n\\n`;\r\n      onStream(fallbackMessage);\r\n\r\n      // Stream the tool results as fallback\r\n      const toolSummary = toolCalls.map(tc =>\r\n        `**${tc.name}**: ${typeof tc.result === 'string' ? tc.result.substring(0, 200) : JSON.stringify(tc.result).substring(0, 200)}${(tc.result && tc.result.length > 200) ? '...' : ''}`\r\n      ).join('\\n\\n');\r\n      onStream(toolSummary);\r\n    }\r\n\r\n    // Return original response if follow-up fails\r\n    return {\r\n      content: initialContent,\r\n      usage: initialUsage ? {\r\n        promptTokens: initialUsage.prompt_tokens || 0,\r\n        completionTokens: initialUsage.completion_tokens || 0,\r\n        totalTokens: initialUsage.total_tokens || 0\r\n      } : undefined,\r\n      toolCalls: toolCalls.map(tc => ({\r\n        id: tc.id || `gemini-${Date.now()}`,\r\n        name: tc.name || '',\r\n        arguments: tc.arguments as Record<string, unknown> || {}\r\n      }))\r\n    };\r\n  }\r\n\r\n  private cleanSchemaForGemini(schema: unknown): Record<string, unknown> {\r\n    if (!schema || typeof schema !== 'object') {\r\n      return {\r\n        type: 'object',\r\n        properties: {},\r\n        required: []\r\n      };\r\n    }\r\n\r\n    const schemaObj = schema as Record<string, unknown>;\r\n\r\n    // Check if this schema has complex features that Gemini doesn't support\r\n    const hasComplexFeatures = this.hasUnsupportedFeatures(schemaObj);\r\n\r\n    if (hasComplexFeatures) {\r\n      console.log(`🚫 Gemini schema has complex features, using simplified fallback`);\r\n      // Return a very simple fallback schema\r\n      return {\r\n        type: 'object',\r\n        description: (schemaObj.description as string) || 'Tool parameters',\r\n        properties: {},\r\n        required: []\r\n      };\r\n    }\r\n\r\n    // Recursively clean the schema to remove all unsupported properties\r\n    const cleanedSchema = this.deepCleanForGemini(schemaObj);\r\n\r\n    console.log(`🧹 Gemini schema cleaning:`, {\r\n      original: JSON.stringify(schemaObj, null, 2),\r\n      cleaned: JSON.stringify(cleanedSchema, null, 2)\r\n    });\r\n\r\n    return cleanedSchema;\r\n  }\r\n\r\n  private hasUnsupportedFeatures(obj: unknown): boolean {\r\n    if (!obj || typeof obj !== 'object') {\r\n      return false;\r\n    }\r\n\r\n    const input = obj as Record<string, unknown>;\r\n\r\n    // Check for unsupported top-level properties\r\n    const unsupportedProps = [\r\n      '$ref', '$defs', '$schema', '$id', '$comment',\r\n      'exclusiveMinimum', 'exclusiveMaximum', 'multipleOf',\r\n      'minLength', 'maxLength', 'pattern', 'format',\r\n      'minItems', 'maxItems', 'uniqueItems', 'contains',\r\n      'minProperties', 'maxProperties', 'additionalProperties',\r\n      'patternProperties', 'dependencies', 'propertyNames',\r\n      'const', 'if', 'then', 'else', 'allOf', 'anyOf', 'oneOf', 'not'\r\n    ];\r\n\r\n    for (const prop of unsupportedProps) {\r\n      if (prop in input) {\r\n        console.log(`🚫 Found unsupported feature: ${prop}`);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // Recursively check nested objects\r\n    for (const [, value] of Object.entries(input)) {\r\n      if (value && typeof value === 'object' && !Array.isArray(value)) {\r\n        if (this.hasUnsupportedFeatures(value)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private deepCleanForGemini(obj: unknown): Record<string, unknown> {\r\n    if (!obj || typeof obj !== 'object' || Array.isArray(obj)) {\r\n      return { type: 'object' };\r\n    }\r\n\r\n    const input = obj as Record<string, unknown>;\r\n    const cleaned: Record<string, unknown> = {};\r\n\r\n    // Gemini-supported properties ONLY - very restrictive list\r\n    const supportedSchemaProps = ['type', 'description', 'properties', 'required', 'items', 'enum', 'minimum', 'maximum'];\r\n\r\n    // Properties to explicitly reject (JSON Schema advanced features)\r\n    const rejectedProps = [\r\n      '$ref', '$defs', '$schema', '$id', '$comment',\r\n      'exclusiveMinimum', 'exclusiveMaximum', 'multipleOf',\r\n      'minLength', 'maxLength', 'pattern', 'format',\r\n      'minItems', 'maxItems', 'uniqueItems', 'contains',\r\n      'minProperties', 'maxProperties', 'additionalProperties',\r\n      'patternProperties', 'dependencies', 'propertyNames',\r\n      'const', 'if', 'then', 'else', 'allOf', 'anyOf', 'oneOf', 'not'\r\n    ];\r\n\r\n    for (const [key, value] of Object.entries(input)) {\r\n      // Skip rejected properties entirely\r\n      if (rejectedProps.includes(key)) {\r\n        console.log(`🚫 Gemini schema cleaning: Removing unsupported property '${key}'`);\r\n        continue;\r\n      }\r\n\r\n      if (supportedSchemaProps.includes(key)) {\r\n        if (key === 'properties' && value && typeof value === 'object') {\r\n          // Recursively clean nested properties\r\n          cleaned.properties = {};\r\n          for (const [propKey, propValue] of Object.entries(value as Record<string, unknown>)) {\r\n            (cleaned.properties as Record<string, unknown>)[propKey] = this.deepCleanForGemini(propValue);\r\n          }\r\n        } else if (key === 'items' && value) {\r\n          // Recursively clean array items schema\r\n          cleaned.items = this.deepCleanForGemini(value);\r\n        } else if (key === 'required' && Array.isArray(value)) {\r\n          // Keep required array as-is\r\n          cleaned.required = value;\r\n        } else if (key === 'enum' && Array.isArray(value)) {\r\n          // Keep enum array as-is\r\n          cleaned.enum = value;\r\n        } else if ((key === 'minimum' || key === 'maximum') && typeof value === 'number') {\r\n          // Keep numeric constraints (but not exclusive versions)\r\n          cleaned[key] = value;\r\n        } else if (key === 'type' || key === 'description') {\r\n          // Keep basic properties\r\n          cleaned[key] = value;\r\n        }\r\n      } else {\r\n        // Log any other properties we're skipping\r\n        console.log(`🚫 Gemini schema cleaning: Skipping unknown property '${key}'`);\r\n      }\r\n    }\r\n\r\n    // Ensure we always have a type\r\n    if (!cleaned.type) {\r\n      cleaned.type = 'object';\r\n    }\r\n\r\n    // If we have properties but no required array, add an empty one\r\n    if (cleaned.properties && !cleaned.required) {\r\n      cleaned.required = [];\r\n    }\r\n\r\n    return cleaned;\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleStreamResponse(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    signal?: AbortSignal\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    console.log(`🔍 Starting Gemini stream response handling...`);\r\n    const reader = response.body?.getReader();\r\n    if (!reader) {\r\n      throw new Error('No response body');\r\n    }\r\n\r\n    let fullContent = '';\r\n    let usage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined = undefined;\r\n    const decoder = new TextDecoder();\r\n    const toolCalls: Array<{ id?: string; name?: string; arguments?: unknown; result?: string; isError?: boolean; function?: { name?: string; arguments?: string } }> = [];\r\n\r\n    try {\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n\r\n        const chunk = decoder.decode(value);\r\n        const lines = chunk.split('\\n');\r\n\r\n        for (const line of lines) {\r\n          if (line.startsWith('data: ')) {\r\n            const data = line.slice(6).trim();\r\n            if (!data || data === '[DONE]') continue;\r\n\r\n            try {\r\n              const parsed = JSON.parse(data);\r\n              console.log('🔍 Gemini streaming chunk:', JSON.stringify(parsed, null, 2));\r\n\r\n              if (parsed.candidates && parsed.candidates[0]?.content?.parts) {\r\n                const parts = parsed.candidates[0].content.parts;\r\n\r\n                for (const part of parts) {\r\n                  // Handle text content\r\n                  if (part.text) {\r\n                    fullContent += part.text;\r\n                    onStream(part.text);\r\n                  }\r\n\r\n                  // Handle function calls\r\n                  if (part.functionCall) {\r\n                    console.log(`🔧 Gemini streaming function call:`, part.functionCall);\r\n\r\n                    // Show minimal tool usage in chat\r\n                    const toolMessage = `\\n\\n🔧 **Using tool: ${part.functionCall.name}**\\n⚙️ Executing...\\n`;\r\n                    fullContent += toolMessage;\r\n                    onStream(toolMessage);\r\n\r\n                    try {\r\n                      // Execute the tool\r\n                      const toolResult = await this.executeMCPTool(\r\n                        part.functionCall.name,\r\n                        part.functionCall.args\r\n                      );\r\n\r\n                      // Show brief completion in chat\r\n                      const completedMessage = `✅ Completed\\n\\n`;\r\n                      fullContent += completedMessage;\r\n                      onStream(completedMessage);\r\n\r\n                      toolCalls.push({\r\n                        id: `gemini-${Date.now()}`,\r\n                        name: part.functionCall.name,\r\n                        arguments: part.functionCall.args,\r\n                        result: toolResult\r\n                      });\r\n\r\n                      // Add tool result to conversation history for follow-up\r\n                      conversationHistory.push({\r\n                        role: 'function',\r\n                        content: JSON.stringify(toolResult)\r\n                      });\r\n\r\n                    } catch (error) {\r\n                      console.error(`❌ Gemini streaming tool call failed:`, error);\r\n\r\n                      // Show tool error in chat\r\n                      const errorMessage = `❌ Tool ${part.functionCall.name} failed: ${error instanceof Error ? error.message : String(error)}\\n`;\r\n                      fullContent += errorMessage;\r\n                      onStream(errorMessage);\r\n\r\n                      toolCalls.push({\r\n                        id: `gemini-${Date.now()}`,\r\n                        name: part.functionCall.name,\r\n                        arguments: part.functionCall.args,\r\n                        result: error instanceof Error ? error.message : String(error),\r\n                        isError: true\r\n                      });\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Gemini provides usage metadata in streaming responses\r\n              if (parsed.usageMetadata) {\r\n                usage = {\r\n                  prompt_tokens: parsed.usageMetadata.promptTokenCount,\r\n                  completion_tokens: parsed.usageMetadata.candidatesTokenCount,\r\n                  total_tokens: parsed.usageMetadata.totalTokenCount\r\n                };\r\n              }\r\n            } catch (e) {\r\n              console.warn('Failed to parse Gemini streaming chunk:', e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n\r\n    // If we have tool calls, make a follow-up call to get Gemini's analysis\r\n    if (toolCalls.length > 0) {\r\n      return this.executeGeminiFollowUp(toolCalls, fullContent, usage, settings, provider, conversationHistory, onStream);\r\n    }\r\n\r\n    return {\r\n      content: fullContent,\r\n      usage: usage ? {\r\n        promptTokens: usage.prompt_tokens || 0,\r\n        completionTokens: usage.completion_tokens || 0,\r\n        totalTokens: usage.total_tokens || 0\r\n      } : undefined,\r\n      toolCalls: toolCalls.map(tc => ({\r\n        id: tc.id || `gemini-${Date.now()}`,\r\n        name: tc.name || '',\r\n        arguments: tc.arguments as Record<string, unknown> || {}\r\n      }))\r\n    };\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNonStreamResponse(\r\n    response: Response,\r\n    settings: LLMSettings,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    try {\r\n      console.log('🔍 About to parse Gemini response...');\r\n      const data = await response.json();\r\n      console.log('🔍 Gemini raw response:', JSON.stringify(data, null, 2));\r\n\r\n      const candidate = data.candidates[0];\r\n      if (!candidate || !candidate.content || !candidate.content.parts) {\r\n        console.error('❌ Gemini response missing expected structure:', data);\r\n        return { content: 'Error: Invalid response structure from Gemini' };\r\n      }\r\n\r\n      // Handle tool calls in Gemini format\r\n      let content = '';\r\n      const toolCalls = [];\r\n\r\n      console.log('🔍 Gemini candidate parts:', candidate.content.parts);\r\n      for (const part of candidate.content.parts) {\r\n        if (part.text) {\r\n          content += part.text;\r\n        } else if (part.functionCall) {\r\n          console.log(`🔧 Gemini response contains function call:`, part.functionCall);\r\n          // Tool execution will be handled by the main service\r\n          toolCalls.push({\r\n            id: `gemini-${Date.now()}`,\r\n            name: part.functionCall.name,\r\n            arguments: part.functionCall.args\r\n          });\r\n        }\r\n      }\r\n\r\n      const { usage, cost } = this.createUsageAndCost(settings.model, data.usageMetadata);\r\n      return {\r\n        content,\r\n        usage,\r\n        cost,\r\n        toolCalls: toolCalls.length > 0 ? toolCalls : undefined\r\n      };\r\n    } catch (error) {\r\n      console.error('❌ Failed to parse Gemini response:', error);\r\n      return { content: 'Error: Failed to parse response from Gemini' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create usage and cost information from Gemini API response\r\n   */\r\n  private createUsageAndCost(model: string, usageMetadata?: { promptTokenCount?: number; candidatesTokenCount?: number; totalTokenCount?: number }) {\r\n    if (!usageMetadata) return { usage: undefined, cost: undefined };\r\n\r\n    const usageInfo = {\r\n      promptTokens: usageMetadata.promptTokenCount || 0,\r\n      completionTokens: usageMetadata.candidatesTokenCount || 0,\r\n      totalTokens: usageMetadata.totalTokenCount || 0\r\n    };\r\n\r\n    const costInfo = PricingService.calculateCost('gemini', model, usageInfo.promptTokens, usageInfo.completionTokens);\r\n\r\n    return { usage: usageInfo, cost: costInfo };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\JanProvider.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":33,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":33,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used.","line":40,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used. Allowed unused args must match /^_/u.","line":40,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":19},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":44,"column":59,"nodeType":"Literal","endLine":44,"endColumn":85},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1926,1979],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2122,2208],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2576,2777],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3150,3217],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3579,3628],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3932,3991],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4126,4294],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":125,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":125,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4419,4489],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4548,4602],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6137,6217],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicated-branches","severity":2,"message":"This branch's code block is the same as the block for the branch on line 185.","line":187,"column":44,"nodeType":"BlockStatement","messageId":"sameConditionalBlock","endLine":189,"endColumn":10},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6885,6965],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 25 to the 15 allowed.","line":207,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":207,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7400,7456],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7461,7554],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":217,"column":55,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":217,"endColumn":85},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8097,8147],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8517,8598],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9728,9790],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":268,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":268,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9799,9847],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":271,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":271,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[9914,9975],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":275,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10053,10056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10053,10056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":276,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":276,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10110,10174],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10231,10297],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":291,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":291,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10555,10627],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":368,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":368,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12957,13034],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_toolName' is defined but never used.","line":415,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":415,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_args' is defined but never used.","line":415,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":415,"endColumn":56}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Jan AI provider implementation\n\nimport { BaseProvider } from './BaseProvider';\nimport {\n  LLMSettings,\n  LLMResponse,\n  MessageContent,\n  ContentItem,\n  LLMProvider,\n  ToolObject,\n  ProviderCapabilities\n} from './types';\n\nimport { JAN_SYSTEM_PROMPT } from './prompts/jan';\nimport { OpenAICompatibleStreaming } from './shared/OpenAICompatibleStreaming';\n\nexport class JanProvider extends BaseProvider {\n  readonly id = 'jan';\n  readonly name = 'Jan AI';\n  readonly capabilities: ProviderCapabilities = {\n    supportsVision: true,\n    supportsTools: true,\n    supportsStreaming: true,\n    supportsSystemMessages: true,\n    supportsPromptCaching: false,\n    maxToolNameLength: 64,\n    toolFormat: 'openai'\n  };\n\n  // This method is injected by the ProviderAdapter from the LLMService\n  private getMCPToolsForProvider!: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\n\n  async sendMessage(\n    message: MessageContent,\n    settings: LLMSettings,\n    provider: LLMProvider,\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\n    onStream?: (chunk: string) => void,\n    signal?: AbortSignal,\n    conversationId?: string\n  ): Promise<LLMResponse> {\n    // Jan AI uses OpenAI-compatible API - get base URL from settings or provider default\n    // Jan AI documentation shows 127.0.0.1:1337 as the default host\n    let baseUrl = settings.baseUrl || provider.baseUrl || 'http://127.0.0.1:1337/v1';\n\n    // Handle base URL - ensure it's properly formatted\n    if (baseUrl && baseUrl.trim()) {\n      baseUrl = baseUrl.trim();\n      // Ensure the base URL ends with /v1 for Jan AI API\n      if (!baseUrl.endsWith('/v1')) {\n        baseUrl = baseUrl.replace(/\\/$/, '') + '/v1';\n      }\n    } else {\n      baseUrl = 'http://localhost:1337/v1';\n    }\n\n    try {\n      // Jan AI uses OpenAI-compatible API at /chat/completions\n      const endpoint = `${baseUrl}/chat/completions`;\n      console.log(`🔍 Jan AI: Using API URL: ${endpoint}`);\n\n      // Get tools if tool calling is enabled\n      const tools = settings.toolCallingEnabled ? await this.getJanTools(settings) : [];\n      console.log(`🔧 Jan AI: ${tools.length} tools available for model ${settings.model}`);\n\n      // Build messages array\n      const messages = this.buildMessagesArray(message, conversationHistory, settings);\n\n      const requestBody = {\n        model: settings.model,\n        messages,\n        stream: !!onStream,\n        temperature: settings.temperature,\n        max_tokens: settings.maxTokens,\n        ...(tools.length > 0 && { tools })\n      };\n\n      console.log(`📤 Jan AI: Sending request to ${endpoint}`, {\n        model: settings.model,\n        messageCount: messages.length,\n        toolCount: tools.length,\n        streaming: !!onStream\n      });\n\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${settings.apiKey || 'jan-api-key'}`\n        },\n        body: JSON.stringify(requestBody),\n        signal\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`❌ Jan AI API error: ${response.status}`, errorText);\n        throw new Error(`Jan AI API error: ${response.status} - ${errorText}`);\n      }\n\n      if (onStream) {\n        return this.handleStreamResponse(response, onStream, settings, provider, conversationHistory);\n      } else {\n        return this.handleNonStreamResponse(response, settings, provider, conversationHistory);\n      }\n    } catch (error) {\n      console.error('❌ Jan AI request failed:', error);\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw error;\n      }\n      throw new Error(`Jan AI request failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  private async getJanTools(settings: LLMSettings): Promise<unknown[]> {\n    try {\n      console.log(`🔧 Jan AI: Getting tools for provider 'jan'`);\n\n      // Get raw tools from the centralized service\n      const rawTools = await this.getMCPToolsForProvider('jan', settings);\n      console.log(`📋 Raw tools received (${rawTools.length} tools):`, (rawTools as Array<{name?: string, function?: {name?: string}}>).map(t => t.name || t.function?.name));\n\n      // Format tools for Jan AI (uses OpenAI format)\n      const formattedTools = this.formatToolsForJan(rawTools);\n      console.log(`🔧 Formatted ${formattedTools.length} tools for Jan AI`);\n\n      return formattedTools;\n    } catch (error) {\n      console.error('❌ Failed to get Jan AI tools:', error);\n      return [];\n    }\n  }\n\n  private formatToolsForJan(tools: unknown[]): unknown[] {\n    return tools.map(tool => {\n      const toolObj = tool as ToolObject;\n      return {\n        type: 'function',\n        function: {\n          name: toolObj.name || toolObj.function?.name,\n          description: toolObj.description || toolObj.function?.description,\n          parameters: toolObj.parameters || toolObj.function?.parameters || {\n            type: 'object',\n            properties: {},\n            required: []\n          }\n        }\n      };\n    });\n  }\n\n  private buildMessagesArray(\n    message: MessageContent,\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\n    settings: LLMSettings\n  ) {\n    const messages: Array<{role: string, content: string | Array<ContentItem>}> = [];\n\n    // Add system message if provided\n    if (settings.systemPrompt) {\n      messages.push({\n        role: 'system',\n        content: settings.systemPrompt\n      });\n    }\n\n    // Add conversation history\n    messages.push(...conversationHistory);\n\n    // Add current message\n    if (typeof message === 'string') {\n      messages.push({ role: 'user', content: message });\n    } else if (Array.isArray(message)) {\n      messages.push({ role: 'user', content: message });\n    } else {\n      // Handle vision format (same as LMStudioProvider)\n      const messageWithImages = message as { text: string; images: string[] };\n      const content: ContentItem[] = [{ type: 'text', text: messageWithImages.text }];\n\n      console.log(`🖼️ Jan AI: Processing ${messageWithImages.images.length} images`);\n\n      for (const imageUrl of messageWithImages.images) {\n        // Extract base64 data if it's a data URL, otherwise assume it's raw base64\n        let base64Data = imageUrl;\n        if (imageUrl.startsWith('data:image/')) {\n          base64Data = imageUrl.split(',')[1];\n        } else if (imageUrl.includes(',')) {\n          base64Data = imageUrl.split(',')[1];\n        }\n\n        // Use OpenAI-compatible format\n        const formattedImageUrl = `data:image/jpeg;base64,${base64Data}`;\n\n        content.push({\n          type: 'image_url',\n          image_url: { url: formattedImageUrl }\n        });\n      }\n\n      messages.push({ role: 'user', content });\n      console.log(`🖼️ Jan AI: Created message with ${content.length} content items`);\n    }\n\n    return messages;\n  }\n\n  async fetchModels(apiKey: string, baseUrl?: string): Promise<string[]> {\n    // Handle base URL - try multiple common Jan AI configurations\n    let janBaseUrl = baseUrl && baseUrl.trim() ? baseUrl.trim() : 'http://127.0.0.1:1337/v1';\n\n    // Ensure the base URL ends with /v1 for Jan AI API\n    if (!janBaseUrl.endsWith('/v1')) {\n      janBaseUrl = janBaseUrl.replace(/\\/$/, '') + '/v1';\n    }\n\n    console.log(`🔍 Jan AI: Using base URL: ${janBaseUrl}`);\n    console.log(`🔍 Jan AI: Using API key: ${apiKey ? `${apiKey.substring(0, 8)}...` : 'none'}`);\n\n    // Validate API key\n    if (!apiKey || apiKey.trim() === '') {\n      throw new Error('Jan AI requires an API key. Please set an API key in Jan AI settings and configure it in LittleLLM settings.');\n    }\n\n    // Try multiple host configurations if no custom base URL is provided\n    const hostsToTry = baseUrl ? [janBaseUrl] : [\n      'http://127.0.0.1:1337/v1',\n      'http://localhost:1337/v1',\n      'http://0.0.0.0:1337/v1'\n    ];\n\n    let lastError: Error | null = null;\n\n    for (const hostUrl of hostsToTry) {\n      try {\n        console.log(`🔍 Jan AI: Trying host: ${hostUrl}`);\n\n        // Jan AI models endpoint (OpenAI-compatible: GET /v1/models)\n        const response = await fetch(`${hostUrl}/models`, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${apiKey.trim()}`\n          }\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(`❌ Jan AI API error at ${hostUrl}: ${response.status}`, errorText);\n\n          if (response.status === 404) {\n            lastError = new Error(`Jan AI API not found at ${hostUrl}. Please check:\\n1. Jan AI is installed and running\\n2. Local API Server is started in Jan AI settings\\n3. Server is running on the correct port (default: 1337)\\n4. API prefix is set to /v1 in Jan AI settings`);\n          } else if (response.status === 401) {\n            lastError = new Error(`Jan AI API authentication failed. Please check:\\n1. API key is set in Jan AI settings\\n2. API key is correctly configured in LittleLLM settings\\n3. API key matches the one set in Jan AI`);\n          } else {\n            lastError = new Error(`Failed to connect to Jan AI at ${hostUrl}. Status: ${response.status} - ${errorText}. Make sure Jan AI is running and the API server is started.`);\n          }\n\n          // If this is not the last host to try, continue to next host\n          if (hostUrl !== hostsToTry[hostsToTry.length - 1]) {\n            continue;\n          } else {\n            throw lastError;\n          }\n        }\n\n        // Success! Parse the response\n        const data = await response.json();\n        console.log(`✅ Jan AI: Successfully connected to ${hostUrl}`);\n        console.log('🔍 Jan AI models response:', data);\n\n        if (!data.data || !Array.isArray(data.data)) {\n          console.warn('⚠️ Jan AI: Unexpected response format:', data);\n          return [];\n        }\n\n        const models = data.data.map((model: any) => model.id || model.name).filter(Boolean);\n        console.log(`✅ Jan AI: Found ${models.length} models:`, models);\n        return models;\n\n      } catch (error) {\n        console.error(`❌ Jan AI: Error connecting to ${hostUrl}:`, error);\n        lastError = error as Error;\n\n        // If this is not the last host to try, continue to next host\n        if (hostUrl !== hostsToTry[hostsToTry.length - 1]) {\n          continue;\n        }\n      }\n    }\n\n    // If we get here, all hosts failed\n    console.error(`❌ Failed to connect to Jan AI on any host:`, hostsToTry);\n    throw lastError || new Error(`Failed to connect to Jan AI. Tried hosts: ${hostsToTry.join(', ')}`);\n  }\n\n  formatTools(tools: ToolObject[]): unknown[] {\n    // Jan AI uses OpenAI-compatible format\n    return tools.map(tool => ({\n      type: 'function',\n      function: {\n        name: tool.name || tool.function?.name,\n        description: tool.description || tool.function?.description,\n        parameters: tool.parameters || tool.function?.parameters || {\n          type: 'object',\n          properties: {},\n          required: []\n        }\n      }\n    }));\n  }\n\n  getSystemPrompt(): string {\n    return JAN_SYSTEM_PROMPT;\n  }\n\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\n    if (tools.length === 0) return basePrompt;\n\n    const toolDescriptions = tools.map(tool => {\n      const name = tool.name || tool.function?.name || 'unknown';\n      const description = tool.description || tool.function?.description || 'No description available';\n      return `- ${name}: ${description}`;\n    }).join('\\n');\n\n    return `${basePrompt}\n\nYou have access to the following tools:\n${toolDescriptions}\n\nUse these tools when appropriate to help answer the user's questions or complete tasks.`;\n  }\n\n  // Private helper methods\n\n  private async handleStreamResponse(\n    response: Response,\n    onStream: (chunk: string) => void,\n    settings: LLMSettings,\n    provider: LLMProvider,\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>\n  ): Promise<LLMResponse> {\n    // Use OpenAI-compatible streaming with tool calling support\n    return OpenAICompatibleStreaming.handleStreamResponse(\n      response,\n      onStream,\n      settings,\n      provider,\n      conversationHistory,\n      'Jan AI',\n      this.executeToolsAndFollowUp.bind(this)\n    );\n  }\n\n  private async handleNonStreamResponse(\n    response: Response,\n    settings: LLMSettings,\n    provider: LLMProvider,\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>\n  ): Promise<LLMResponse> {\n    const data = await response.json();\n    const message = data.choices?.[0]?.message;\n\n    if (!message) {\n      throw new Error('Invalid response format from Jan AI');\n    }\n\n    // Handle tool calls if present\n    if (message.tool_calls && message.tool_calls.length > 0) {\n      console.log(`🔧 Jan AI: Processing ${message.tool_calls.length} tool calls`);\n      return this.executeToolsAndFollowUp(\n        message.tool_calls,\n        message.content || '',\n        data.usage,\n        settings,\n        provider,\n        conversationHistory,\n        () => {} // No-op for non-stream\n      );\n    }\n\n    return {\n      content: message.content || '',\n      usage: data.usage ? {\n        promptTokens: data.usage.prompt_tokens,\n        completionTokens: data.usage.completion_tokens,\n        totalTokens: data.usage.total_tokens\n      } : undefined,\n      toolCalls: []\n    };\n  }\n\n  private async executeToolsAndFollowUp(\n    toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }>,\n    initialContent: string,\n    initialUsage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined,\n    settings: LLMSettings,\n    provider: LLMProvider,\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\n    onStream: (chunk: string) => void\n  ): Promise<LLMResponse> {\n    return OpenAICompatibleStreaming.executeToolsAndFollowUp(\n      toolCalls,\n      initialContent,\n      initialUsage,\n      settings,\n      provider,\n      conversationHistory,\n      onStream,\n      'Jan AI',\n      this.executeMCPTool.bind(this),\n      {},\n      () => this.getMCPToolsForProvider(provider.id, settings)\n    );\n  }\n\n  private async executeMCPTool(_toolName: string, _args: Record<string, unknown>): Promise<string> {\n    // This will be injected by the ProviderAdapter\n    throw new Error('MCP tool execution not available - method not injected');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\LMStudioProvider.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4897,5212],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 32 to the 15 allowed.","line":139,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":139,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5856,5930],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":160,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":160,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6125,6204],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":162,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":162,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6226,6311],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6910,7155],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7790,7894],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7902,7994],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[8032,8107],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":200,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":200,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8129,8215],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":203,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":203,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8230,8525],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":228,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":228,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9197,9280],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":231,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":231,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9350,9420],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":237,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":237,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9654,9715],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":240,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":240,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9821,9894],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10093,10188],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":256,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":256,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10423,10506],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":273,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":273,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11062,11280],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":281,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":281,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11379,11681],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":293,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":293,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11944,11994],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":294,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":294,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12000,12165],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":311,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":311,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12520,12579],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":317,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":317,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12876,12943],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":345,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":345,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14321,14393],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":359,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":359,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14857,14927],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":372,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":372,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15462,15522],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'signal' is defined but never used. Allowed unused args must match /^_/u.","line":457,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":457,"endColumn":11},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 91 to the 15 allowed.","line":476,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":476,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":513,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":513,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20403,20477],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":519,"column":23,"nodeType":"MemberExpression","messageId":"unexpected","endLine":519,"endColumn":35,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[20775,20835],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":563,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":563,"endColumn":29,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[22668,22731],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":573,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":573,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22861,23037],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":585,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":585,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[23434,23500],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":595,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":595,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[23785,23861],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":603,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":603,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[24092,24161],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":610,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":610,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[24355,24428],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":615,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":615,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[24598,24671],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":620,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":620,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[24777,24843],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":624,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":624,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24891,24960],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":629,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":629,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25045,25146],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":632,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":632,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25304,25413],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":640,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":640,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25657,25737],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":641,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":641,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25743,25825],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":645,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":645,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25949,26058],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":665,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":665,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26694,26764],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":676,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":676,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27170,27239],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":680,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":680,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[27340,27415],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":681,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":681,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[27423,27477],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":682,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":682,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[27485,27532],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":683,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":683,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[27540,27589],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":684,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":684,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[27597,27657],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":697,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":697,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28225,28285],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":702,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":702,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28524,28624],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":703,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":703,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28632,28759],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":707,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":707,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28851,28931],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":712,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":712,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29088,29176],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":715,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":715,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29219,29305],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":730,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":730,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29889,30069],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":748,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":748,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30585,30661],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":761,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":761,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[31117,31211],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":767,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":767,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31389,31483],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":776,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":776,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31791,31878],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":778,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":778,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[31913,31995],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":796,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":796,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32507,32596],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":815,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":815,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[33295,33394],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":835,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":835,"endColumn":40},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used. Allowed unused args must match /^_/u.","line":839,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":839,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":843,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":843,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34300,34372],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":845,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":845,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34424,34469],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":849,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":849,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34617,34723],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":853,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":853,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35080,35164],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":863,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":863,"endColumn":27,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[35639,35747],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":881,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":881,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36567,36705],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":896,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":896,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[37318,37376],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":909,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":909,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[37841,37945],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":925,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":925,"endColumn":29,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[38696,38798],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":945,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":945,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[39311,39399],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 124 to the 15 allowed.","line":964,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":964,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":965,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":965,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[40204,40273],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":971,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":971,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[40477,40562],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":972,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":972,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[40568,40613],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":977,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":977,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[40793,40855],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":992,"column":50,"nodeType":null,"messageId":"refactorFunction","endLine":992,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1055,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1055,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[44466,44521],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1060,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1060,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[44631,44689],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1075,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1075,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[45649,45725],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1076,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1076,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[45731,45799],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1089,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1089,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[46280,46368],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1091,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1091,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[46411,46504],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1094,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1094,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[46547,46667],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1104,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1104,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47124,47215],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1111,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1111,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47414,47534],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1116,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1116,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47604,47681],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1117,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1117,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47687,47750],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1121,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1121,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47851,47912],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1124,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1124,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[48013,48090],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1125,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1125,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[48100,48151],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1126,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1126,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[48161,48277],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1135,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1135,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[48646,48724],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1140,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1140,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[48877,48949],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1142,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1142,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[48992,49078],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1145,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1145,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[49121,49225],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1155,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1155,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[49682,49769],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1162,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1162,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[49978,50092],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1185,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1185,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[51167,51237],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1193,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1193,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[51649,51723],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1197,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1197,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[51840,51908],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1220,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1220,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[52938,52998],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1225,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1225,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[53115,53180],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1254,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1254,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[54481,54553],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1257,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1257,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[54591,54651],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1263,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1263,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[54765,54846],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1268,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1268,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[54977,55070],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 22 to the 15 allowed.","line":1273,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":1273,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1276,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1276,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[55383,55447],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1298,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1298,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[56806,56899],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1313,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1313,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[57561,57639],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1327,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1327,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[58325,58406],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1333,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1333,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[58462,58548],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 24 to the 15 allowed.","line":1337,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":1337,"endColumn":37},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 24 to the 15 allowed.","line":1418,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":1418,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1423,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1423,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[61431,61511],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1468,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1468,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[63176,63245],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1473,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1473,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[63304,63355],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1504,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1504,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[64430,64510],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1507,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1507,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[64600,64686],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":1510,"column":184,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":1510,"endColumn":198},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1517,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1517,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[65189,65271],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1524,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1524,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[65525,65571],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1534,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1534,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[65863,65955],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1539,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1539,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[66147,66251],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1547,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1547,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[66395,66466],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1549,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1549,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[66501,66567],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1564,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1564,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[67025,67131],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1596,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1596,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[68295,68392],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1597,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1597,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[68398,68513],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1608,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1608,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[68975,69054],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1655,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1655,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[71281,71504],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1664,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1664,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[71727,71816],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1699,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1699,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[73004,73166],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1708,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1708,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[73414,73507],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1712,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1712,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[73694,73798],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1736,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1736,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[74791,74794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[74791,74794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1741,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1741,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[75004,75007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[75004,75007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1741,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1741,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[75030,75033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[75030,75033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1743,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1743,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[75156,75159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[75156,75159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1743,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1743,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[75177,75180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[75177,75180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1743,"column":117,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1743,"endColumn":120,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[75211,75214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[75211,75214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1758,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1758,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[75873,75945],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1760,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1760,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[75972,76055],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1768,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1768,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[76348,76397],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.","line":1791,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":1791,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1795,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1795,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[77195,77250],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1834,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1834,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[78287,78372],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1838,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1838,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[78541,78624],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1945,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1945,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[83863,83927],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'signal' is defined but never used.","line":457,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":457,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_toolName' is defined but never used.","line":471,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":471,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_args' is defined but never used.","line":471,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":471,"endColumn":56,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":494,"column":16,"nodeType":"Literal","messageId":"unexpected","endLine":494,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used.","line":839,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":839,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":1803,"column":14,"nodeType":"Literal","messageId":"unexpected","endLine":1803,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":12,"fatalErrorCount":0,"warningCount":144,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// LM Studio provider implementation\r\n\r\nimport { BaseProvider } from './BaseProvider';\r\nimport {\r\n  LLMSettings,\r\n  LLMResponse,\r\n  MessageContent,\r\n  ContentItem,\r\n  LLMProvider,\r\n  ToolObject,\r\n  ProviderCapabilities,\r\n  APIResponseData\r\n} from './types';\r\n\r\nimport { LMSTUDIO_SYSTEM_PROMPT, generateLMStudioToolPrompt } from './prompts/lmstudio';\r\nimport { JSONUtils } from './utils';\r\n\r\nexport class LMStudioProvider extends BaseProvider {\r\n  readonly id = 'lmstudio';\r\n  readonly name = 'LM Studio';\r\n  readonly capabilities: ProviderCapabilities = {\r\n    supportsVision: true,\r\n    supportsTools: true, // Text-based tool descriptions only (no structured tools)\r\n    supportsStreaming: true,\r\n    supportsSystemMessages: true,\r\n    maxToolNameLength: undefined,\r\n    toolFormat: 'text' // Text-based tool descriptions in system prompt\r\n  };\r\n\r\n  /**\r\n   * Determines if tools should be included based on query content\r\n   * Includes tools for various types of tasks, not just external/current data\r\n   */\r\n  private shouldIncludeTools(message: MessageContent, conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>): boolean {\r\n    // Extract text content from message\r\n    let queryText = '';\r\n    if (typeof message === 'string') {\r\n      queryText = message.toLowerCase();\r\n    } else if (Array.isArray(message)) {\r\n      queryText = message\r\n        .filter(item => item.type === 'text')\r\n        .map(item => item.text)\r\n        .join(' ')\r\n        .toLowerCase();\r\n    }\r\n\r\n    // Also check recent conversation history for context\r\n    const recentMessages = conversationHistory.slice(-3); // Last 3 messages\r\n    const conversationContext = recentMessages\r\n      .map(msg => typeof msg.content === 'string' ? msg.content : '')\r\n      .join(' ')\r\n      .toLowerCase();\r\n\r\n    const fullContext = `${queryText} ${conversationContext}`;\r\n\r\n    // Comprehensive tool indicators for various categories\r\n    const toolIndicators = [\r\n      // External/Current data (web search, news, weather)\r\n      'current', 'latest', 'recent', 'today', 'now', 'weather', 'news', 'search for',\r\n      'find information', 'look up', 'research', 'browse', 'stock price', 'market',\r\n\r\n      // File operations\r\n      'read file', 'write file', 'save file', 'open file', 'create file', 'delete file',\r\n      'file content', 'file system', 'directory', 'folder', 'path', 'upload', 'download',\r\n\r\n      // Memory operations\r\n      'remember', 'store', 'recall', 'save this', 'note this', 'keep track', 'memory',\r\n      'remind me', 'save for later', 'store information',\r\n\r\n      // Terminal/System commands\r\n      'run command', 'execute', 'terminal', 'command line', 'shell', 'process',\r\n      'install', 'start server', 'kill process', 'system info',\r\n\r\n      // Text editing operations\r\n      'edit text', 'modify', 'replace text', 'find and replace', 'format text',\r\n      'code formatting', 'syntax highlighting',\r\n\r\n      // Screenshots and media\r\n      'screenshot', 'capture screen', 'take picture', 'image', 'visual',\r\n\r\n      // Data analysis and calculations\r\n      'calculate', 'analyze', 'process data', 'statistics', 'chart', 'graph',\r\n\r\n      // API and external integrations\r\n      'api call', 'webhook', 'integration', 'connect to', 'fetch data'\r\n    ];\r\n\r\n    // Action verbs that often require tools\r\n    const actionVerbs = [\r\n      'create', 'make', 'build', 'generate', 'write', 'save', 'store', 'fetch',\r\n      'get', 'retrieve', 'find', 'search', 'analyze', 'process', 'execute',\r\n      'run', 'start', 'stop', 'install', 'configure', 'setup', 'connect'\r\n    ];\r\n\r\n    // Check for tool indicators\r\n    const hasToolIndicators = toolIndicators.some(indicator =>\r\n      fullContext.includes(indicator)\r\n    );\r\n\r\n    // Check for action verbs with objects (suggesting tool usage)\r\n    const hasActionVerbs = actionVerbs.some(verb =>\r\n      fullContext.includes(verb)\r\n    );\r\n\r\n    // Questions that might need tools\r\n    const hasQuestionWords = /\\b(what|when|where|who|how|why)\\b/.test(fullContext);\r\n    const hasTimeReference = /\\b(today|yesterday|tomorrow|this|last|next|current|latest|recent|now)\\b/.test(fullContext);\r\n\r\n    // Specific patterns that suggest tool usage\r\n    const hasFilePatterns = /\\b(\\.txt|\\.json|\\.csv|\\.pdf|\\.doc|\\.md|file|folder|directory)\\b/.test(fullContext);\r\n    const hasCommandPatterns = /\\b(npm|git|python|node|docker|curl|wget)\\b/.test(fullContext);\r\n    const hasDataPatterns = /\\b(data|database|api|json|xml|csv|export|import)\\b/.test(fullContext);\r\n\r\n    // Combine all indicators - be more inclusive for tool usage\r\n    const shouldInclude = hasToolIndicators ||\r\n                         hasActionVerbs ||\r\n                         hasFilePatterns ||\r\n                         hasCommandPatterns ||\r\n                         hasDataPatterns ||\r\n                         (hasQuestionWords && hasTimeReference);\r\n\r\n    console.log(`🔍 Comprehensive tool usage analysis:`, {\r\n      queryText: queryText.substring(0, 100),\r\n      hasToolIndicators,\r\n      hasActionVerbs,\r\n      hasFilePatterns,\r\n      hasCommandPatterns,\r\n      hasDataPatterns,\r\n      hasQuestionWords,\r\n      hasTimeReference,\r\n      decision: shouldInclude\r\n    });\r\n\r\n    return shouldInclude;\r\n  }\r\n\r\n\r\n\r\n  async sendMessage(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    // LM Studio uses OpenAI-compatible API\r\n    const baseUrl = settings.baseUrl || provider.baseUrl;\r\n    const messages = [];\r\n\r\n    // Determine if tools are needed based on query content\r\n    const needsTools = this.shouldIncludeTools(message, conversationHistory);\r\n    console.log(`🤔 LM Studio: Query analysis - Tools needed: ${needsTools}`);\r\n\r\n    // Get tools only if needed (smart tool usage)\r\n    let mcpTools: unknown[] = [];\r\n    if (needsTools) {\r\n      mcpTools = await this.getMCPToolsForProvider('lmstudio', settings);\r\n      console.log(`🔧 LM Studio: Including ${mcpTools.length} tools for this query`);\r\n    } else {\r\n      console.log(`🚫 LM Studio: Skipping tools for this query - no external data needed`);\r\n    }\r\n\r\n    // Use behavioral system prompt + tool descriptions (text-based approach)\r\n    // Check for meaningful system prompt, not just empty string or generic default\r\n    const hasCustomSystemPrompt = settings.systemPrompt &&\r\n      settings.systemPrompt.trim() &&\r\n      settings.systemPrompt !== \"You are a helpful AI assistant. Please provide concise and helpful responses.\";\r\n\r\n    let systemPrompt = hasCustomSystemPrompt ? settings.systemPrompt! : this.getSystemPrompt();\r\n\r\n    // Add tool descriptions to system prompt only if tools are needed\r\n    if (mcpTools.length > 0) {\r\n      console.log(`🔍 [LM STUDIO DEBUG] Available tools being passed to model:`, mcpTools.map(t => {\r\n        const tool = t as { name?: string; function?: { name?: string } };\r\n        return tool.name || tool.function?.name || 'unknown';\r\n      }));\r\n\r\n      systemPrompt = this.enhanceSystemPromptWithTools(systemPrompt, mcpTools as ToolObject[]);\r\n      systemPrompt += `\\n\\n## Tool Usage Guidance\r\n\r\nUse tools strategically for:\r\n- Current/real-time information (weather, news, stock prices)\r\n- File operations (reading, writing, managing files)\r\n- Memory operations (storing/recalling information)\r\n- System commands (terminal, processes, installations)\r\n- Data processing and analysis\r\n- External integrations and API calls\r\n\r\nAnswer directly for general knowledge questions without tools.\r\n\r\nCRITICAL: Only use the exact tool names listed above. DO NOT invent tools.`;\r\n\r\n      console.log(`🔧 LM Studio enhanced system prompt with ${mcpTools.length} text-based tool descriptions`);\r\n      console.log(`🔍 [LM STUDIO DEBUG] System prompt length: ${systemPrompt.length} characters`);\r\n    } else if (needsTools) {\r\n      console.warn(`⚠️ [LM STUDIO DEBUG] Tools were needed but none available!`);\r\n    } else {\r\n      console.log(`✅ [LM STUDIO DEBUG] No tools included - query can be answered directly`);\r\n    }\r\n\r\n    console.log(`🔍 LM Studio system prompt source:`, {\r\n      hasCustom: hasCustomSystemPrompt,\r\n      usingCustom: hasCustomSystemPrompt,\r\n      promptLength: systemPrompt?.length || 0,\r\n      promptStart: systemPrompt?.substring(0, 100) + '...',\r\n      toolsIncluded: mcpTools.length > 0\r\n    });\r\n\r\n    if (systemPrompt) {\r\n      messages.push({ role: 'system', content: systemPrompt });\r\n    }\r\n\r\n    // Add conversation history\r\n    messages.push(...conversationHistory);\r\n\r\n    // Add current message\r\n    if (typeof message === 'string') {\r\n      messages.push({ role: 'user', content: message });\r\n    } else if (Array.isArray(message)) {\r\n      messages.push({ role: 'user', content: message });\r\n    } else {\r\n      // Handle vision format (exact format from working Python example)\r\n      const messageWithImages = message as { text: string; images: string[] };\r\n      const content: ContentItem[] = [{ type: 'text', text: messageWithImages.text }];\r\n\r\n      console.log(`🖼️ LM Studio: Processing ${messageWithImages.images.length} images`);\r\n\r\n      for (const imageUrl of messageWithImages.images) {\r\n        console.log(`🖼️ LM Studio: Raw image data length:`, imageUrl.length);\r\n\r\n        // Extract base64 data if it's a data URL, otherwise assume it's raw base64\r\n        let base64Data = imageUrl;\r\n        if (imageUrl.startsWith('data:image/')) {\r\n          base64Data = imageUrl.split(',')[1];\r\n          console.log(`🖼️ LM Studio: Extracted base64 from data URL`);\r\n        } else if (imageUrl.includes(',')) {\r\n          base64Data = imageUrl.split(',')[1];\r\n          console.log(`🖼️ LM Studio: Extracted base64 from comma-separated data`);\r\n        }\r\n\r\n        // Use exact format from working Python example: f\"data:image/jpeg;base64,{base64_image}\"\r\n        const formattedImageUrl = `data:image/jpeg;base64,${base64Data}`;\r\n\r\n        console.log(`🖼️ LM Studio: Formatted image URL:`, formattedImageUrl.substring(0, 50) + '...');\r\n\r\n        // Exact structure from working example\r\n        content.push({\r\n          type: 'image_url',\r\n          image_url: { url: formattedImageUrl }\r\n        });\r\n      }\r\n\r\n      messages.push({ role: 'user', content });\r\n      console.log(`🖼️ LM Studio: Created message with ${content.length} content items`);\r\n    }\r\n\r\n    const requestBody: Record<string, unknown> = {\r\n      model: settings.model,\r\n      messages: messages,\r\n      temperature: settings.temperature,\r\n      max_tokens: settings.maxTokens,\r\n      stream: !!onStream\r\n    };\r\n\r\n    // Check if this request contains images\r\n    const hasImages = (requestBody.messages as Array<{content: unknown}>).some(msg =>\r\n      Array.isArray(msg.content) && msg.content.some((item: {type?: string}) => item.type === 'image_url')\r\n    );\r\n\r\n    // Debug: Log the complete request being sent to LM Studio\r\n    console.log(`🔍 LM Studio request body:`, {\r\n      model: requestBody.model,\r\n      messageCount: (requestBody.messages as Array<unknown>).length,\r\n      hasImages: hasImages,\r\n      stream: requestBody.stream\r\n    });\r\n\r\n    // LM Studio uses text-based tool descriptions in system prompt (no structured tools)\r\n    console.log(`🚀 LM Studio API call with text-based tools:`, {\r\n      model: settings.model,\r\n      toolDescriptionsInSystemPrompt: mcpTools.length > 0,\r\n      toolCount: mcpTools.length,\r\n      note: 'Tools are included as text descriptions in system prompt, not as structured tools parameter'\r\n    });\r\n\r\n    // NOTE: No requestBody.tools - LM Studio doesn't support structured tools\r\n    // Tool descriptions are already included in the system prompt above\r\n\r\n    // Use standard OpenAI-compatible endpoint\r\n    const apiUrl = `${baseUrl}/chat/completions`;\r\n    console.log(`🔗 LMStudio request URL: ${apiUrl}`);\r\n    console.log(`🔗 LMStudio request headers:`, {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${settings.apiKey || 'not-needed'}`\r\n    });\r\n\r\n    let response;\r\n    try {\r\n      response = await fetch(apiUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${settings.apiKey || 'not-needed'}`\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n        signal\r\n      });\r\n    } catch (fetchError) {\r\n      console.error(`❌ LMStudio connection failed:`, fetchError);\r\n      throw new Error(`Failed to connect to LM Studio at ${baseUrl}. Make sure LM Studio is running and the server is started. Error: ${fetchError instanceof Error ? fetchError.message : String(fetchError)}`);\r\n    }\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error(`❌ LMStudio API error (${response.status}):`, error);\r\n\r\n      // Check for common LMStudio issues\r\n      if (response.status === 404) {\r\n        throw new Error(`LM Studio API endpoint not found. Make sure you have started the local server in LM Studio (Developer tab → Start Server). URL: ${apiUrl}`);\r\n      }\r\n      if (response.status === 400 && error.includes('No model loaded')) {\r\n        throw new Error(`No model loaded in LM Studio. Please load a model in LM Studio before sending messages.`);\r\n      }\r\n      if (error.includes('Only user and assistant roles are supported')) {\r\n        throw new Error(`LM Studio model doesn't support system messages. Try a different model or remove system prompt. Error: ${error}`);\r\n      }\r\n      if (error.includes('context length') || error.includes('context overflow')) {\r\n        throw new Error(`LM Studio model context limit exceeded. Try a shorter conversation or a model with larger context. Error: ${error}`);\r\n      }\r\n\r\n      throw new Error(`LM Studio API error (${response.status}): ${error}`);\r\n    }\r\n\r\n    if (onStream) {\r\n      return this.handleStreamResponse(response, onStream, settings, provider, conversationHistory, signal);\r\n    } else {\r\n      return this.handleNonStreamResponse(response, settings, conversationHistory, conversationId);\r\n    }\r\n  }\r\n\r\n  async fetchModels(apiKey: string, baseUrl?: string): Promise<string[]> {\r\n    if (!baseUrl) {\r\n      console.error('❌ No LM Studio base URL provided - cannot fetch models');\r\n      throw new Error('LM Studio base URL is required to fetch available models. Please add the base URL in settings (e.g., http://localhost:1234).');\r\n    }\r\n\r\n    try {\r\n      // LM Studio models endpoint (OpenAI-compatible)\r\n      const response = await fetch(`${baseUrl}/models`, {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`❌ LM Studio API error: ${response.status}`, errorText);\r\n        throw new Error(`Failed to connect to LM Studio at ${baseUrl}. Status: ${response.status} - ${errorText}. Make sure LM Studio is running and the server is started.`);\r\n      }\r\n\r\n      const data = await response.json() as APIResponseData;\r\n      const models = data.data?.map((model) => model.id)?.sort() || [];\r\n\r\n      if (models.length === 0) {\r\n        throw new Error(`No models found in LM Studio at ${baseUrl}. Please load a model in LM Studio first.`);\r\n      }\r\n\r\n      return models;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch LM Studio models:', error);\r\n      throw error instanceof Error ? error : new Error(`Failed to fetch LM Studio models: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  formatTools(tools: ToolObject[]): unknown[] {\r\n    // LM Studio uses OpenAI-compatible format\r\n    return tools.map(tool => ({\r\n      type: 'function',\r\n      function: {\r\n        name: tool.name || tool.function?.name,\r\n        description: tool.description || tool.function?.description,\r\n        parameters: tool.parameters || tool.function?.parameters || {\r\n          type: 'object',\r\n          properties: {},\r\n          required: []\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  getSystemPrompt(): string {\r\n    return LMSTUDIO_SYSTEM_PROMPT;\r\n  }\r\n\r\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\r\n    if (tools.length === 0) {\r\n      return basePrompt;\r\n    }\r\n\r\n    const toolInstructions = generateLMStudioToolPrompt(tools);\r\n    return basePrompt + toolInstructions;\r\n  }\r\n\r\n  validateToolCall(toolCall: { id?: string; name: string; arguments: Record<string, unknown> }): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!toolCall.name || typeof toolCall.name !== 'string') {\r\n      errors.push('Tool call must have a valid name');\r\n    }\r\n\r\n    if (!toolCall.arguments || typeof toolCall.arguments !== 'object') {\r\n      errors.push('Tool call must have valid arguments object');\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  validateTool(tool: unknown): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!tool || typeof tool !== 'object') {\r\n      errors.push('Tool must be an object');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const toolObj = tool as Record<string, unknown>;\r\n\r\n    if (!toolObj.type || toolObj.type !== 'function') {\r\n      errors.push('LM Studio tools must have type: \"function\"');\r\n    }\r\n\r\n    if (!toolObj.function || typeof toolObj.function !== 'object') {\r\n      errors.push('LM Studio tools must have function object');\r\n    } else {\r\n      const func = toolObj.function as Record<string, unknown>;\r\n      if (!func.name) {\r\n        errors.push('LM Studio tools must have function.name');\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Private helper methods\r\n  // This method is injected by the ProviderAdapter from the LLMService\r\n  private getMCPToolsForProvider!: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleStreamResponse(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    signal?: AbortSignal\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    // Try native OpenAI-compatible tool calling first, then fallback to text-based\r\n    return this.handleHybridToolCalling(\r\n      response,\r\n      onStream,\r\n      settings,\r\n      provider,\r\n      conversationHistory\r\n    );\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private async executeMCPTool(_toolName: string, _args: Record<string, unknown>): Promise<string> {\r\n    // This will be injected by the main service\r\n    return JSON.stringify({ error: 'Tool execution not available' });\r\n  }\r\n\r\n  private async handleHybridToolCalling(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>\r\n  ): Promise<LLMResponse> {\r\n    let fullContent = '';\r\n    let usage: { promptTokens?: number; completionTokens?: number; totalTokens?: number } | undefined;\r\n    const nativeToolCalls: Array<{ id: string; type: string; function: { name: string; arguments: string } }> = [];\r\n    let hasNativeToolCalls = false;\r\n\r\n    if (response.body) {\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder();\r\n\r\n      try {\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n          const { done, value } = await reader.read();\r\n          if (done) break;\r\n\r\n          const chunk = decoder.decode(value);\r\n          const lines = chunk.split('\\n').filter(line => line.trim());\r\n\r\n          for (const line of lines) {\r\n            if (line.startsWith('data: ')) {\r\n              const data = line.slice(6);\r\n              if (data === '[DONE]') continue;\r\n\r\n              try {\r\n                const parsed = JSON.parse(data);\r\n                const delta = parsed.choices?.[0]?.delta;\r\n\r\n                // Check for native tool calls\r\n                if (delta?.tool_calls) {\r\n                  hasNativeToolCalls = true;\r\n                  console.log(`🔧 LM Studio detected native tool calls:`, delta.tool_calls);\r\n\r\n                  // Accumulate tool calls (they might come in chunks)\r\n                  for (const toolCall of delta.tool_calls) {\r\n                    // Only process tool calls that have valid data\r\n                    if (!toolCall.id || !toolCall.function?.name) {\r\n                      console.warn(`⚠️ Skipping incomplete tool call:`, toolCall);\r\n                      continue;\r\n                    }\r\n\r\n                    const existingIndex = nativeToolCalls.findIndex(tc => tc.id === toolCall.id);\r\n                    if (existingIndex >= 0) {\r\n                      // Update existing tool call\r\n                      if (toolCall.function?.name) {\r\n                        nativeToolCalls[existingIndex].function.name = toolCall.function.name;\r\n                      }\r\n                      if (toolCall.function?.arguments) {\r\n                        nativeToolCalls[existingIndex].function.arguments += toolCall.function.arguments;\r\n                      }\r\n                    } else {\r\n                      // New tool call - only add if it has a name\r\n                      if (toolCall.function?.name) {\r\n                        nativeToolCalls.push({\r\n                          id: toolCall.id,\r\n                          type: toolCall.type || 'function',\r\n                          function: {\r\n                            name: toolCall.function.name,\r\n                            arguments: toolCall.function?.arguments || ''\r\n                          }\r\n                        });\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n\r\n                // Handle regular content\r\n                const content = delta?.content || '';\r\n                if (content) {\r\n                  fullContent += content;\r\n                  onStream(content);\r\n                }\r\n\r\n                if (parsed.usage) {\r\n                  usage = {\r\n                    promptTokens: parsed.usage.prompt_tokens,\r\n                    completionTokens: parsed.usage.completion_tokens,\r\n                    totalTokens: parsed.usage.total_tokens\r\n                  };\r\n                }\r\n              } catch (error) {\r\n                console.warn('Failed to parse LM Studio stream chunk:', error);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } finally {\r\n        reader.releaseLock();\r\n      }\r\n    }\r\n\r\n    console.log(`🔍 LM Studio hybrid analysis:`, {\r\n      hasNativeToolCalls,\r\n      nativeToolCallsCount: nativeToolCalls.length,\r\n      contentLength: fullContent.length\r\n    });\r\n\r\n    // If we detected native tool calls during streaming, validate and use them\r\n    if (hasNativeToolCalls && nativeToolCalls.length > 0) {\r\n      // Filter out incomplete tool calls and validate arguments\r\n      const validToolCalls = nativeToolCalls.filter(tc => {\r\n        // Check basic structure\r\n        if (!tc.id || !tc.function?.name || tc.function?.name.trim() === '') {\r\n          console.warn(`⚠️ Filtering out tool call with missing name:`, tc);\r\n          return false;\r\n        }\r\n\r\n        // Parse and validate arguments\r\n        let parsedArgs: Record<string, unknown> = {};\r\n        if (tc.function.arguments) {\r\n          try {\r\n            parsedArgs = JSON.parse(tc.function.arguments);\r\n          } catch {\r\n            console.warn(`⚠️ Filtering out tool call with invalid JSON arguments:`, tc);\r\n            return false;\r\n          }\r\n        }\r\n\r\n        // Check if arguments are meaningful (not just empty object)\r\n        const hasValidArgs = Object.keys(parsedArgs).length > 0;\r\n        if (!hasValidArgs) {\r\n          console.warn(`⚠️ Filtering out tool call with empty arguments:`, tc);\r\n          return false;\r\n        }\r\n\r\n        // Tool-specific validation\r\n        const toolName = tc.function.name;\r\n        if (toolName === 'web_search' && !parsedArgs.query) {\r\n          console.warn(`⚠️ Filtering out web_search without query parameter:`, tc);\r\n          return false;\r\n        }\r\n\r\n        if ((toolName === 'read_file' || toolName === 'write_file' || toolName === 'edit_file') && !parsedArgs.path) {\r\n          console.warn(`⚠️ Filtering out ${toolName} without path parameter:`, tc);\r\n          return false;\r\n        }\r\n\r\n        if (toolName === 'fetch' && !parsedArgs.url) {\r\n          console.warn(`⚠️ Filtering out fetch without url parameter:`, tc);\r\n          return false;\r\n        }\r\n\r\n        console.log(`✅ Valid tool call: ${toolName} with args:`, parsedArgs);\r\n        return true;\r\n      });\r\n\r\n      if (validToolCalls.length > 0) {\r\n        console.log(`🔧 LM Studio using native tool calling with ${validToolCalls.length} valid tool calls`);\r\n        return this.executeNativeToolCalls(validToolCalls, fullContent, usage, settings, provider, conversationHistory, onStream);\r\n      } else {\r\n        console.log(`⚠️ All ${nativeToolCalls.length} native tool calls were invalid, falling back to text parsing`);\r\n        // Reset the flag since we're not using native tool calls\r\n        hasNativeToolCalls = false;\r\n      }\r\n    }\r\n\r\n    // For text-based parsing, we now have the COMPLETE response\r\n    // Parse it only after streaming is finished\r\n    console.log(`🔍 LM Studio parsing complete response for text-based tool calls`);\r\n    console.log(`🔍 STREAMING COMPLETE - Full content length: ${fullContent.length}`);\r\n\r\n    // Safety check: Only parse if we have substantial content (not partial)\r\n    if (fullContent.length < 10) {\r\n      console.log(`⚠️ Content too short (${fullContent.length} chars), likely incomplete - skipping tool parsing`);\r\n      return {\r\n        content: fullContent,\r\n        usage: usage ? {\r\n          promptTokens: usage.promptTokens || 0,\r\n          completionTokens: usage.completionTokens || 0,\r\n          totalTokens: usage.totalTokens || 0\r\n        } : undefined,\r\n        toolCalls: []\r\n      };\r\n    }\r\n\r\n    return this.handleTextBasedToolCallingFromContent(fullContent, usage, settings, provider, conversationHistory, onStream);\r\n  }\r\n\r\n  private availableToolNames: string[] = [];\r\n\r\n  // Method to inject actual tool names from MCP service\r\n  setAvailableToolNames(toolNames: string[]): void {\r\n    this.availableToolNames = toolNames;\r\n    console.log(`🔧 LM Studio: Updated available tool names:`, toolNames);\r\n  }\r\n\r\n  private async handleTextBasedToolCallingFromContent(\r\n    fullContent: string,\r\n    usage: { promptTokens?: number; completionTokens?: number; totalTokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔍 LM Studio parsing complete response for tool calls`);\r\n\r\n    // Handle empty responses\r\n    if (!fullContent || fullContent.trim().length === 0) {\r\n      console.warn(`⚠️ LM Studio returned empty response. This might indicate:`);\r\n      console.warn(`   - Model failed to generate content`);\r\n      console.warn(`   - Network/connection issues`);\r\n      console.warn(`   - Model overloaded or timeout`);\r\n      console.warn(`   - Model not properly loaded in LM Studio`);\r\n\r\n      return {\r\n        content: \"I apologize, but I didn't receive a proper response from the LM Studio model. This could be due to the model being overloaded, not properly loaded, or a connection issue. Please check that the model is running in LM Studio and try again.\",\r\n        usage: usage ? {\r\n          promptTokens: usage.promptTokens || 0,\r\n          completionTokens: usage.completionTokens || 0,\r\n          totalTokens: usage.totalTokens || 0\r\n        } : undefined\r\n      };\r\n    }\r\n\r\n    // Remove thinking content before parsing for tool calls\r\n    console.log(`🔍 RAW CONTENT BEFORE CLEANING:`, fullContent);\r\n\r\n    // Check if content appears to contain incomplete tool calls\r\n    const hasIncompleteToolCall = fullContent.includes('to=') && !fullContent.match(/to=[a-zA-Z_][a-zA-Z0-9_-]+\\s*json\\{.*\\}/);\r\n    if (hasIncompleteToolCall) {\r\n      console.log(`⚠️ Detected incomplete tool call in content - this suggests parsing during streaming`);\r\n      console.log(`🔍 Content snippet:`, fullContent.substring(fullContent.lastIndexOf('to='), fullContent.lastIndexOf('to=') + 50));\r\n    }\r\n\r\n    const contentWithoutThinking = this.removeThinkingContent(fullContent);\r\n    console.log(`🧠 Content after removing thinking tags:`, contentWithoutThinking);\r\n\r\n    // Parse the response for tool calls (excluding thinking content)\r\n    const toolCalls = this.parseToolCallsFromText(contentWithoutThinking);\r\n\r\n    console.log(`🔍 Text parsing result: found ${toolCalls.length} tool calls:`, toolCalls);\r\n\r\n    if (toolCalls.length > 0) {\r\n      console.log(`🔧 LM Studio found ${toolCalls.length} tool calls in complete response`);\r\n      return this.executeTextBasedTools(toolCalls, fullContent, usage, settings, provider, conversationHistory, onStream);\r\n    }\r\n\r\n    // Return the original content (with thinking) for UI display\r\n    // The UI component will handle parsing and displaying thinking content\r\n    const result = {\r\n      content: fullContent, // Keep original content with thinking for UI\r\n      usage: usage ? {\r\n        promptTokens: usage.promptTokens || 0,\r\n        completionTokens: usage.completionTokens || 0,\r\n        totalTokens: usage.totalTokens || 0\r\n      } : undefined\r\n    };\r\n\r\n    console.log(`🔍 LM Studio returning result without tool calls:`, {\r\n      contentLength: result.content.length,\r\n      hasUsage: !!result.usage,\r\n      hasToolCalls: false\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  private async executeNativeToolCalls(\r\n    toolCalls: Array<{ id: string; type: string; function: { name: string; arguments: string } }>,\r\n    initialContent: string,\r\n    usage: { promptTokens?: number; completionTokens?: number; totalTokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔧 LM Studio executing ${toolCalls.length} native tool calls`);\r\n\r\n    // Execute all tool calls\r\n    const toolResults: Array<{ id: string; name: string; result: string; error?: boolean }> = [];\r\n\r\n    for (const toolCall of toolCalls) {\r\n      try {\r\n        // Safely parse arguments with fallback\r\n        let args: Record<string, unknown> = {};\r\n        if (toolCall.function.arguments) {\r\n          try {\r\n            args = JSON.parse(toolCall.function.arguments);\r\n          } catch (parseError) {\r\n            console.warn(`⚠️ Failed to parse tool arguments: ${toolCall.function.arguments}`, parseError);\r\n            // Try to extract arguments using fallback parsing\r\n            args = this.parseArgumentsFromText(toolCall.function.arguments);\r\n          }\r\n        }\r\n\r\n        console.log(`🔧 Executing LM Studio native tool: ${toolCall.function.name} with args:`, args);\r\n\r\n        const result = await this.executeMCPTool(toolCall.function.name, args);\r\n        toolResults.push({\r\n          id: toolCall.id,\r\n          name: toolCall.function.name,\r\n          result: typeof result === 'string' ? result : JSON.stringify(result),\r\n          error: false\r\n        });\r\n        console.log(`✅ LM Studio native tool ${toolCall.function.name} executed successfully`);\r\n      } catch (error) {\r\n        console.error(`❌ LM Studio native tool ${toolCall.function.name} failed:`, error);\r\n        const userFriendlyError = this.formatToolError(toolCall.function.name, error);\r\n        toolResults.push({\r\n          id: toolCall.id,\r\n          name: toolCall.function.name,\r\n          result: userFriendlyError,\r\n          error: true\r\n        });\r\n      }\r\n    }\r\n\r\n    // Build proper conversation history following official LM Studio format\r\n    const properConversationHistory = this.buildProperConversationHistory(\r\n      conversationHistory,\r\n      toolResults,\r\n      toolCalls\r\n    );\r\n\r\n    console.log(`🔄 LM Studio making native follow-up call with proper conversation format`);\r\n\r\n    // Make a follow-up call without tools (following official LM Studio pattern)\r\n    const followUpResponse = await this.makeDirectFollowUpCall(\r\n      properConversationHistory as Array<{role: string, content: string | Array<ContentItem>}>,\r\n      settings,\r\n      onStream\r\n    );\r\n\r\n    return {\r\n      content: followUpResponse.content,\r\n      usage: followUpResponse.usage,\r\n      toolCalls: toolCalls.map(tc => {\r\n        // Safely parse arguments for the return value\r\n        let parsedArgs: Record<string, unknown> = {};\r\n        if (tc.function.arguments) {\r\n          try {\r\n            parsedArgs = JSON.parse(tc.function.arguments);\r\n          } catch (parseError) {\r\n            console.warn(`⚠️ Failed to parse tool arguments for return: ${tc.function.arguments}`, parseError);\r\n            parsedArgs = this.parseArgumentsFromText(tc.function.arguments);\r\n          }\r\n        }\r\n\r\n        // Attach execution results for UI parity with text-based tools\r\n        const matched = toolResults.find(tr => tr.id === tc.id);\r\n\r\n        return {\r\n          id: tc.id,\r\n          name: tc.function.name,\r\n          arguments: parsedArgs,\r\n          result: matched ? matched.result : undefined,\r\n          error: matched ? matched.error : undefined\r\n        };\r\n      })\r\n    };\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNonStreamResponse(\r\n    response: Response,\r\n    settings: LLMSettings,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    const data = await response.json();\r\n    console.log(`🔍 LMStudio raw response:`, JSON.stringify(data, null, 2));\r\n    const message = data.choices[0].message;\r\n    console.log(`🔍 LMStudio message:`, message);\r\n\r\n    // Handle tool calls if present - execute immediately like Anthropic\r\n    if (message.tool_calls && message.tool_calls.length > 0) {\r\n      console.log(`🔧 LMStudio response contains ${message.tool_calls.length} tool calls:`, message.tool_calls);\r\n\r\n      // Check if we have the parallel execution method injected\r\n      if ((this as unknown as {executeMultipleToolsParallel?: unknown, summarizeToolResultsForModel?: unknown}).executeMultipleToolsParallel && (this as unknown as {executeMultipleToolsParallel?: unknown, summarizeToolResultsForModel?: unknown}).summarizeToolResultsForModel) {\r\n        console.log(`🚀 Executing ${message.tool_calls.length} LMStudio tools immediately`);\r\n        \r\n        // Format tool calls for execution\r\n        const toolCallsForExecution = message.tool_calls.map((toolCall: { id: string; function: { name: string; arguments: string } }) => {\r\n          // Safely parse arguments\r\n          let parsedArgs: Record<string, unknown> = {};\r\n          if (toolCall.function.arguments) {\r\n            try {\r\n              parsedArgs = JSON.parse(toolCall.function.arguments);\r\n            } catch (parseError) {\r\n              console.warn(`⚠️ Failed to parse tool arguments in non-stream: ${toolCall.function.arguments}`, parseError);\r\n              parsedArgs = this.parseArgumentsFromText(toolCall.function.arguments);\r\n            }\r\n          }\r\n\r\n          return {\r\n            id: toolCall.id,\r\n            name: toolCall.function.name,\r\n            arguments: parsedArgs\r\n          };\r\n        });\r\n\r\n        // Execute tools in parallel immediately\r\n        const executeMultipleToolsParallel = (this as unknown as {executeMultipleToolsParallel: unknown}).executeMultipleToolsParallel;\r\n        const summarizeToolResultsForModel = (this as unknown as {summarizeToolResultsForModel: unknown}).summarizeToolResultsForModel;\r\n        \r\n        try {\r\n          const parallelResults = await (executeMultipleToolsParallel as (calls: unknown[], provider: string) => Promise<Array<{success: boolean}>>)(toolCallsForExecution, 'lmstudio');\r\n          console.log(`✅ LMStudio tool execution completed: ${parallelResults.filter(r => r.success).length}/${parallelResults.length} successful`);\r\n\r\n          // Get tool results summary for the model\r\n          const toolSummary = (summarizeToolResultsForModel as (results: unknown[]) => string)(parallelResults);\r\n          \r\n          // Return response with tool results included\r\n          return {\r\n            content: (message.content || '') + '\\n\\n' + toolSummary,\r\n            usage: data.usage ? {\r\n              promptTokens: data.usage.prompt_tokens,\r\n              completionTokens: data.usage.completion_tokens,\r\n              totalTokens: data.usage.total_tokens\r\n            } : undefined\r\n          };\r\n        } catch (error) {\r\n          console.error(`❌ LMStudio tool execution failed:`, error);\r\n          // Fall back to returning tool calls for external handling\r\n          return {\r\n            content: message.content || '',\r\n            usage: data.usage ? {\r\n              promptTokens: data.usage.prompt_tokens,\r\n              completionTokens: data.usage.completion_tokens,\r\n              totalTokens: data.usage.total_tokens\r\n            } : undefined,\r\n            toolCalls: toolCallsForExecution\r\n          };\r\n        }\r\n      } else {\r\n        console.warn(`⚠️ LMStudio provider missing tool execution methods - falling back to external handling`);\r\n        // Fall back to external handling if methods not injected\r\n        return {\r\n          content: message.content || '',\r\n          usage: data.usage ? {\r\n            promptTokens: data.usage.prompt_tokens,\r\n            completionTokens: data.usage.completion_tokens,\r\n            totalTokens: data.usage.total_tokens\r\n          } : undefined,\r\n          toolCalls: message.tool_calls.map((tc: { id: string; function: { name: string; arguments: string } }) => {\r\n            // Safely parse arguments\r\n            let parsedArgs: Record<string, unknown> = {};\r\n            if (tc.function.arguments) {\r\n              try {\r\n                parsedArgs = JSON.parse(tc.function.arguments);\r\n              } catch (parseError) {\r\n                console.warn(`⚠️ Failed to parse tool arguments in non-stream: ${tc.function.arguments}`, parseError);\r\n                parsedArgs = this.parseArgumentsFromText(tc.function.arguments);\r\n              }\r\n            }\r\n\r\n            return {\r\n              id: tc.id,\r\n              name: tc.function.name,\r\n              arguments: parsedArgs\r\n            };\r\n          })\r\n        };\r\n      }\r\n    }\r\n\r\n    // Use text-based tool calling for non-stream responses too\r\n    const content = message.content || '';\r\n    const toolCalls = this.parseToolCallsFromText(content);\r\n\r\n    if (toolCalls.length > 0) {\r\n      console.log(`🔧 LM Studio found ${toolCalls.length} tool calls in non-stream response`);\r\n      // For non-stream, we can't use onStream, so pass a no-op function\r\n      return this.executeTextBasedTools(toolCalls, content, data.usage ? {\r\n        promptTokens: data.usage.prompt_tokens,\r\n        completionTokens: data.usage.completion_tokens,\r\n        totalTokens: data.usage.total_tokens\r\n      } : undefined, settings, { id: 'lmstudio', name: 'LM Studio' } as LLMProvider, conversationHistory, () => {});\r\n    }\r\n\r\n    return {\r\n      content: content,\r\n      usage: data.usage ? {\r\n        promptTokens: data.usage.prompt_tokens,\r\n        completionTokens: data.usage.completion_tokens,\r\n        totalTokens: data.usage.total_tokens\r\n      } : undefined\r\n    };\r\n  }\r\n\r\n  private parseToolCallsFromText(content: string): Array<{ name: string; arguments: Record<string, unknown> }> {\r\n    console.log(`🚨 PARSETEXT METHOD CALLED WITH CONTENT: \"${content}\"`);\r\n    const toolCalls: Array<{ name: string; arguments: Record<string, unknown> }> = [];\r\n\r\n    // Get available tool names from MCP tools\r\n    const availableTools = this.getAvailableToolNames();\r\n\r\n    console.log(`🔍 LM Studio parsing text for tools. Available tools:`, availableTools);\r\n    console.log(`🔍 Content to parse:`, content);\r\n\r\n    // DEBUG: Test if content matches our expected pattern\r\n    const testRegex = /to=([a-zA-Z_][a-zA-Z0-9_-]*)\\s*json/gi;\r\n    const testMatch = testRegex.exec(content);\r\n    console.log(`🔍 DEBUG: Simple regex test result:`, testMatch);\r\n\r\n    // STEP 1: Look for structured tool call formats first\r\n\r\n    // Pattern 0: Fenced tool/function_call blocks (Harmony-style variations)\r\n    // ```tool {\"name\":\"web_search\",\"arguments\":{\"query\":\"...\"}} ```\r\n    // ```function_call {\"name\":\"...\",\"arguments\":{...}} ```\r\n    // Also accept multiple JSON objects inside a single fenced block\r\n    try {\r\n      const fencedRegex = /```\\s*(tool|tool_call|call|function_call)[^\\n]*\\n([\\s\\S]*?)```/gi;\r\n      let fencedMatch: RegExpExecArray | null;\r\n      while ((fencedMatch = fencedRegex.exec(content)) !== null) {\r\n        const block = fencedMatch[2].trim();\r\n        // Try to parse the block directly as JSON or detect multiple JSON objects\r\n        // 1) Direct JSON object\r\n        const tryParseSingle = (jsonStr: string) => {\r\n          try {\r\n            const obj = JSON.parse(jsonStr);\r\n            if (obj.tool_call && obj.tool_call.name) {\r\n              const tName = obj.tool_call.name;\r\n              const tArgsRaw = obj.tool_call.arguments;\r\n              const tArgs = typeof tArgsRaw === 'string' ? (JSON.parse(tArgsRaw) as Record<string, unknown>) : (tArgsRaw || {});\r\n              if (availableTools.includes(tName)) {\r\n                toolCalls.push({ name: tName, arguments: tArgs });\r\n              }\r\n              return true;\r\n            } else if (obj.name && obj.arguments) {\r\n              const tName = obj.name;\r\n              const tArgsRaw = obj.arguments;\r\n              const tArgs = typeof tArgsRaw === 'string' ? (JSON.parse(tArgsRaw) as Record<string, unknown>) : (tArgsRaw || {});\r\n              if (availableTools.includes(tName)) {\r\n                toolCalls.push({ name: tName, arguments: tArgs });\r\n              }\r\n              return true;\r\n            } else if (Array.isArray(obj)) {\r\n              // Array of tool calls\r\n              for (const item of obj) {\r\n                const tName = item?.tool_call?.name || item?.name;\r\n                const tArgsRaw = item?.tool_call?.arguments ?? item?.arguments ?? {};\r\n                const tArgs = typeof tArgsRaw === 'string' ? (JSON.parse(tArgsRaw) as Record<string, unknown>) : (tArgsRaw || {});\r\n                if (tName && availableTools.includes(tName)) {\r\n                  toolCalls.push({ name: tName, arguments: tArgs });\r\n                }\r\n              }\r\n              return true;\r\n            }\r\n          } catch {\r\n            // ignore\r\n          }\r\n          return false;\r\n        };\r\n\r\n        if (!tryParseSingle(block)) {\r\n          // 2) Scan the fenced block for multiple JSON tool_call objects\r\n          const toolCallPattern = /\\{\\s*\"tool_call\"\\s*:\\s*\\{/gi;\r\n          let dm: RegExpExecArray | null;\r\n          while ((dm = toolCallPattern.exec(block)) !== null) {\r\n            const start = dm.index;\r\n            const extracted = JSONUtils.extractCompleteJSON(block, start);\r\n            if (extracted) {\r\n              try {\r\n                const parsed = JSON.parse(extracted.jsonStr);\r\n                if (parsed.tool_call?.name) {\r\n                  const tName = parsed.tool_call.name;\r\n                  const tArgsRaw = parsed.tool_call.arguments ?? {};\r\n                  const tArgs = typeof tArgsRaw === 'string' ? (JSON.parse(tArgsRaw) as Record<string, unknown>) : tArgsRaw;\r\n                  if (availableTools.includes(tName)) {\r\n                    toolCalls.push({ name: tName, arguments: tArgs });\r\n                  }\r\n                }\r\n              } catch {\r\n                // ignore individual failures\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log('⚠️ Fenced tool block parsing failed:', e);\r\n    }\r\n\r\n    if (toolCalls.length > 0) {\r\n      const unique = this.deduplicateToolCalls(toolCalls);\r\n      console.log(`✅ Found ${unique.length} fenced tool calls`);\r\n      return unique;\r\n    }\r\n\r\n    // Pattern 1: New model format with optional commentary prefix and to=tool_name and JSON arguments\r\n    // Example: \"commentary to=web_search json{\"query\":\"dad joke\", \"topn\":5}\" or \"to=list_directoryjson{...}\"\r\n    // Updated to handle nested JSON, multiple tool calls, hyphens, function namespace prefixes, and optional space before json\r\n    // Made more robust to handle underscores and longer tool names\r\n    const newModelFormatRegex = /(?:commentary\\s+)?to=(?:functions\\.)?([a-zA-Z_][a-zA-Z0-9_-]+)\\s*json(\\{(?:[^{}]|{[^{}]*})*\\})/gi;\r\n\r\n    // Pattern 1b: Nested function call format - to=functions json{\"name\":\"tool_name\",\"arguments\":{...}}\r\n    // CHECK THIS FIRST before the general pattern to avoid conflicts\r\n    const nestedFunctionFormatRegex = /(?:commentary\\s+)?to=functions\\s*json\\{[^}]*\"name\"\\s*:\\s*\"([^\"]+)\"[^}]*\"arguments\"\\s*:\\s*(\\{[^}]*\\})[^}]*\\}/gi;\r\n\r\n    // Handle nested function format FIRST\r\n    console.log(`🔍 Testing nested format regex against content: \"${content}\"`);\r\n    console.log(`🔍 Nested format regex: ${nestedFunctionFormatRegex}`);\r\n\r\n    let nestedMatch;\r\n    while ((nestedMatch = nestedFunctionFormatRegex.exec(content)) !== null) {\r\n      try {\r\n        const rawToolName = nestedMatch[1];\r\n        const jsonArgs = nestedMatch[2];\r\n\r\n        // Only parse tools that actually exist - no guessing or mapping\r\n        if (availableTools.includes(rawToolName)) {\r\n          try {\r\n            const args = JSON.parse(jsonArgs);\r\n            toolCalls.push({ name: rawToolName, arguments: args });\r\n            console.log(`✅ Found valid nested function tool call: ${rawToolName} with args:`, args);\r\n          } catch (error) {\r\n            console.log(`⚠️ Failed to parse JSON arguments for nested ${rawToolName}:`, jsonArgs, error);\r\n          }\r\n        } else {\r\n          console.log(`⚠️ Nested function tool \"${rawToolName}\" not found. Available tools:`, availableTools.slice(0, 10), '...');\r\n          // Return an error response that the LLM can see and correct\r\n          return [{\r\n            name: 'error_response',\r\n            arguments: {\r\n              error: `Tool \"${rawToolName}\" does not exist. Available tools include: ${availableTools.slice(0, 10).join(', ')}, and ${availableTools.length - 10} more. Please use an exact tool name from the available list.`\r\n            }\r\n          }];\r\n        }\r\n      } catch (error) {\r\n        console.log(`⚠️ Failed to parse nested function format tool call:`, nestedMatch[0], error);\r\n      }\r\n    }\r\n\r\n    // If we found nested function calls, deduplicate and return them\r\n    if (toolCalls.length > 0) {\r\n      const uniqueToolCalls = this.deduplicateToolCalls(toolCalls);\r\n      console.log(`✅ Found ${toolCalls.length} nested function format tool calls, deduplicated to ${uniqueToolCalls.length}`);\r\n      return uniqueToolCalls;\r\n    }\r\n\r\n    let newModelMatch;\r\n    console.log(`🔍 Testing regular format regex against content: \"${content}\"`);\r\n    console.log(`🔍 Regular format regex: ${newModelFormatRegex}`);\r\n\r\n    while ((newModelMatch = newModelFormatRegex.exec(content)) !== null) {\r\n      try {\r\n        console.log(`🔍 Regular format match found:`, newModelMatch);\r\n        const rawToolName = newModelMatch[1];\r\n        const jsonArgs = newModelMatch[2];\r\n        console.log(`🔍 Extracted tool name: \"${rawToolName}\", args: \"${jsonArgs}\"`);\r\n        console.log(`🔍 Full regex match:`, newModelMatch);\r\n        console.log(`🔍 Available tools containing \"${rawToolName}\":`, availableTools.filter(t => t.includes(rawToolName)));\r\n\r\n        // Only parse tools that actually exist - no guessing or mapping\r\n        if (availableTools.includes(rawToolName)) {\r\n          try {\r\n            // Handle malformed empty JSON like {\"\":\"\"}\r\n            let cleanJsonArgs = jsonArgs;\r\n            if (jsonArgs === '{\"\":\"\"}' || jsonArgs === '{\"\": \"\"}') {\r\n              cleanJsonArgs = '{}';\r\n              console.log(`🔧 Fixed malformed empty JSON: ${jsonArgs} -> ${cleanJsonArgs}`);\r\n            }\r\n\r\n            const args = JSON.parse(cleanJsonArgs);\r\n            toolCalls.push({ name: rawToolName, arguments: args });\r\n            console.log(`✅ Found valid tool call: ${rawToolName} with args:`, args);\r\n          } catch (error) {\r\n            console.log(`⚠️ Failed to parse JSON arguments for ${rawToolName}:`, jsonArgs, error);\r\n          }\r\n        } else {\r\n          console.log(`⚠️ Tool \"${rawToolName}\" not found. Available tools:`, availableTools.slice(0, 10), '...');\r\n          // Return an error response that the LLM can see and correct\r\n          return [{\r\n            name: 'error_response',\r\n            arguments: {\r\n              error: `Tool \"${rawToolName}\" does not exist. Available tools include: ${availableTools.slice(0, 10).join(', ')}, and ${availableTools.length - 10} more. Please use an exact tool name from the available list.`\r\n            }\r\n          }];\r\n        }\r\n      } catch (error) {\r\n        console.log(`⚠️ Failed to parse new model format tool call:`, newModelMatch[0], error);\r\n      }\r\n    }\r\n\r\n    // If we found any new model format tool calls, deduplicate and return them\r\n    if (toolCalls.length > 0) {\r\n      const uniqueToolCalls = this.deduplicateToolCalls(toolCalls);\r\n      console.log(`✅ Found ${toolCalls.length} new model format tool calls, deduplicated to ${uniqueToolCalls.length}`);\r\n      return uniqueToolCalls;\r\n    }\r\n\r\n    // Pattern 2: Enhanced tool_call format with ```json wrapper (Option 2)\r\n    // ```json { \"tool_call\": { \"name\": \"web_search\", \"arguments\": {...} } } ```\r\n    const jsonWrappedToolCallRegex = /```json\\s*(\\{[\\s\\S]*?\"tool_call\"[\\s\\S]*?\\})\\s*```/gi;\r\n    const match = jsonWrappedToolCallRegex.exec(content);\r\n    if (match) {\r\n      try {\r\n        const jsonObj = JSON.parse(match[1]);\r\n        if (Array.isArray(jsonObj)) {\r\n          for (const item of jsonObj) {\r\n            const tName = item?.tool_call?.name || item?.name;\r\n            if (!tName) continue;\r\n            const tArgsRaw = item?.tool_call?.arguments ?? item?.arguments ?? {};\r\n            const tArgs = typeof tArgsRaw === 'string' ? (JSON.parse(tArgsRaw) as Record<string, unknown>) : tArgsRaw;\r\n            if (availableTools.includes(tName)) {\r\n              toolCalls.push({ name: tName, arguments: tArgs });\r\n            }\r\n          }\r\n          if (toolCalls.length > 0) {\r\n            const unique = this.deduplicateToolCalls(toolCalls);\r\n            console.log(`✅ Found ${unique.length} JSON-wrapped array tool calls`);\r\n            return unique;\r\n          }\r\n        } else if (jsonObj.tool_call && jsonObj.tool_call.name) {\r\n          const tName = jsonObj.tool_call.name;\r\n          const tArgsRaw = jsonObj.tool_call.arguments ?? {};\r\n          const tArgs = typeof tArgsRaw === 'string' ? (JSON.parse(tArgsRaw) as Record<string, unknown>) : tArgsRaw;\r\n          toolCalls.push({ name: tName, arguments: tArgs });\r\n          console.log(`✅ Found JSON-wrapped tool call: ${tName} with args:`, tArgs);\r\n          return toolCalls; // Return early if we found the structured format\r\n        }\r\n      } catch {\r\n        console.log(`⚠️ Failed to parse JSON-wrapped tool call:`, match[1]);\r\n      }\r\n    }\r\n\r\n    // Pattern 3: Direct JSON tool_call format (Option 1)\r\n    // { \"tool_call\": { \"name\": \"web_search\", \"arguments\": {...} } }\r\n    // Robust iterative scan for direct tool_call objects, including multiple occurrences\r\n    const toolCallPattern = /\\{\\s*\"tool_call\"\\s*:\\s*\\{/gi;\r\n    let directMatch: RegExpExecArray | null;\r\n    while ((directMatch = toolCallPattern.exec(content)) !== null) {\r\n      try {\r\n        const startIndex = directMatch.index;\r\n        const extracted = JSONUtils.extractCompleteJSON(content, startIndex);\r\n        if (extracted) {\r\n          const parsed = JSON.parse(extracted.jsonStr);\r\n          if (parsed.tool_call?.name) {\r\n            const tName = parsed.tool_call.name;\r\n            const tArgsRaw = parsed.tool_call.arguments ?? {};\r\n            const tArgs = typeof tArgsRaw === 'string' ? (JSON.parse(tArgsRaw) as Record<string, unknown>) : tArgsRaw;\r\n            toolCalls.push({ name: tName, arguments: tArgs });\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.log(`⚠️ Failed to parse direct tool_call JSON:`, e);\r\n      }\r\n    }\r\n    if (toolCalls.length > 0) {\r\n      const unique = this.deduplicateToolCalls(toolCalls);\r\n      console.log(`✅ Found ${unique.length} direct tool_call objects`);\r\n      return unique;\r\n    }\r\n\r\n    // Pattern 4: Look for any JSON blocks and check if they contain tool calls\r\n    const jsonBlockRegex = /```json\\s*([\\s\\S]*?)\\s*```/gi;\r\n    let jsonMatch;\r\n    while ((jsonMatch = jsonBlockRegex.exec(content)) !== null) {\r\n      try {\r\n        const jsonText = jsonMatch[1].trim();\r\n        const jsonObj = JSON.parse(jsonText);\r\n        if (Array.isArray(jsonObj)) {\r\n          for (const item of jsonObj) {\r\n            const tName = item?.tool_call?.name || item?.name;\r\n            if (!tName) continue;\r\n            const tArgsRaw = item?.tool_call?.arguments ?? item?.arguments ?? {};\r\n            const tArgs = typeof tArgsRaw === 'string' ? (JSON.parse(tArgsRaw) as Record<string, unknown>) : tArgsRaw;\r\n            if (availableTools.includes(tName)) {\r\n              toolCalls.push({ name: tName, arguments: tArgs });\r\n            }\r\n          }\r\n        } else if (jsonObj.tool_call && jsonObj.tool_call.name) {\r\n          const tName = jsonObj.tool_call.name;\r\n          const tArgsRaw = jsonObj.tool_call.arguments ?? {};\r\n          const tArgs = typeof tArgsRaw === 'string' ? (JSON.parse(tArgsRaw) as Record<string, unknown>) : tArgsRaw;\r\n          toolCalls.push({\r\n            name: tName,\r\n            arguments: tArgs\r\n          });\r\n          console.log(`✅ Found JSON block tool call: ${tName} with args:`, tArgs);\r\n        }\r\n      } catch {\r\n        console.log(`⚠️ Failed to parse JSON block:`, jsonMatch[1]);\r\n      }\r\n    }\r\n\r\n    // If we found structured tool calls, return them\r\n    if (toolCalls.length > 0) {\r\n      console.log(`✅ Found ${toolCalls.length} structured tool calls, returning them`);\r\n      return toolCalls;\r\n    }\r\n\r\n    // STEP 2: If no structured tool calls found, search for traces of tool usage in text\r\n    console.log(`🔍 No structured tool calls found, searching for tool usage traces in text...`);\r\n\r\n    return this.parseToolTracesFromText(content, availableTools);\r\n  }\r\n\r\n  private parseToolTracesFromText(content: string, availableTools: string[]): Array<{ name: string; arguments: Record<string, unknown> }> {\r\n    const toolCalls: Array<{ name: string; arguments: Record<string, unknown> }> = [];\r\n\r\n    console.log(`🔍 Searching for tool usage traces in content...`);\r\n\r\n    for (const toolName of availableTools) {\r\n      // Pattern 1: Direct tool mentions with intent to use\r\n      // \"I'll use web_search to find...\" or \"Let me search using web_search\"\r\n      const intentPatterns = [\r\n        new RegExp(`I(?:'ll|\\\\s+will)\\\\s+use\\\\s+${toolName}\\\\s+(?:to\\\\s+|with\\\\s+|for\\\\s+)([^.!?]+)`, 'gi'),\r\n        new RegExp(`Let\\\\s+me\\\\s+(?:use\\\\s+)?${toolName}\\\\s+(?:to\\\\s+|with\\\\s+|for\\\\s+)([^.!?]+)`, 'gi'),\r\n        new RegExp(`Using\\\\s+${toolName}\\\\s+(?:to\\\\s+|with\\\\s+|for\\\\s+)([^.!?]+)`, 'gi'),\r\n        new RegExp(`I\\\\s+(?:need\\\\s+to\\\\s+|should\\\\s+)?${toolName}\\\\s+(?:to\\\\s+|with\\\\s+|for\\\\s+)([^.!?]+)`, 'gi'),\r\n        new RegExp(`I\\\\s+should\\\\s+use\\\\s+${toolName}\\\\s+(?:to\\\\s+|with\\\\s+|for\\\\s+)([^.!?]+)`, 'gi'),\r\n        new RegExp(`(?:So,?\\\\s+)?I'll\\\\s+call\\\\s+${toolName}\\\\s+(?:with\\\\s+|to\\\\s+|for\\\\s+)([^.!?]+)`, 'gi'),\r\n        new RegExp(`The\\\\s+best\\\\s+approach\\\\s+is\\\\s+to\\\\s+use\\\\s+${toolName}\\\\s+(?:with\\\\s+|to\\\\s+|for\\\\s+)([^.!?]+)`, 'gi')\r\n      ];\r\n\r\n      for (const pattern of intentPatterns) {\r\n        const match = pattern.exec(content);\r\n        if (match) {\r\n          const intent = match[1].trim();\r\n          const args = this.extractArgumentsFromIntent(toolName, intent);\r\n          if (Object.keys(args).length > 0) {\r\n            toolCalls.push({ name: toolName, arguments: args });\r\n            console.log(`✅ Found tool usage intent: ${toolName} with intent \"${intent}\" -> args:`, args);\r\n            break; // Found this tool, move to next\r\n          }\r\n        }\r\n      }\r\n\r\n      // Pattern 2: Function call style mentions\r\n      // \"web_search('weather Paris')\" or \"web_search(query='weather Paris')\"\r\n      const functionCallPattern = new RegExp(`${toolName}\\\\s*\\\\(([^)]+)\\\\)`, 'gi');\r\n      const funcMatch = functionCallPattern.exec(content);\r\n      if (funcMatch && !toolCalls.find(tc => tc.name === toolName)) {\r\n        const argsText = funcMatch[1].trim();\r\n        const args = this.parseArgumentsFromText(argsText);\r\n        if (Object.keys(args).length > 0) {\r\n          toolCalls.push({ name: toolName, arguments: args });\r\n          console.log(`✅ Found function call: ${toolName}(${argsText}) -> args:`, args);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Pattern 3: Tool name mentioned with quoted parameters\r\n      // \"web_search with query 'weather Paris'\" or 'web_search \"current weather\"'\r\n      const quotedParamsPattern = new RegExp(`${toolName}\\\\s+(?:with\\\\s+|using\\\\s+)?(?:query\\\\s+)?['\"]([^'\"]+)['\"]`, 'gi');\r\n      const quotedMatch = quotedParamsPattern.exec(content);\r\n      if (quotedMatch && !toolCalls.find(tc => tc.name === toolName)) {\r\n        const query = quotedMatch[1].trim();\r\n        const args = this.createArgumentsForTool(toolName, query);\r\n        if (Object.keys(args).length > 0) {\r\n          toolCalls.push({ name: toolName, arguments: args });\r\n          console.log(`✅ Found quoted params: ${toolName} with \"${query}\" -> args:`, args);\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(`🔍 Tool trace parsing found ${toolCalls.length} tool calls:`, toolCalls);\r\n    return toolCalls;\r\n  }\r\n\r\n  private extractArgumentsFromIntent(toolName: string, intent: string): Record<string, unknown> {\r\n    // Extract meaningful arguments from natural language intent\r\n    const args: Record<string, unknown> = {};\r\n\r\n    // Common patterns for different tools\r\n    if (toolName === 'web_search' || toolName === 'search') {\r\n      // Extract search query from intent\r\n      const searchPatterns = [\r\n        /(?:search\\s+for\\s+|find\\s+|look\\s+up\\s+|get\\s+)(.+)/i,\r\n        /(.+?)(?:\\s+information|\\s+details|\\s+data)?$/i\r\n      ];\r\n\r\n      for (const pattern of searchPatterns) {\r\n        const match = pattern.exec(intent);\r\n        if (match) {\r\n          args.query = match[1].trim();\r\n          break;\r\n        }\r\n      }\r\n    } else if (toolName === 'read_file') {\r\n      // Extract file path from intent\r\n      const filePatterns = [\r\n        /(?:read\\s+|open\\s+|check\\s+)(?:the\\s+file\\s+)?['\"]?([^'\"]+)['\"]?/i,\r\n        /file\\s+['\"]?([^'\"]+)['\"]?/i\r\n      ];\r\n\r\n      for (const pattern of filePatterns) {\r\n        const match = pattern.exec(intent);\r\n        if (match) {\r\n          args.path = match[1].trim();\r\n          break;\r\n        }\r\n      }\r\n    } else if (toolName === 'write_file') {\r\n      // Extract file path and content hints\r\n      const writePatterns = [\r\n        /(?:write\\s+to\\s+|save\\s+to\\s+|create\\s+)(?:file\\s+)?['\"]?([^'\"]+)['\"]?/i\r\n      ];\r\n\r\n      for (const pattern of writePatterns) {\r\n        const match = pattern.exec(intent);\r\n        if (match) {\r\n          args.path = match[1].trim();\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // If no specific patterns matched, use the intent as a general query/input\r\n    if (Object.keys(args).length === 0 && intent.length > 0) {\r\n      // Use common parameter names based on tool\r\n      if (toolName.includes('search')) {\r\n        args.query = intent;\r\n      } else if (toolName.includes('file') || toolName.includes('read')) {\r\n        args.path = intent;\r\n      } else {\r\n        args.input = intent;\r\n      }\r\n    }\r\n\r\n    return args;\r\n  }\r\n\r\n  private createArgumentsForTool(toolName: string, value: string): Record<string, unknown> {\r\n    const args: Record<string, unknown> = {};\r\n\r\n    // Map tool names to their expected parameter names\r\n    if (toolName === 'web_search' || toolName === 'search') {\r\n      args.query = value;\r\n    } else if (toolName === 'read_file' || toolName === 'write_file' || toolName === 'edit_file') {\r\n      args.path = value;\r\n    } else if (toolName === 'fetch' || toolName === 'fetch_content') {\r\n      args.url = value;\r\n    } else {\r\n      // Default to common parameter names\r\n      args.query = value;\r\n    }\r\n\r\n    return args;\r\n  }\r\n\r\n  private parseArgumentsFromText(argsText: string): Record<string, unknown> {\r\n    try {\r\n      // Try to parse as JSON first\r\n      return JSON.parse(argsText);\r\n    } catch {\r\n      console.log(`⚠️ JSON parsing failed for: ${argsText}, trying fallback parsing`);\r\n\r\n      // If JSON parsing fails, try to extract key-value pairs\r\n      const args: Record<string, unknown> = {};\r\n\r\n      // Enhanced regex patterns for different value types\r\n      const patterns = [\r\n        // String values with quotes\r\n        /[\"']?(\\w+)[\"']?\\s*[:=]\\s*[\"']([^\"']+)[\"']/g,\r\n        // Number values\r\n        /[\"']?(\\w+)[\"']?\\s*[:=]\\s*(\\d+(?:\\.\\d+)?)/g,\r\n        // Boolean values\r\n        /[\"']?(\\w+)[\"']?\\s*[:=]\\s*(true|false)/g,\r\n        // Array values (simplified)\r\n        /[\"']?(\\w+)[\"']?\\s*[:=]\\s*\\[([^\\]]+)\\]/g,\r\n        // General fallback\r\n        /[\"']?(\\w+)[\"']?\\s*[:=]\\s*([^,}\\]]+)/g\r\n      ];\r\n\r\n      for (const pattern of patterns) {\r\n        let match;\r\n        while ((match = pattern.exec(argsText)) !== null) {\r\n          const key = match[1];\r\n          let value: unknown = match[2];\r\n\r\n          // Skip if we already have this key\r\n          if (args[key] !== undefined) continue;\r\n\r\n          // Type conversion\r\n          if (value === 'true') value = true;\r\n          else if (value === 'false') value = false;\r\n          else if (typeof value === 'string' && !isNaN(Number(value))) value = Number(value);\r\n          else if (typeof value === 'string' && value.includes(',')) {\r\n            // Try to parse as array\r\n            value = value.split(',').map(v => v.trim().replace(/['\"]/g, ''));\r\n          }\r\n\r\n          args[key] = value;\r\n        }\r\n      }\r\n\r\n      if (Object.keys(args).length === 0) {\r\n        // Last resort: attempt to salvage from malformed JSON\r\n        const recovered = JSONUtils.extractArgumentsFromMalformedJson(argsText);\r\n        if (Object.keys(recovered).length > 0) {\r\n          console.log(`✅ Recovered arguments from malformed JSON:`, recovered);\r\n          return recovered;\r\n        }\r\n      }\r\n\r\n      console.log(`✅ Fallback parsing extracted:`, args);\r\n      return args;\r\n    }\r\n  }\r\n\r\n  private getAvailableToolNames(): string[] {\r\n    // Return injected tool names if available, otherwise fallback to common ones\r\n    if (this.availableToolNames.length > 0) {\r\n      return this.availableToolNames;\r\n    }\r\n\r\n    // Fallback to common tool names\r\n    return [\r\n      'web_search', 'search', 'google_search',\r\n      'get_weather', 'weather', 'weather_search',\r\n      'calculator', 'calculate', 'math',\r\n      'file_read', 'read_file', 'get_file',\r\n      'file_write', 'write_file', 'save_file',\r\n      'get_datetime', 'current_time', 'date_time'\r\n    ];\r\n  }\r\n\r\n  private async executeTextBasedTools(\r\n    toolCalls: Array<{ name: string; arguments: Record<string, unknown> }>,\r\n    originalContent: string,\r\n    usage: { promptTokens?: number; completionTokens?: number; totalTokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔧 LM Studio executing ${toolCalls.length} text-based tool calls`);\r\n\r\n    // STEP 1: Show tool execution start but CONTINUE streaming thinking content\r\n    console.log(`🔧 LM Studio: Starting tool execution while preserving thinking stream`);\r\n\r\n    // Show tool execution start\r\n    const toolExecutionHeader = `\\n\\n<tool_execution>\\n🔧 **Tool Execution Started**\\n\\nExecuting ${toolCalls.length} tool${toolCalls.length !== 1 ? 's' : ''}:\\n${toolCalls.map(tc => `- ${tc.name}`).join('\\n')}\\n</tool_execution>\\n\\n`;\r\n    onStream(toolExecutionHeader);\r\n\r\n    // Execute all tool calls\r\n    const toolResults: Array<{ name: string; result: string; error?: boolean }> = [];\r\n\r\n    // STEP 2: Execute ALL tools to completion WITHOUT streaming\r\n    console.log(`🔧 LM Studio: Executing ${toolCalls.length} tools to completion...`);\r\n\r\n    for (const toolCall of toolCalls) {\r\n      try {\r\n        // Handle error responses from tool parsing\r\n        if (toolCall.name === 'error_response') {\r\n          const errVal = (toolCall.arguments as Record<string, unknown>)?.error;\r\n          console.log(`⚠️ Tool parsing error:`, errVal);\r\n          const errStr = typeof errVal === 'string' ? errVal : JSON.stringify(errVal ?? 'Tool parsing error');\r\n          toolResults.push({\r\n            name: 'error_response',\r\n            result: errStr,\r\n            error: true\r\n          });\r\n          continue;\r\n        }\r\n\r\n        console.log(`🔧 Executing LM Studio tool: ${toolCall.name} with args:`, toolCall.arguments);\r\n\r\n        const result = await this.executeMCPTool(toolCall.name, toolCall.arguments);\r\n        const resultString = typeof result === 'string' ? result : JSON.stringify(result);\r\n\r\n        console.log(`🔍 DEBUG: Tool ${toolCall.name} returned result:`, resultString.substring(0, 200) + '...');\r\n\r\n        toolResults.push({\r\n          name: toolCall.name,\r\n          result: resultString,\r\n          error: false\r\n        });\r\n\r\n        console.log(`✅ LM Studio tool ${toolCall.name} executed successfully`);\r\n      } catch (error) {\r\n        console.error(`❌ LM Studio tool ${toolCall.name} failed:`, error);\r\n        const userFriendlyError = this.formatToolError(toolCall.name, error);\r\n\r\n        toolResults.push({\r\n          name: toolCall.name,\r\n          result: userFriendlyError,\r\n          error: true\r\n        });\r\n      }\r\n    }\r\n\r\n    // STEP 3: Show tool execution completion and prepare for fresh LLM call\r\n    const successCount = toolResults.filter(tr => !tr.error).length;\r\n    const failureCount = toolResults.filter(tr => tr.error).length;\r\n\r\n    console.log(`🏁 LM Studio: Tool execution complete - ${successCount} successful, ${failureCount} failed`);\r\n\r\n    // Show completion in UI\r\n    const completionMessage = `<tool_execution>\\n🏁 **Tool Execution Complete**\\n\\n✅ ${successCount} successful, ❌ ${failureCount} failed\\n\\nStarting fresh LLM call with results...\\n</tool_execution>\\n\\n`;\r\n    onStream(completionMessage);\r\n\r\n    // For text-based tools, create a simulated proper conversation history\r\n    // Since text-based tools don't have structured IDs, we'll create them\r\n    const simulatedToolCalls = toolCalls.map((tc, index) => ({\r\n      id: `text_tool_${index}`,\r\n      type: 'function',\r\n      function: {\r\n        name: tc.name,\r\n        arguments: JSON.stringify(tc.arguments)\r\n      }\r\n    }));\r\n\r\n    const simulatedToolResults = toolResults.map((tr, index) => ({\r\n      id: `text_tool_${index}`,\r\n      name: tr.name,\r\n      result: tr.result,\r\n      error: tr.error\r\n    }));\r\n\r\n    // Build proper conversation history for text-based tools\r\n    const properConversationHistory = this.buildProperConversationHistory(\r\n      conversationHistory,\r\n      simulatedToolResults,\r\n      simulatedToolCalls\r\n    );\r\n\r\n    // STEP 4: Make completely fresh LLM call with clean conversation history\r\n    console.log(`🔄 LM Studio: Starting FRESH LLM call with tool results (no prompt contamination)`);\r\n    console.log(`🧹 LM Studio: Clean conversation history prepared with ${properConversationHistory.length} messages`);\r\n\r\n    // Make a follow-up call without tools (following official LM Studio pattern)\r\n    const followUpResponse = await this.makeDirectFollowUpCall(\r\n      properConversationHistory as Array<{role: string, content: string | Array<ContentItem>}>,\r\n      settings,\r\n      onStream\r\n    );\r\n\r\n    // According to LM Studio docs, we should return ONLY the final assistant response\r\n    // Tool execution details are handled by the UI separately via toolCalls\r\n    console.log(`🎯 LM Studio: Final response (clean):`, followUpResponse.content);\r\n\r\n    return {\r\n      content: followUpResponse.content || '',\r\n      usage: followUpResponse.usage,\r\n      toolCalls: toolResults.map((tr, index) => ({\r\n        id: `text_tool_${index}`,\r\n        name: tr.name,\r\n        arguments: toolCalls.find(tc => tc.name === tr.name)?.arguments || {},\r\n        result: tr.result,\r\n        error: tr.error\r\n      }))\r\n    };\r\n  }\r\n\r\n  private getLastUserMessage(conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>): string {\r\n    const userMessages = conversationHistory.filter(msg => msg.role === 'user');\r\n    if (userMessages.length === 0) return 'Please help me with the information provided.';\r\n\r\n    const lastMessage = userMessages[userMessages.length - 1];\r\n    return typeof lastMessage.content === 'string' ? lastMessage.content : 'Please help me with the information provided.';\r\n  }\r\n\r\n  /**\r\n   * Builds proper conversation history following official LM Studio format\r\n   * Format: User message → Assistant tool call message → Tool result messages → Final response\r\n   * IMPORTANT: Filters out previous tool results to prevent prompt poisoning\r\n   */\r\n  private buildProperConversationHistory(\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    toolCalls: Array<{ id: string; name: string; result: string; error?: boolean }>,\r\n    originalToolCallsFormat: Array<{ id: string; type: string; function: { name: string; arguments: string } }>\r\n  ): Array<Record<string, unknown>> {\r\n\r\n    // Include conversation history but filter out previous tool results to prevent prompt poisoning\r\n    const cleanedHistory = conversationHistory.filter(msg => {\r\n      // Keep user messages and assistant messages that don't contain tool execution results\r\n      if (msg.role === 'user') return true;\r\n      if (msg.role === 'assistant') {\r\n        const content = typeof msg.content === 'string' ? msg.content : '';\r\n        // Filter out messages that contain tool execution results from previous turns\r\n        return !content.includes('<tool_execution>') && !content.includes('Tool Execution');\r\n      }\r\n      // Filter out tool role messages from previous turns\r\n      return msg.role !== 'tool';\r\n    });\r\n\r\n    console.log(`🧹 LM Studio: Conversation history filtering:`, {\r\n      original: conversationHistory.length,\r\n      cleaned: cleanedHistory.length,\r\n      filtered: conversationHistory.length - cleanedHistory.length\r\n    });\r\n\r\n    // Log the content of recent messages for debugging\r\n    cleanedHistory.slice(-3).forEach((msg, index) => {\r\n      const content = typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content);\r\n      console.log(`🔍 Recent message ${index}: [${msg.role}] ${content.substring(0, 100)}...`);\r\n    });\r\n\r\n    const messages: Array<Record<string, unknown>> = [...cleanedHistory];\r\n\r\n    // Add the assistant message with tool calls (following official format)\r\n    const assistantToolCallMessage = {\r\n      role: 'assistant',\r\n      content: '',\r\n      tool_calls: originalToolCallsFormat.map(tc => ({\r\n        id: tc.id,\r\n        type: tc.type,\r\n        function: tc.function\r\n      }))\r\n    };\r\n    messages.push(assistantToolCallMessage);\r\n\r\n    // Add tool result messages (following official format)\r\n    for (const toolResult of toolCalls) {\r\n      const toolResultMessage = {\r\n        role: 'tool',\r\n        content: toolResult.result,\r\n        tool_call_id: toolResult.id,\r\n        name: toolResult.name\r\n      };\r\n      messages.push(toolResultMessage);\r\n    }\r\n\r\n    // Add a final instruction prompting the model to use the tool outputs\r\n    const finalInstruction = {\r\n      role: 'user',\r\n      content: `Use the tool outputs above to produce the final answer to your previous request: \"${this.getLastUserMessage(conversationHistory)}\". Do not call tools again. Provide a concise answer grounded in those results.`\r\n    };\r\n    messages.push(finalInstruction);\r\n\r\n    console.log(`🔧 Built cleaned conversation history with ${messages.length} messages (filtered previous tool results + ${toolCalls.length} current tool results)`);\r\n    return messages;\r\n  }\r\n\r\n  private async makeDirectFollowUpCall(\r\n    messages: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    settings: LLMSettings,\r\n    onStream: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔄 Making follow-up call without tools (following official LM Studio pattern)`);\r\n\r\n    // According to official LM Studio documentation, the follow-up call should NOT include tools\r\n    // This prevents recursive tool calling and ensures proper synchronization\r\n    console.log(`✅ LM Studio follow-up call without tools - following official pattern for final response`);\r\n\r\n    // Use the original system prompt for follow-up calls (maintain consistency)\r\n    const finalResponsePrompt = settings.systemPrompt || this.getSystemPrompt();\r\n\r\n    // Always update system message for final response (no tools)\r\n    const systemMessageIndex = messages.findIndex(msg => msg.role === 'system');\r\n    if (systemMessageIndex >= 0) {\r\n      messages[systemMessageIndex].content = finalResponsePrompt;\r\n    } else {\r\n      messages.unshift({ role: 'system', content: finalResponsePrompt });\r\n    }\r\n\r\n    const requestBody = {\r\n      model: settings.model,\r\n      messages: messages,\r\n      stream: true,\r\n      temperature: settings.temperature || 0.7,\r\n      max_tokens: settings.maxTokens || 4000\r\n      // No tools included - following official LM Studio pattern for final response\r\n    };\r\n\r\n    // Sanitize and log a small preview of the follow-up payload to verify tool outputs are included\r\n    try {\r\n      const msgs = requestBody.messages as Array<Record<string, any>>;\r\n      const preview = {\r\n        model: requestBody.model,\r\n        messageCount: msgs.length,\r\n        roles: msgs.map(m => m.role),\r\n        assistantToolCallIncluded: msgs.some(m => Array.isArray((m as any).tool_calls) && (m as any).tool_calls.length > 0),\r\n        toolResultSummaries: msgs\r\n          .map((m, idx) => ({ idx, role: m.role, name: (m as any).name, id: (m as any).tool_call_id, content: (m as any).content }))\r\n          .filter(s => s.role === 'tool')\r\n          .map(s => ({\r\n            idx: s.idx,\r\n            name: s.name,\r\n            id: s.id,\r\n            contentLen: typeof s.content === 'string' ? s.content.length : JSON.stringify(s.content || '').length,\r\n            contentPreview: typeof s.content === 'string' ? s.content.slice(0, 160) : '[non-string]'\r\n          })),\r\n        finalInstructionPreview: (() => {\r\n          const last = msgs[msgs.length - 1];\r\n          const txt = typeof last?.content === 'string' ? last.content : JSON.stringify(last?.content || '');\r\n          return txt.slice(0, 200);\r\n        })()\r\n      };\r\n      console.log('🔎 [LM STUDIO DEBUG] Follow-up payload preview:', preview);\r\n    } catch (e) {\r\n      console.warn('⚠️ [LM STUDIO DEBUG] Failed to build follow-up payload preview:', e);\r\n    }\r\n\r\n    // Construct the correct URL - baseUrl might already include /v1\r\n    const baseUrl = settings.baseUrl || 'http://localhost:1234';\r\n    const endpoint = baseUrl.endsWith('/v1') ? '/chat/completions' : '/v1/chat/completions';\r\n    const fullUrl = `${baseUrl}${endpoint}`;\r\n\r\n    console.log(`🔗 Follow-up call URL: ${fullUrl}`);\r\n\r\n    const response = await fetch(fullUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer not-needed'\r\n      },\r\n      body: JSON.stringify(requestBody)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`LM Studio follow-up API error (${response.status}): ${await response.text()}`);\r\n    }\r\n\r\n    if (response.body) {\r\n      // Handle the streaming response directly without recursion\r\n      return this.handleFollowUpStreamResponse(response, onStream);\r\n    } else {\r\n      throw new Error('No response body received from LM Studio follow-up call');\r\n    }\r\n  }\r\n\r\n  private async handleFollowUpStreamResponse(\r\n    response: Response,\r\n    onStream: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔄 Processing follow-up stream response`);\r\n\r\n    const reader = response.body!.getReader();\r\n    const decoder = new TextDecoder();\r\n    let fullContent = '';\r\n\r\n    try {\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n\r\n        const chunk = decoder.decode(value, { stream: true });\r\n        const lines = chunk.split('\\n');\r\n\r\n        for (const line of lines) {\r\n          if (line.startsWith('data: ')) {\r\n            const data = line.slice(6);\r\n            if (data === '[DONE]') continue;\r\n\r\n            try {\r\n              const parsed = JSON.parse(data);\r\n              const delta = parsed.choices?.[0]?.delta;\r\n\r\n              if (delta?.content) {\r\n                fullContent += delta.content;\r\n                onStream(delta.content);\r\n              }\r\n            } catch {\r\n              // Skip invalid JSON lines\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n\r\n    console.log(`✅ Follow-up response completed. Content length: ${fullContent.length}`);\r\n\r\n    // No recursive tool calling - following official LM Studio pattern\r\n    // The follow-up call should provide the final response without calling more tools\r\n    console.log(`🎯 LM Studio final response ready - no additional tool calls needed`);\r\n\r\n    return {\r\n      content: fullContent,\r\n      usage: undefined // Follow-up calls don't need usage tracking\r\n    };\r\n  }\r\n\r\n  private formatToolError(toolName: string, error: unknown): string {\r\n    const errorStr = error instanceof Error ? error.message : String(error);\r\n    const errorLower = errorStr.toLowerCase();\r\n\r\n    // Check for common error patterns and provide user-friendly messages\r\n    if (errorLower.includes('timeout') || errorLower.includes('timed out')) {\r\n      return `⏰ ${toolName} timed out. The tool took too long to respond. Please try again.`;\r\n    }\r\n\r\n    if (errorLower.includes('not found') || errorLower.includes('unknown tool')) {\r\n      return `🔧 ${toolName} is not available. The tool might be disabled or not properly configured.`;\r\n    }\r\n\r\n    if (errorLower.includes('network') || errorLower.includes('connection')) {\r\n      return `🌐 Network error while executing ${toolName}. Please check your connection and try again.`;\r\n    }\r\n\r\n    if (errorLower.includes('invalid') && errorLower.includes('argument')) {\r\n      return `📝 ${toolName} received invalid arguments. Please check the parameters and try again.`;\r\n    }\r\n\r\n    if (errorLower.includes('rate limit') || errorLower.includes('too many requests')) {\r\n      return `⏱️ ${toolName} rate limit exceeded. Please wait a moment before trying again.`;\r\n    }\r\n\r\n    if (errorLower.includes('unauthorized') || errorLower.includes('forbidden')) {\r\n      return `🔐 Access denied for ${toolName}. Please check your permissions or API credentials.`;\r\n    }\r\n\r\n    // Default error message with the original error for debugging\r\n    return `❌ ${toolName} execution failed: ${errorStr}`;\r\n  }\r\n\r\n  private removeThinkingContent(content: string): string {\r\n    // Remove various thinking patterns and model template tags from content before parsing for tool calls\r\n    let cleanedContent = content;\r\n\r\n    // Remove <think>...</think> blocks\r\n    cleanedContent = cleanedContent.replace(/<think>[\\s\\S]*?<\\/think>/gi, '');\r\n\r\n    // Remove <thinking>...</thinking> blocks\r\n    cleanedContent = cleanedContent.replace(/<thinking>[\\s\\S]*?<\\/thinking>/gi, '');\r\n\r\n    // Remove unclosed thinking tags (in case they're at the end)\r\n    cleanedContent = cleanedContent.replace(/<think>[\\s\\S]*$/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<thinking>[\\s\\S]*$/gi, '');\r\n\r\n    // Remove model-specific template tags more aggressively\r\n    // New model format tags: <|start|>, <|message|>, <|channel|>, <|end|>, <|constrain|>\r\n    cleanedContent = cleanedContent.replace(/<\\|start\\|>/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<\\|message\\|>/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<\\|channel\\|>/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<\\|end\\|>/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<\\|constrain\\|>/gi, '');\r\n\r\n    // Qwen3 format tags: <|im_start|>, <|im_end|>\r\n    cleanedContent = cleanedContent.replace(/<\\|im_start\\|>/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<\\|im_end\\|>/gi, '');\r\n\r\n    // Remove role indicators that might appear after template tags (only at start of lines or after colons)\r\n    cleanedContent = cleanedContent.replace(/^(system|user|assistant):\\s*/gim, '');\r\n    cleanedContent = cleanedContent.replace(/\\n(system|user|assistant):\\s*/gi, '\\n');\r\n\r\n    // Remove channel indicators that might appear after <|channel|> tags (only at start of lines or after colons)\r\n    cleanedContent = cleanedContent.replace(/^(final|analysis|commentary):\\s*/gim, '');\r\n    cleanedContent = cleanedContent.replace(/\\n(final|analysis|commentary):\\s*/gi, '\\n');\r\n\r\n    // Clean up any remaining template-like patterns\r\n    cleanedContent = cleanedContent.replace(/<\\|[^|]*\\|>/gi, '');\r\n\r\n    // Remove template sequences that span multiple tags\r\n    cleanedContent = cleanedContent.replace(/<\\|end\\|><\\|start\\|>assistant<\\|channel\\|>commentary/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<\\|constrain\\|>json<\\|message\\|>/gi, ' json');\r\n\r\n    // Remove tool execution blocks that might be mixed in the response\r\n    cleanedContent = cleanedContent.replace(/<tool_execution>[\\s\\S]*?<\\/tool_execution>/gi, '');\r\n\r\n    // Remove any remaining tool execution indicators\r\n    cleanedContent = cleanedContent.replace(/🔧\\s*\\*\\*Tool Execution Started\\*\\*/gi, '');\r\n    cleanedContent = cleanedContent.replace(/🏁\\s*\\*\\*Tool Execution Complete\\*\\*/gi, '');\r\n    cleanedContent = cleanedContent.replace(/Executing \\d+ tools?:/gi, '');\r\n    cleanedContent = cleanedContent.replace(/✅ \\d+ successful, ❌ \\d+ failed/gi, '');\r\n\r\n    // Clean up any extra whitespace\r\n    cleanedContent = cleanedContent.trim();\r\n\r\n    return cleanedContent;\r\n  }\r\n\r\n  private deduplicateToolCalls(toolCalls: Array<{ name: string; arguments: Record<string, unknown> }>): Array<{ name: string; arguments: Record<string, unknown> }> {\r\n    const seen = new Set<string>();\r\n    const unique: Array<{ name: string; arguments: Record<string, unknown> }> = [];\r\n\r\n    for (const toolCall of toolCalls) {\r\n      const key = `${toolCall.name}:${JSON.stringify(toolCall.arguments)}`;\r\n      if (!seen.has(key)) {\r\n        seen.add(key);\r\n        unique.push(toolCall);\r\n      } else {\r\n        console.log(`🔧 Removed duplicate tool call: ${toolCall.name}`);\r\n      }\r\n    }\r\n\r\n    return unique;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\MistralProvider.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[969,1022],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1030,1110],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1219,1291],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1477,1645],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1792,1863],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1926,1981],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3336,3384],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 28 to the 15 allowed.","line":102,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":102,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4821,5071],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"preparedFile\".","line":205,"column":36,"nodeType":"AwaitExpression","messageId":"doImmediateAction","endLine":205,"endColumn":85,"fix":{"range":[8201,8307],"text":"return await this.fileService.prepareFileForVision(file)"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8355,8421],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":252,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":252,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9890,10074],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":258,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":258,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10096,10166],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":262,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":262,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10224,10606],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":275,"column":23,"nodeType":"Literal","endLine":275,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":283,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":283,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11018,11107],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11115,11490],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":328,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":328,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13098,13167],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":334,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":334,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13352,13406],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":345,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":345,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13755,13844],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":349,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":349,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13933,14024],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":355,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":355,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14195,14249],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":358,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":358,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14355,14406],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":365,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":365,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14621,14673],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":370,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":370,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14823,14889],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":378,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":378,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15115,15173],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":410,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":410,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16169,16250],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":417,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":417,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16496,16548],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":437,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":437,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17127,17183],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":440,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":440,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17310,17415],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":448,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":448,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17659,17720],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 36 to the 15 allowed.","line":505,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":505,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":514,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":514,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20238,20328],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":522,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":522,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20595,20693],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":556,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":556,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21953,22020],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":558,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":558,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22055,22112],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":561,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":561,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22193,22284],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":572,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":572,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22650,22718],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":576,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":576,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22742,22851],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":580,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":580,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22952,23071],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":603,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":603,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23869,24126],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":613,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":613,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24330,24368],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":621,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":621,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24709,24861],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":623,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":623,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24883,24948],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":629,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":629,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25146,25191],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":642,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":642,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25536,25611],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":643,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":643,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25617,26314],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":659,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":659,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26383,26435],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":662,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":662,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26578,26660],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":664,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":664,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[26700,26787],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":665,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":665,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[26797,26888],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":675,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":675,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27245,27335],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":679,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":679,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27475,27599],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":694,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":694,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27991,28087],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":697,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":697,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28162,28210],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":698,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":698,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28216,28283],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":699,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":699,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28289,28371],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":703,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":703,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28459,28510],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":705,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":705,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28577,28636],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":706,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":706,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28646,28691],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":708,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":708,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28767,28854],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":711,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":711,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28918,28982],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":712,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":712,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28992,29040],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":713,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":713,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29050,29128],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":714,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":714,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29138,29267],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":721,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":721,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29470,29513],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":723,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":723,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29547,29593],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":726,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":726,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29641,29694],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":755,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":755,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[30804,30923],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":771,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":771,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[31398,31488],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 73 to the 15 allowed.","line":794,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":794,"endColumn":37},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'signal' is defined but never used. Allowed unused args must match /^_/u.","line":800,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":800,"endColumn":11},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":803,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":803,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32590,32653],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":824,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":824,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33388,33503],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":836,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":836,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33851,33938],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":846,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":846,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34263,34317],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":848,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":848,"endColumn":29,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[34372,34455],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":853,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":853,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34589,34654],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":892,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":892,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[36064,36157],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":904,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":904,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36401,36598],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":912,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":912,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36646,36836],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 19 to the 15 allowed.","line":939,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":939,"endColumn":40},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used. Allowed unused args must match /^_/u.","line":942,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":942,"endColumn":24},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used. Allowed unused args must match /^_/u.","line":943,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":943,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":947,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":947,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37931,38002],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":950,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":950,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38082,38126],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":954,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":954,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38274,38379],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":959,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":959,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38623,38706],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":974,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":974,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[39421,39565],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":989,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":989,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[40152,40209],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1003,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1003,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[40738,40841],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1034,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1034,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[41935,42192],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1044,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1044,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42326,42402],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1048,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1048,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42513,42586],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1052,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1052,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42679,42788],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1057,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1057,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[42936,42995],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1069,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1069,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[43387,43456],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1072,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1072,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[43493,43555],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1080,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1080,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[43765,43963],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":518,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":518,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20473,20476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20473,20476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":648,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":648,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25907,25910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25907,25910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":648,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":648,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25923,25926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25923,25926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":649,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":649,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26011,26014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26011,26014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":649,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":649,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26028,26031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26028,26031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":652,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":652,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26171,26174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26171,26174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":653,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":653,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26219,26222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26219,26222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":654,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":654,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26266,26269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26266,26269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":707,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":707,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28729,28732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28729,28732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":711,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":711,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28960,28963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28960,28963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":712,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":712,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29026,29029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29026,29029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":713,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":713,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29093,29096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29093,29096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":714,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":714,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29189,29192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29189,29192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":714,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":714,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29225,29228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29225,29228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":718,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":718,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29363,29366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29363,29366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'signal' is defined but never used.","line":800,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":800,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":817,"column":14,"nodeType":"Literal","messageId":"unexpected","endLine":817,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used.","line":942,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":942,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used.","line":943,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":943,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":958,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":958,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38531,38534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38531,38534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":958,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":958,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38577,38580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38577,38580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":969,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":969,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39155,39158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39155,39158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":970,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":970,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39245,39248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39245,39248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":974,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":974,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39499,39502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39499,39502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":9,"fatalErrorCount":0,"warningCount":90,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Mistral AI provider implementation\r\n\r\nimport { BaseProvider } from './BaseProvider';\r\nimport {\r\n  LLMSettings,\r\n  LLMResponse,\r\n  MessageContent,\r\n  ContentItem,\r\n  LLMProvider,\r\n  ToolObject,\r\n  ProviderCapabilities,\r\n  APIResponseData\r\n} from './types';\r\n\r\nimport { MISTRAL_SYSTEM_PROMPT } from './prompts/mistral';\r\nimport { PricingService } from '../pricingService';\r\nimport { MistralFileService } from '../mistralFileService';\r\n\r\nexport class MistralProvider extends BaseProvider {\r\n  readonly id = 'mistral';\r\n  readonly name = 'Mistral AI';\r\n  readonly capabilities: ProviderCapabilities = {\r\n    supportsVision: true,\r\n    supportsTools: true,\r\n    supportsStreaming: true,\r\n    supportsSystemMessages: true,\r\n    maxToolNameLength: 64,\r\n    toolFormat: 'openai'\r\n  };\r\n\r\n  private fileService?: MistralFileService;\r\n\r\n  // Mistral-specific tool calling methods\r\n  private async getMistralTools(settings: LLMSettings): Promise<unknown[]> {\r\n    try {\r\n      console.log(`🔍 Getting tools for Mistral provider`);\r\n      console.log(`🔍 Tool calling enabled:`, settings?.toolCallingEnabled !== false);\r\n\r\n      // Check if tool calling is disabled\r\n      if (settings?.toolCallingEnabled === false) {\r\n        console.log(`🚫 Tool calling is disabled, returning empty tools array`);\r\n        return [];\r\n      }\r\n\r\n      // Get raw tools from the centralized service (temporarily)\r\n      const rawTools = await this.getMCPToolsForProvider('mistral', settings);\r\n      console.log(`📋 Raw tools received (${rawTools.length} tools):`, (rawTools as Array<{name?: string, function?: {name?: string}}>).map(t => t.name || t.function?.name));\r\n\r\n      // Format tools specifically for Mistral (uses OpenAI format)\r\n      const formattedTools = this.formatToolsForMistral(rawTools);\r\n      console.log(`🔧 Formatted ${formattedTools.length} tools for Mistral`);\r\n\r\n      return formattedTools;\r\n    } catch (error) {\r\n      console.error('❌ Failed to get Mistral tools:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private formatToolsForMistral(rawTools: unknown[]): unknown[] {\r\n    return rawTools.map(tool => {\r\n      const typedTool = tool as {type?: string, function?: {name?: string, description?: string, parameters?: unknown}, name?: string, description?: string, inputSchema?: unknown};\r\n\r\n      // All tools now come in unified format with type: 'function' and function object\r\n      if (typedTool.type === 'function' && typedTool.function) {\r\n        return {\r\n          type: 'function',\r\n          function: {\r\n            name: typedTool.function.name || 'unknown_tool',\r\n            description: typedTool.function.description || 'No description',\r\n            parameters: typedTool.function.parameters || {\r\n              type: 'object',\r\n              properties: {},\r\n              required: []\r\n            }\r\n          }\r\n        };\r\n      }\r\n\r\n      // Handle MCP tools (need conversion to OpenAI format)\r\n      if (typedTool.name && typedTool.description) {\r\n        return {\r\n          type: 'function',\r\n          function: {\r\n            name: typedTool.name,\r\n            description: typedTool.description,\r\n            parameters: typedTool.inputSchema || {\r\n              type: 'object',\r\n              properties: {},\r\n              required: []\r\n            }\r\n          }\r\n        };\r\n      }\r\n\r\n      console.warn(`⚠️ Skipping invalid tool:`, tool);\r\n      return null;\r\n    }).filter(tool => tool !== null);\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-explicit-any */\r\n  async sendMessage(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-explicit-any */\r\n    // Initialize file service if not already done\r\n    if (!this.fileService && settings.apiKey) {\r\n      this.fileService = new MistralFileService(settings.apiKey, provider.baseUrl);\r\n    }\r\n\r\n    // Mistral uses OpenAI-compatible API\r\n    const messages = [];\r\n\r\n    // Get Mistral-specific formatted tools\r\n    const mistralTools = await this.getMistralTools(settings);\r\n\r\n    // Use behavioral system prompt only (no tool descriptions)\r\n    // Tools are sent separately in the tools parameter (OpenAI-compatible)\r\n    // Check for meaningful system prompt, not just empty string or generic default\r\n    const hasCustomSystemPrompt = settings.systemPrompt &&\r\n      settings.systemPrompt.trim() &&\r\n      settings.systemPrompt !== \"You are a helpful AI assistant. Please provide concise and helpful responses.\";\r\n\r\n    const systemPrompt = hasCustomSystemPrompt ? settings.systemPrompt! : this.getSystemPrompt();\r\n\r\n    console.log(`🔍 Mistral system prompt source:`, {\r\n      hasCustom: hasCustomSystemPrompt,\r\n      usingCustom: hasCustomSystemPrompt,\r\n      promptLength: systemPrompt?.length || 0,\r\n      promptStart: systemPrompt?.substring(0, 100) + '...'\r\n    });\r\n\r\n    if (systemPrompt) {\r\n      messages.push({ role: 'system', content: systemPrompt });\r\n    }\r\n\r\n    // Add conversation history (clean for Mistral requirements)\r\n    const cleanedHistory = conversationHistory.map(msg => {\r\n      const typedMsg = msg as {role: string, tool_calls?: unknown, content?: unknown};\r\n      if (typedMsg.role === 'assistant' && typedMsg.tool_calls && typedMsg.content) {\r\n        // Mistral requires assistant messages to have EITHER content OR tool_calls, not both\r\n        // Keep only tool_calls for assistant messages that have both\r\n        return {\r\n          role: typedMsg.role,\r\n          tool_calls: typedMsg.tool_calls\r\n        };\r\n      }\r\n      return msg;\r\n    });\r\n    messages.push(...cleanedHistory);\r\n\r\n    // Check if model supports vision when images are present\r\n    const hasImages = (Array.isArray(message) && message.some((item: ContentItem) => item.type === 'image_url')) ||\r\n                     (typeof message === 'object' && message && 'images' in message && ((message as {images?: unknown[]}).images?.length ?? 0) > 0);\r\n\r\n    if (hasImages) {\r\n      const visionModels = [\r\n        'mistral-medium-latest', 'mistral-medium-2505',\r\n        'pixtral-large-latest', 'pixtral-large-2411',\r\n        'pixtral-12b-latest', 'pixtral-12b-2409',\r\n        'mistral-small-2503'\r\n      ];\r\n\r\n      if (!visionModels.includes(settings.model)) {\r\n        throw new Error(`Mistral model \"${settings.model}\" does not support images. Please use a vision-capable model like \"mistral-medium-latest\", \"pixtral-large-latest\", or \"pixtral-12b-2409\" for image analysis.`);\r\n      }\r\n    }\r\n\r\n    // Add current message\r\n    if (typeof message === 'string') {\r\n      messages.push({ role: 'user', content: message });\r\n    } else if (Array.isArray(message)) {\r\n      // Handle ContentItem array format (from chatService.ts)\r\n      // Mistral uses OpenAI-compatible format, so we can pass through most content as-is\r\n      const mistralContent = await Promise.all(message.map(async (item: ContentItem) => {\r\n        if (item.type === 'text') {\r\n          return { type: 'text', text: item.text };\r\n        } else if (item.type === 'image_url') {\r\n          // Mistral uses OpenAI-compatible format\r\n          return {\r\n            type: 'image_url',\r\n            image_url: { url: item.image_url?.url || '' }\r\n          };\r\n        } else if (item.type === 'document') {\r\n          // For documents, use Mistral's native capabilities\r\n          if (this.fileService && item.document?.data) {\r\n            try {\r\n              // Convert base64 back to file for processing\r\n              const binaryString = atob(item.document.data);\r\n              const bytes = new Uint8Array(binaryString.length);\r\n              for (let i = 0; i < binaryString.length; i++) {\r\n                bytes[i] = binaryString.charCodeAt(i);\r\n              }\r\n              const file = new File([bytes], item.document.name || 'document', {\r\n                type: item.document.media_type || 'application/pdf'\r\n              });\r\n\r\n              // Use Mistral's file service to prepare the document\r\n              const preparedFile = await this.fileService.prepareFileForVision(file);\r\n              return preparedFile;\r\n            } catch (error) {\r\n              console.error('❌ Error processing document with Mistral:', error);\r\n              return {\r\n                type: 'text',\r\n                text: `[Document: ${item.document?.name || 'document'} - Processing failed: ${error}]`\r\n              };\r\n            }\r\n          } else {\r\n            return {\r\n              type: 'text',\r\n              text: `[Document: ${item.document?.name || 'document'}]`\r\n            };\r\n          }\r\n        }\r\n        return item; // Pass through other types as-is\r\n      }));\r\n\r\n      messages.push({ role: 'user', content: mistralContent });\r\n    } else {\r\n      // Handle legacy vision format (for backward compatibility)\r\n      const messageWithImages = message as { text: string; images: string[] };\r\n      const content: ContentItem[] = [{ type: 'text', text: messageWithImages.text }];\r\n\r\n      for (const imageUrl of messageWithImages.images) {\r\n        // Mistral uses OpenAI-compatible format for images\r\n        content.push({\r\n          type: 'image_url',\r\n          image_url: { url: imageUrl }\r\n        });\r\n      }\r\n      messages.push({ role: 'user', content });\r\n    }\r\n\r\n    const requestBody: Record<string, unknown> = {\r\n      model: settings.model,\r\n      messages: messages,\r\n      temperature: settings.temperature,\r\n      max_tokens: settings.maxTokens,\r\n      stream: onStream && typeof onStream === 'function'\r\n    };\r\n\r\n    // Add tools if available\r\n    if (mistralTools.length > 0) {\r\n      requestBody.tools = mistralTools;\r\n      requestBody.tool_choice = 'auto';\r\n      console.log(`🚀 Mistral API call with ${mistralTools.length} tools:`, {\r\n        model: settings.model,\r\n        toolCount: mistralTools.length,\r\n        tools: mistralTools\r\n      });\r\n    } else {\r\n      console.log(`🚀 Mistral API call without tools (no tools available)`);\r\n    }\r\n\r\n    // Log the full request for debugging\r\n    console.log(`🔍 Mistral API request:`, {\r\n      url: `${provider.baseUrl}/chat/completions`,\r\n      model: settings.model,\r\n      messageCount: messages.length,\r\n      hasImages: messages.some(msg => 'content' in msg && Array.isArray(msg.content) && msg.content.some((c: {type?: string}) => c.type === 'image_url')),\r\n      requestBody: JSON.stringify(requestBody, null, 2)\r\n    });\r\n\r\n    const response = await fetch(`${provider.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`,\r\n        'User-Agent': 'LittleLLM/1.0'\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n      signal\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error(`❌ Mistral API error (${response.status} ${response.statusText}):`, error);\r\n      console.error(`❌ Request details:`, {\r\n        url: `${provider.baseUrl}/chat/completions`,\r\n        model: settings.model,\r\n        messageCount: messages.length,\r\n        hasTools: mistralTools.length > 0,\r\n        hasImages: messages.some(msg => 'content' in msg && Array.isArray(msg.content) && msg.content.some((c: {type?: string}) => c.type === 'image_url'))\r\n      });\r\n\r\n      // Try to parse error as JSON for better error messages\r\n      let errorMessage = error;\r\n      let errorDetails = '';\r\n      try {\r\n        const errorObj = JSON.parse(error);\r\n        errorMessage = errorObj.message || errorObj.error?.message || error;\r\n\r\n        // Add specific guidance for common errors\r\n        if (response.status === 503) {\r\n          errorDetails = '\\n\\nTroubleshooting tips for 503 Service Unavailable:\\n' +\r\n            '1. Check if your API key is valid and active\\n' +\r\n            '2. Verify the model name is correct (try \"mistral-small-latest\")\\n' +\r\n            '3. Check Mistral AI status page for service outages\\n' +\r\n            '4. Try again in a few moments - this may be temporary\\n' +\r\n            '5. Ensure you have sufficient API credits/quota';\r\n        } else if (response.status === 401) {\r\n          errorDetails = '\\n\\nAuthentication error - please check your API key';\r\n        } else if (response.status === 429) {\r\n          errorDetails = '\\n\\nRate limit exceeded - please wait before retrying';\r\n        }\r\n      } catch {\r\n        // Keep original error if not JSON\r\n      }\r\n\r\n      throw new Error(`Mistral API error: ${errorMessage}${errorDetails}`);\r\n    }\r\n\r\n    if (onStream && typeof onStream === 'function') {\r\n      return this.handleStreamResponse(response, onStream, settings, provider, conversationHistory, signal);\r\n    } else {\r\n      return this.handleNonStreamResponse(response, settings, conversationHistory, conversationId);\r\n    }\r\n  }\r\n\r\n  async fetchModels(apiKey: string): Promise<string[]> {\r\n    if (!apiKey) {\r\n      console.error('❌ No Mistral API key provided - cannot fetch models');\r\n      throw new Error('Mistral API key is required to fetch available models. Please add your API key in settings.');\r\n    }\r\n\r\n    try {\r\n      // Test API connectivity first\r\n      console.log('🔍 Testing Mistral API connectivity...');\r\n\r\n      // Mistral AI models endpoint - correct API endpoint from their documentation\r\n      const response = await fetch('https://api.mistral.ai/v1/models', {\r\n        headers: {\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'Content-Type': 'application/json',\r\n          'User-Agent': 'LittleLLM/1.0'\r\n        }\r\n      });\r\n\r\n      console.log(`🔍 Mistral models API response: ${response.status} ${response.statusText}`);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`❌ Mistral API error: ${response.status} ${response.statusText}`, errorText);\r\n\r\n        // Try to parse error for better debugging\r\n        let errorDetails = errorText;\r\n        try {\r\n          const errorObj = JSON.parse(errorText);\r\n          console.error('Mistral API error details:', errorObj);\r\n          errorDetails = errorObj.message || errorObj.error || errorText;\r\n        } catch {\r\n          console.error('Mistral API raw error:', errorText);\r\n        }\r\n\r\n        throw new Error(`Failed to fetch Mistral models: ${response.status} ${response.statusText} - ${errorDetails}`);\r\n      }\r\n\r\n      const data = await response.json() as APIResponseData;\r\n      console.log('✅ Mistral API models response:', data);\r\n\r\n      // Mistral API returns models in data array with id field\r\n      const models = data.data?.map((model) => model.id)?.sort() || [];\r\n\r\n      console.log(`✅ Fetched ${models.length} Mistral models:`, models);\r\n\r\n      if (models.length === 0) {\r\n        throw new Error('No Mistral models returned from API. This may indicate an API issue or insufficient permissions.');\r\n      }\r\n\r\n      return models;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch Mistral models:', error);\r\n      throw error instanceof Error ? error : new Error(`Failed to fetch Mistral models: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  formatTools(tools: ToolObject[]): unknown[] {\r\n    // Mistral uses OpenAI-compatible format\r\n    return tools.map(tool => ({\r\n      type: 'function',\r\n      function: {\r\n        name: tool.name || tool.function?.name,\r\n        description: tool.description || tool.function?.description,\r\n        parameters: tool.parameters || tool.function?.parameters || {\r\n          type: 'object',\r\n          properties: {},\r\n          required: []\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  getSystemPrompt(): string {\r\n    return MISTRAL_SYSTEM_PROMPT;\r\n  }\r\n\r\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\r\n    if (tools.length === 0) {\r\n      return basePrompt;\r\n    }\r\n\r\n    // Mistral uses structured tool calling with tools parameter and tool_choice\r\n    // Don't add XML tool instructions as they conflict with native function calling\r\n    console.log(`🔧 Mistral using structured tools, skipping XML tool instructions`);\r\n    return basePrompt;\r\n  }\r\n\r\n  // Test method to help debug API connectivity\r\n  async testConnection(apiKey: string, baseUrl = 'https://api.mistral.ai/v1'): Promise<{ success: boolean; error?: string; details?: unknown }> {\r\n    try {\r\n      console.log('🧪 Testing Mistral API connection...');\r\n\r\n      // Simple test request\r\n      const testResponse = await fetch(`${baseUrl}/chat/completions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'User-Agent': 'LittleLLM/1.0'\r\n        },\r\n        body: JSON.stringify({\r\n          model: 'mistral-small-latest',\r\n          messages: [{ role: 'user', content: 'Hello' }],\r\n          max_tokens: 10\r\n        })\r\n      });\r\n\r\n      const responseText = await testResponse.text();\r\n\r\n      if (testResponse.ok) {\r\n        console.log('✅ Mistral API connection test successful');\r\n        return { success: true, details: { status: testResponse.status, response: responseText } };\r\n      } else {\r\n        console.error(`❌ Mistral API connection test failed: ${testResponse.status} ${testResponse.statusText}`);\r\n        return {\r\n          success: false,\r\n          error: `${testResponse.status} ${testResponse.statusText}`,\r\n          details: { status: testResponse.status, response: responseText }\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Mistral API connection test error:', error);\r\n      return { success: false, error: error instanceof Error ? error.message : String(error) };\r\n    }\r\n  }\r\n\r\n  validateToolCall(toolCall: { id?: string; name: string; arguments: Record<string, unknown> }): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!toolCall.id) {\r\n      errors.push(`Mistral tool call missing required id: ${toolCall.name}`);\r\n    }\r\n\r\n    if (!toolCall.name || typeof toolCall.name !== 'string') {\r\n      errors.push('Tool call must have a valid name');\r\n    }\r\n\r\n    if (!toolCall.arguments || typeof toolCall.arguments !== 'object') {\r\n      errors.push('Tool call must have valid arguments object');\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  validateTool(tool: unknown): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!tool || typeof tool !== 'object') {\r\n      errors.push('Tool must be an object');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const toolObj = tool as Record<string, unknown>;\r\n\r\n    if (!toolObj.type || toolObj.type !== 'function') {\r\n      errors.push('Mistral tools must have type: \"function\"');\r\n    }\r\n\r\n    if (!toolObj.function || typeof toolObj.function !== 'object') {\r\n      errors.push('Mistral tools must have function object');\r\n    } else {\r\n      const func = toolObj.function as Record<string, unknown>;\r\n      if (!func.name) {\r\n        errors.push('Mistral tools must have function.name');\r\n      }\r\n      if (func.name && typeof func.name === 'string' && func.name.length > 64) {\r\n        errors.push('Mistral function names must be ≤64 characters');\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Private helper methods\r\n  // These methods are injected by the ProviderAdapter from the LLMService\r\n  private getMCPToolsForProvider!: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\r\n  private executeMCPTool!: (toolName: string, args: Record<string, unknown>) => Promise<string>;\r\n\r\n  private async executeToolsAndFollowUp(\r\n    toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }>,\r\n    initialContent: string,\r\n    initialUsage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔧 Mistral streaming detected ${toolCalls.length} tool calls, executing...`);\r\n\r\n    // Execute all tool calls and ensure exact matching\r\n    /* eslint-disable @typescript-eslint/no-explicit-any */\r\n    const toolResults: any[] = [];\r\n    for (let i = 0; i < toolCalls.length; i++) {\r\n      const toolCall = toolCalls[i];\r\n      try {\r\n        console.log(`🔧 Executing Mistral tool call: ${toolCall.function?.name} with ID: ${toolCall.id}`);\r\n        const toolName = toolCall.function?.name || '';\r\n        const toolArgs = JSON.parse(toolCall.function?.arguments || '{}');\r\n        const toolResult = await this.executeMCPTool(toolName, toolArgs);\r\n\r\n        // Use the exact tool call ID from Mistral - don't generate new ones\r\n        const toolCallId = toolCall.id;\r\n        if (!toolCallId) {\r\n          throw new Error(`Tool call missing ID: ${JSON.stringify(toolCall)}`);\r\n        }\r\n\r\n        // Ensure content is properly formatted JSON string\r\n        let contentString: string;\r\n        if (typeof toolResult === 'string') {\r\n          // If it's already a string, validate it's valid JSON\r\n          try {\r\n            JSON.parse(toolResult);\r\n            contentString = toolResult;\r\n          } catch {\r\n            // If not valid JSON, wrap it in a JSON object\r\n            contentString = JSON.stringify({ content: toolResult });\r\n          }\r\n        } else {\r\n          // Convert object to JSON string\r\n          contentString = JSON.stringify(toolResult);\r\n        }\r\n\r\n        toolResults.push({\r\n          role: 'tool',\r\n          tool_call_id: toolCallId, // Must be first and match exactly\r\n          name: toolName,\r\n          content: contentString\r\n        });\r\n\r\n        console.log(`✅ Mistral tool result created for ID: ${toolCallId}`);\r\n      } catch (error) {\r\n        console.error(`❌ Mistral tool execution failed:`, error);\r\n        const toolCallId = toolCall.id;\r\n        if (!toolCallId) {\r\n          console.error(`❌ Tool call missing ID during error handling: ${JSON.stringify(toolCall)}`);\r\n          continue; // Skip this tool call if no ID\r\n        }\r\n\r\n        toolResults.push({\r\n          role: 'tool',\r\n          tool_call_id: toolCallId, // Must be first and match exactly\r\n          name: toolCall.function?.name || '',\r\n          content: JSON.stringify({ error: error instanceof Error ? error.message : String(error) })\r\n        });\r\n\r\n        console.log(`❌ Mistral error result created for ID: ${toolCallId}`);\r\n      }\r\n    }\r\n\r\n    console.log(`🔧 Mistral tool execution completed: ${toolCalls.length} calls, ${toolResults.length} results`);\r\n\r\n    // Verify we have matching counts\r\n    if (toolCalls.length !== toolResults.length) {\r\n      console.error(`❌ Mistral tool call/result count mismatch: ${toolCalls.length} calls vs ${toolResults.length} results`);\r\n      throw new Error(`Tool call/result count mismatch: ${toolCalls.length} calls vs ${toolResults.length} results`);\r\n    }\r\n\r\n    // Make follow-up call with tool results\r\n    // According to Mistral docs, we need to:\r\n    // 1. Add the assistant message with tool_calls to the conversation\r\n    // 2. Add the tool result messages\r\n    // 3. Make a new API call\r\n\r\n    // Convert tool calls to the format Mistral expects\r\n    const mistralToolCalls = toolCalls.map(tc => ({\r\n      id: tc.id,\r\n      type: 'function',\r\n      function: {\r\n        name: tc.function?.name || '',\r\n        arguments: tc.function?.arguments || '{}'\r\n      }\r\n    }));\r\n\r\n    // Build the follow-up messages using the original conversation + assistant response + tool results\r\n    const followUpMessages = [];\r\n\r\n    console.log(`🔍 Mistral conversation history debug:`, {\r\n      historyLength: conversationHistory.length,\r\n      roles: conversationHistory.map(msg => msg.role),\r\n      userMessageCount: conversationHistory.filter(msg => msg.role === 'user').length\r\n    });\r\n\r\n    // Add system message if it exists\r\n    const systemMessage = conversationHistory.find(msg => msg.role === 'system');\r\n    if (systemMessage) {\r\n      followUpMessages.push(systemMessage);\r\n      console.log(`✅ Added system message`);\r\n    }\r\n\r\n    // Add the user message that triggered the tool call (the most recent user message)\r\n    const userMessages = conversationHistory.filter(msg => msg.role === 'user');\r\n    if (userMessages.length > 0) {\r\n      const lastUserMessage = userMessages[userMessages.length - 1];\r\n      followUpMessages.push(lastUserMessage);\r\n      console.log(`✅ Added user message: \"${typeof lastUserMessage.content === 'string' ? lastUserMessage.content.substring(0, 50) : 'complex content'}...\"`);\r\n    } else {\r\n      console.log(`❌ No user messages found in conversation history!`);\r\n      // Add a fallback user message if none found\r\n      followUpMessages.push({\r\n        role: 'user',\r\n        content: 'Please provide a response based on the tool results.'\r\n      });\r\n      console.log(`✅ Added fallback user message`);\r\n    }\r\n\r\n    // Add the assistant message with tool calls (this is the response from step 2)\r\n    followUpMessages.push({\r\n      role: 'assistant',\r\n      content: '', // Empty content when using tool_calls\r\n      tool_calls: mistralToolCalls\r\n    });\r\n\r\n    // Add all tool results (step 3)\r\n    followUpMessages.push(...toolResults);\r\n\r\n    console.log(`🔄 Making Mistral follow-up call to process tool results...`);\r\n    console.log(`🔧 Mistral follow-up message structure:`, {\r\n      totalMessages: followUpMessages.length,\r\n      toolCallsCount: mistralToolCalls.length,\r\n      toolResultsCount: toolResults.length,\r\n      toolCallIds: mistralToolCalls.map(tc => tc.id),\r\n      toolResultIds: (toolResults as any[]).map((tr: any) => tr.tool_call_id),\r\n      idsMatch: mistralToolCalls.every(tc => (toolResults as any[]).some((tr: any) => tr.tool_call_id === tc.id)),\r\n      messages: followUpMessages.map(msg => ({\r\n        role: msg.role,\r\n        hasToolCalls: !!(msg as any).tool_calls,\r\n        hasContent: !!(msg as any).content,\r\n        toolCallsCount: (msg as any).tool_calls?.length || 0\r\n      }))\r\n    });\r\n\r\n    // Verify exact ID matching and log detailed comparison\r\n    console.log(`🔍 Mistral ID matching verification:`);\r\n    for (const toolCall of mistralToolCalls) {\r\n      const matchingResult = toolResults.find(tr => tr.tool_call_id === toolCall.id);\r\n      console.log(`Tool call ID: \"${toolCall.id}\" -> Match found: ${!!matchingResult}`);\r\n      if (!matchingResult) {\r\n        console.error(`❌ Mistral: No matching tool result for tool call ID: \"${toolCall.id}\"`);\r\n        console.error(`Available tool result IDs:`, toolResults.map(tr => `\"${tr.tool_call_id}\"`));\r\n        throw new Error(`Tool call/result ID mismatch: \"${toolCall.id}\" not found in results`);\r\n      }\r\n    }\r\n\r\n    // Final validation: exact count and ID matching\r\n    if (mistralToolCalls.length !== toolResults.length) {\r\n      throw new Error(`Count mismatch: ${mistralToolCalls.length} tool calls vs ${toolResults.length} results`);\r\n    }\r\n\r\n    console.log(`✅ Mistral: All ${mistralToolCalls.length} tool calls have matching results`);\r\n\r\n    // Get tools for continued agentic behavior in follow-up call\r\n    const followUpTools = await this.getMistralTools(settings);\r\n    console.log(`🔄 Making Mistral follow-up call with ${followUpTools.length} tools available for continued agentic behavior`);\r\n\r\n    const followUpRequestBody = {\r\n      model: settings.model,\r\n      messages: followUpMessages,\r\n      temperature: settings.temperature,\r\n      max_tokens: settings.maxTokens,\r\n      stream: false,\r\n      // Include tools to allow continued agentic behavior\r\n      ...(followUpTools.length > 0 && {\r\n        tools: followUpTools,\r\n        tool_choice: 'auto'\r\n      })\r\n    };\r\n\r\n    console.log(`🔧 Mistral follow-up request body:`, JSON.stringify(followUpRequestBody, null, 2));\r\n\r\n    // Detailed validation of the exact structure Mistral expects\r\n    console.log(`🔍 Mistral follow-up validation:`);\r\n    console.log(`- Messages array length: ${followUpMessages.length}`);\r\n    console.log(`- Message roles: [${followUpMessages.map(m => m.role).join(', ')}]`);\r\n\r\n    // Validate each message\r\n    followUpMessages.forEach((msg, index) => {\r\n      console.log(`Message ${index + 1} (${msg.role}):`);\r\n      if (msg.role === 'assistant' && msg.tool_calls) {\r\n        console.log(`  - Has ${msg.tool_calls.length} tool calls`);\r\n        console.log(`  - Content: \"${msg.content}\"`);\r\n        msg.tool_calls.forEach((tc: any, tcIndex: number) => {\r\n          console.log(`  - Tool call ${tcIndex + 1}: ID=\"${tc.id}\", name=\"${tc.function.name}\"`);\r\n        });\r\n      } else if (msg.role === 'tool') {\r\n        console.log(`  - tool_call_id: \"${(msg as any).tool_call_id}\"`);\r\n        console.log(`  - name: \"${(msg as any).name}\"`);\r\n        console.log(`  - content length: ${(msg as any).content?.length || 0} chars`);\r\n        console.log(`  - content preview: ${typeof (msg as any).content === 'string' ? (msg as any).content.substring(0, 100) : ''}...`);\r\n\r\n        // Validate content is valid JSON\r\n        try {\r\n          const content = (msg as any).content;\r\n          if (typeof content === 'string') {\r\n            JSON.parse(content);\r\n            console.log(`  - ✅ Content is valid JSON`);\r\n          } else {\r\n            console.log(`  - ⚠️ Content is not a string`);\r\n          }\r\n        } catch (e) {\r\n          console.log(`  - ❌ Content is NOT valid JSON: ${e}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    const followUpResponse = await fetch(`${provider.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`\r\n      },\r\n      body: JSON.stringify(followUpRequestBody)\r\n    });\r\n\r\n    if (followUpResponse.ok) {\r\n      const followUpData = await followUpResponse.json();\r\n      const followUpMessage = followUpData.choices[0]?.message;\r\n\r\n      // Combine responses\r\n      const combinedUsage = {\r\n        promptTokens: (initialUsage?.prompt_tokens || 0) + (followUpData.usage?.prompt_tokens || 0),\r\n        completionTokens: (initialUsage?.completion_tokens || 0) + (followUpData.usage?.completion_tokens || 0),\r\n        totalTokens: (initialUsage?.total_tokens || 0) + (followUpData.usage?.total_tokens || 0)\r\n      };\r\n\r\n      // Stream the follow-up content with type safety\r\n      if (followUpMessage?.content && typeof followUpMessage.content === 'string') {\r\n        onStream(followUpMessage.content);\r\n      } else if (followUpMessage?.content) {\r\n        console.warn('⚠️ Mistral follow-up content is not a string:', typeof followUpMessage.content, followUpMessage.content);\r\n      }\r\n\r\n      return {\r\n        content: followUpMessage?.content || 'Tool execution completed.',\r\n        usage: combinedUsage,\r\n        toolCalls: toolCalls\r\n          .filter(tc => tc.id && tc.function?.name)\r\n          .map(tc => ({\r\n            id: tc.id!,\r\n            name: tc.function!.name!,\r\n            arguments: JSON.parse(tc.function!.arguments || '{}')\r\n          }))\r\n      };\r\n    } else {\r\n      const errorText = await followUpResponse.text();\r\n      console.error(`❌ Mistral follow-up call failed (${followUpResponse.status}):`, errorText);\r\n\r\n      // Return original response with tool calls\r\n      return {\r\n        content: initialContent,\r\n        usage: initialUsage ? {\r\n          promptTokens: initialUsage.prompt_tokens || 0,\r\n          completionTokens: initialUsage.completion_tokens || 0,\r\n          totalTokens: initialUsage.total_tokens || 0\r\n        } : undefined,\r\n        toolCalls: toolCalls\r\n          .filter(tc => tc.id && tc.function?.name)\r\n          .map(tc => ({\r\n            id: tc.id!,\r\n            name: tc.function!.name!,\r\n            arguments: JSON.parse(tc.function!.arguments || '{}')\r\n          }))\r\n      };\r\n    }\r\n    /* eslint-enable @typescript-eslint/no-explicit-any */\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleStreamResponse(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    signal?: AbortSignal\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    console.log(`🔍 Starting Mistral stream response handling...`);\r\n    const reader = response.body?.getReader();\r\n    if (!reader) {\r\n      throw new Error('No response body');\r\n    }\r\n\r\n    let fullContent = '';\r\n    let usage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined = undefined;\r\n    let chunkCount = 0;\r\n    const toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }> = [];\r\n    const decoder = new TextDecoder();\r\n\r\n    try {\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n\r\n        const chunk = decoder.decode(value);\r\n        chunkCount++;\r\n        if (chunkCount <= 3) {\r\n          console.log(`🔍 Mistral stream chunk ${chunkCount}:`, chunk.substring(0, 200) + (chunk.length > 200 ? '...' : ''));\r\n        }\r\n        const lines = chunk.split('\\n');\r\n\r\n        for (const line of lines) {\r\n          if (line.startsWith('data: ')) {\r\n            const data = line.slice(6);\r\n            if (data === '[DONE]') continue;\r\n\r\n            try {\r\n              const parsed = JSON.parse(data);\r\n              if (chunkCount <= 5) {\r\n                console.log(`🔍 Mistral parsed chunk ${chunkCount}:`, JSON.stringify(parsed, null, 2));\r\n              }\r\n\r\n              const choice = parsed.choices?.[0];\r\n              const delta = choice?.delta;\r\n              const content = delta?.content || '';\r\n\r\n              if (content && typeof content === 'string') {\r\n                fullContent += content;\r\n                onStream(content);\r\n                console.log(`📝 Mistral content chunk: \"${content}\"`);\r\n              } else if (content) {\r\n                console.warn(`⚠️ Mistral content chunk is not a string:`, typeof content, content);\r\n              }\r\n\r\n              // Check for tool calls and assemble them\r\n              if (delta?.tool_calls) {\r\n                console.log(`🔧 Mistral tool calls detected:`, delta.tool_calls);\r\n\r\n                for (const toolCall of delta.tool_calls) {\r\n                  const index = toolCall.index;\r\n\r\n                  // Initialize tool call if not exists\r\n                  if (!toolCalls[index]) {\r\n                    toolCalls[index] = {\r\n                      id: toolCall.id || '',\r\n                      type: toolCall.type || 'function',\r\n                      function: {\r\n                        name: toolCall.function?.name || '',\r\n                        arguments: ''\r\n                      }\r\n                    };\r\n                  }\r\n\r\n                  // Append arguments\r\n                  if (toolCall.function?.arguments && toolCalls[index].function) {\r\n                    toolCalls[index].function!.arguments += toolCall.function.arguments;\r\n                  }\r\n\r\n                  // Set name if provided\r\n                  if (toolCall.function?.name && toolCalls[index].function) {\r\n                    toolCalls[index].function!.name = toolCall.function.name;\r\n                  }\r\n\r\n                  // Set id if provided\r\n                  if (toolCall.id) {\r\n                    toolCalls[index].id = toolCall.id;\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Capture usage data if available\r\n              if (parsed.usage) {\r\n                usage = parsed.usage;\r\n              }\r\n            } catch (error) {\r\n              console.error(`❌ Mistral error parsing chunk:`, error, `Data: ${data.substring(0, 100)}...`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n\r\n    // Filter out empty tool calls and log final state\r\n    const validToolCalls = toolCalls.filter(tc => tc && tc.function?.name);\r\n\r\n    console.log('🔍 Mistral stream response completed:', {\r\n      contentLength: fullContent.length,\r\n      hasUsage: !!usage,\r\n      usage: usage,\r\n      toolCallsCount: validToolCalls.length\r\n    });\r\n\r\n    if (validToolCalls.length > 0) {\r\n      console.log(`🔧 Mistral assembled ${validToolCalls.length} tool calls:`, validToolCalls.map(tc => ({\r\n        name: tc.function?.name,\r\n        arguments: tc.function?.arguments\r\n      })));\r\n\r\n      // Execute tools and make follow-up call\r\n      return this.executeToolsAndFollowUp(validToolCalls, fullContent, usage, settings, provider, conversationHistory, onStream);\r\n    }\r\n\r\n    return {\r\n      content: fullContent,\r\n      usage: usage ? {\r\n        promptTokens: usage.prompt_tokens || 0,\r\n        completionTokens: usage.completion_tokens || 0,\r\n        totalTokens: usage.total_tokens || 0\r\n      } : undefined,\r\n      toolCalls: validToolCalls\r\n        .filter(tc => tc.id && tc.function?.name)\r\n        .map(tc => ({\r\n          id: tc.id!,\r\n          name: tc.function!.name!,\r\n          arguments: JSON.parse(tc.function!.arguments || '{}')\r\n        }))\r\n    };\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNonStreamResponse(\r\n    response: Response,\r\n    settings: LLMSettings,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    const data = await response.json();\r\n    console.log(`🔍 Mistral raw response:`, JSON.stringify(data, null, 2));\r\n    const choice = data.choices[0];\r\n    const message = choice.message;\r\n    console.log(`🔍 Mistral message:`, message);\r\n\r\n    // Handle tool calls if present - execute immediately like Anthropic\r\n    if (message.tool_calls && message.tool_calls.length > 0) {\r\n      console.log(`🔧 Mistral response contains ${message.tool_calls.length} tool calls:`, message.tool_calls);\r\n\r\n      // Check if we have the parallel execution method injected\r\n      /* eslint-disable @typescript-eslint/no-explicit-any */\r\n      if ((this as any).executeMultipleToolsParallel && (this as any).summarizeToolResultsForModel) {\r\n        console.log(`🚀 Executing ${message.tool_calls.length} Mistral tools immediately`);\r\n        \r\n        // Format tool calls for execution\r\n        const toolCallsForExecution = message.tool_calls.map((toolCall: { id: string; function: { name: string; arguments: string } }) => ({\r\n          id: toolCall.id,\r\n          name: toolCall.function.name,\r\n          arguments: JSON.parse(toolCall.function.arguments)\r\n        }));\r\n\r\n        // Execute tools in parallel immediately\r\n        const executeMultipleToolsParallel = (this as any).executeMultipleToolsParallel;\r\n        const summarizeToolResultsForModel = (this as any).summarizeToolResultsForModel;\r\n        \r\n        try {\r\n          const parallelResults = await executeMultipleToolsParallel(toolCallsForExecution, 'mistral');\r\n          console.log(`✅ Mistral tool execution completed: ${parallelResults.filter((r: any) => r.success).length}/${parallelResults.length} successful`);\r\n          \r\n          // Get tool results summary for the model\r\n          const toolSummary = summarizeToolResultsForModel(parallelResults);\r\n          \r\n          // Return response with tool results included\r\n          return {\r\n            content: (message.content || '') + '\\n\\n' + toolSummary,\r\n            usage: data.usage ? {\r\n              promptTokens: data.usage.prompt_tokens,\r\n              completionTokens: data.usage.completion_tokens,\r\n              totalTokens: data.usage.total_tokens\r\n            } : undefined\r\n          };\r\n        } catch (error) {\r\n          console.error(`❌ Mistral tool execution failed:`, error);\r\n          // Fall back to returning tool calls for external handling\r\n          return {\r\n            content: message.content || '',\r\n            usage: data.usage ? {\r\n              promptTokens: data.usage.prompt_tokens,\r\n              completionTokens: data.usage.completion_tokens,\r\n              totalTokens: data.usage.total_tokens\r\n            } : undefined,\r\n            toolCalls: toolCallsForExecution\r\n          };\r\n        }\r\n        /* eslint-enable @typescript-eslint/no-explicit-any */\r\n      } else {\r\n        console.warn(`⚠️ Mistral provider missing tool execution methods - falling back to external handling`);\r\n        // Fall back to external handling if methods not injected\r\n        return {\r\n          content: message.content || '',\r\n          usage: data.usage ? {\r\n            promptTokens: data.usage.prompt_tokens,\r\n            completionTokens: data.usage.completion_tokens,\r\n            totalTokens: data.usage.total_tokens\r\n          } : undefined,\r\n          toolCalls: message.tool_calls.map((toolCall: { id: string; function: { name: string; arguments: string } }) => ({\r\n            id: toolCall.id,\r\n            name: toolCall.function.name,\r\n            arguments: JSON.parse(toolCall.function.arguments)\r\n          }))\r\n        };\r\n      }\r\n    }\r\n\r\n    const { usage, cost } = this.createUsageAndCost(settings.model, data.usage);\r\n    return {\r\n      content: message.content,\r\n      usage,\r\n      cost\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process files using Mistral's native capabilities\r\n   * Focus on local processing for vision models, no server uploads needed\r\n   */\r\n  async processFiles(files: File[], settings: LLMSettings, provider: LLMProvider): Promise<Array<ContentItem>> {\r\n    console.log('🔍 MistralProvider.processFiles called with:', {\r\n      filesCount: files.length,\r\n      fileNames: files.map(f => f.name),\r\n      fileTypes: files.map(f => f.type),\r\n      hasApiKey: !!settings.apiKey,\r\n      baseUrl: provider.baseUrl\r\n    });\r\n\r\n    // Initialize file service for local processing (no API key needed for local operations)\r\n    if (!this.fileService) {\r\n      console.log('🔧 Initializing Mistral file service for local processing...');\r\n      this.fileService = new MistralFileService(settings.apiKey || 'local', provider.baseUrl);\r\n    }\r\n\r\n    console.log('✅ Mistral file service ready, processing files locally...');\r\n    const contentItems: Array<ContentItem> = [];\r\n\r\n    for (const file of files) {\r\n      console.log(`🔍 Processing file with Mistral: ${file.name} (${file.type}, ${Math.round(file.size/1024)}KB)`);\r\n\r\n      // Validate file support\r\n      const validation = MistralFileService.isFileSupported(file);\r\n      if (!validation.supported) {\r\n        console.warn(`❌ File not supported: ${validation.reason}`);\r\n        contentItems.push({\r\n          type: 'text',\r\n          text: `[File: ${file.name} - ${validation.reason}]`\r\n        });\r\n        continue;\r\n      }\r\n\r\n      try {\r\n        // Use the unified file preparation method for all file types\r\n        const preparedFile = await this.fileService.prepareFileForVision(file);\r\n        contentItems.push(preparedFile as ContentItem);\r\n        console.log(`✅ File processed: ${file.name} (${preparedFile.type})`);\r\n\r\n      } catch (error) {\r\n        console.error(`❌ Error processing file ${file.name}:`, error);\r\n        contentItems.push({\r\n          type: 'text',\r\n          text: `[File: ${file.name} - Processing failed: ${error instanceof Error ? error.message : String(error)}]`\r\n        });\r\n      }\r\n    }\r\n\r\n    console.log(`✅ Mistral file processing complete. Processed ${contentItems.length} items:`,\r\n      contentItems.map(item => ({ type: item.type, hasContent: !!(item.text || item.image_url) }))\r\n    );\r\n\r\n    return contentItems;\r\n  }\r\n\r\n  /**\r\n   * Read text file content (fallback method)\r\n   */\r\n  private async readTextFile(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = error => reject(error);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if file is supported by Mistral\r\n   */\r\n  static isFileSupported(file: File): { supported: boolean; reason?: string } {\r\n    return MistralFileService.isFileSupported(file);\r\n  }\r\n\r\n  /**\r\n   * Create usage and cost information from Mistral API response\r\n   */\r\n  private createUsageAndCost(model: string, usage?: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number }) {\r\n    if (!usage) return { usage: undefined, cost: undefined };\r\n\r\n    const usageInfo = {\r\n      promptTokens: usage.prompt_tokens || 0,\r\n      completionTokens: usage.completion_tokens || 0,\r\n      totalTokens: usage.total_tokens || 0\r\n    };\r\n\r\n    const costInfo = PricingService.calculateCost('mistral', model, usageInfo.promptTokens, usageInfo.completionTokens);\r\n\r\n    return { usage: usageInfo, cost: costInfo };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\N8NProvider.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1028,1204],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1296,1511],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1654,1707],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2338,2411],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2622,2792],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2871,2927],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3378,3448],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":120,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":120,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3992,4054],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 18 to the 15 allowed.","line":181,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":181,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6420,6705],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":207,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":207,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6966,7020],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7140,7212],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8670,8735],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tools' is defined but never used.","line":126,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_signal' is defined but never used.","line":173,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_conversationId' is defined but never used.","line":185,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// N8N provider implementation\r\n\r\nimport { BaseProvider } from './BaseProvider';\r\nimport { \r\n  LLMSettings, \r\n  LLMResponse, \r\n  MessageContent, \r\n  ContentItem, \r\n  LLMProvider,\r\n  ToolObject,\r\n  ProviderCapabilities\r\n} from './types';\r\n\r\nimport { N8N_SYSTEM_PROMPT, generateN8NToolPrompt } from './prompts/n8n';\r\n\r\nexport class N8NProvider extends BaseProvider {\r\n  readonly id = 'n8n';\r\n  readonly name = 'n8n Workflow';\r\n  readonly capabilities: ProviderCapabilities = {\r\n    supportsVision: false,\r\n    supportsTools: false,\r\n    supportsStreaming: true,\r\n    supportsSystemMessages: true,\r\n    maxToolNameLength: undefined,\r\n    toolFormat: 'custom'\r\n  };\r\n\r\n  async sendMessage(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    // N8N workflow integration\r\n    console.log(`🔍 N8N sendMessage called with:`, {\r\n      settingsBaseUrl: settings.baseUrl,\r\n      providerBaseUrl: provider.baseUrl,\r\n      messageType: typeof message\r\n    });\r\n\r\n    const baseUrl = settings.baseUrl || provider.baseUrl;\r\n\r\n    if (!baseUrl) {\r\n      console.error('🚨 N8N webhook URL is missing:', {\r\n        settingsBaseUrl: settings.baseUrl,\r\n        providerBaseUrl: provider.baseUrl,\r\n        hasSettings: !!settings,\r\n        hasProvider: !!provider\r\n      });\r\n      throw new Error('N8N webhook URL is required. Please configure the webhook URL in Settings → API Keys → N8N Base URL.');\r\n    }\r\n\r\n    console.log(`🔍 N8N: Using webhook URL: ${baseUrl}`);\r\n\r\n    // Prepare the payload for the N8N workflow\r\n    const payload = {\r\n      message: typeof message === 'string' ? message : JSON.stringify(message),\r\n      conversationHistory: conversationHistory.map(msg => ({\r\n        role: msg.role,\r\n        content: typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content)\r\n      })),\r\n      settings: {\r\n        model: settings.model,\r\n        temperature: settings.temperature,\r\n        maxTokens: settings.maxTokens,\r\n        systemPrompt: settings.systemPrompt || this.getSystemPrompt()\r\n      },\r\n      conversationId: conversationId || undefined\r\n    };\r\n\r\n    console.log('🔗 N8N webhook payload:', JSON.stringify(payload, null, 2));\r\n\r\n    const response = await fetch(baseUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(payload),\r\n      signal\r\n    });\r\n\r\n    console.log('🔗 N8N response status:', {\r\n      status: response.status,\r\n      statusText: response.statusText,\r\n      ok: response.ok,\r\n      url: response.url\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error('🚨 N8N workflow error response:', error);\r\n      throw new Error(`N8N workflow error (${response.status}): ${error}`);\r\n    }\r\n\r\n    if (onStream) {\r\n      return this.handleStreamResponse(response, onStream, settings, provider, conversationHistory, signal);\r\n    } else {\r\n      return this.handleNonStreamResponse(response, settings, conversationHistory, conversationId);\r\n    }\r\n  }\r\n\r\n  async fetchModels(apiKey: string, baseUrl?: string): Promise<string[]> {\r\n    if (!baseUrl) {\r\n      console.error('❌ No N8N workflow URL provided - cannot fetch models');\r\n      throw new Error('N8N workflow URL is required. Please add the workflow URL in settings.');\r\n    }\r\n\r\n    try {\r\n      // For n8n workflows, we don't fetch models from an endpoint\r\n      // Instead, we return a list of workflow names/IDs that the user can configure\r\n      const workflowName = this.extractWorkflowNameFromUrl(baseUrl);\r\n      if (!workflowName) {\r\n        throw new Error('Could not extract workflow name from N8N URL. Please check the URL format.');\r\n      }\r\n      return [workflowName];\r\n    } catch (error) {\r\n      console.error('❌ Failed to process N8N workflow URL:', error);\r\n      throw error instanceof Error ? error : new Error(`Failed to process N8N workflow URL: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  formatTools(_tools: ToolObject[]): unknown[] {\r\n    // N8N workflows handle tools differently\r\n    return [];\r\n  }\r\n\r\n  getSystemPrompt(): string {\r\n    return N8N_SYSTEM_PROMPT;\r\n  }\r\n\r\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\r\n    if (tools.length === 0) {\r\n      return basePrompt;\r\n    }\r\n\r\n    const toolInstructions = generateN8NToolPrompt(tools);\r\n    return basePrompt + toolInstructions;\r\n  }\r\n\r\n  // Private helper methods\r\n  private extractWorkflowNameFromUrl(url: string): string | null {\r\n    try {\r\n      const urlObj = new URL(url);\r\n      const pathSegments = urlObj.pathname.split('/').filter(Boolean);\r\n      \r\n      // Try to extract a meaningful name from the URL\r\n      if (pathSegments.length > 0) {\r\n        const lastSegment = pathSegments[pathSegments.length - 1];\r\n        // If it looks like a UUID or hash, use a generic name\r\n        if (lastSegment.match(/^[a-f0-9-]{8,}$/i)) {\r\n          return 'n8n-workflow';\r\n        }\r\n        return lastSegment;\r\n      }\r\n      \r\n      return 'n8n-workflow';\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleStreamResponse(\r\n    response: Response,\r\n    _onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    _provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    _signal?: AbortSignal\r\n  ): Promise<LLMResponse> {\r\n    // N8N streaming would depend on the workflow implementation\r\n    return this.handleNonStreamResponse(response, settings, conversationHistory);\r\n  }\r\n  /* eslint-enable @typescript-eslint/no-unused-vars */\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNonStreamResponse(\r\n    response: Response,\r\n    _settings: LLMSettings,\r\n    _conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    _conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    try {\r\n      // First check if response has content\r\n      const responseText = await response.text();\r\n      console.log('🔗 N8N raw response:', {\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        headers: Object.fromEntries(response.headers.entries()),\r\n        bodyLength: responseText.length,\r\n        bodyPreview: responseText.substring(0, 200)\r\n      });\r\n\r\n      if (!responseText.trim()) {\r\n        throw new Error('N8N webhook returned empty response. Check your workflow configuration.');\r\n      }\r\n\r\n      let data;\r\n      try {\r\n        data = JSON.parse(responseText);\r\n      } catch (parseError) {\r\n        console.error('🚨 N8N JSON parse error:', parseError);\r\n        throw new Error(`N8N webhook returned invalid JSON: ${responseText.substring(0, 100)}...`);\r\n      }\r\n\r\n      console.log('🔗 N8N workflow response:', JSON.stringify(data, null, 2));\r\n\r\n      // Handle different possible response formats from N8N workflows\r\n      let content = '';\r\n      let usage = undefined;\r\n\r\n      if (typeof data === 'string') {\r\n        content = data;\r\n      } else if (data.response) {\r\n        content = typeof data.response === 'string' ? data.response : JSON.stringify(data.response);\r\n      } else if (data.message) {\r\n        content = typeof data.message === 'string' ? data.message : JSON.stringify(data.message);\r\n      } else if (data.content) {\r\n        content = typeof data.content === 'string' ? data.content : JSON.stringify(data.content);\r\n      } else {\r\n        content = JSON.stringify(data);\r\n      }\r\n\r\n      // Extract usage information if provided\r\n      if (data.usage) {\r\n        usage = {\r\n          promptTokens: data.usage.promptTokens || data.usage.prompt_tokens || 0,\r\n          completionTokens: data.usage.completionTokens || data.usage.completion_tokens || 0,\r\n          totalTokens: data.usage.totalTokens || data.usage.total_tokens || 0\r\n        };\r\n      } else {\r\n        // Estimate token usage\r\n        const prompt = _conversationHistory.map((msg: {content: string | Array<unknown>}) =>\r\n          typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content)\r\n        ).join(' ');\r\n        usage = this.createEstimatedUsage(prompt, content, 'N8N estimated');\r\n      }\r\n\r\n      return {\r\n        content,\r\n        usage\r\n      };\r\n    } catch (error) {\r\n      console.error('❌ Failed to parse N8N workflow response:', error);\r\n      throw new Error(`Failed to parse N8N workflow response: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\OllamaProvider.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1311,1395],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1432,1556],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":42,"column":98,"nodeType":"Literal","endLine":42,"endColumn":122},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1725,1828],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4281,4333],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4341,4421],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4530,4602],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4787,4955],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5100,5170],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5233,5287],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[6641,6689],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 73 to the 15 allowed.","line":178,"column":9,"nodeType":null,"messageId":"refactorFunction","endLine":178,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7087,7288],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8441,8545],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":215,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":215,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8553,8672],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8680,8848],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8863,9158],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9530,9612],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":234,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":234,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[9638,9720],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9730,9846],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":336,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":336,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13299,13358],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":337,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":337,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13364,13429],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":351,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":351,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13886,14100],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":357,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":357,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14122,14428],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":368,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":368,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14612,14672],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":384,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":384,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15226,15877],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":393,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":393,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15885,15976],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":406,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":406,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16269,16323],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":407,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":407,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16331,16531],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fetchError' is defined but never used.","line":424,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":424,"endColumn":28},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'fetchError' is defined but never used.","line":424,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":424,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":453,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":453,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[18260,18327],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":466,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":466,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[18892,18949],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":566,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":566,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[22181,22253],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":571,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":571,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[22317,22380],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":579,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":579,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22530,22636],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 55 to the 15 allowed.","line":592,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":592,"endColumn":43},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'signal' is defined but never used. Allowed unused args must match /^_/u.","line":598,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":598,"endColumn":11},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":608,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":608,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23917,23985],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":609,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":609,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23991,24089],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":621,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":621,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24438,24516],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":622,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":622,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24530,24610],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":628,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":628,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24748,24802],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":647,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":647,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25442,25518],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":668,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":668,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26409,26460],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":673,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":673,"endColumn":29,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[26613,26695],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":683,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":683,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26825,26938],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":684,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":684,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26944,26997],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":685,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":685,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27003,27052],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":689,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":689,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27214,27306],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":692,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":692,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27437,27541],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":708,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":708,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[28032,28132],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":712,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":712,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28227,28310],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":713,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":713,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28316,28397],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":714,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":714,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28403,28467],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":718,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":718,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28580,28675],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":719,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":719,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28683,28731],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":723,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":723,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28846,28965],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":727,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":727,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29065,29139],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":731,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":731,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29279,29362],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used. Allowed unused args must match /^_/u.","line":748,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":748,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":752,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":752,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30046,30130],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":757,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":757,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[30255,30305],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":761,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":761,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30384,30465],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":762,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":762,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30471,30538],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":766,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":766,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30656,30767],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 25 to the 15 allowed.","line":804,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":804,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":813,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":813,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32505,32578],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":817,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":817,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32950,33030],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":825,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":825,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[33321,33409],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":842,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":842,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34122,34262],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":851,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":851,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34612,34686],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":896,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":896,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[36541,36605],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":909,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":909,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[37073,37166],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":915,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":915,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37309,37391],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":926,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":926,"endColumn":25,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[37800,37894],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":931,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":931,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37960,38057],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":933,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":933,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38237,38294],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":940,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":940,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38439,38523],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":942,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":942,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[38558,38637],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":972,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":972,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[39975,40045],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":978,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":978,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[40375,40445],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1000,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1000,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[41126,41202],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1010,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1010,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[41512,41606],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 73 to the 15 allowed.","line":1044,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":1044,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1094,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1094,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[44467,44576],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1095,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1095,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[44586,44697],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1097,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1097,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[44732,44805],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1140,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1140,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[46602,46711],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1142,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1142,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[46775,46865],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1144,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1144,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[46909,46998],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1147,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1147,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47013,47118],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1148,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1148,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47124,47218],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1203,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1203,"endColumn":31,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[49165,49246],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1217,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1217,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[49632,49757],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1249,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1249,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[50787,50912],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1282,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1282,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[52019,52111],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1283,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1283,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[52117,52180],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1284,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1284,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[52186,52255],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 38 to the 15 allowed.","line":1289,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":1289,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1334,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1334,"endColumn":29,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[54082,54142],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1344,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1344,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[54272,54345],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1348,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1348,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[54446,54518],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1349,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1349,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[54526,54580],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1350,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1350,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[54588,54635],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1351,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1351,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[54643,54692],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1365,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1365,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[55256,55336],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1371,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1371,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[55528,55607],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":1388,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":1388,"endColumn":30},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 86 to the 15 allowed.","line":1428,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":1428,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1434,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1434,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[57486,57568],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1435,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1435,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[57574,57619],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1436,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1436,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[57625,57675],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1447,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1447,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[58000,58055],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1448,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1448,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[58063,58118],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1454,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1454,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[58401,58449],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1460,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1460,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[58621,58686],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1464,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1464,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[58855,58938],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1468,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1468,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[58982,59047],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1507,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1507,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[60309,60362],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1510,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1510,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[60398,60445],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1514,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1514,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[60495,60575],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"uniqueXmlCalls\".","line":1515,"column":30,"nodeType":"ConditionalExpression","messageId":"doImmediateAction","endLine":1515,"endColumn":106,"fix":{"range":[60583,60712],"text":"return this.deduplicateToolCalls ? this.deduplicateToolCalls(toolCalls) : toolCalls"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1553,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1553,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[62552,62656],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1555,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1555,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[62686,62813],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1558,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1558,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[62859,62950],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1564,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1564,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[63076,63169],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1581,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1581,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[63776,63854],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1586,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1586,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[64007,64079],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1588,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1588,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[64122,64208],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1591,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1591,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[64251,64355],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1601,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1601,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[64812,64899],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1607,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1607,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[65023,65110],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1623,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1623,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[65772,65885],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1627,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1627,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[66002,66070],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1648,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1648,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[66900,67005],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1653,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1653,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[67145,67204],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1668,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1668,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[67759,67870],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1671,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1671,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[67908,67968],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1687,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1687,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[68498,68565],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1697,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1697,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[68930,68998],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1713,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1713,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[69717,69787],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 19 to the 15 allowed.","line":1724,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":1724,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1729,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1729,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[70082,70162],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1770,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1770,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[71582,71633],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1785,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1785,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[72187,72251],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1797,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1797,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[72504,72571],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1826,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1826,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[73619,73696],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1829,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1829,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[73768,73835],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-nested-template-literals","severity":2,"message":"Refactor this code to not use nested template literals.","line":1832,"column":184,"nodeType":"TemplateLiteral","messageId":"nestedTemplateLiterals","endLine":1832,"endColumn":198},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1836,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1836,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[74269,74348],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1841,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1841,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[74501,74590],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1852,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1852,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[74914,74982],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1854,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1854,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[75017,75080],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1879,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1879,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[75795,75860],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1885,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1885,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[76190,76260],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'settings' is defined but never used. Allowed unused args must match /^_/u.","line":1997,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1997,"endColumn":13},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used. Allowed unused args must match /^_/u.","line":1998,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1998,"endColumn":24},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used. Allowed unused args must match /^_/u.","line":1999,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1999,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2003,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2003,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[80875,80945],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2008,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2008,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[81102,81206],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'signal' is defined but never used.","line":598,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":598,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":617,"column":16,"nodeType":"Literal","messageId":"unexpected","endLine":617,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used.","line":748,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":748,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":1174,"column":18,"nodeType":"Literal","messageId":"unexpected","endLine":1174,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":1305,"column":16,"nodeType":"Literal","messageId":"unexpected","endLine":1305,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'settings' is defined but never used.","line":1997,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1997,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used.","line":1998,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1998,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used.","line":1999,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1999,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":18,"fatalErrorCount":0,"warningCount":143,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Ollama provider implementation\r\n\r\nimport { BaseProvider } from './BaseProvider';\r\nimport {\r\n  LLMSettings,\r\n  LLMResponse,\r\n  MessageContent,\r\n  ContentItem,\r\n  LLMProvider,\r\n  ToolObject,\r\n  ProviderCapabilities\r\n} from './types';\r\n\r\nimport { OLLAMA_SYSTEM_PROMPT, generateOllamaToolPrompt } from './prompts/ollama';\r\n\r\nexport class OllamaProvider extends BaseProvider {\r\n  readonly id = 'ollama';\r\n  readonly name = 'Ollama (Local)';\r\n\r\n  // Cache for model tool support detection\r\n  private static modelToolSupportCache = new Map<string, boolean>();\r\n\r\n  readonly capabilities: ProviderCapabilities = {\r\n    supportsVision: true,\r\n    supportsTools: true, // Dynamic: structured tools if supported, text-based fallback\r\n    supportsStreaming: true,\r\n    supportsSystemMessages: true,\r\n    maxToolNameLength: undefined,\r\n    toolFormat: 'adaptive' // Adaptive: structured tools or text-based based on model\r\n  };\r\n\r\n  // Check if a specific model supports structured tools\r\n  private async checkModelSupportsStructuredTools(model: string, baseUrl?: string): Promise<boolean> {\r\n    // Check cache first\r\n    const cacheKey = `${model}@${baseUrl || 'default'}`;\r\n    if (OllamaProvider.modelToolSupportCache.has(cacheKey)) {\r\n      const cached = OllamaProvider.modelToolSupportCache.get(cacheKey)!;\r\n      console.log(`🔍 Ollama: Using cached tool support for model \"${model}\": ${cached}`);\r\n      return cached;\r\n    }\r\n\r\n    console.log(`🔍 Ollama: Testing structured tool support for model \"${model}\" at ${baseUrl || 'http://localhost:11434'}...`);\r\n\r\n    // Most Ollama models don't support structured tools yet, so default to text-based\r\n    // This ensures models get tool descriptions in their system prompt\r\n    console.log(`🔍 Ollama: Defaulting to text-based tools for model \"${model}\" (most reliable approach)`);\r\n    OllamaProvider.modelToolSupportCache.set(cacheKey, false);\r\n    return false;\r\n\r\n    // TODO: Re-enable actual testing if needed, but for now this is more reliable\r\n    /*\r\n    // Test with a simple tool call to detect support\r\n    try {\r\n      const ollamaUrl = (baseUrl || 'http://localhost:11434').replace('/v1', '');\r\n      const endpoint = `${ollamaUrl}/api/chat`;\r\n\r\n      const testRequestBody = {\r\n        model: model,\r\n        messages: [{ role: 'user', content: 'Test message' }],\r\n        stream: false,\r\n        tools: [{\r\n          type: 'function',\r\n          function: {\r\n            name: 'test_tool',\r\n            description: 'Test tool for capability detection',\r\n            parameters: {\r\n              type: 'object',\r\n              properties: {\r\n                test: { type: 'string', description: 'Test parameter' }\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      };\r\n\r\n      const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(testRequestBody)\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Model supports structured tools\r\n        console.log(`✅ Ollama: Model \"${model}\" supports structured tools`);\r\n        OllamaProvider.modelToolSupportCache.set(cacheKey, true);\r\n        return true;\r\n      } else {\r\n        const errorText = await response.text();\r\n        if (errorText.includes('does not support tools')) {\r\n          // Model explicitly doesn't support tools\r\n          console.log(`❌ Ollama: Model \"${model}\" does not support structured tools`);\r\n          OllamaProvider.modelToolSupportCache.set(cacheKey, false);\r\n          return false;\r\n        } else {\r\n          // Other error - assume no tool support to be safe\r\n          console.log(`⚠️ Ollama: Model \"${model}\" tool support unknown (error: ${errorText}), assuming no support`);\r\n          OllamaProvider.modelToolSupportCache.set(cacheKey, false);\r\n          return false;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Network or other error - assume no tool support to be safe\r\n      console.log(`⚠️ Ollama: Failed to test tool support for model \"${model}\":`, error);\r\n      OllamaProvider.modelToolSupportCache.set(cacheKey, false);\r\n      return false;\r\n    }\r\n    */\r\n  }\r\n\r\n  // Ollama-specific tool calling methods\r\n  private async getOllamaTools(settings: LLMSettings): Promise<unknown[]> {\r\n    try {\r\n      console.log(`🔍 Getting tools for Ollama provider`);\r\n      console.log(`🔍 Tool calling enabled:`, settings?.toolCallingEnabled !== false);\r\n\r\n      // Check if tool calling is disabled\r\n      if (settings?.toolCallingEnabled === false) {\r\n        console.log(`🚫 Tool calling is disabled, returning empty tools array`);\r\n        return [];\r\n      }\r\n\r\n      // Get raw tools from the centralized service (temporarily)\r\n      const rawTools = await this.getMCPToolsForProvider('ollama', settings);\r\n      console.log(`📋 Raw tools received (${rawTools.length} tools):`, (rawTools as Array<{name?: string, function?: {name?: string}}>).map(t => t.name || t.function?.name));\r\n\r\n      // Format tools specifically for Ollama (uses OpenAI format)\r\n      const formattedTools = this.formatToolsForOllama(rawTools);\r\n      console.log(`🔧 Formatted ${formattedTools.length} tools for Ollama`);\r\n\r\n      return formattedTools;\r\n    } catch (error) {\r\n      console.error('❌ Failed to get Ollama tools:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private formatToolsForOllama(rawTools: unknown[]): unknown[] {\r\n    return rawTools.map(tool => {\r\n      const typedTool = tool as {type?: string, function?: {name?: string, description?: string, parameters?: unknown}, name?: string, description?: string, inputSchema?: unknown};\r\n\r\n      // All tools now come in unified format with type: 'function' and function object\r\n      if (typedTool.type === 'function' && typedTool.function) {\r\n        return {\r\n          type: 'function',\r\n          function: {\r\n            name: typedTool.function.name || 'unknown_tool',\r\n            description: typedTool.function.description || 'No description',\r\n            parameters: typedTool.function.parameters || {\r\n              type: 'object',\r\n              properties: {},\r\n              required: []\r\n            }\r\n          }\r\n        };\r\n      }\r\n\r\n      // Handle MCP tools (need conversion to OpenAI format)\r\n      if (typedTool.name && typedTool.description) {\r\n        return {\r\n          type: 'function',\r\n          function: {\r\n            name: typedTool.name,\r\n            description: typedTool.description,\r\n            parameters: typedTool.inputSchema || {\r\n              type: 'object',\r\n              properties: {},\r\n              required: []\r\n            }\r\n          }\r\n        };\r\n      }\r\n\r\n      console.warn(`⚠️ Skipping invalid tool:`, tool);\r\n      return null;\r\n    }).filter(tool => tool !== null);\r\n  }\r\n\r\n  async sendMessage(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔍 Ollama sendMessage called with:`, {\r\n      model: settings.model,\r\n      baseUrl: settings.baseUrl,\r\n      providerBaseUrl: provider.baseUrl,\r\n      messageType: typeof message\r\n    });\r\n    // Ollama API - check if using OpenAI-compatible endpoint or native API\r\n    const baseUrl = settings.baseUrl || provider.baseUrl || 'http://localhost:11434';\r\n\r\n    const messages = [];\r\n\r\n    // Get tools for text-based descriptions (Ollama doesn't support structured tools)\r\n    const ollamaTools = await this.getOllamaTools(settings);\r\n\r\n    // Use behavioral system prompt + tool descriptions (text-based approach)\r\n    // Check for meaningful system prompt, not just empty string or generic default\r\n    const hasCustomSystemPrompt = settings.systemPrompt &&\r\n      settings.systemPrompt.trim() &&\r\n      settings.systemPrompt !== \"You are a helpful AI assistant. Please provide concise and helpful responses.\";\r\n\r\n    let systemPrompt = hasCustomSystemPrompt ? settings.systemPrompt! : this.getSystemPrompt();\r\n\r\n    // Add tool descriptions to system prompt (Ollama doesn't support structured tools)\r\n    if (ollamaTools.length > 0) {\r\n      const originalLength = systemPrompt.length;\r\n      systemPrompt = this.enhanceSystemPromptWithTools(systemPrompt, ollamaTools as ToolObject[]);\r\n      const newLength = systemPrompt.length;\r\n      console.log(`🔧 Ollama enhanced system prompt with ${ollamaTools.length} text-based tool descriptions`);\r\n      console.log(`🔧 Ollama system prompt length: ${originalLength} → ${newLength} (+${newLength - originalLength} chars)`);\r\n      console.log(`🔧 Ollama tool names included:`, (ollamaTools as Array<{function?: {name?: string}, name?: string}>).map(t => t.function?.name || t.name).filter(Boolean));\r\n    }\r\n\r\n    console.log(`🔍 Ollama system prompt source:`, {\r\n      hasCustom: hasCustomSystemPrompt,\r\n      usingCustom: hasCustomSystemPrompt,\r\n      promptLength: systemPrompt?.length || 0,\r\n      promptStart: systemPrompt?.substring(0, 200) + '...',\r\n      toolsIncluded: ollamaTools.length > 0\r\n    });\r\n\r\n    // Debug: Show a sample of the actual system prompt to verify tool descriptions are included\r\n    if (systemPrompt && systemPrompt.length > 1000) {\r\n      const toolSectionStart = systemPrompt.indexOf('Available Tools:');\r\n      if (toolSectionStart !== -1) {\r\n        const toolSection = systemPrompt.substring(toolSectionStart, toolSectionStart + 500);\r\n        console.log(`🔧 Ollama system prompt tool section preview:`, toolSection + '...');\r\n      } else {\r\n        console.warn(`⚠️ Ollama: \"Available Tools:\" section not found in system prompt!`);\r\n        console.log(`🔧 Ollama system prompt end preview:`, systemPrompt.substring(Math.max(0, systemPrompt.length - 500)));\r\n      }\r\n    }\r\n\r\n    if (systemPrompt) {\r\n      messages.push({ role: 'system', content: systemPrompt });\r\n    }\r\n\r\n    // Add conversation history (convert ContentItem arrays to Ollama format)\r\n    for (const historyMessage of conversationHistory) {\r\n      if (Array.isArray(historyMessage.content)) {\r\n        // Convert ContentItem array to Ollama format\r\n        let textContent = '';\r\n        const images: string[] = [];\r\n\r\n        for (const item of historyMessage.content as ContentItem[]) {\r\n          if (item.type === 'text') {\r\n            textContent += item.text || '';\r\n          } else if (item.type === 'image_url') {\r\n            // Extract base64 data from data URL for Ollama\r\n            const imageUrl = item.image_url?.url || '';\r\n            if (imageUrl.includes(',')) {\r\n              const base64Data = imageUrl.split(',')[1];\r\n              images.push(base64Data);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (images.length > 0) {\r\n          messages.push({\r\n            role: historyMessage.role,\r\n            content: textContent,\r\n            images: images\r\n          });\r\n        } else {\r\n          messages.push({ role: historyMessage.role, content: textContent });\r\n        }\r\n      } else {\r\n        // String content, add as-is\r\n        messages.push(historyMessage);\r\n      }\r\n    }\r\n\r\n    // Add current message\r\n    if (typeof message === 'string') {\r\n      messages.push({ role: 'user', content: message });\r\n    } else if (Array.isArray(message)) {\r\n      // Handle ContentItem array format (from chatService.ts)\r\n      // Ollama's native API expects content to be a string, not an array\r\n      // We need to convert the ContentItem array to Ollama's format\r\n\r\n      let textContent = '';\r\n      const images: string[] = [];\r\n\r\n      for (const item of message as ContentItem[]) {\r\n        if (item.type === 'text') {\r\n          textContent += item.text || '';\r\n        } else if (item.type === 'image_url') {\r\n          // Extract base64 data from data URL for Ollama\r\n          const imageUrl = item.image_url?.url || '';\r\n          if (imageUrl.includes(',')) {\r\n            const base64Data = imageUrl.split(',')[1];\r\n            images.push(base64Data);\r\n          }\r\n        } else if (item.type === 'document') {\r\n          // Handle documents as text for Ollama\r\n          textContent += `\\n\\n[Document: ${item.document?.name || 'document'}]`;\r\n        }\r\n      }\r\n\r\n      if (images.length > 0) {\r\n        // Use Ollama's vision format: { text: string, images: string[] }\r\n        messages.push({\r\n          role: 'user',\r\n          content: textContent,\r\n          images: images\r\n        });\r\n      } else {\r\n        // Text-only message\r\n        messages.push({ role: 'user', content: textContent });\r\n      }\r\n    } else {\r\n      // Handle legacy vision format\r\n      const messageWithImages = message as { text: string; images: string[] };\r\n\r\n      if (messageWithImages.images && messageWithImages.images.length > 0) {\r\n        // Convert data URLs to base64 data for Ollama\r\n        const images = messageWithImages.images.map(imageUrl => {\r\n          return imageUrl.includes(',') ? imageUrl.split(',')[1] : imageUrl;\r\n        });\r\n\r\n        messages.push({\r\n          role: 'user',\r\n          content: messageWithImages.text,\r\n          images: images\r\n        });\r\n      } else {\r\n        messages.push({ role: 'user', content: messageWithImages.text });\r\n      }\r\n    }\r\n\r\n    console.log(`🔍 Ollama: Using model: \"${settings.model}\"`);\r\n    console.log(`🔍 Ollama: Available tools: ${ollamaTools.length}`);\r\n\r\n    const requestBody: Record<string, unknown> = {\r\n      model: settings.model,\r\n      messages: messages,\r\n      temperature: settings.temperature,\r\n      max_tokens: settings.maxTokens,\r\n      stream: !!onStream\r\n    };\r\n\r\n    // Check if model supports structured tools\r\n    const supportsStructuredTools = await this.checkModelSupportsStructuredTools(settings.model, baseUrl);\r\n\r\n    if (supportsStructuredTools && ollamaTools.length > 0) {\r\n      console.log(`🚀 Ollama API call with structured tools:`, {\r\n        model: settings.model,\r\n        toolCount: ollamaTools.length,\r\n        note: 'Model supports structured tools - using tools parameter'\r\n      });\r\n    } else {\r\n      console.log(`🚀 Ollama API call with text-based tools:`, {\r\n        model: settings.model,\r\n        toolDescriptionsInSystemPrompt: ollamaTools.length > 0,\r\n        toolCount: ollamaTools.length,\r\n        note: 'Model does not support structured tools - using text descriptions in system prompt'\r\n      });\r\n    }\r\n\r\n    // Use Ollama's native /api/chat endpoint (not OpenAI-compatible)\r\n    const ollamaUrl = baseUrl.replace('/v1', '');\r\n    const endpoint = `${ollamaUrl}/api/chat`;\r\n    console.log(`🔍 Ollama: Using native API URL: ${endpoint}`);\r\n\r\n    // Convert to Ollama's native format with dynamic tool support\r\n    const ollamaRequestBody = {\r\n      model: requestBody.model,\r\n      messages: requestBody.messages,\r\n      stream: requestBody.stream,\r\n      options: {\r\n        temperature: requestBody.temperature,\r\n        num_predict: requestBody.max_tokens\r\n      },\r\n      // Include structured tools only if model supports them\r\n      ...(supportsStructuredTools && ollamaTools.length > 0 && { tools: ollamaTools })\r\n    };\r\n\r\n    // Debug: Show what's actually being sent to Ollama\r\n    console.log(`🔍 Ollama request debug:`, {\r\n      model: ollamaRequestBody.model,\r\n      messageCount: (ollamaRequestBody.messages as unknown[]).length,\r\n      hasStructuredTools: 'tools' in ollamaRequestBody,\r\n      structuredToolCount: supportsStructuredTools && ollamaTools.length > 0 ? ollamaTools.length : 0,\r\n      systemMessageLength: ((ollamaRequestBody.messages as Array<{role: string, content: string}>).find(m => m.role === 'system')?.content?.length || 0),\r\n      systemMessagePreview: ((ollamaRequestBody.messages as Array<{role: string, content: string}>).find(m => m.role === 'system')?.content?.substring(0, 200) || '') + '...'\r\n    });\r\n\r\n    console.log(`🔍 Ollama: Native request body:`, JSON.stringify(ollamaRequestBody, null, 2));\r\n\r\n    const response = await fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(ollamaRequestBody),\r\n      signal\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error('🚨 Ollama API error response:', error);\r\n      console.error('🚨 Ollama API error details:', {\r\n        status: response.status,\r\n        statusText: response.statusText,\r\n        url: response.url,\r\n        requestModel: settings.model\r\n      });\r\n\r\n      // Handle model not found error specifically\r\n      if (response.status === 404 && error.includes('not found')) {\r\n        try {\r\n          // Try to get available models to suggest alternatives\r\n          const availableModels = await this.fetchModels('', baseUrl);\r\n          const modelSuggestions = availableModels.length > 0\r\n            ? `\\n\\nAvailable models: ${availableModels.slice(0, 5).join(', ')}${availableModels.length > 5 ? '...' : ''}`\r\n            : '\\n\\nNo models found. Please install models using: ollama pull <model-name>';\r\n\r\n          throw new Error(`Model \"${settings.model}\" not found in Ollama.${modelSuggestions}\\n\\nTo install this model, run: ollama pull ${settings.model}`);\r\n        } catch (fetchError) {\r\n          // If we can't fetch models, just show the basic error\r\n          throw new Error(`Model \"${settings.model}\" not found in Ollama. Please install it using: ollama pull ${settings.model}`);\r\n        }\r\n      }\r\n\r\n      throw new Error(`Ollama API error: ${error}`);\r\n    }\r\n\r\n    if (onStream) {\r\n      return this.handleNativeStreamResponse(response, onStream, settings, provider, conversationHistory, signal);\r\n    } else {\r\n      return this.handleNativeNonStreamResponse(response, settings, conversationHistory, conversationId);\r\n    }\r\n  }\r\n\r\n  async fetchModels(apiKey: string, baseUrl?: string): Promise<string[]> {\r\n    const ollamaUrl = baseUrl || 'http://localhost:11434';\r\n    \r\n    try {\r\n      // Ollama models endpoint\r\n      const response = await fetch(`${ollamaUrl}/api/tags`, {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`❌ Ollama API error: ${response.status}`, errorText);\r\n        throw new Error(`Failed to connect to Ollama at ${ollamaUrl}. Status: ${response.status} - ${errorText}. Make sure Ollama is running and accessible.`);\r\n      }\r\n\r\n      const data = await response.json() as { models?: Array<{ name: string }> };\r\n      const models = data.models?.map((model) => model.name)?.sort() || [];\r\n\r\n      if (models.length === 0) {\r\n        throw new Error(`No models found in Ollama at ${ollamaUrl}. Please install some models using 'ollama pull <model-name>'.`);\r\n      }\r\n\r\n      return models;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch Ollama models:', error);\r\n      throw error instanceof Error ? error : new Error(`Failed to fetch Ollama models: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  formatTools(tools: ToolObject[]): unknown[] {\r\n    // Ollama uses OpenAI-compatible format\r\n    return tools.map(tool => ({\r\n      type: 'function',\r\n      function: {\r\n        name: tool.name || tool.function?.name,\r\n        description: tool.description || tool.function?.description,\r\n        parameters: tool.parameters || tool.function?.parameters || {\r\n          type: 'object',\r\n          properties: {},\r\n          required: []\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  getSystemPrompt(): string {\r\n    return OLLAMA_SYSTEM_PROMPT;\r\n  }\r\n\r\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\r\n    if (tools.length === 0) {\r\n      return basePrompt;\r\n    }\r\n\r\n    const toolInstructions = generateOllamaToolPrompt(tools);\r\n    return basePrompt + toolInstructions;\r\n  }\r\n\r\n  validateToolCall(toolCall: { id?: string; name: string; arguments: Record<string, unknown> }): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!toolCall.name || typeof toolCall.name !== 'string') {\r\n      errors.push('Tool call must have a valid name');\r\n    }\r\n\r\n    if (!toolCall.arguments || typeof toolCall.arguments !== 'object') {\r\n      errors.push('Tool call must have valid arguments object');\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  validateTool(tool: unknown): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!tool || typeof tool !== 'object') {\r\n      errors.push('Tool must be an object');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const toolObj = tool as Record<string, unknown>;\r\n\r\n    if (!toolObj.type || toolObj.type !== 'function') {\r\n      errors.push('Ollama tools must have type: \"function\"');\r\n    }\r\n\r\n    if (!toolObj.function || typeof toolObj.function !== 'object') {\r\n      errors.push('Ollama tools must have function object');\r\n    } else {\r\n      const func = toolObj.function as Record<string, unknown>;\r\n      if (!func.name) {\r\n        errors.push('Ollama tools must have function.name');\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n\r\n\r\n  // Parse text-based tool calls from content\r\n  private parseTextBasedToolCalls(content: string): Array<{ name: string; arguments: Record<string, unknown> }> {\r\n    const toolCalls: Array<{ name: string; arguments: Record<string, unknown> }> = [];\r\n\r\n    try {\r\n      // Look for JSON blocks in the content\r\n      const jsonBlocks = content.match(/```json\\s*([\\s\\S]*?)\\s*```/g);\r\n\r\n      if (jsonBlocks) {\r\n        for (const block of jsonBlocks) {\r\n          // Extract JSON content\r\n          const jsonContent = block.replace(/```json\\s*/, '').replace(/\\s*```/, '').trim();\r\n\r\n          try {\r\n            const parsed = JSON.parse(jsonContent);\r\n\r\n            // Check if it's a tool call\r\n            if (parsed.tool_call && parsed.tool_call.name) {\r\n              toolCalls.push({\r\n                name: parsed.tool_call.name,\r\n                arguments: parsed.tool_call.arguments || {}\r\n              });\r\n            }\r\n          } catch (parseError) {\r\n            console.warn(`⚠️ Failed to parse JSON block:`, jsonContent, parseError);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(`⚠️ Error parsing text-based tool calls:`, error);\r\n    }\r\n\r\n    return toolCalls;\r\n  }\r\n\r\n  // Check if a model supports tool calling\r\n  private modelSupportsTools(modelName: string): boolean {\r\n    console.log(`🔍 Ollama: Assuming tool support for model: \"${modelName}\" (user can name models anything)`);\r\n\r\n    // ALWAYS return true - let the API determine if tools are supported\r\n    // Users can name their models anything in Ollama, so name-based detection is unreliable\r\n    // If a model doesn't support tools, the API will simply ignore the tools parameter\r\n    return true;\r\n  }\r\n\r\n  // Private helper methods\r\n  // This method is injected by the ProviderAdapter from the LLMService\r\n  private getMCPToolsForProvider!: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNativeStreamResponse(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    signal?: AbortSignal\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    // Use native Ollama tool calling - similar to OpenAI provider\r\n    let fullContent = '';\r\n    let usage: { promptTokens?: number; completionTokens?: number; totalTokens?: number } | undefined;\r\n    const toolCalls: Array<{ id: string; function: { name: string; arguments: string } }> = [];\r\n    let chunkCount = 0;\r\n    let streamingComplete = false;\r\n\r\n    console.log('🔍 Ollama: Starting to process streaming response...');\r\n    console.log('🔍 Ollama: IMPORTANT - Tool execution will only happen AFTER streaming is complete');\r\n\r\n    if (response.body) {\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder();\r\n\r\n      try {\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n          const { done, value } = await reader.read();\r\n          if (done) {\r\n            streamingComplete = true;\r\n            console.log(`🔍 Ollama: Stream ended. Total chunks processed: ${chunkCount}`);\r\n            console.log(`🔍 Ollama: Streaming is now COMPLETE - ready for tool processing`);\r\n            break;\r\n          }\r\n\r\n          const chunk = decoder.decode(value, { stream: true });\r\n          chunkCount++;\r\n          console.log(`🔍 Ollama: Chunk ${chunkCount}:`, chunk);\r\n\r\n          const lines = chunk.split('\\n').filter(line => line.trim());\r\n\r\n          for (const line of lines) {\r\n            try {\r\n              // Ollama native API returns JSON objects directly (no \"data: \" prefix)\r\n              const parsed = JSON.parse(line);\r\n\r\n              // Ollama native streaming format\r\n              const message = parsed.message;\r\n\r\n              if (message?.content) {\r\n                fullContent += message.content;\r\n                onStream(message.content);\r\n              }\r\n\r\n              // Handle tool calls in Ollama native format\r\n              if (message?.tool_calls) {\r\n                console.log(`🔧 Ollama: Found tool calls in response:`, message.tool_calls);\r\n                for (const toolCall of message.tool_calls) {\r\n                  if (toolCall.function) {\r\n                    toolCalls.push({\r\n                      id: toolCall.id || `call_${Date.now()}`,\r\n                      function: {\r\n                        name: toolCall.function.name,\r\n                        arguments: JSON.stringify(toolCall.function.arguments) || '{}'\r\n                      }\r\n                    });\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Handle final response with usage data\r\n              if (parsed.done && parsed.total_duration) {\r\n                usage = {\r\n                  promptTokens: parsed.prompt_eval_count || 0,\r\n                  completionTokens: parsed.eval_count || 0,\r\n                  totalTokens: (parsed.prompt_eval_count || 0) + (parsed.eval_count || 0)\r\n                };\r\n                console.log(`🔍 Ollama: Final usage data:`, usage);\r\n              }\r\n            } catch (error) {\r\n              // Skip empty lines or malformed JSON\r\n              if (line.trim()) {\r\n                console.warn('Failed to parse Ollama streaming chunk:', error, 'Raw line:', line);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } finally {\r\n        reader.releaseLock();\r\n      }\r\n    }\r\n\r\n    console.log(`🔍 Ollama: Final results - Content length: ${fullContent.length}, Tool calls: ${toolCalls.length}`);\r\n    console.log(`🔍 Ollama: Full content:`, fullContent);\r\n    console.log(`🔍 Ollama: Tool calls:`, toolCalls);\r\n\r\n    // If no native tool calls found, check for text-based tool calls in content\r\n    if (toolCalls.length === 0 && fullContent.includes('```json')) {\r\n      console.log(`🔍 Ollama: No native tool calls found, checking for text-based tool calls...`);\r\n      const textBasedToolCalls = this.parseTextBasedToolCalls(fullContent);\r\n      if (textBasedToolCalls.length > 0) {\r\n        console.log(`🔧 Ollama: Found ${textBasedToolCalls.length} text-based tool calls:`, textBasedToolCalls);\r\n        // Convert to native format\r\n        for (const textTool of textBasedToolCalls) {\r\n          toolCalls.push({\r\n            id: `call_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n            function: {\r\n              name: textTool.name,\r\n              arguments: JSON.stringify(textTool.arguments)\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // IMPORTANT: Verify streaming is complete before tool execution\r\n    if (!streamingComplete) {\r\n      console.error(`❌ Ollama: CRITICAL ERROR - Attempting tool execution before streaming is complete!`);\r\n      throw new Error('Tool execution attempted before streaming completion');\r\n    }\r\n\r\n    console.log(`✅ Ollama: Streaming is CONFIRMED COMPLETE. Processing tool calls...`);\r\n    console.log(`🔍 Ollama: Final content length: ${fullContent.length} characters`);\r\n    console.log(`🔍 Ollama: Total chunks processed: ${chunkCount}`);\r\n\r\n    // If we have tool calls, execute them and make a follow-up call\r\n    if (toolCalls.length > 0) {\r\n      console.log(`🔧 Ollama found ${toolCalls.length} native tool calls AFTER streaming completed`);\r\n      console.log(`🔧 Ollama tool calls:`, toolCalls);\r\n\r\n      // Stream any initial content first\r\n      if (fullContent && typeof onStream === 'function') {\r\n        console.log(`🔄 Ollama: All content already streamed during response. Content: \"${fullContent.substring(0, 200)}...\"`);\r\n        // Content was already streamed during parsing, no need to stream again\r\n      }\r\n\r\n      console.log(`🚀 Ollama: Now executing tools AFTER complete streaming...`);\r\n      return this.executeNativeToolCalls(toolCalls, fullContent, usage, settings, provider, conversationHistory, onStream);\r\n    }\r\n\r\n    console.log(`🔍 Ollama: No tool calls found, returning content: \"${fullContent}\"`);\r\n    return {\r\n      content: fullContent,\r\n      usage: usage ? {\r\n        promptTokens: usage.promptTokens || 0,\r\n        completionTokens: usage.completionTokens || 0,\r\n        totalTokens: usage.totalTokens || 0\r\n      } : undefined,\r\n      toolCalls: []\r\n    };\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNativeNonStreamResponse(\r\n    response: Response,\r\n    settings: LLMSettings,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    const data = await response.json();\r\n    console.log(`🔍 Ollama native non-stream response:`, JSON.stringify(data, null, 2));\r\n\r\n    // Ollama native response format has message directly\r\n    const message = data.message;\r\n    if (!message) {\r\n      console.error('❌ Ollama: No message in response');\r\n      return { content: '', usage: undefined, toolCalls: [] };\r\n    }\r\n\r\n    console.log(`🔍 Ollama: Message content: \"${message?.content || 'NO CONTENT'}\"`);\r\n    console.log(`🔍 Ollama: Message tool_calls:`, message?.tool_calls);\r\n\r\n    // Handle native tool calls if present\r\n    if (message.tool_calls && message.tool_calls.length > 0) {\r\n      console.log(`🔧 Ollama native response contains ${message.tool_calls.length} tool calls:`, message.tool_calls);\r\n\r\n      // Convert tool calls to expected format\r\n      const formattedToolCalls = message.tool_calls.map((tc: {id?: string, function: {name: string, arguments: string}}) => ({\r\n        id: tc.id || `call_${Date.now()}`,\r\n        function: {\r\n          name: tc.function.name,\r\n          arguments: JSON.stringify(tc.function.arguments) || '{}'\r\n        }\r\n      }));\r\n\r\n      // Execute tool calls and make follow-up call\r\n      return this.executeNativeToolCalls(\r\n        formattedToolCalls,\r\n        message.content || '',\r\n        data.total_duration ? {\r\n          promptTokens: data.prompt_eval_count || 0,\r\n          completionTokens: data.eval_count || 0,\r\n          totalTokens: (data.prompt_eval_count || 0) + (data.eval_count || 0)\r\n        } : undefined,\r\n        settings,\r\n        { id: 'ollama', name: 'Ollama' } as LLMProvider,\r\n        conversationHistory,\r\n        () => {} // No-op for non-stream\r\n      );\r\n    }\r\n\r\n    return {\r\n      content: message.content || '',\r\n      usage: data.total_duration ? {\r\n        promptTokens: data.prompt_eval_count || 0,\r\n        completionTokens: data.eval_count || 0,\r\n        totalTokens: (data.prompt_eval_count || 0) + (data.eval_count || 0)\r\n      } : undefined,\r\n      toolCalls: []\r\n    };\r\n  }\r\n\r\n  private async executeNativeToolCalls(\r\n    toolCalls: Array<{ id: string; function: { name: string; arguments: string } }>,\r\n    originalContent: string,\r\n    usage: { promptTokens?: number; completionTokens?: number; totalTokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔧 Ollama executing ${toolCalls.length} native tool calls`);\r\n\r\n    // Check if we have parallel execution method injected (like Anthropic/Mistral)\r\n    if ((this as unknown as {executeMultipleToolsParallel?: unknown, summarizeToolResultsForModel?: unknown}).executeMultipleToolsParallel && (this as unknown as {executeMultipleToolsParallel?: unknown, summarizeToolResultsForModel?: unknown}).summarizeToolResultsForModel) {\r\n      console.log(`🚀 Using parallel execution for ${toolCalls.length} Ollama tools`);\r\n      \r\n      // Format tool calls for parallel execution\r\n      const toolCallsForExecution = toolCalls.map(tc => {\r\n        let parsedArgs: Record<string, unknown> = {};\r\n        try {\r\n          parsedArgs = JSON.parse(tc.function.arguments);\r\n        } catch (parseError) {\r\n          console.warn(`⚠️ Failed to parse tool arguments: ${tc.function.arguments}`, parseError);\r\n          parsedArgs = {};\r\n        }\r\n        \r\n        return {\r\n          id: tc.id,\r\n          name: tc.function.name,\r\n          arguments: parsedArgs\r\n        };\r\n      });\r\n\r\n      try {\r\n        // Execute tools in parallel immediately\r\n        const executeMultipleToolsParallel = (this as unknown as {executeMultipleToolsParallel: unknown}).executeMultipleToolsParallel;\r\n        const summarizeToolResultsForModel = (this as unknown as {summarizeToolResultsForModel: unknown}).summarizeToolResultsForModel;\r\n\r\n        const parallelResults = await (executeMultipleToolsParallel as (calls: unknown[], provider: string) => Promise<Array<{success: boolean}>>)(toolCallsForExecution, 'ollama');\r\n        console.log(`✅ Ollama parallel execution completed: ${parallelResults.filter(r => r.success).length}/${parallelResults.length} successful`);\r\n        \r\n        // Get tool results summary for the model\r\n        const toolSummary = (summarizeToolResultsForModel as (results: unknown[]) => string)(parallelResults);\r\n\r\n        // Stream the tool results to user\r\n        onStream('\\n\\n' + toolSummary);\r\n\r\n        // Make follow-up call to get model's response based on tool results\r\n        console.log(`🔄 Making Ollama follow-up call to process tool results...`);\r\n\r\n        try {\r\n          // Build follow-up prompt with tool results\r\n          const toolResultsText = (parallelResults as unknown as Array<{name: string, result: string}>).map(tr =>\r\n            `Tool: ${tr.name}\\nResult: ${tr.result}\\n`\r\n          ).join('\\n');\r\n\r\n          const followUpPrompt = `Based on the tool results below, please provide a helpful response to the user's question.\r\n\r\nTool Results:\r\n${toolResultsText}\r\n\r\nPlease integrate these results into a natural, helpful response.`;\r\n\r\n          // Build follow-up messages\r\n          const followUpMessages = [\r\n            ...conversationHistory,\r\n            { role: 'user', content: followUpPrompt }\r\n          ];\r\n\r\n          const followUpResponse = await this.makeDirectFollowUpCall(\r\n            followUpMessages,\r\n            settings,\r\n            onStream,\r\n            true // enableTools for continued agentic behavior\r\n          );\r\n\r\n          // Combine original content + tool summary + follow-up response\r\n          const combinedContent = originalContent + '\\n\\n' + toolSummary + '\\n\\n' + followUpResponse.content;\r\n\r\n          return {\r\n            content: combinedContent,\r\n            usage: followUpResponse.usage ? {\r\n              promptTokens: (usage?.promptTokens || 0) + (followUpResponse.usage.promptTokens || 0),\r\n              completionTokens: (usage?.completionTokens || 0) + (followUpResponse.usage.completionTokens || 0),\r\n              totalTokens: (usage?.totalTokens || 0) + (followUpResponse.usage.totalTokens || 0)\r\n            } : usage ? {\r\n              promptTokens: usage.promptTokens || 0,\r\n              completionTokens: usage.completionTokens || 0,\r\n              totalTokens: usage.totalTokens || 0\r\n            } : undefined,\r\n            toolCalls: toolCallsForExecution\r\n          };\r\n        } catch (followUpError) {\r\n          console.error(`❌ Ollama follow-up call failed:`, followUpError);\r\n          // Fall back to returning tool summary only\r\n          return {\r\n            content: originalContent + '\\n\\n' + toolSummary,\r\n            usage: usage ? {\r\n              promptTokens: usage.promptTokens || 0,\r\n              completionTokens: usage.completionTokens || 0,\r\n              totalTokens: usage.totalTokens || 0\r\n            } : undefined,\r\n            toolCalls: toolCallsForExecution\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.error(`❌ Ollama parallel tool execution failed, falling back to sequential:`, error);\r\n        // Fall back to sequential execution below\r\n      }\r\n    }\r\n\r\n    // Fallback: Execute all tool calls sequentially (old method)\r\n    console.log(`⚠️ Using sequential execution for ${toolCalls.length} Ollama tools`);\r\n    const toolResults: Array<{ name: string; result: string; error?: boolean }> = [];\r\n\r\n    for (const toolCall of toolCalls) {\r\n      try {\r\n        // Parse arguments safely\r\n        let parsedArgs: Record<string, unknown> = {};\r\n        if (toolCall.function.arguments) {\r\n          try {\r\n            parsedArgs = JSON.parse(toolCall.function.arguments);\r\n          } catch (parseError) {\r\n            console.warn(`⚠️ Failed to parse tool arguments: ${toolCall.function.arguments}`, parseError);\r\n            parsedArgs = {};\r\n          }\r\n        }\r\n\r\n        console.log(`🔧 Executing Ollama native tool: ${toolCall.function.name} with args:`, parsedArgs);\r\n        const result = await (this as unknown as {executeMCPTool: (name: string, args: unknown) => Promise<string>}).executeMCPTool(toolCall.function.name, parsedArgs);\r\n        console.log(`🔍 Ollama: Tool execution result:`, result);\r\n\r\n        toolResults.push({\r\n          name: toolCall.function.name,\r\n          result: result,\r\n          error: false\r\n        });\r\n        console.log(`✅ Ollama native tool ${toolCall.function.name} executed successfully`);\r\n      } catch (error) {\r\n        console.error(`❌ Ollama native tool ${toolCall.function.name} failed:`, error);\r\n        const userFriendlyError = (this as unknown as {formatToolError?: (name: string, error: unknown) => string}).formatToolError ? (this as unknown as {formatToolError: (name: string, error: unknown) => string}).formatToolError(toolCall.function.name, error) : String(error);\r\n        toolResults.push({\r\n          name: toolCall.function.name,\r\n          result: userFriendlyError,\r\n          error: true\r\n        });\r\n      }\r\n    }\r\n\r\n    // Show tool execution completion\r\n    const successCount = toolResults.filter(tr => !tr.error).length;\r\n    const failureCount = toolResults.filter(tr => tr.error).length;\r\n    const completionMessage = `<tool_execution>\\n🏁 **Tool Execution Complete**\\n\\n✅ ${successCount} successful, ❌ ${failureCount} failed\\n</tool_execution>\\n\\n`;\r\n    onStream(completionMessage);\r\n\r\n    // Create follow-up prompt with tool results (simplified approach like LM Studio)\r\n    const toolResultsText = toolResults.map(tr =>\r\n      `Tool: ${tr.name}\\nResult: ${tr.result}\\n`\r\n    ).join('\\n');\r\n\r\n    const followUpPrompt = `Based on the tool results below, please provide a helpful response to the user's question.\r\n\r\nTool Results:\r\n${toolResultsText}\r\n\r\nOriginal Question: ${this.getLastUserMessage(conversationHistory)}\r\n\r\nPlease provide a natural, helpful response based on the tool results.`;\r\n\r\n    console.log(`🔄 Ollama making follow-up call with simplified prompt`);\r\n\r\n    // Clean conversation history to remove any malformed tool results\r\n    const cleanedHistory = conversationHistory.filter(msg => {\r\n      // Remove messages that contain tool execution errors\r\n      if (typeof msg.content === 'string' && msg.content.includes('Tool Results:') && msg.content.includes('Error:')) {\r\n        console.log(`🧹 Removing malformed tool result message from history`);\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    // Make follow-up call with simplified message format\r\n    const followUpMessages = [\r\n      ...cleanedHistory,\r\n      { role: 'user', content: followUpPrompt }\r\n    ];\r\n\r\n    // Make a follow-up call with tools enabled for agentic behavior\r\n    const followUpResponse = await this.makeDirectFollowUpCall(\r\n      followUpMessages,\r\n      settings,\r\n      onStream,\r\n      true // Enable tools for continued agentic behavior\r\n    );\r\n\r\n    // According to OpenAI/LM Studio docs, we should return ONLY the final assistant response\r\n    // Tool execution details are handled by the UI separately via toolCalls\r\n    console.log(`🎯 Ollama: Final response (clean):`, followUpResponse.content);\r\n\r\n    return {\r\n      content: followUpResponse.content || '',\r\n      usage: followUpResponse.usage,\r\n      toolCalls: toolCalls.map(tc => {\r\n        let parsedArgs: Record<string, unknown> = {};\r\n        try {\r\n          parsedArgs = JSON.parse(tc.function.arguments);\r\n        } catch (error) {\r\n          console.warn(`⚠️ Failed to parse tool arguments for return: ${tc.function.arguments}`, error);\r\n        }\r\n\r\n        const result = toolResults.find(tr => tr.name === tc.function.name);\r\n        return {\r\n          id: tc.id,\r\n          name: tc.function.name,\r\n          arguments: parsedArgs,\r\n          result: result?.result,\r\n          error: result?.error\r\n        };\r\n      })\r\n    };\r\n  }\r\n\r\n  private getLastUserMessage(conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>): string {\r\n    // Find the last user message in the conversation history\r\n    for (let i = conversationHistory.length - 1; i >= 0; i--) {\r\n      const msg = conversationHistory[i];\r\n      if (msg.role === 'user') {\r\n        if (typeof msg.content === 'string') {\r\n          return msg.content;\r\n        } else if (Array.isArray(msg.content)) {\r\n          // Extract text from content array\r\n          return msg.content\r\n            .filter(item => item.type === 'text')\r\n            .map(item => item.text || '')\r\n            .join(' ');\r\n        }\r\n      }\r\n    }\r\n    return 'Please provide a response based on the tool results.';\r\n  }\r\n\r\n  private async makeDirectFollowUpCall(\r\n    messages: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    settings: LLMSettings,\r\n    onStream: (chunk: string) => void,\r\n    enableTools = true\r\n  ): Promise<LLMResponse> {\r\n    const baseUrl = settings.baseUrl || 'http://localhost:11434';\r\n    const ollamaUrl = baseUrl.replace('/v1', '');\r\n    const endpoint = `${ollamaUrl}/api/chat`;\r\n\r\n    // Convert messages to Ollama format (handle ContentItem arrays)\r\n    const ollamaMessages = messages.map(msg => {\r\n      if (Array.isArray(msg.content)) {\r\n        // Convert ContentItem array to Ollama format\r\n        let textContent = '';\r\n        const images: string[] = [];\r\n\r\n        for (const item of msg.content as ContentItem[]) {\r\n          if (item.type === 'text') {\r\n            textContent += item.text || '';\r\n          } else if (item.type === 'image_url') {\r\n            // Extract base64 data from data URL for Ollama\r\n            const imageUrl = item.image_url?.url || '';\r\n            if (imageUrl.includes(',')) {\r\n              const base64Data = imageUrl.split(',')[1];\r\n              images.push(base64Data);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (images.length > 0) {\r\n          return {\r\n            role: msg.role,\r\n            content: textContent,\r\n            images: images\r\n          };\r\n        } else {\r\n          return { role: msg.role, content: textContent };\r\n        }\r\n      } else {\r\n        // String content, return as-is\r\n        return msg;\r\n      }\r\n    });\r\n\r\n    // Get tools for text-based descriptions (Ollama doesn't support structured tools)\r\n    let tools: unknown[] = [];\r\n    if (enableTools && this.getMCPToolsForProvider) {\r\n      try {\r\n        tools = await this.getMCPToolsForProvider('ollama', settings);\r\n        console.log(`🔧 Ollama follow-up call with ${tools.length} text-based tools for continued agentic behavior`);\r\n        console.log(`🔧 Ollama follow-up: Tools will be included in system prompt, NOT as structured tools parameter`);\r\n      } catch (error) {\r\n        console.warn(`⚠️ Failed to get tools for Ollama follow-up call:`, error);\r\n      }\r\n    }\r\n\r\n    // Update system message with optimized prompt if tools are available\r\n    if (enableTools && tools.length > 0) {\r\n      // Use condensed prompt for follow-up calls to avoid token limits\r\n      const toolNames = (tools as Array<{function?: {name?: string}, name?: string}>).map(tool => tool.function?.name || tool.name).filter(Boolean);\r\n      const followUpPrompt = `You are an AI assistant with access to ${tools.length} tools. Based on the tool results provided, continue the conversation naturally. Use additional tools if needed.\r\n\r\nAvailable tools: ${toolNames.join(', ')}\r\n\r\nUse structured JSON for tool calls:\r\n\\`\\`\\`json\r\n{\"tool_call\": {\"name\": \"tool_name\", \"arguments\": {\"param\": \"value\"}}}\r\n\\`\\`\\`\r\n\r\nContinue based on the tool results above. Call additional tools if needed for a comprehensive response.`;\r\n\r\n      // Find and update system message, or add one if it doesn't exist\r\n      const systemMessageIndex = ollamaMessages.findIndex(msg => msg.role === 'system');\r\n      if (systemMessageIndex >= 0) {\r\n        ollamaMessages[systemMessageIndex].content = followUpPrompt;\r\n      } else {\r\n        ollamaMessages.unshift({ role: 'system', content: followUpPrompt });\r\n      }\r\n    }\r\n\r\n    // Check if model supports structured tools for follow-up call\r\n    const supportsStructuredTools = await this.checkModelSupportsStructuredTools(settings.model, baseUrl);\r\n\r\n    const requestBody = {\r\n      model: settings.model,\r\n      messages: ollamaMessages,\r\n      stream: !!onStream,\r\n      options: {\r\n        temperature: settings.temperature,\r\n        num_predict: settings.maxTokens\r\n      },\r\n      // Include structured tools only if model supports them\r\n      ...(supportsStructuredTools && enableTools && tools.length > 0 && { tools })\r\n    };\r\n\r\n    console.log(`🔧 Ollama follow-up call using ${supportsStructuredTools ? 'structured' : 'text-based'} tools`);\r\n    if (supportsStructuredTools && tools.length > 0) {\r\n      console.log(`🔧 Ollama follow-up: Including ${tools.length} structured tools in request`);\r\n    } else if (tools.length > 0) {\r\n      console.log(`🔧 Ollama follow-up: Tools included as text descriptions in system prompt`);\r\n    }\r\n\r\n    console.log(`🔄 Ollama making follow-up call ${enableTools ? 'with' : 'without'} tools to: ${endpoint}`);\r\n    console.log(`🔍 Ollama direct follow-up request body:`, JSON.stringify(requestBody, null, 2));\r\n\r\n    const response = await fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(requestBody)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      throw new Error(`Ollama follow-up API error: ${error}`);\r\n    }\r\n\r\n    if (onStream) {\r\n      // Handle streaming follow-up response\r\n      let fullContent = '';\r\n      let usage: { promptTokens?: number; completionTokens?: number; totalTokens?: number } | undefined;\r\n\r\n      if (response.body) {\r\n        const reader = response.body.getReader();\r\n        const decoder = new TextDecoder();\r\n\r\n        try {\r\n          // eslint-disable-next-line no-constant-condition\r\n          while (true) {\r\n            const { done, value } = await reader.read();\r\n            if (done) break;\r\n\r\n            const chunk = decoder.decode(value, { stream: true });\r\n            const lines = chunk.split('\\n').filter(line => line.trim());\r\n\r\n            for (const line of lines) {\r\n              try {\r\n                // Ollama native API returns JSON objects directly\r\n                const parsed = JSON.parse(line);\r\n                const message = parsed.message;\r\n\r\n                if (message?.content) {\r\n                  fullContent += message.content;\r\n                  onStream(message.content);\r\n                }\r\n\r\n                // Handle final response with usage data\r\n                if (parsed.done && parsed.total_duration) {\r\n                  usage = {\r\n                    promptTokens: parsed.prompt_eval_count || 0,\r\n                    completionTokens: parsed.eval_count || 0,\r\n                    totalTokens: (parsed.prompt_eval_count || 0) + (parsed.eval_count || 0)\r\n                  };\r\n                }\r\n              } catch (error) {\r\n                // Skip empty lines or malformed JSON\r\n                if (line.trim()) {\r\n                  console.warn('Failed to parse follow-up streaming chunk:', error, 'Line:', line);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } finally {\r\n          reader.releaseLock();\r\n        }\r\n      }\r\n\r\n      // Check for additional tool calls in the follow-up response (agentic behavior)\r\n      if (enableTools && fullContent) {\r\n        const toolCalls = this.parseToolCallsFromText(fullContent);\r\n        if (toolCalls.length > 0) {\r\n          console.log(`🔄 Ollama follow-up response contains ${toolCalls.length} additional tool calls - continuing agentic workflow`);\r\n          // Recursively execute additional tool calls\r\n          return this.executeTextBasedTools(\r\n            toolCalls,\r\n            fullContent,\r\n            usage,\r\n            settings,\r\n            { id: 'ollama', name: 'Ollama' } as LLMProvider,\r\n            messages,\r\n            onStream\r\n          );\r\n        }\r\n      }\r\n\r\n      return {\r\n        content: fullContent,\r\n        usage: usage ? {\r\n          promptTokens: usage.promptTokens || 0,\r\n          completionTokens: usage.completionTokens || 0,\r\n          totalTokens: usage.totalTokens || 0\r\n        } : undefined\r\n      };\r\n    } else {\r\n      // Handle non-streaming follow-up response\r\n      const data = await response.json();\r\n      const message = data.message;\r\n\r\n      // Check for additional tool calls in the follow-up response (agentic behavior)\r\n      const content = message?.content || '';\r\n      if (enableTools && content) {\r\n        const toolCalls = this.parseToolCallsFromText(content);\r\n        if (toolCalls.length > 0) {\r\n          console.log(`🔄 Ollama follow-up response contains ${toolCalls.length} additional tool calls - continuing agentic workflow`);\r\n          // Recursively execute additional tool calls\r\n          return this.executeTextBasedTools(\r\n            toolCalls,\r\n            content,\r\n            data.total_duration ? {\r\n              promptTokens: data.prompt_eval_count || 0,\r\n              completionTokens: data.eval_count || 0,\r\n              totalTokens: (data.prompt_eval_count || 0) + (data.eval_count || 0)\r\n            } : undefined,\r\n            settings,\r\n            { id: 'ollama', name: 'Ollama' } as LLMProvider,\r\n            messages,\r\n            onStream\r\n          );\r\n        }\r\n      }\r\n\r\n      return {\r\n        content: content,\r\n        usage: data.total_duration ? {\r\n          promptTokens: data.prompt_eval_count || 0,\r\n          completionTokens: data.eval_count || 0,\r\n          totalTokens: (data.prompt_eval_count || 0) + (data.eval_count || 0)\r\n        } : undefined\r\n      };\r\n    }\r\n  }\r\n\r\n\r\n\r\n  public executeMCPTool: (toolName: string, args: Record<string, unknown>) => Promise<string> = async (toolName: string, args: Record<string, unknown>) => {\r\n    // This will be injected by the main service\r\n    console.error('🚨 Ollama: executeMCPTool called but not injected! This should not happen.');\r\n    console.error('🚨 Ollama: toolName:', toolName, 'args:', args);\r\n    console.error('🚨 Ollama: Method type:', typeof this.executeMCPTool);\r\n    return JSON.stringify({ error: 'Tool execution not available - injection failed' });\r\n  };\r\n\r\n  // Legacy text-based tool calling methods (kept for reference but not used)\r\n  private async handleTextBasedToolCalling(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>\r\n  ): Promise<LLMResponse> {\r\n    let fullContent = '';\r\n    let usage: { promptTokens?: number; completionTokens?: number; totalTokens?: number } | undefined;\r\n\r\n    if (response.body) {\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder();\r\n\r\n      try {\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n          const { done, value } = await reader.read();\r\n          if (done) break;\r\n\r\n          const chunk = decoder.decode(value);\r\n          const lines = chunk.split('\\n').filter(line => line.trim());\r\n\r\n          for (const line of lines) {\r\n            if (line.startsWith('data: ')) {\r\n              const data = line.slice(6);\r\n              if (data === '[DONE]') continue;\r\n\r\n              try {\r\n                const parsed = JSON.parse(data);\r\n                const content = parsed.choices?.[0]?.delta?.content || '';\r\n\r\n                if (content) {\r\n                  fullContent += content;\r\n                  onStream(content);\r\n                }\r\n\r\n                if (parsed.usage) {\r\n                  usage = {\r\n                    promptTokens: parsed.usage.prompt_tokens,\r\n                    completionTokens: parsed.usage.completion_tokens,\r\n                    totalTokens: parsed.usage.total_tokens\r\n                  };\r\n                }\r\n              } catch (error) {\r\n                console.warn('Failed to parse Ollama stream chunk:', error);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } finally {\r\n        reader.releaseLock();\r\n      }\r\n    }\r\n\r\n    console.log(`🔍 Ollama response content for tool parsing:`, fullContent);\r\n\r\n    // Handle empty responses\r\n    if (!fullContent || fullContent.trim().length === 0) {\r\n      console.warn(`⚠️ Ollama returned empty response. This might indicate:`);\r\n      console.warn(`   - Model failed to generate content`);\r\n      console.warn(`   - Network/connection issues`);\r\n      console.warn(`   - Model overloaded or timeout`);\r\n\r\n      return {\r\n        content: \"I apologize, but I didn't receive a proper response from the model. This could be due to the model being overloaded or a connection issue. Please try again.\",\r\n        usage: usage ? {\r\n          promptTokens: usage.promptTokens || 0,\r\n          completionTokens: usage.completionTokens || 0,\r\n          totalTokens: usage.totalTokens || 0\r\n        } : undefined\r\n      };\r\n    }\r\n\r\n    // Remove thinking content before parsing for tool calls\r\n    const contentWithoutThinking = this.removeThinkingContent(fullContent);\r\n    console.log(`🧠 Content after removing thinking tags:`, contentWithoutThinking);\r\n\r\n    // Parse the response for tool calls (excluding thinking content)\r\n    const toolCalls = this.parseToolCallsFromText(contentWithoutThinking);\r\n\r\n    if (toolCalls.length > 0) {\r\n      console.log(`🔧 Ollama found ${toolCalls.length} tool calls in text response`);\r\n      return this.executeTextBasedTools(toolCalls, fullContent, usage, settings, provider, conversationHistory, onStream);\r\n    }\r\n\r\n    // Return the original content (with thinking) for UI display\r\n    // The UI component will handle parsing and displaying thinking content\r\n    return {\r\n      content: fullContent, // Keep original content with thinking for UI\r\n      usage: usage ? {\r\n        promptTokens: usage.promptTokens || 0,\r\n        completionTokens: usage.completionTokens || 0,\r\n        totalTokens: usage.totalTokens || 0\r\n      } : undefined\r\n    };\r\n  }\r\n\r\n  // Helper function to extract complete JSON object from text starting at a given index\r\n  private extractCompleteJSON(text: string, startIndex: number): string | null {\r\n    let braceCount = 0;\r\n    let inString = false;\r\n    let escaped = false;\r\n    let jsonStart = -1;\r\n\r\n    for (let i = startIndex; i < text.length; i++) {\r\n      const char = text[i];\r\n\r\n      if (escaped) {\r\n        escaped = false;\r\n        continue;\r\n      }\r\n\r\n      if (char === '\\\\' && inString) {\r\n        escaped = true;\r\n        continue;\r\n      }\r\n\r\n      if (char === '\"') {\r\n        inString = !inString;\r\n        continue;\r\n      }\r\n\r\n      if (!inString) {\r\n        if (char === '{') {\r\n          if (jsonStart === -1) jsonStart = i;\r\n          braceCount++;\r\n        } else if (char === '}') {\r\n          braceCount--;\r\n          if (braceCount === 0 && jsonStart !== -1) {\r\n            return text.substring(jsonStart, i + 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private parseToolCallsFromText(content: string): Array<{ name: string; arguments: Record<string, unknown> }> {\r\n    const toolCalls: Array<{ name: string; arguments: Record<string, unknown> }> = [];\r\n\r\n    // Get available tool names from MCP tools\r\n    const availableTools = this.getAvailableToolNames();\r\n\r\n    console.log(`🔍 Ollama parsing text for tools. Available tools:`, availableTools);\r\n    console.log(`🔍 Content to parse:`, content);\r\n    console.log(`🔍 Content length:`, content.length);\r\n\r\n    // Pattern 0: XML-style tool tags as instructed in the Ollama system prompt\r\n    // Example:\r\n    // <web_search>\r\n    //   <query>current weather</query>\r\n    // </web_search>\r\n    try {\r\n      const xmlTagRegex = /<([a-zA-Z_][\\w-]*)\\b[^>]*>([\\s\\S]*?)<\\/\\1>/gi;\r\n      let xmlMatch: RegExpExecArray | null;\r\n\r\n      console.log(`🔍 Testing XML regex against content...`);\r\n      console.log(`🔍 Regex pattern: ${xmlTagRegex.source}`);\r\n\r\n      // Test with the exact example\r\n      const testContent = '<web_search>\\n<query>current weather in Athens, Greece</query>\\n</web_search>';\r\n      const testRegex = /<([a-zA-Z_][\\w-]*)\\b[^>]*>([\\s\\S]*?)<\\/\\1>/gi;\r\n      const testMatch = testRegex.exec(testContent);\r\n      console.log(`🔍 Test match result:`, testMatch);\r\n\r\n      while ((xmlMatch = xmlTagRegex.exec(content)) !== null) {\r\n        const rawToolName = xmlMatch[1];\r\n        const inner = (xmlMatch[2] || '').trim();\r\n\r\n        console.log(`🔍 Found XML tag: ${rawToolName}, inner: ${inner}`);\r\n\r\n        // Only handle tags that correspond to available tools; ignore others (e.g., <switch_mode>)\r\n        if (!availableTools.includes(rawToolName)) {\r\n          console.log(`⚠️ Tool ${rawToolName} not in available tools list:`, availableTools);\r\n          continue;\r\n        }\r\n\r\n        console.log(`✅ Tool ${rawToolName} is available, processing...`);\r\n\r\n        const args: Record<string, unknown> = {};\r\n\r\n        // Parse child tags as arguments: <param>value</param>\r\n        const childTagRegex = /<([a-zA-Z_][\\w-]*)\\b[^>]*>([\\s\\S]*?)<\\/\\1>/gi;\r\n        let childFound = false;\r\n        let childMatch: RegExpExecArray | null;\r\n        while ((childMatch = childTagRegex.exec(inner)) !== null) {\r\n          childFound = true;\r\n          const key = childMatch[1];\r\n          const value = (childMatch[2] || '').trim();\r\n\r\n          if (args[key] === undefined) {\r\n            args[key] = value;\r\n          } else if (Array.isArray(args[key])) {\r\n            (args[key] as unknown[]).push(value);\r\n          } else {\r\n            args[key] = [args[key], value];\r\n          }\r\n        }\r\n\r\n        if (!childFound) {\r\n          // If no child tags, try JSON first, then fallback to single \"input\"\r\n          if (inner.startsWith('{') || inner.startsWith('[')) {\r\n            try {\r\n              Object.assign(args, JSON.parse(inner));\r\n            } catch {\r\n              args.input = inner;\r\n            }\r\n          } else {\r\n            args.input = inner;\r\n          }\r\n        }\r\n\r\n        toolCalls.push({ name: rawToolName, arguments: args });\r\n      }\r\n\r\n      if (toolCalls.length === 0) {\r\n        console.log(`🔍 No XML tool calls found in content`);\r\n      }\r\n    } catch (e) {\r\n      console.log('⚠️ XML-style parsing failed:', e);\r\n    }\r\n\r\n    if (toolCalls.length > 0) {\r\n      console.log(`✅ Found ${toolCalls.length} XML-style tool calls, returning them`);\r\n      const uniqueXmlCalls = this.deduplicateToolCalls ? this.deduplicateToolCalls(toolCalls) : toolCalls;\r\n      return uniqueXmlCalls;\r\n    }\r\n\r\n    // Pattern 1: New model format with optional commentary prefix and to=tool_name and JSON arguments\r\n    // Example: \"commentary to=web_search json{\"query\":\"dad joke\", \"topn\":5}\" or \"to=list_directoryjson{...}\"\r\n    // Updated to handle nested JSON, multiple tool calls, hyphens, function namespace prefixes, and optional space before json\r\n    const newModelFormatRegex = /(?:commentary\\s+)?to=(?:functions\\.)?([a-zA-Z_][a-zA-Z0-9_-]*)\\s*json(\\{(?:[^{}]|{[^{}]*})*\\})/gi;\r\n\r\n    // Pattern 1b: Nested function call format - to=functions json{\"name\":\"tool_name\",\"arguments\":{...}}\r\n    // CHECK THIS FIRST before the general pattern to avoid conflicts\r\n    const nestedFunctionFormatRegex = /(?:commentary\\s+)?to=functions\\s*json\\{[^}]*\"name\"\\s*:\\s*\"([^\"]+)\"[^}]*\"arguments\"\\s*:\\s*(\\{[^}]*\\})[^}]*\\}/gi;\r\n\r\n    // Handle nested function format FIRST\r\n    let nestedMatch;\r\n    while ((nestedMatch = nestedFunctionFormatRegex.exec(content)) !== null) {\r\n      try {\r\n        const rawToolName = nestedMatch[1];\r\n        const jsonArgs = nestedMatch[2];\r\n        const args = JSON.parse(jsonArgs);\r\n\r\n        // Apply same tool name mapping\r\n        const toolNameMapping: Record<string, string> = {\r\n          'memory_store': 'memory-store',\r\n          'memory_search': 'memory-search',\r\n          'memory_retrieve': 'memory-retrieve',\r\n          'knowledge_base': 'knowledge-base',\r\n          'knowledge_search': 'knowledge-base',\r\n          'internal_tools': 'internal-commands',\r\n          'internal_commands': 'internal-commands',\r\n          'search': 'web_search'\r\n        };\r\n\r\n        const toolName = toolNameMapping[rawToolName] || rawToolName;\r\n\r\n        // Verify this is a valid tool name\r\n        if (availableTools.includes(toolName)) {\r\n          toolCalls.push({ name: toolName, arguments: args });\r\n          console.log(`✅ Found nested function format tool call: ${rawToolName} -> ${toolName} with args:`, args);\r\n        } else {\r\n          console.log(`⚠️ Nested function tool name \"${rawToolName}\" (mapped to \"${toolName}\") not in available tools:`, availableTools);\r\n        }\r\n      } catch (error) {\r\n        console.log(`⚠️ Failed to parse nested function format tool call:`, nestedMatch[0], error);\r\n      }\r\n    }\r\n\r\n    // If we found nested function calls, return them immediately\r\n    if (toolCalls.length > 0) {\r\n      console.log(`✅ Found ${toolCalls.length} nested function format tool calls, returning them`);\r\n      return toolCalls;\r\n    }\r\n\r\n    let newModelMatch;\r\n    while ((newModelMatch = newModelFormatRegex.exec(content)) !== null) {\r\n      try {\r\n        const rawToolName = newModelMatch[1];\r\n        const jsonArgs = newModelMatch[2];\r\n\r\n        // Only parse tools that actually exist - no guessing or mapping\r\n        if (availableTools.includes(rawToolName)) {\r\n          try {\r\n            // Handle malformed empty JSON like {\"\":\"\"}\r\n            let cleanJsonArgs = jsonArgs;\r\n            if (jsonArgs === '{\"\":\"\"}' || jsonArgs === '{\"\": \"\"}') {\r\n              cleanJsonArgs = '{}';\r\n              console.log(`🔧 Fixed malformed empty JSON: ${jsonArgs} -> ${cleanJsonArgs}`);\r\n            }\r\n\r\n            const args = JSON.parse(cleanJsonArgs);\r\n            toolCalls.push({ name: rawToolName, arguments: args });\r\n            console.log(`✅ Found valid tool call: ${rawToolName} with args:`, args);\r\n          } catch (error) {\r\n            console.log(`⚠️ Failed to parse JSON arguments for ${rawToolName}:`, jsonArgs, error);\r\n          }\r\n        } else {\r\n          console.log(`⚠️ Tool \"${rawToolName}\" not found. Available tools:`, availableTools.slice(0, 10), '...');\r\n          // Return an error response that the LLM can see and correct\r\n          return [{\r\n            name: 'error_response',\r\n            arguments: {\r\n              error: `Tool \"${rawToolName}\" does not exist. Available tools include: ${availableTools.slice(0, 10).join(', ')}, and ${availableTools.length - 10} more. Please use an exact tool name from the available list.`\r\n            }\r\n          }];\r\n        }\r\n      } catch (error) {\r\n        console.log(`⚠️ Failed to parse new model format tool call:`, newModelMatch[0], error);\r\n      }\r\n    }\r\n\r\n    // If we found any new model format tool calls, return them\r\n    if (toolCalls.length > 0) {\r\n      console.log(`✅ Found ${toolCalls.length} new model format tool calls, returning them`);\r\n      return toolCalls;\r\n    }\r\n\r\n    // Pattern 2: Enhanced tool_call format with ```json wrapper (Option 2)\r\n    // ```json { \"tool_call\": { \"name\": \"web_search\", \"arguments\": {...} } } ```\r\n    const jsonWrappedToolCallRegex = /```json\\s*(\\{[\\s\\S]*?\"tool_call\"[\\s\\S]*?\\})\\s*```/gi;\r\n    let match = jsonWrappedToolCallRegex.exec(content);\r\n    if (match) {\r\n      try {\r\n        const jsonObj = JSON.parse(match[1]);\r\n        if (jsonObj.tool_call && jsonObj.tool_call.name && jsonObj.tool_call.arguments) {\r\n          toolCalls.push({\r\n            name: jsonObj.tool_call.name,\r\n            arguments: jsonObj.tool_call.arguments\r\n          });\r\n          console.log(`✅ Found JSON-wrapped tool call: ${jsonObj.tool_call.name} with args:`, jsonObj.tool_call.arguments);\r\n          return toolCalls; // Return early if we found the structured format\r\n        }\r\n      } catch {\r\n        console.log(`⚠️ Failed to parse JSON-wrapped tool call:`, match[1]);\r\n      }\r\n    }\r\n\r\n    // Pattern 3: Direct JSON tool_call format (Option 1) - Enhanced with robust JSON parsing\r\n    // { \"tool_call\": { \"name\": \"web_search\", \"arguments\": {...} } }\r\n    const toolCallPattern = /\\{\\s*\"tool_call\"\\s*:\\s*\\{/gi;\r\n    let directMatch;\r\n    while ((directMatch = toolCallPattern.exec(content)) !== null) {\r\n      try {\r\n        // Find the complete JSON object starting from the match\r\n        const startIndex = directMatch.index;\r\n        const jsonStr = this.extractCompleteJSON(content, startIndex);\r\n\r\n        if (jsonStr) {\r\n          const parsed = JSON.parse(jsonStr);\r\n          if (parsed.tool_call && parsed.tool_call.name) {\r\n            toolCalls.push({\r\n              name: parsed.tool_call.name,\r\n              arguments: parsed.tool_call.arguments || {}\r\n            });\r\n            console.log(`✅ Found direct tool call: ${parsed.tool_call.name} with args:`, parsed.tool_call.arguments);\r\n            return toolCalls; // Return early if we found the structured format\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(`⚠️ Failed to parse direct tool call:`, error);\r\n      }\r\n    }\r\n\r\n    // Pattern 3: Look for any JSON blocks and check if they contain tool calls\r\n    const jsonBlockRegex = /```json\\s*(\\{[\\s\\S]*?\\})\\s*```/gi;\r\n    let jsonMatch;\r\n    while ((jsonMatch = jsonBlockRegex.exec(content)) !== null) {\r\n      try {\r\n        const jsonObj = JSON.parse(jsonMatch[1]);\r\n        if (jsonObj.tool_call && jsonObj.tool_call.name && jsonObj.tool_call.arguments) {\r\n          toolCalls.push({\r\n            name: jsonObj.tool_call.name,\r\n            arguments: jsonObj.tool_call.arguments\r\n          });\r\n          console.log(`✅ Found JSON block tool call: ${jsonObj.tool_call.name} with args:`, jsonObj.tool_call.arguments);\r\n        }\r\n      } catch {\r\n        console.log(`⚠️ Failed to parse JSON block:`, jsonMatch[1]);\r\n      }\r\n    }\r\n\r\n    if (toolCalls.length > 0) {\r\n      return toolCalls;\r\n    }\r\n\r\n    // Fallback patterns for less structured responses\r\n    for (const toolName of availableTools) {\r\n      // Pattern 4: Function call format - toolName(args)\r\n      const functionCallRegex = new RegExp(`${toolName}\\\\s*\\\\(([^)]+)\\\\)`, 'gi');\r\n      match = functionCallRegex.exec(content);\r\n      if (match) {\r\n        const args = this.parseArgumentsFromText(match[1]);\r\n        toolCalls.push({ name: toolName, arguments: args });\r\n        console.log(`✅ Found function call: ${toolName} with args:`, args);\r\n        continue;\r\n      }\r\n\r\n      // Pattern 5: JSON-like format with tool name\r\n      const jsonRegex = new RegExp(`[\"']?${toolName}[\"']?\\\\s*[:=]\\\\s*({[^}]*})`, 'gi');\r\n      match = jsonRegex.exec(content);\r\n      if (match) {\r\n        const args = this.parseArgumentsFromText(match[1]);\r\n        toolCalls.push({ name: toolName, arguments: args });\r\n        console.log(`✅ Found JSON-like call: ${toolName} with args:`, args);\r\n        continue;\r\n      }\r\n\r\n      // Pattern 6: Simple mention with nearby JSON\r\n      if (content.toLowerCase().includes(toolName.toLowerCase())) {\r\n        // Look for JSON objects near the tool name\r\n        const toolIndex = content.toLowerCase().indexOf(toolName.toLowerCase());\r\n        const nearbyText = content.substring(Math.max(0, toolIndex - 100), toolIndex + 200);\r\n\r\n        const jsonMatches = nearbyText.match(/{[^}]*}/g);\r\n        if (jsonMatches) {\r\n          for (const jsonMatch of jsonMatches) {\r\n            const args = this.parseArgumentsFromText(jsonMatch);\r\n            if (Object.keys(args).length > 0) {\r\n              toolCalls.push({ name: toolName, arguments: args });\r\n              console.log(`✅ Found nearby JSON call: ${toolName} with args:`, args);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return toolCalls;\r\n  }\r\n\r\n  private parseArgumentsFromText(argsText: string): Record<string, unknown> {\r\n    try {\r\n      // Try to parse as JSON first\r\n      return JSON.parse(argsText);\r\n    } catch {\r\n      console.log(`⚠️ JSON parsing failed for: ${argsText}, trying fallback parsing`);\r\n\r\n      // If JSON parsing fails, try to extract key-value pairs\r\n      const args: Record<string, unknown> = {};\r\n\r\n      // Enhanced regex patterns for different value types\r\n      const patterns = [\r\n        // String values with quotes\r\n        /[\"']?(\\w+)[\"']?\\s*[:=]\\s*[\"']([^\"']+)[\"']/g,\r\n        // Number values\r\n        /[\"']?(\\w+)[\"']?\\s*[:=]\\s*(\\d+(?:\\.\\d+)?)/g,\r\n        // Boolean values\r\n        /[\"']?(\\w+)[\"']?\\s*[:=]\\s*(true|false)/g,\r\n        // Array values (simplified)\r\n        /[\"']?(\\w+)[\"']?\\s*[:=]\\s*\\[([^\\]]+)\\]/g,\r\n        // General fallback\r\n        /[\"']?(\\w+)[\"']?\\s*[:=]\\s*([^,}\\]]+)/g\r\n      ];\r\n\r\n      for (const pattern of patterns) {\r\n        let match;\r\n        while ((match = pattern.exec(argsText)) !== null) {\r\n          const key = match[1];\r\n          let value: unknown = match[2];\r\n\r\n          // Skip if we already have this key\r\n          if (args[key] !== undefined) continue;\r\n\r\n          // Type conversion\r\n          if (value === 'true') value = true;\r\n          else if (value === 'false') value = false;\r\n          else if (typeof value === 'string' && !isNaN(Number(value))) value = Number(value);\r\n          else if (typeof value === 'string' && value.includes(',')) {\r\n            // Try to parse as array\r\n            value = value.split(',').map(v => v.trim().replace(/['\"]/g, ''));\r\n          }\r\n\r\n          args[key] = value;\r\n        }\r\n      }\r\n\r\n      console.log(`✅ Fallback parsing extracted:`, args);\r\n      return args;\r\n    }\r\n  }\r\n\r\n  private deduplicateToolCalls(toolCalls: Array<{ name: string; arguments: Record<string, unknown> }>): Array<{ name: string; arguments: Record<string, unknown> }> {\r\n    const seen = new Set<string>();\r\n    const unique: Array<{ name: string; arguments: Record<string, unknown> }> = [];\r\n\r\n    for (const toolCall of toolCalls) {\r\n      const key = `${toolCall.name}:${JSON.stringify(toolCall.arguments)}`;\r\n      if (!seen.has(key)) {\r\n        seen.add(key);\r\n        unique.push(toolCall);\r\n      } else {\r\n        console.log(`🔧 Removed duplicate tool call: ${toolCall.name}`);\r\n      }\r\n    }\r\n\r\n    return unique;\r\n  }\r\n\r\n  private availableToolNames: string[] = [];\r\n\r\n  // Method to inject actual tool names from MCP service\r\n  setAvailableToolNames(toolNames: string[]): void {\r\n    this.availableToolNames = toolNames;\r\n    console.log(`🔧 Ollama: Updated available tool names:`, toolNames);\r\n  }\r\n\r\n  private getAvailableToolNames(): string[] {\r\n    // Return injected tool names if available, otherwise fallback to common ones\r\n    if (this.availableToolNames.length > 0) {\r\n      return this.availableToolNames;\r\n    }\r\n\r\n    // Fallback to common tool names\r\n    return [\r\n      'web_search', 'search', 'google_search',\r\n      'get_weather', 'weather', 'weather_search',\r\n      'calculator', 'calculate', 'math',\r\n      'file_read', 'read_file', 'get_file',\r\n      'file_write', 'write_file', 'save_file',\r\n      'get_datetime', 'current_time', 'date_time'\r\n    ];\r\n  }\r\n\r\n  private async executeTextBasedTools(\r\n    toolCalls: Array<{ name: string; arguments: Record<string, unknown> }>,\r\n    originalContent: string,\r\n    usage: { promptTokens?: number; completionTokens?: number; totalTokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔧 Ollama executing ${toolCalls.length} text-based tool calls`);\r\n\r\n    // STEP 1: STOP all streaming and execute tools completely\r\n    console.log(`🛑 Ollama: Stopping stream to execute tools cleanly`);\r\n\r\n    // Show tool execution start (this is the ONLY streaming during tool execution)\r\n    const toolExecutionHeader = `\\n\\n<tool_execution>\\n🔧 **Tool Execution Started**\\n\\nExecuting ${toolCalls.length} tool${toolCalls.length !== 1 ? 's' : ''}:\\n${toolCalls.map(tc => `- ${tc.name}`).join('\\n')}\\n</tool_execution>\\n\\n`;\r\n    onStream(toolExecutionHeader);\r\n\r\n    // STEP 2: Execute ALL tools to completion WITHOUT streaming\r\n    console.log(`🔧 Ollama: Executing ${toolCalls.length} tools to completion...`);\r\n    const toolResults: Array<{ name: string; result: string; error?: boolean }> = [];\r\n\r\n    for (const toolCall of toolCalls) {\r\n      try {\r\n        console.log(`🔧 Executing Ollama tool: ${toolCall.name} with args:`, toolCall.arguments);\r\n\r\n        const result = await this.executeMCPTool(toolCall.name, toolCall.arguments);\r\n        const resultString = typeof result === 'string' ? result : JSON.stringify(result);\r\n\r\n        toolResults.push({\r\n          name: toolCall.name,\r\n          result: resultString,\r\n          error: false\r\n        });\r\n\r\n        console.log(`✅ Ollama tool ${toolCall.name} executed successfully`);\r\n      } catch (error) {\r\n        console.error(`❌ Ollama tool ${toolCall.name} failed:`, error);\r\n        const userFriendlyError = this.formatToolError(toolCall.name, error);\r\n\r\n        toolResults.push({\r\n          name: toolCall.name,\r\n          result: userFriendlyError,\r\n          error: true\r\n        });\r\n      }\r\n    }\r\n\r\n    // Create follow-up prompt with tool results\r\n    const toolResultsText = toolResults.map(tr =>\r\n      `Tool: ${tr.name}\\nResult: ${tr.result}\\n`\r\n    ).join('\\n');\r\n\r\n    const followUpPrompt = `Based on the tool results below, please provide a helpful response to the user's question.\r\n\r\nTool Results:\r\n${toolResultsText}\r\n\r\nOriginal Question: ${this.getLastUserMessage(conversationHistory)}\r\n\r\nPlease provide a natural, helpful response based on the tool results.`;\r\n\r\n    console.log(`🔄 Ollama making follow-up call with tool results`);\r\n\r\n    // Clean conversation history to remove any malformed tool results\r\n    const cleanedHistory = conversationHistory.filter(msg => {\r\n      // Remove messages that contain tool execution errors\r\n      if (typeof msg.content === 'string' && msg.content.includes('Tool Results:') && msg.content.includes('Error:')) {\r\n        console.log(`🧹 Removing malformed tool result message from history`);\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    // Make follow-up call\r\n    const followUpMessages = [\r\n      ...cleanedHistory,\r\n      { role: 'user', content: followUpPrompt }\r\n    ];\r\n\r\n    const followUpResponse = await this.sendMessage(\r\n      followUpPrompt,\r\n      settings,\r\n      provider,\r\n      followUpMessages,\r\n      onStream\r\n    );\r\n\r\n    return {\r\n      content: followUpResponse.content,\r\n      usage: followUpResponse.usage,\r\n      toolCalls: toolResults.map((tr, index) => ({\r\n        id: `text_tool_${index}`,\r\n        name: tr.name,\r\n        arguments: toolCalls.find(tc => tc.name === tr.name)?.arguments || {},\r\n        result: tr.result,\r\n        error: tr.error\r\n      }))\r\n    };\r\n  }\r\n\r\n\r\n\r\n  private formatToolError(toolName: string, error: unknown): string {\r\n    const errorStr = error instanceof Error ? error.message : String(error);\r\n    const errorLower = errorStr.toLowerCase();\r\n\r\n    // Check for common error patterns and provide user-friendly messages\r\n    if (errorLower.includes('timeout') || errorLower.includes('timed out')) {\r\n      return `⏰ ${toolName} timed out. The tool took too long to respond. Please try again.`;\r\n    }\r\n\r\n    if (errorLower.includes('not found') || errorLower.includes('unknown tool')) {\r\n      return `🔧 ${toolName} is not available. The tool might be disabled or not properly configured.`;\r\n    }\r\n\r\n    if (errorLower.includes('network') || errorLower.includes('connection')) {\r\n      return `🌐 Network error while executing ${toolName}. Please check your connection and try again.`;\r\n    }\r\n\r\n    if (errorLower.includes('invalid') && errorLower.includes('argument')) {\r\n      return `📝 ${toolName} received invalid arguments. Please check the parameters and try again.`;\r\n    }\r\n\r\n    if (errorLower.includes('rate limit') || errorLower.includes('too many requests')) {\r\n      return `⏱️ ${toolName} rate limit exceeded. Please wait a moment before trying again.`;\r\n    }\r\n\r\n    if (errorLower.includes('unauthorized') || errorLower.includes('forbidden')) {\r\n      return `🔐 Access denied for ${toolName}. Please check your permissions or API credentials.`;\r\n    }\r\n\r\n    // Default error message with the original error for debugging\r\n    return `❌ ${toolName} execution failed: ${errorStr}`;\r\n  }\r\n\r\n  private removeThinkingContent(content: string): string {\r\n    // Remove various thinking patterns and model template tags from content before parsing for tool calls\r\n    let cleanedContent = content;\r\n\r\n    // Remove <think>...</think> blocks\r\n    cleanedContent = cleanedContent.replace(/<think>[\\s\\S]*?<\\/think>/gi, '');\r\n\r\n    // Remove <thinking>...</thinking> blocks\r\n    cleanedContent = cleanedContent.replace(/<thinking>[\\s\\S]*?<\\/thinking>/gi, '');\r\n\r\n    // Remove unclosed thinking tags (in case they're at the end)\r\n    cleanedContent = cleanedContent.replace(/<think>[\\s\\S]*$/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<thinking>[\\s\\S]*$/gi, '');\r\n\r\n    // Remove model-specific template tags\r\n    // New model format tags: <|start|>, <|message|>, <|channel|>, <|end|>, <|constrain|>\r\n    cleanedContent = cleanedContent.replace(/<\\|start\\|>/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<\\|message\\|>/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<\\|channel\\|>/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<\\|end\\|>/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<\\|constrain\\|>/gi, '');\r\n\r\n    // Qwen3 format tags: <|im_start|>, <|im_end|>\r\n    cleanedContent = cleanedContent.replace(/<\\|im_start\\|>/gi, '');\r\n    cleanedContent = cleanedContent.replace(/<\\|im_end\\|>/gi, '');\r\n\r\n    // Remove role indicators that might appear after template tags\r\n    cleanedContent = cleanedContent.replace(/^(system|user|assistant)\\s*/gim, '');\r\n\r\n    // Remove channel indicators that might appear after <|channel|> tags\r\n    cleanedContent = cleanedContent.replace(/^(final|analysis|commentary)\\s*/gim, '');\r\n\r\n    // Clean up any remaining template-like patterns\r\n    cleanedContent = cleanedContent.replace(/<\\|[^|]*\\|>/gi, '');\r\n\r\n    // Clean up any extra whitespace\r\n    cleanedContent = cleanedContent.trim();\r\n\r\n    return cleanedContent;\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNonStreamResponse(\r\n    response: Response,\r\n    settings: LLMSettings,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    const data = await response.json();\r\n    console.log(`🔍 Ollama raw response:`, JSON.stringify(data, null, 2));\r\n    const message = data.choices[0].message;\r\n\r\n    // Handle tool calls if present\r\n    if (message.tool_calls && message.tool_calls.length > 0) {\r\n      console.log(`🔧 Ollama response contains ${message.tool_calls.length} tool calls:`, message.tool_calls);\r\n\r\n      // Tool execution will be handled by the main service\r\n      return {\r\n        content: message.content || '',\r\n        usage: data.usage ? {\r\n          promptTokens: data.usage.prompt_tokens,\r\n          completionTokens: data.usage.completion_tokens,\r\n          totalTokens: data.usage.total_tokens\r\n        } : undefined,\r\n        toolCalls: message.tool_calls.map((tc: { id: string; function: { name: string; arguments: string } }) => ({\r\n          id: tc.id,\r\n          name: tc.function.name,\r\n          arguments: JSON.parse(tc.function.arguments)\r\n        }))\r\n      };\r\n    }\r\n\r\n    return {\r\n      content: message.content,\r\n      usage: data.usage ? {\r\n        promptTokens: data.usage.prompt_tokens,\r\n        completionTokens: data.usage.completion_tokens,\r\n        totalTokens: data.usage.total_tokens\r\n      } : undefined\r\n    };\r\n  }\r\n\r\n  private hasThinkingContent(content: string): boolean {\r\n    // Check for various thinking patterns\r\n    const thinkingPatterns = [\r\n      /<think>/i,\r\n      /<thinking>/i,\r\n      /\\*\\*thinking\\*\\*/i,\r\n      /\\*thinking\\*/i,\r\n      /thinking:/i,\r\n      /let me think/i,\r\n      /i need to think/i,\r\n      /first, let me/i,\r\n      /step by step/i\r\n    ];\r\n\r\n    return thinkingPatterns.some(pattern => pattern.test(content));\r\n  }\r\n\r\n  private isThinkingComplete(content: string): boolean {\r\n    // Check if thinking tags are properly closed\r\n    const hasOpenThink = /<think>/i.test(content);\r\n    const hasCloseThink = /<\\/think>/i.test(content);\r\n\r\n    const hasOpenThinking = /<thinking>/i.test(content);\r\n    const hasCloseThinking = /<\\/thinking>/i.test(content);\r\n\r\n    // If we have opening tags, we need closing tags\r\n    if (hasOpenThink && !hasCloseThink) return false;\r\n    if (hasOpenThinking && !hasCloseThinking) return false;\r\n\r\n    // Check for incomplete reasoning patterns\r\n    const incompletePatterns = [\r\n      /thinking\\.\\.\\.$/i,\r\n      /let me think\\.\\.\\.$/i,\r\n      /step \\d+:?\\s*$/i,\r\n      /first,?\\s*$/i,\r\n      /so,?\\s*$/i,\r\n      /therefore,?\\s*$/i\r\n    ];\r\n\r\n    if (incompletePatterns.some(pattern => pattern.test(content.trim()))) {\r\n      return false;\r\n    }\r\n\r\n    // If content ends with reasoning indicators, it might be incomplete\r\n    const reasoningEndings = [\r\n      /\\.\\.\\.$/, // ends with ...\r\n      /:\\s*$/, // ends with :\r\n      /,\\s*$/, // ends with ,\r\n      /-\\s*$/, // ends with -\r\n    ];\r\n\r\n    if (reasoningEndings.some(pattern => pattern.test(content.trim()))) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\OpenAIProvider.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1898,1970],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2122,2197],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2418,2973],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3535,3597],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3859,3934],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 21 to the 15 allowed.","line":100,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":100,"endColumn":42},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationHistory' is assigned a value but never used. Allowed unused args must match /^_/u.","line":104,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6308,6368],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 31 to the 15 allowed.","line":175,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":175,"endColumn":47},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":194,"column":33,"nodeType":"Literal","endLine":194,"endColumn":112},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":199,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":199,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8224,8609],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8770,8886],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9212,9322],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9704,9834],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10700,10913],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10935,11000],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":268,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":268,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11015,11109],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11410,11507],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11586,11656],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":292,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":292,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11985,12077],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 79 to the 15 allowed.","line":306,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":306,"endColumn":52},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":384,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":384,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15381,15463],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'settings' is defined but never used. Allowed unused args must match /^_/u.","line":410,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":410,"endColumn":13},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used. Allowed unused args must match /^_/u.","line":411,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":411,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":415,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":415,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16324,16411],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":423,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":423,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16650,16741],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":453,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":453,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17846,17936],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":457,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":457,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[18060,18129],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":472,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":472,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18613,18789],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":514,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":514,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20629,21168],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":528,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":528,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21325,21465],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":553,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":553,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22165,22288],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":556,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":556,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22330,22409],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":569,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":569,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22814,23131],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":588,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":588,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23634,23803],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":604,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":604,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[24581,24659],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":605,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":605,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[24669,24743],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":610,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":610,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[24883,24989],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":611,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":611,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[24997,25071],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":615,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":615,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25155,25407],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":641,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":641,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26075,26127],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":642,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":642,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26135,26215],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":646,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":646,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26324,26396],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":652,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":652,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26581,26700],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":656,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":656,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26839,26924],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":660,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":660,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[26987,27041],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":685,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":685,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[27849,27921],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":698,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":698,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[28518,28634],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":703,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":703,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28722,28768],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 9 times.","line":709,"column":24,"nodeType":"Literal","endLine":709,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":715,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":715,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[29217,29277],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":719,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":719,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29452,29515],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":726,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":726,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29792,29875],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":731,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":731,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30007,30104],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":732,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":732,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30110,30188],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":742,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":742,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30535,30615],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":756,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":756,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[31057,31291],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":766,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":766,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31489,31547],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":813,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":813,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33211,33280],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":832,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":832,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33978,34044],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":850,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":850,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34632,34699],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":853,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":853,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[34790,34853],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":858,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":858,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34958,35064],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":864,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":864,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35165,35225],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":873,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":873,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35505,35575],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":875,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":875,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[35610,35675],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":884,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":884,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35873,35928],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":897,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":897,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[36408,36469],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":901,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":901,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36586,36639],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":918,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":918,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37297,37363],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":931,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":931,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[37650,37721],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"models\".","line":936,"column":22,"nodeType":"CallExpression","messageId":"doImmediateAction","endLine":939,"endColumn":16,"fix":{"range":[37838,37992],"text":"return data.data\r\n        .filter((model) => model.id.includes('gpt'))\r\n        .map((model) => model.id)\r\n        .sort()"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":943,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":943,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[38024,38080],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":975,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":975,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[39005,39085],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 70 to the 15 allowed.","line":1032,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":1032,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1040,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1040,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[41440,41502],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1061,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1061,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42237,42351],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1073,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1073,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42699,42785],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1083,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1083,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[43079,43132],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1088,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1088,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[43266,43330],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1127,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1127,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[44740,44832],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1139,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1139,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[45076,45272],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1147,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1147,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[45320,45509],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 21 to the 15 allowed.","line":1172,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":1172,"endColumn":40},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used. Allowed unused args must match /^_/u.","line":1180,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1180,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1183,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1183,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[46844,46933],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1187,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1187,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47129,47209],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1202,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1202,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47836,47983],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1220,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1220,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[48649,48742],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1226,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1226,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[48885,48967],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1230,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1230,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[49060,49133],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1240,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1240,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[49536,49592],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1280,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1280,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[51311,51434],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1333,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1333,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[53254,53343],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used. Allowed unused args must match /^_/u.","line":1358,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1358,"endColumn":24},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used. Allowed unused args must match /^_/u.","line":1359,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1359,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1368,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1368,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[54543,54647],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationHistory' is assigned a value but never used.","line":104,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":326,"column":14,"nodeType":"Literal","messageId":"unexpected","endLine":326,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'settings' is defined but never used.","line":410,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":410,"endColumn":13,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used.","line":411,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":411,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":435,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17148,17151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17148,17151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":456,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18016,18019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18016,18019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":462,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18317,18320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18317,18320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":652,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":652,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26663,26666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26663,26666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":665,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":665,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27116,27119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27116,27119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":722,"column":100,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":722,"endColumn":103,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29671,29674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29671,29674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":727,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":727,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29912,29915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29912,29915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":791,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":791,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32386,32389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32386,32389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":816,"column":105,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":816,"endColumn":108,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33393,33396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33393,33396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":849,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":849,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34582,34585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34582,34585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":858,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":858,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[35037,35040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[35037,35040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":912,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":912,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37084,37087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37084,37087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":1054,"column":14,"nodeType":"Literal","messageId":"unexpected","endLine":1054,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used.","line":1180,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1180,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1186,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1186,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47039,47042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47039,47042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1186,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1186,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47085,47088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47085,47088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1198,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1198,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47590,47593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47590,47593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1199,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1199,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47680,47683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47680,47683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1202,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1202,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47917,47920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47917,47920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1233,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1233,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[49310,49313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[49310,49313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationHistory' is defined but never used.","line":1358,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1358,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used.","line":1359,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1359,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":14,"fatalErrorCount":0,"warningCount":83,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// OpenAI provider implementation\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars */\r\nimport { BaseProvider } from './BaseProvider';\r\nimport {\r\n  LLMSettings,\r\n  LLMResponse,\r\n  MessageContent,\r\n  ContentItem,\r\n  LLMProvider,\r\n  ToolObject,\r\n  ProviderCapabilities\r\n} from './types';\r\n\r\nimport { OPENAI_SYSTEM_PROMPT } from './prompts/openai';\r\nimport { OpenAIFileService } from '../OpenAIFileService';\r\nimport { PricingService } from '../pricingService';\r\n// import { RAGService } from '../RAGService'; // Moved to Electron main process, accessed via IPC\r\n\r\nexport class OpenAIProvider extends BaseProvider {\r\n  readonly id = 'openai';\r\n  readonly name = 'OpenAI';\r\n  readonly capabilities: ProviderCapabilities = {\r\n    supportsVision: true,\r\n    supportsTools: true,\r\n    supportsStreaming: true,\r\n    supportsSystemMessages: true,\r\n    supportsPromptCaching: true,\r\n    promptCachingType: 'automatic', // Automatic caching for prompts ≥1024 tokens\r\n    maxToolNameLength: 64,\r\n    toolFormat: 'openai'\r\n  };\r\n\r\n  private fileService?: OpenAIFileService;\r\n  private assistantId?: string;\r\n  private vectorStoreId?: string;\r\n  private threadMap = new Map<string, string>(); // Maps conversationId to threadId\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  async sendMessage(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    // Smart routing: Use Assistants API for file uploads, Chat Completions API for everything else\r\n    const hasFileUploads = this.hasDocumentUploads(message);\r\n\r\n    if (hasFileUploads) {\r\n      console.log('🔧 OpenAI: Using Assistants API for file upload handling');\r\n      return this.sendMessageWithAssistants(message, settings, provider, conversationHistory, onStream, signal, conversationId);\r\n    } else {\r\n      console.log('🔧 OpenAI: Using Chat Completions API for fast tool calling');\r\n      return this.sendMessageWithChatCompletions(message, settings, provider, conversationHistory, onStream, signal, conversationId);\r\n    }\r\n  }\r\n\r\n  private hasDocumentUploads(message: MessageContent): boolean {\r\n    console.log(`🔍 OpenAI checking for file uploads in message:`, {\r\n      isArray: Array.isArray(message),\r\n      messageType: typeof message,\r\n      messageContent: Array.isArray(message) ? message.map(item => {\r\n        const extendedItem = item as ContentItem & {file?: unknown, document?: unknown, attachment?: unknown};\r\n        return {\r\n          type: item.type,\r\n          hasFile: !!extendedItem.file,\r\n          hasDocument: !!extendedItem.document,\r\n          hasAttachment: !!extendedItem.attachment\r\n        };\r\n      }) : 'not array'\r\n    });\r\n\r\n    if (Array.isArray(message)) {\r\n      const hasFiles = message.some(item => {\r\n        const extendedItem = item as ContentItem & {file?: unknown, document?: unknown, attachment?: unknown};\r\n        const extendedType = (extendedItem as unknown as {type?: string}).type;\r\n        return extendedType === 'document' ||\r\n               extendedType === 'file' ||\r\n               extendedType === 'attachment' ||\r\n               !!extendedItem.file ||\r\n               !!extendedItem.document ||\r\n               !!extendedItem.attachment;\r\n      });\r\n\r\n      console.log(`🔍 OpenAI file detection result:`, { hasFiles });\r\n      return hasFiles;\r\n    }\r\n\r\n    // Check if message has file properties (legacy format)\r\n    const hasLegacyFiles = !!(message as {files?: unknown, attachments?: unknown}).files || !!(message as {files?: unknown, attachments?: unknown}).attachments;\r\n    console.log(`🔍 OpenAI legacy file detection result:`, { hasLegacyFiles });\r\n    return hasLegacyFiles;\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async sendMessageWithAssistants(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    // Initialize file service if not already done\r\n    if (!this.fileService && settings.apiKey) {\r\n      this.fileService = new OpenAIFileService(settings.apiKey, provider.baseUrl);\r\n    }\r\n\r\n    // Assistants API workflow for file uploads\r\n    if (!this.assistantId || !this.vectorStoreId) {\r\n      const { assistantId, vectorStoreId } = await this.getOrCreateAssistantAndVectorStore(settings);\r\n      this.assistantId = assistantId;\r\n      this.vectorStoreId = vectorStoreId;\r\n    }\r\n\r\n    const threadId = await this.getOrCreateThread(conversationId, settings);\r\n\r\n    let textContent = '';\r\n    const attachments: { file_id: string; tools: { type: string; }[] }[] = [];\r\n\r\n    if (typeof message === 'string') {\r\n      textContent = message; // RAG integration now handled in chatService\r\n    } else if (Array.isArray(message)) {\r\n      for (const item of message) {\r\n        if (item.type === 'text') {\r\n          textContent += item.text + '\\n';\r\n        } else if (item.type === 'document' && this.fileService && item.document?.data) {\r\n          try {\r\n            const binaryString = atob(item.document.data);\r\n            const bytes = new Uint8Array(binaryString.length);\r\n            for (let i = 0; i < binaryString.length; i++) {\r\n              bytes[i] = binaryString.charCodeAt(i);\r\n            }\r\n            const file = new File([bytes], item.document.name || 'document', {\r\n              type: item.document.media_type || 'application/octet-stream'\r\n            });\r\n            // Upload the file and add it to the vector store\r\n            const uploadedFile = await this.fileService.uploadFile(file, 'assistants');\r\n            await this.addFileToVectorStore(this.vectorStoreId!, uploadedFile.id, settings);\r\n            attachments.push({ file_id: uploadedFile.id, tools: [{ type: 'file_search' }] });\r\n          } catch (error) {\r\n            console.error('Error uploading document to OpenAI:', error);\r\n            textContent += `\\n[Error uploading document: ${item.document.name}]`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    await this.addMessageToThread(threadId, textContent.trim(), attachments, settings);\r\n\r\n    const run = await this.createAndPollRun(threadId, this.assistantId!, settings);\r\n\r\n    if (run.status !== 'completed') {\r\n      throw new Error(`Run failed with status: ${run.status}`);\r\n    }\r\n\r\n    const responseContent = await this.getAssistantResponse(threadId, settings);\r\n\r\n    return {\r\n      content: responseContent,\r\n      usage: {\r\n        promptTokens: run.usage?.prompt_tokens || 0,\r\n        completionTokens: run.usage?.completion_tokens || 0,\r\n        totalTokens: run.usage?.total_tokens || 0\r\n      }\r\n    };\r\n  }\r\n\r\n  private async sendMessageWithChatCompletions(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    const messages = [];\r\n\r\n    // Get MCP tools for this provider first\r\n    const mcpTools = await this.getMCPToolsForProvider('openai', settings);\r\n\r\n    // Use behavioral system prompt only (no tool descriptions)\r\n    // Tools are sent separately in the tools parameter\r\n    // Check for meaningful system prompt, not just empty string or generic default\r\n    const hasCustomSystemPrompt = settings.systemPrompt &&\r\n      settings.systemPrompt.trim() &&\r\n      settings.systemPrompt !== \"You are a helpful AI assistant. Please provide concise and helpful responses.\";\r\n\r\n    const systemPrompt = hasCustomSystemPrompt ? settings.systemPrompt! : this.getSystemPrompt();\r\n    const cachingEnabled = settings.promptCachingEnabled ?? true;\r\n\r\n    console.log(`🔍 OpenAI Chat Completions system prompt source:`, {\r\n      hasCustom: hasCustomSystemPrompt,\r\n      usingCustom: hasCustomSystemPrompt,\r\n      promptLength: systemPrompt?.length || 0,\r\n      promptStart: systemPrompt?.substring(0, 100) + '...',\r\n      cachingEnabled,\r\n      automaticCaching: systemPrompt && systemPrompt.length > 4096 ? 'eligible' : 'too_small'\r\n    });\r\n\r\n    if (systemPrompt) {\r\n      messages.push({ role: 'system', content: systemPrompt });\r\n      if (cachingEnabled && systemPrompt.length > 4096) {\r\n        console.log(`🔧 OpenAI: System prompt eligible for automatic caching (${systemPrompt.length} chars, ≥1024 tokens)`);\r\n      }\r\n    }\r\n\r\n    // Add conversation history\r\n    messages.push(...conversationHistory);\r\n\r\n    // Add current message (handle both string and array formats)\r\n    if (typeof message === 'string') {\r\n      messages.push({ role: 'user', content: message });\r\n      if (cachingEnabled && message.length > 4096) {\r\n        console.log(`🔧 OpenAI: User message eligible for automatic caching (${message.length} chars, ≥1024 tokens)`);\r\n      }\r\n    } else if (Array.isArray(message)) {\r\n      // Handle ContentItem array format (images, text)\r\n      messages.push({ role: 'user', content: message });\r\n      if (cachingEnabled) {\r\n        const totalTextLength = message.filter(item => item.type === 'text').reduce((sum, item) => sum + (item.text?.length || 0), 0);\r\n        if (totalTextLength > 4096) {\r\n          console.log(`🔧 OpenAI: User message content eligible for automatic caching (${totalTextLength} chars total text, ≥1024 tokens)`);\r\n        }\r\n      }\r\n    } else {\r\n      // Handle legacy vision format (convert to OpenAI format)\r\n      const messageWithImages = message as { text: string; images: string[] };\r\n      const content: ContentItem[] = [{ type: 'text', text: messageWithImages.text }];\r\n\r\n      for (const imageUrl of messageWithImages.images) {\r\n        content.push({\r\n          type: 'image_url',\r\n          image_url: { url: imageUrl }\r\n        });\r\n      }\r\n      messages.push({ role: 'user', content });\r\n    }\r\n\r\n    const requestBody: Record<string, unknown> = {\r\n      model: settings.model,\r\n      messages,\r\n      temperature: settings.temperature,\r\n      max_tokens: settings.maxTokens,\r\n      stream: !!onStream\r\n    };\r\n\r\n    // Add tools if available\r\n    if (mcpTools.length > 0) {\r\n      requestBody.tools = mcpTools;\r\n      requestBody.tool_choice = 'auto';\r\n      console.log(`🚀 OpenAI Chat Completions API call with ${mcpTools.length} tools:`, {\r\n        model: settings.model,\r\n        toolCount: mcpTools.length,\r\n        conversationId: conversationId || 'none'\r\n      });\r\n    } else {\r\n      console.log(`🚀 OpenAI Chat Completions API call without tools`);\r\n    }\r\n\r\n    console.log('🔍 OpenAI Chat Completions request body:', JSON.stringify(requestBody, null, 2));\r\n\r\n    const response = await fetch(`${provider.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n      signal\r\n    });\r\n\r\n    console.log('🔍 OpenAI Chat Completions response status:', response.status, response.statusText);\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error('❌ OpenAI Chat Completions API error response:', error);\r\n\r\n      if (response.status === 401) {\r\n        throw new Error(`OpenAI API authentication failed. Please check your API key in Settings. Error: ${error}`);\r\n      }\r\n\r\n      // Check if it's a token limit error - fallback to Assistants API\r\n      if (response.status === 429 && error.includes('Request too large')) {\r\n        console.log('🔄 OpenAI Chat Completions request too large, falling back to Assistants API');\r\n        return this.sendMessageWithAssistants(message, settings, provider, conversationHistory, onStream, signal, conversationId);\r\n      }\r\n\r\n      throw new Error(`OpenAI API error: ${error}`);\r\n    }\r\n\r\n    if (onStream) {\r\n      return this.handleChatCompletionsStreamResponse(response, settings, provider, conversationHistory, onStream, signal);\r\n    } else {\r\n      return this.handleChatCompletionsNonStreamResponse(response, settings, conversationHistory);\r\n    }\r\n  }\r\n\r\n  private async handleChatCompletionsStreamResponse(\r\n    response: Response,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void,\r\n    signal?: AbortSignal\r\n  ): Promise<LLMResponse> {\r\n    const reader = response.body?.getReader();\r\n    if (!reader) {\r\n      throw new Error('No response body');\r\n    }\r\n\r\n    let fullContent = '';\r\n    let usage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined;\r\n    const toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }> = [];\r\n    // Removed unused currentToolCall variable\r\n\r\n    try {\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n\r\n        const chunk = new TextDecoder().decode(value);\r\n        const lines = chunk.split('\\n');\r\n\r\n        for (const line of lines) {\r\n          if (line.startsWith('data: ')) {\r\n            const data = line.slice(6);\r\n            if (data === '[DONE]') continue;\r\n\r\n            try {\r\n              const parsed = JSON.parse(data);\r\n              const delta = parsed.choices?.[0]?.delta;\r\n\r\n              if (delta?.content) {\r\n                fullContent += delta.content;\r\n                onStream(delta.content);\r\n              }\r\n\r\n              // Handle tool calls in streaming\r\n              if (delta?.tool_calls) {\r\n                for (const toolCall of delta.tool_calls) {\r\n                  if (toolCall.index !== undefined) {\r\n                    if (!toolCalls[toolCall.index]) {\r\n                      toolCalls[toolCall.index] = { id: toolCall.id, type: toolCall.type };\r\n                    }\r\n                    if (toolCall.function) {\r\n                      if (!toolCalls[toolCall.index].function) {\r\n                        toolCalls[toolCall.index].function = { name: '', arguments: '' };\r\n                      }\r\n                      if (toolCall.function.name) {\r\n                        toolCalls[toolCall.index].function!.name += toolCall.function.name;\r\n                      }\r\n                      if (toolCall.function.arguments) {\r\n                        toolCalls[toolCall.index].function!.arguments += toolCall.function.arguments;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (parsed.usage) {\r\n                usage = parsed.usage;\r\n              }\r\n            } catch {\r\n              // Skip invalid JSON\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n\r\n    // Handle tool calls if present\r\n    if (toolCalls.length > 0) {\r\n      console.log(`🔧 OpenAI Chat Completions detected ${toolCalls.length} tool calls`);\r\n\r\n      // Execute tools and make follow-up call\r\n      return this.executeToolsAndFollowUpChatCompletions(\r\n        toolCalls,\r\n        fullContent,\r\n        usage,\r\n        settings,\r\n        provider,\r\n        conversationHistory,\r\n        onStream,\r\n        signal\r\n      );\r\n    }\r\n\r\n    const { usage: usageInfo, cost } = this.createUsageAndCost(settings.model, usage);\r\n    return {\r\n      content: fullContent,\r\n      usage: usageInfo,\r\n      cost\r\n    };\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleChatCompletionsNonStreamResponse(\r\n    response: Response,\r\n    settings: LLMSettings,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    const data = await response.json();\r\n    console.log('🔍 OpenAI Chat Completions raw response:', JSON.stringify(data, null, 2));\r\n\r\n    const message = data.choices?.[0]?.message;\r\n    const content = message?.content || '';\r\n    const usage = data.usage;\r\n\r\n    // Handle tool calls if present\r\n    if (message?.tool_calls && message.tool_calls.length > 0) {\r\n      console.log(`🔧 OpenAI Chat Completions detected ${message.tool_calls.length} tool calls`);\r\n      // For non-streaming, we would need to implement tool execution here\r\n      // For now, return the response as-is\r\n    }\r\n\r\n    return {\r\n      content,\r\n      usage: usage ? {\r\n        promptTokens: usage.prompt_tokens || 0,\r\n        completionTokens: usage.completion_tokens || 0,\r\n        totalTokens: usage.total_tokens || 0\r\n      } : undefined,\r\n      toolCalls: message?.tool_calls?.map((tc: any) => ({\r\n        id: tc.id,\r\n        name: tc.function?.name,\r\n        arguments: JSON.parse(tc.function?.arguments || '{}')\r\n      }))\r\n    };\r\n  }\r\n\r\n  private async executeToolsAndFollowUpChatCompletions(\r\n    toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }>,\r\n    initialContent: string,\r\n    initialUsage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void,\r\n    signal?: AbortSignal\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🚀 Executing ${toolCalls.length} OpenAI Chat Completions tools in parallel`);\r\n\r\n    // Check if parallel execution methods are available\r\n    if (!(this as any).executeMultipleToolsParallel) {\r\n      console.error('❌ executeMultipleToolsParallel method not available');\r\n      throw new Error('Tool execution method not available');\r\n    }\r\n\r\n    // Execute tools in parallel using the centralized service\r\n    const executeMultipleToolsParallel = (this as any).executeMultipleToolsParallel;\r\n    const parallelResults = await executeMultipleToolsParallel(\r\n      toolCalls.map(tc => ({\r\n        id: tc.id,\r\n        name: tc.function?.name || '',\r\n        arguments: JSON.parse(tc.function?.arguments || '{}')\r\n      })),\r\n      'openai'\r\n    );\r\n\r\n    console.log(`🏁 OpenAI Chat Completions tool execution completed: ${parallelResults.filter((r: {success: boolean}) => r.success).length}/${parallelResults.length} successful`);\r\n\r\n    // Build messages for follow-up call\r\n    const userMessages = conversationHistory.filter(msg => msg.role !== 'system');\r\n\r\n    // Convert tool calls to OpenAI format for follow-up\r\n    const openaiToolCalls = toolCalls.map(tc => ({\r\n      id: tc.id || '',\r\n      type: 'function',\r\n      function: {\r\n        name: tc.function?.name || '',\r\n        arguments: tc.function?.arguments || '{}'\r\n      }\r\n    }));\r\n\r\n    // Convert tool results to OpenAI message format\r\n    const toolResults = parallelResults.map((result: {id?: string, result: string}) => ({\r\n      role: 'tool',\r\n      tool_call_id: result.id || '',\r\n      content: result.result\r\n    }));\r\n\r\n    // Use same behavioral system prompt as initial call (for consistency and caching)\r\n    const hasCustomSystemPromptFollowUp = settings.systemPrompt &&\r\n      settings.systemPrompt.trim() &&\r\n      settings.systemPrompt !== \"You are a helpful AI assistant. Please provide concise and helpful responses.\";\r\n\r\n    const baseSystemPrompt = hasCustomSystemPromptFollowUp ? settings.systemPrompt! : this.getSystemPrompt();\r\n    const followUpSystemPrompt = baseSystemPrompt +\r\n      `\\n\\n## Follow-up Context\\n\\nBased on the tool results provided above, continue the conversation naturally. If you need to use additional tools to better answer the user's question, feel free to do so.`;\r\n\r\n    // Build proper assistant message - if no initial content, use a descriptive message\r\n    const assistantContent = initialContent.trim() ||\r\n      `I'll help you with that. Let me use the appropriate tools to get the information you need.`;\r\n\r\n    const followUpMessages = [\r\n      { role: 'system', content: followUpSystemPrompt },\r\n      ...userMessages,\r\n      { role: 'assistant', content: assistantContent, tool_calls: openaiToolCalls },\r\n      ...toolResults\r\n    ];\r\n\r\n    console.log(`🔍 OpenAI Chat Completions follow-up messages:`, {\r\n      messageCount: followUpMessages.length,\r\n      systemPromptLength: followUpSystemPrompt.length,\r\n      assistantContent: assistantContent.substring(0, 100) + '...',\r\n      toolResultsCount: toolResults.length,\r\n      toolResultsPreview: toolResults.map((tr: {tool_call_id: string, content: string}) => ({\r\n        tool_call_id: tr.tool_call_id,\r\n        contentLength: tr.content.length,\r\n        contentPreview: tr.content.substring(0, 100) + '...'\r\n      }))\r\n    });\r\n\r\n    // Get tools for continued agentic behavior in follow-up call\r\n    const followUpTools = await this.getMCPToolsForProvider('openai', settings);\r\n    console.log(`🔄 Making OpenAI Chat Completions follow-up call with ${followUpTools.length} tools available for continued agentic behavior`);\r\n\r\n    const followUpRequestBody = {\r\n      model: settings.model,\r\n      messages: followUpMessages,\r\n      temperature: settings.temperature,\r\n      max_tokens: settings.maxTokens,\r\n      stream: true,\r\n      // Include tools to allow continued agentic behavior\r\n      ...(followUpTools.length > 0 && {\r\n        tools: followUpTools,\r\n        tool_choice: 'auto'\r\n      })\r\n    };\r\n\r\n    const followUpResponse = await fetch(`${provider.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`\r\n      },\r\n      body: JSON.stringify(followUpRequestBody),\r\n      signal\r\n    });\r\n\r\n    console.log(`🔍 OpenAI Chat Completions follow-up response status:`, followUpResponse.status, followUpResponse.statusText);\r\n\r\n    if (followUpResponse.ok) {\r\n      console.log(`✅ Starting OpenAI Chat Completions follow-up streaming response`);\r\n\r\n      try {\r\n        // Stream the follow-up response with updated conversation history for agentic behavior\r\n        const followUpResult = await this.handleChatCompletionsStreamResponse(\r\n          followUpResponse,\r\n          settings,\r\n          provider,\r\n          followUpMessages, // Use updated messages that include tool results\r\n          onStream,\r\n          signal\r\n        );\r\n\r\n        console.log(`✅ OpenAI Chat Completions follow-up streaming completed:`, {\r\n          contentLength: followUpResult.content?.length || 0,\r\n          hasUsage: !!followUpResult.usage,\r\n          hasToolCalls: !!followUpResult.toolCalls,\r\n          content: followUpResult.content?.substring(0, 100) + '...'\r\n        });\r\n\r\n        // Combine tool calls from initial response AND follow-up response\r\n        const initialToolCalls = toolCalls\r\n          .filter(tc => tc.id && tc.function?.name)\r\n          .map(tc => ({\r\n            id: tc.id!,\r\n            name: tc.function!.name!,\r\n            arguments: JSON.parse(tc.function!.arguments || '{}')\r\n          }));\r\n\r\n        const followUpToolCalls = followUpResult.toolCalls || [];\r\n        const allToolCalls = [...initialToolCalls, ...followUpToolCalls];\r\n\r\n        console.log(`🔧 Combined OpenAI Chat Completions tool calls: ${initialToolCalls.length} initial + ${followUpToolCalls.length} follow-up = ${allToolCalls.length} total`);\r\n\r\n        return {\r\n          content: initialContent + followUpResult.content,\r\n          usage: followUpResult.usage ? {\r\n            promptTokens: (initialUsage?.prompt_tokens || 0) + (followUpResult.usage?.promptTokens || 0),\r\n            completionTokens: (initialUsage?.completion_tokens || 0) + (followUpResult.usage?.completionTokens || 0),\r\n            totalTokens: (initialUsage?.total_tokens || 0) + (followUpResult.usage?.totalTokens || 0)\r\n          } : initialUsage ? {\r\n            promptTokens: initialUsage.prompt_tokens || 0,\r\n            completionTokens: initialUsage.completion_tokens || 0,\r\n            totalTokens: initialUsage.total_tokens || 0\r\n          } : undefined,\r\n          toolCalls: allToolCalls\r\n        };\r\n      } catch (error) {\r\n        console.error(`❌ OpenAI Chat Completions follow-up streaming failed:`, error);\r\n        console.error(`❌ Falling back to original response without tool results`);\r\n        // Fall through to return original response\r\n      }\r\n    } else {\r\n      const errorText = await followUpResponse.text();\r\n      console.error(`❌ OpenAI Chat Completions follow-up call failed (${followUpResponse.status}):`, errorText);\r\n      console.error(`❌ Falling back to original response without tool results`);\r\n    }\r\n\r\n    // Return original response with tool calls if follow-up failed\r\n    console.log(`⚠️ OpenAI Chat Completions returning original response without tool results:`, {\r\n      contentLength: initialContent?.length || 0,\r\n      toolCallsCount: toolCalls.length,\r\n      content: initialContent?.substring(0, 100) + '...'\r\n    });\r\n\r\n    return {\r\n      content: initialContent,\r\n      usage: initialUsage ? {\r\n        promptTokens: initialUsage.prompt_tokens || 0,\r\n        completionTokens: initialUsage.completion_tokens || 0,\r\n        totalTokens: initialUsage.total_tokens || 0\r\n      } : undefined,\r\n      toolCalls: toolCalls\r\n        .filter(tc => tc.id && tc.function?.name)\r\n        .map(tc => ({\r\n          id: tc.id!,\r\n          name: tc.function!.name!,\r\n          arguments: JSON.parse(tc.function!.arguments || '{}')\r\n        }))\r\n    };\r\n  }\r\n\r\n  // OpenAI-specific tool calling methods\r\n  private async getOpenAITools(settings: LLMSettings): Promise<unknown[]> {\r\n    try {\r\n      console.log(`🔍 Getting tools for OpenAI provider`);\r\n      console.log(`🔍 Tool calling enabled:`, settings?.toolCallingEnabled !== false);\r\n\r\n      // Check if tool calling is disabled\r\n      if (settings?.toolCallingEnabled === false) {\r\n        console.log(`🚫 Tool calling is disabled, returning empty tools array`);\r\n        return [];\r\n      }\r\n\r\n      // Get raw tools from the centralized service (temporarily)\r\n      const rawTools = await this.getMCPToolsForProvider('openai', settings);\r\n      console.log(`📋 Raw tools received (${rawTools.length} tools):`, rawTools.map((t: any) => t.name || t.function?.name));\r\n\r\n      // Format tools specifically for OpenAI Assistants API\r\n      const formattedTools = this.formatToolsForOpenAI(rawTools);\r\n      console.log(`🔧 Formatted ${formattedTools.length} tools for OpenAI Assistants API`);\r\n\r\n      return formattedTools;\r\n    } catch (error) {\r\n      console.error('❌ Failed to get OpenAI tools:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private formatToolsForOpenAI(rawTools: any[]): unknown[] {\r\n    return rawTools.map(tool => {\r\n      // All tools now come in unified format with type: 'function' and function object\r\n      if (tool.type === 'function' && tool.function) {\r\n        // Sanitize tool name for OpenAI (replace hyphens with underscores)\r\n        const sanitizedName = tool.function.name.replace(/-/g, '_');\r\n        return {\r\n          type: 'function',\r\n          function: {\r\n            name: sanitizedName,\r\n            description: tool.function.description || 'No description',\r\n            parameters: tool.function.parameters || {\r\n              type: 'object',\r\n              properties: {},\r\n              required: []\r\n            }\r\n          }\r\n        };\r\n      }\r\n      \r\n      console.warn(`⚠️ Skipping invalid tool (not in unified format):`, tool);\r\n      return null;\r\n    }).filter(tool => tool !== null);\r\n  }\r\n\r\n  private async getOrCreateAssistantAndVectorStore(settings: LLMSettings): Promise<{ assistantId: string, vectorStoreId: string }> {\r\n    // Get OpenAI-specific formatted tools\r\n    const openAITools = await this.getOpenAITools(settings);\r\n    \r\n    // Ensure we're using a compatible model for assistants\r\n    let assistantModel = settings.model;\r\n    const compatibleModels = ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-4', 'gpt-3.5-turbo'];\r\n    if (!compatibleModels.some(model => assistantModel.includes(model))) {\r\n      console.warn(`⚠️ Model ${assistantModel} may not be compatible with Assistants API, using gpt-4o-mini as fallback`);\r\n      assistantModel = 'gpt-4o-mini';\r\n    }\r\n    \r\n    // Create a vector store\r\n    console.log('Creating a new vector store...');\r\n    const vectorStoreResponse = await fetch('https://api.openai.com/v1/vector_stores', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`,\r\n        'OpenAI-Beta': 'assistants=v2'\r\n      },\r\n      body: JSON.stringify({ name: 'Document Store' })\r\n    });\r\n    if (!vectorStoreResponse.ok) {\r\n      const errorText = await vectorStoreResponse.text();\r\n      console.error('❌ Vector store creation failed:', errorText);\r\n      throw new Error(`Failed to create vector store: ${vectorStoreResponse.status} - ${errorText}`);\r\n    }\r\n    const vectorStore = await vectorStoreResponse.json();\r\n    console.log(`Vector store created with ID: ${vectorStore.id}`);\r\n\r\n    // Prepare tools array - start with file_search\r\n    const tools: Array<{ type: string; function?: { name: string; description: string; parameters: any } }> = [{ type: 'file_search' }];\r\n    \r\n    // Add formatted OpenAI tools\r\n    if (openAITools.length > 0) {\r\n      console.log(`🔧 Adding ${openAITools.length} formatted tools to OpenAI assistant`);\r\n      tools.push(...openAITools as any[]);\r\n    }\r\n\r\n    // Create an assistant linked to the vector store with OpenAI tools\r\n    console.log(`Creating a new assistant with file search and ${tools.length - 1} OpenAI tools...`);\r\n    console.log('🔧 Tools being sent to OpenAI:', JSON.stringify(tools, null, 2));\r\n    \r\n    const assistantPayload = {\r\n      name: 'AI Assistant with MCP Tools',\r\n      instructions: 'You are a helpful assistant that can search documents and use various tools to help users.',\r\n      tools: tools,\r\n      tool_resources: { file_search: { vector_store_ids: [vectorStore.id] } },\r\n      model: assistantModel\r\n    };\r\n    \r\n    console.log('🔧 Assistant payload:', JSON.stringify(assistantPayload, null, 2));\r\n    \r\n    const assistantResponse = await fetch('https://api.openai.com/v1/assistants', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`,\r\n        'OpenAI-Beta': 'assistants=v2'\r\n      },\r\n      body: JSON.stringify(assistantPayload)\r\n    });\r\n    \r\n    if (!assistantResponse.ok) {\r\n      const errorText = await assistantResponse.text();\r\n      console.error('❌ OpenAI API Error:', {\r\n        status: assistantResponse.status,\r\n        statusText: assistantResponse.statusText,\r\n        body: errorText,\r\n        model: assistantModel,\r\n        toolCount: tools.length\r\n      });\r\n      throw new Error(`Failed to create assistant: ${assistantResponse.status} ${assistantResponse.statusText} - ${errorText}`);\r\n    }\r\n    const assistant = await assistantResponse.json();\r\n    console.log(`Assistant created with ID: ${assistant.id}`);\r\n\r\n    return { assistantId: assistant.id, vectorStoreId: vectorStore.id };\r\n  }\r\n\r\n  private async getOrCreateThread(conversationId: string | undefined, settings: LLMSettings): Promise<string> {\r\n    if (conversationId && this.threadMap.has(conversationId)) {\r\n      return this.threadMap.get(conversationId)!;\r\n    }\r\n\r\n    const response = await fetch('https://api.openai.com/v1/threads', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`,\r\n        'OpenAI-Beta': 'assistants=v2'\r\n      }\r\n    });\r\n    const thread = await response.json();\r\n    if (conversationId) {\r\n      this.threadMap.set(conversationId, thread.id);\r\n    }\r\n    return thread.id;\r\n  }\r\n\r\n  private async addMessageToThread(threadId: string, content: string, attachments: any[], settings: LLMSettings) {\r\n    await fetch(`https://api.openai.com/v1/threads/${threadId}/messages`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`,\r\n        'OpenAI-Beta': 'assistants=v2'\r\n      },\r\n      body: JSON.stringify({ role: 'user', content, attachments })\r\n    });\r\n  }\r\n\r\n  private async addFileToVectorStore(vectorStoreId: string, fileId: string, settings: LLMSettings) {\r\n    await fetch(`https://api.openai.com/v1/vector_stores/${vectorStoreId}/files`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`,\r\n        'OpenAI-Beta': 'assistants=v2'\r\n      },\r\n      body: JSON.stringify({ file_id: fileId })\r\n    });\r\n    console.log(`File ${fileId} added to vector store ${vectorStoreId}`);\r\n  }\r\n\r\n  private async createAndPollRun(threadId: string, assistantId: string, settings: LLMSettings): Promise<any> {\r\n    const runResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`,\r\n        'OpenAI-Beta': 'assistants=v2'\r\n      },\r\n      body: JSON.stringify({ assistant_id: assistantId })\r\n    });\r\n\r\n    let run = await runResponse.json();\r\n    const pollInterval = 1000; // 1 second\r\n\r\n    while (['queued', 'in_progress', 'requires_action'].includes(run.status)) {\r\n      if (run.status === 'requires_action') {\r\n        console.log('🔧 OpenAI run requires action - executing tools...');\r\n        await this.handleRequiredAction(threadId, run, settings);\r\n      }\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, pollInterval));\r\n      const pollResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs/${run.id}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${settings.apiKey}`,\r\n          'OpenAI-Beta': 'assistants=v2'\r\n        }\r\n      });\r\n      run = await pollResponse.json();\r\n    }\r\n\r\n    return run;\r\n  }\r\n\r\n  private async handleRequiredAction(threadId: string, run: any, settings: LLMSettings): Promise<void> {\r\n    console.log('🔧 Handling required action for OpenAI run:', run.id);\r\n    \r\n    if (!run.required_action || !run.required_action.submit_tool_outputs) {\r\n      console.warn('⚠️ No tool outputs required in required action');\r\n      return;\r\n    }\r\n\r\n    const toolCalls = run.required_action.submit_tool_outputs.tool_calls;\r\n    console.log(`🔧 Executing ${toolCalls.length} tool calls:`, toolCalls.map((tc: any) => tc.function.name));\r\n\r\n    const toolOutputs = [];\r\n    \r\n    for (const toolCall of toolCalls) {\r\n      try {\r\n        console.log(`🔧 Executing tool: ${toolCall.function.name}`);\r\n        const args = JSON.parse(toolCall.function.arguments);\r\n        const result = await this.executeMCPTool!(toolCall.function.name, args);\r\n        \r\n        toolOutputs.push({\r\n          tool_call_id: toolCall.id,\r\n          output: result\r\n        });\r\n        \r\n        console.log(`✅ Tool ${toolCall.function.name} executed successfully`);\r\n      } catch (error) {\r\n        console.error(`❌ Tool ${toolCall.function.name} failed:`, error);\r\n        toolOutputs.push({\r\n          tool_call_id: toolCall.id,\r\n          output: `Error executing tool: ${error}`\r\n        });\r\n      }\r\n    }\r\n\r\n    // Submit tool outputs back to OpenAI\r\n    console.log('🔧 Submitting tool outputs to OpenAI...');\r\n    const submitResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/runs/${run.id}/submit_tool_outputs`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`,\r\n        'OpenAI-Beta': 'assistants=v2'\r\n      },\r\n      body: JSON.stringify({ tool_outputs: toolOutputs })\r\n    });\r\n\r\n    if (!submitResponse.ok) {\r\n      const errorText = await submitResponse.text();\r\n      console.error('❌ Failed to submit tool outputs:', errorText);\r\n      throw new Error(`Failed to submit tool outputs: ${submitResponse.status} - ${errorText}`);\r\n    }\r\n    \r\n    console.log('✅ Tool outputs submitted successfully');\r\n  }\r\n\r\n  private async getAssistantResponse(threadId: string, settings: LLMSettings): Promise<string> {\r\n    const messagesResponse = await fetch(`https://api.openai.com/v1/threads/${threadId}/messages`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${settings.apiKey}`,\r\n        'OpenAI-Beta': 'assistants=v2'\r\n      }\r\n    });\r\n    const messages = await messagesResponse.json();\r\n    const assistantMessage = messages.data.find((m: any) => m.role === 'assistant');\r\n    return assistantMessage?.content[0]?.text?.value || 'No response from assistant.';\r\n  }\r\n\r\n  async fetchModels(apiKey: string): Promise<string[]> {\r\n    if (!apiKey) {\r\n      console.log('❌ No OpenAI API key provided - cannot fetch models');\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/models', {\r\n        headers: {\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.warn(`❌ OpenAI API error: ${response.status} - check API key`);\r\n        return [];\r\n      }\r\n\r\n      const data = await response.json() as { data: Array<{ id: string }> };\r\n      const models = data.data\r\n        .filter((model) => model.id.includes('gpt'))\r\n        .map((model) => model.id)\r\n        .sort();\r\n\r\n      return models;\r\n    } catch (error) {\r\n      console.warn('❌ Failed to fetch OpenAI models:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  formatTools(tools: ToolObject[]): unknown[] {\r\n    // OpenAI format - array of tool objects with type: 'function'\r\n    return tools.map(tool => ({\r\n      type: 'function',\r\n      function: {\r\n        name: tool.name || tool.function?.name,\r\n        description: tool.description || tool.function?.description,\r\n        parameters: tool.parameters || tool.function?.parameters || {\r\n          type: 'object',\r\n          properties: {},\r\n          required: []\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  getSystemPrompt(): string {\r\n    return OPENAI_SYSTEM_PROMPT;\r\n  }\r\n\r\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\r\n    if (tools.length === 0) {\r\n      return basePrompt;\r\n    }\r\n\r\n    // OpenAI uses structured tool calling with tools parameter and tool_choice\r\n    // Don't add XML tool instructions as they conflict with native function calling\r\n    console.log(`🔧 OpenAI using structured tools, skipping XML tool instructions`);\r\n    return basePrompt;\r\n  }\r\n\r\n  validateToolCall(toolCall: { id?: string; name: string; arguments: Record<string, unknown> }): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!toolCall.id) {\r\n      errors.push(`OpenAI tool call missing required id: ${toolCall.name}`);\r\n    }\r\n\r\n    if (!toolCall.name || typeof toolCall.name !== 'string') {\r\n      errors.push('Tool call must have a valid name');\r\n    }\r\n\r\n    if (!toolCall.arguments || typeof toolCall.arguments !== 'object') {\r\n      errors.push('Tool call must have valid arguments object');\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  validateTool(tool: unknown): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!tool || typeof tool !== 'object') {\r\n      errors.push('Tool must be an object');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const toolObj = tool as Record<string, unknown>;\r\n\r\n    if (!toolObj.type || toolObj.type !== 'function') {\r\n      errors.push('OpenAI tools must have type: \"function\"');\r\n    }\r\n\r\n    if (!toolObj.function || typeof toolObj.function !== 'object') {\r\n      errors.push('OpenAI tools must have function object');\r\n    } else {\r\n      const func = toolObj.function as Record<string, unknown>;\r\n      if (!func.name) {\r\n        errors.push('OpenAI tools must have function.name');\r\n      }\r\n      if (func.name && typeof func.name === 'string' && func.name.length > 64) {\r\n        errors.push('OpenAI function names must be ≤64 characters');\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Private helper methods\r\n  // Note: These methods are injected by the ProviderAdapter from the LLMService\r\n  private getMCPToolsForProvider!: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\r\n  private shouldSendTools!: (conversationId: string | undefined, tools: ToolObject[]) => Promise<boolean>;\r\n  private executeMCPTool!: (toolName: string, args: Record<string, unknown>) => Promise<string>;\r\n\r\n  private async handleStreamResponse(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔍 Starting OpenAI stream response handling...`);\r\n    const reader = response.body?.getReader();\r\n    if (!reader) {\r\n      throw new Error('No response body');\r\n    }\r\n\r\n    let fullContent = '';\r\n    let usage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined = undefined;\r\n    let chunkCount = 0;\r\n    const toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }> = [];\r\n    const decoder = new TextDecoder();\r\n\r\n    try {\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n\r\n        const chunk = decoder.decode(value);\r\n        chunkCount++;\r\n        if (chunkCount <= 3) {\r\n          console.log(`🔍 OpenAI stream chunk ${chunkCount}:`, chunk.substring(0, 200) + (chunk.length > 200 ? '...' : ''));\r\n        }\r\n        const lines = chunk.split('\\n');\r\n\r\n        for (const line of lines) {\r\n          if (line.startsWith('data: ')) {\r\n            const data = line.slice(6);\r\n            if (data === '[DONE]') continue;\r\n\r\n            try {\r\n              const parsed = JSON.parse(data);\r\n              if (chunkCount <= 5) {\r\n                console.log(`🔍 OpenAI parsed chunk ${chunkCount}:`, JSON.stringify(parsed, null, 2));\r\n              }\r\n\r\n              const choice = parsed.choices?.[0];\r\n              const delta = choice?.delta;\r\n              const content = delta?.content || '';\r\n\r\n              if (content) {\r\n                fullContent += content;\r\n                onStream(content);\r\n                console.log(`📝 OpenAI content chunk: \"${content}\"`);\r\n              }\r\n\r\n              // Check for tool calls and assemble them\r\n              if (delta?.tool_calls) {\r\n                console.log(`🔧 OpenAI tool calls detected:`, delta.tool_calls);\r\n\r\n                for (const toolCall of delta.tool_calls) {\r\n                  const index = toolCall.index;\r\n\r\n                  // Initialize tool call if not exists\r\n                  if (!toolCalls[index]) {\r\n                    toolCalls[index] = {\r\n                      id: toolCall.id || '',\r\n                      type: toolCall.type || 'function',\r\n                      function: {\r\n                        name: toolCall.function?.name || '',\r\n                        arguments: ''\r\n                      }\r\n                    };\r\n                  }\r\n\r\n                  // Append arguments\r\n                  if (toolCall.function?.arguments && toolCalls[index].function) {\r\n                    toolCalls[index].function!.arguments += toolCall.function.arguments;\r\n                  }\r\n\r\n                  // Set name if provided\r\n                  if (toolCall.function?.name && toolCalls[index].function) {\r\n                    toolCalls[index].function!.name = toolCall.function.name;\r\n                  }\r\n\r\n                  // Set id if provided\r\n                  if (toolCall.id) {\r\n                    toolCalls[index].id = toolCall.id;\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Capture usage data if available\r\n              if (parsed.usage) {\r\n                usage = parsed.usage;\r\n              }\r\n            } catch (error) {\r\n              console.error(`❌ OpenAI error parsing chunk:`, error, `Data: ${data.substring(0, 100)}...`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n\r\n    // Filter out empty tool calls and log final state\r\n    const validToolCalls = toolCalls.filter(tc => tc && tc.function?.name);\r\n\r\n    console.log('🔍 OpenAI stream response completed:', {\r\n      contentLength: fullContent.length,\r\n      hasUsage: !!usage,\r\n      usage: usage,\r\n      toolCallsCount: validToolCalls.length\r\n    });\r\n\r\n    if (validToolCalls.length > 0) {\r\n      console.log(`🔧 OpenAI assembled ${validToolCalls.length} tool calls:`, validToolCalls.map(tc => ({\r\n        name: tc.function?.name,\r\n        arguments: tc.function?.arguments\r\n      })));\r\n\r\n      // Execute tools and make follow-up call\r\n      return this.executeToolsAndFollowUp(validToolCalls, fullContent, usage, settings, provider, conversationHistory, onStream, conversationId);\r\n    }\r\n\r\n    const { usage: usageInfo, cost } = this.createUsageAndCost(settings.model, usage);\r\n    return {\r\n      content: fullContent,\r\n      usage: usageInfo,\r\n      cost,\r\n      toolCalls: validToolCalls\r\n        .filter(tc => tc.id && tc.function?.name) // Only include tool calls with valid id and name\r\n        .map(tc => ({\r\n          id: tc.id!,\r\n          name: tc.function!.name!,\r\n          arguments: JSON.parse(tc.function!.arguments || '{}')\r\n        }))\r\n    };\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async executeToolsAndFollowUp(\r\n    toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }>,\r\n    initialContent: string,\r\n    initialUsage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    console.log(`🔧 OpenAI streaming detected ${toolCalls.length} tool calls, executing...`);\r\n\r\n    // Check if we have parallel execution method injected (like Anthropic/Mistral)\r\n    if ((this as any).executeMultipleToolsParallel && (this as any).summarizeToolResultsForModel) {\r\n      console.log(`🚀 Using parallel execution for ${toolCalls.length} OpenAI tools`);\r\n      \r\n      // Format tool calls for parallel execution\r\n      const toolCallsForExecution = toolCalls.map(tc => ({\r\n        id: tc.id || '',\r\n        name: tc.function?.name || '',\r\n        arguments: JSON.parse(tc.function?.arguments || '{}')\r\n      }));\r\n\r\n      try {\r\n        // Execute tools in parallel immediately\r\n        const executeMultipleToolsParallel = (this as any).executeMultipleToolsParallel;\r\n        const summarizeToolResultsForModel = (this as any).summarizeToolResultsForModel;\r\n        \r\n        const parallelResults = await executeMultipleToolsParallel(toolCallsForExecution, 'openai');\r\n        console.log(`✅ OpenAI parallel execution completed: ${parallelResults.filter((r: any) => r.success).length}/${parallelResults.length} successful`);\r\n        \r\n        // Get tool results summary for the model\r\n        const toolSummary = summarizeToolResultsForModel(parallelResults);\r\n        \r\n        // Stream the tool results to user\r\n        onStream('\\n\\n' + toolSummary);\r\n        \r\n        // Return response with tool results included\r\n        return {\r\n          content: initialContent + '\\n\\n' + toolSummary,\r\n          usage: initialUsage ? {\r\n            promptTokens: initialUsage.prompt_tokens || 0,\r\n            completionTokens: initialUsage.completion_tokens || 0,\r\n            totalTokens: initialUsage.total_tokens || 0\r\n          } : undefined\r\n        };\r\n      } catch (error) {\r\n        console.error(`❌ OpenAI parallel tool execution failed, falling back to sequential:`, error);\r\n        // Fall back to sequential execution below\r\n      }\r\n    }\r\n\r\n    // Fallback: Execute all tool calls sequentially (old method)\r\n    console.log(`⚠️ Using sequential execution for ${toolCalls.length} OpenAI tools`);\r\n    const toolResults = [];\r\n    for (const toolCall of toolCalls) {\r\n      try {\r\n        console.log(`🔧 Executing OpenAI tool call: ${toolCall.function?.name}`);\r\n        const toolName = toolCall.function?.name || '';\r\n        const toolArgs = JSON.parse(toolCall.function?.arguments || '{}');\r\n        const toolResult = await (this as any).executeMCPTool(toolName, toolArgs);\r\n        toolResults.push({\r\n          role: 'tool',\r\n          tool_call_id: toolCall.id,\r\n          content: JSON.stringify(toolResult)\r\n        });\r\n      } catch (error) {\r\n        console.error(`❌ OpenAI tool execution failed:`, error);\r\n        toolResults.push({\r\n          role: 'tool',\r\n          tool_call_id: toolCall.id,\r\n          content: JSON.stringify({ error: error instanceof Error ? error.message : String(error) })\r\n        });\r\n      }\r\n    }\r\n\r\n    // Make follow-up call with tool results\r\n    const userMessages = conversationHistory.filter(msg => msg.role !== 'system');\r\n\r\n    // Convert tool calls to OpenAI format for follow-up\r\n    const openaiToolCalls = toolCalls.map(tc => ({\r\n      id: tc.id || '',\r\n      type: 'function',\r\n      function: {\r\n        name: tc.function?.name || '',\r\n        arguments: tc.function?.arguments || '{}'\r\n      }\r\n    }));\r\n\r\n    // Use same behavioral system prompt as initial call (for consistency and caching)\r\n    const hasCustomSystemPromptFollowUp = settings.systemPrompt &&\r\n      settings.systemPrompt.trim() &&\r\n      settings.systemPrompt !== \"You are a helpful AI assistant. Please provide concise and helpful responses.\";\r\n\r\n    const baseSystemPrompt = hasCustomSystemPromptFollowUp ? settings.systemPrompt! : this.getSystemPrompt();\r\n    const followUpSystemPrompt = baseSystemPrompt +\r\n      `\\n\\n## Follow-up Context\\n\\nBased on the tool results provided above, continue the conversation naturally. If you need to use additional tools to better answer the user's question, feel free to do so.`;\r\n\r\n    const followUpMessages = [\r\n      { role: 'system', content: followUpSystemPrompt },\r\n      ...userMessages,\r\n      { role: 'assistant', content: initialContent, tool_calls: openaiToolCalls },\r\n      ...toolResults\r\n    ];\r\n\r\n    // Get tools for continued agentic behavior in follow-up call\r\n    const followUpTools = await this.getMCPToolsForProvider('openai', settings);\r\n    console.log(`🔄 Making OpenAI follow-up call with ${followUpTools.length} tools available for continued agentic behavior`);\r\n\r\n    const followUpRequestBody = {\r\n      model: settings.model,\r\n      messages: followUpMessages,\r\n      temperature: settings.temperature,\r\n      max_tokens: settings.maxTokens,\r\n      stream: false,\r\n      // Include tools to allow continued agentic behavior\r\n      ...(followUpTools.length > 0 && {\r\n        tools: followUpTools,\r\n        tool_choice: 'auto'\r\n      })\r\n    };\r\n\r\n    const followUpResponse = await fetch(`${provider.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`\r\n      },\r\n      body: JSON.stringify(followUpRequestBody)\r\n    });\r\n\r\n    if (followUpResponse.ok) {\r\n      const followUpData = await followUpResponse.json();\r\n      const followUpMessage = followUpData.choices[0]?.message;\r\n\r\n      // Combine responses\r\n      const combinedUsage = {\r\n        promptTokens: (initialUsage?.prompt_tokens || 0) + (followUpData.usage?.prompt_tokens || 0),\r\n        completionTokens: (initialUsage?.completion_tokens || 0) + (followUpData.usage?.completion_tokens || 0),\r\n        totalTokens: (initialUsage?.total_tokens || 0) + (followUpData.usage?.total_tokens || 0)\r\n      };\r\n\r\n      // Stream the follow-up content\r\n      if (followUpMessage?.content) {\r\n        onStream(followUpMessage.content);\r\n      }\r\n\r\n      return {\r\n        content: followUpMessage?.content || 'Tool execution completed.',\r\n        usage: combinedUsage,\r\n        toolCalls: toolCalls\r\n          .filter(tc => tc.id && tc.function?.name)\r\n          .map(tc => ({\r\n            id: tc.id!,\r\n            name: tc.function!.name!,\r\n            arguments: JSON.parse(tc.function!.arguments || '{}')\r\n          }))\r\n      };\r\n    } else {\r\n      const errorText = await followUpResponse.text();\r\n      console.error(`❌ OpenAI follow-up call failed (${followUpResponse.status}):`, errorText);\r\n\r\n      // Return original response with tool calls\r\n      return {\r\n        content: initialContent,\r\n        usage: initialUsage ? {\r\n          promptTokens: initialUsage.prompt_tokens || 0,\r\n          completionTokens: initialUsage.completion_tokens || 0,\r\n          totalTokens: initialUsage.total_tokens || 0\r\n        } : undefined,\r\n        toolCalls: toolCalls\r\n          .filter(tc => tc.id && tc.function?.name)\r\n          .map(tc => ({\r\n            id: tc.id!,\r\n            name: tc.function!.name!,\r\n            arguments: JSON.parse(tc.function!.arguments || '{}')\r\n          }))\r\n      };\r\n    }\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNonStreamResponse(\r\n    response: Response,\r\n    settings: LLMSettings,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    const data = await response.json();\r\n    const choice = data.choices[0];\r\n    const message = choice.message;\r\n\r\n    // Handle tool calls if present\r\n    if (message.tool_calls && message.tool_calls.length > 0) {\r\n      console.log(`🔧 OpenAI response contains ${message.tool_calls.length} tool calls:`, message.tool_calls);\r\n      const content = message.content || '';\r\n\r\n      // Tool execution will be handled by the main service\r\n      // For now, just return the content with tool calls\r\n      return {\r\n        content,\r\n        usage: data.usage ? {\r\n          promptTokens: data.usage.prompt_tokens,\r\n          completionTokens: data.usage.completion_tokens,\r\n          totalTokens: data.usage.total_tokens\r\n        } : undefined,\r\n        toolCalls: message.tool_calls.map((tc: { id: string; function: { name: string; arguments: string } }) => ({\r\n          id: tc.id,\r\n          name: tc.function.name,\r\n          arguments: JSON.parse(tc.function.arguments)\r\n        }))\r\n      };\r\n    }\r\n\r\n    const { usage, cost } = this.createUsageAndCost(settings.model, data.usage);\r\n    return {\r\n      content: message.content,\r\n      usage,\r\n      cost\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate cost for OpenAI API usage\r\n   */\r\n  private calculateCost(model: string, promptTokens: number, completionTokens: number) {\r\n    return PricingService.calculateCost('openai', model, promptTokens, completionTokens);\r\n  }\r\n\r\n  /**\r\n   * Create usage and cost information from OpenAI API response\r\n   */\r\n  private createUsageAndCost(model: string, usage?: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number }) {\r\n    if (!usage) return { usage: undefined, cost: undefined };\r\n\r\n    const usageInfo = {\r\n      promptTokens: usage.prompt_tokens || 0,\r\n      completionTokens: usage.completion_tokens || 0,\r\n      totalTokens: usage.total_tokens || 0\r\n    };\r\n\r\n    const costInfo = this.calculateCost(model, usageInfo.promptTokens, usageInfo.completionTokens);\r\n\r\n    return { usage: usageInfo, cost: costInfo };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\OpenRouterProvider.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1102,1158],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1166,1246],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1355,1427],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1616,1837],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1990,2064],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2127,2185],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3543,3591],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4286,4380],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":207,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":207,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7643,7770],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7776,7927],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":242,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":242,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9329,9437],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9721,9866],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10347,10480],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10502,10586],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":279,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":279,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11521,11625],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12382,12478],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12504,12584],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":316,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":316,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13435,13502],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":320,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":320,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13587,13664],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":322,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":322,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[13699,13776],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":339,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":339,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14466,14579],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":343,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":343,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14704,14779],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":356,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":356,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15295,15365],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":359,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":359,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15477,15556],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":365,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":365,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15807,15899],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":373,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":373,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16053,16134],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":378,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":378,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16265,16358],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":409,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":409,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17669,17745],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":418,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":418,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17925,17998],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":425,"column":11,"nodeType":null,"messageId":"refactorFunction","endLine":425,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":428,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":428,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18329,18393],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":440,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":440,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19052,19120],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":454,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":454,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19737,19815],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":468,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":468,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20446,20519],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":475,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":475,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20590,20652],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":524,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":524,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22109,22173],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":541,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":541,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22759,22869],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":542,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":542,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22875,22993],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":555,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":555,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23587,23867],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":603,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":603,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25020,25090],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":616,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":616,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[25380,25455],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"models\".","line":621,"column":22,"nodeType":"LogicalExpression","messageId":"doImmediateAction","endLine":621,"endColumn":71,"fix":{"range":[25556,25644],"text":"return data.data?.map((model) => model.id)?.sort() || []"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":625,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":625,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[25676,25736],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":662,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":662,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26990,27090],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":666,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":666,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27227,27325],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","line":686,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":686,"endColumn":43},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 24 to the 15 allowed.","line":793,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":793,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":802,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":802,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32362,32445],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":817,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":817,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32889,32987],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":818,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":818,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32997,33087],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":821,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":821,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33189,33304],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":830,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":830,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[33508,33589],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":831,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":831,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[33599,33856],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":869,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":869,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34976,35054],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":888,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":888,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35846,35952],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":925,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":925,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[37305,37398],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 63 to the 15 allowed.","line":941,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":941,"endColumn":37},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'signal' is defined but never used. Allowed unused args must match /^_/u.","line":947,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":947,"endColumn":11},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":951,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":951,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38279,38345],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":972,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":972,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[39080,39198],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1014,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1014,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[40618,40714],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1026,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1026,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[40958,41158],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1035,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1035,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[41413,41523],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1042,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1042,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[41795,41913],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1068,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1068,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42606,42810],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 28 to the 15 allowed.","line":1095,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":1095,"endColumn":40},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used. Allowed unused args must match /^_/u.","line":1099,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1099,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1106,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1106,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[43981,44233],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1116,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1116,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[44544,44644],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1123,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1123,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[44930,45038],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1150,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1150,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[45976,46084],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1154,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1154,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[46441,46527],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1169,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1169,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47411,47551],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1184,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1184,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[48164,48224],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1197,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1197,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[48689,48795],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'signal' is defined but never used.","line":947,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":947,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":965,"column":14,"nodeType":"Literal","messageId":"unexpected","endLine":965,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationId' is defined but never used.","line":1099,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1099,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":9,"fatalErrorCount":0,"warningCount":67,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// OpenRouter provider implementation\r\n\r\nimport { BaseProvider } from './BaseProvider';\r\nimport {\r\n  LLMSettings,\r\n  LLMResponse,\r\n  MessageContent,\r\n  ContentItem,\r\n  LLMProvider,\r\n  ToolObject,\r\n  ProviderCapabilities,\r\n  APIResponseData\r\n} from './types';\r\n\r\nimport { OPENROUTER_SYSTEM_PROMPT, generateOpenRouterToolPrompt } from './prompts/openrouter';\r\n// import { RAGService } from '../RAGService'; // Moved to Electron main process, accessed via IPC\r\n\r\nexport class OpenRouterProvider extends BaseProvider {\r\n  readonly id = 'openrouter';\r\n  readonly name = 'OpenRouter';\r\n  readonly capabilities: ProviderCapabilities = {\r\n    supportsVision: true,\r\n    supportsTools: true,\r\n    supportsStreaming: true,\r\n    supportsSystemMessages: true,\r\n    supportsPromptCaching: true,\r\n    promptCachingType: 'both', // Supports both automatic (OpenAI/Grok/DeepSeek) and manual (Anthropic/Gemini)\r\n    maxToolNameLength: 64,\r\n    toolFormat: 'openai'\r\n  };\r\n\r\n  // OpenRouter-specific tool calling methods\r\n  private async getOpenRouterTools(settings: LLMSettings): Promise<unknown[]> {\r\n    try {\r\n      console.log(`🔍 Getting tools for OpenRouter provider`);\r\n      console.log(`🔍 Tool calling enabled:`, settings?.toolCallingEnabled !== false);\r\n\r\n      // Check if tool calling is disabled\r\n      if (settings?.toolCallingEnabled === false) {\r\n        console.log(`🚫 Tool calling is disabled, returning empty tools array`);\r\n        return [];\r\n      }\r\n\r\n      // Get raw tools from the centralized service (temporarily)\r\n      const rawTools = await this.getMCPToolsForProvider('openrouter', settings);\r\n      console.log(`📋 Raw tools received (${rawTools.length} tools):`, rawTools.map((t: unknown) => (t as {name?: string, function?: {name?: string}}).name || (t as {name?: string, function?: {name?: string}}).function?.name));\r\n\r\n      // Format tools specifically for OpenRouter (uses OpenAI format)\r\n      const formattedTools = this.formatToolsForOpenRouter(rawTools);\r\n      console.log(`🔧 Formatted ${formattedTools.length} tools for OpenRouter`);\r\n\r\n      return formattedTools;\r\n    } catch (error) {\r\n      console.error('❌ Failed to get OpenRouter tools:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private formatToolsForOpenRouter(rawTools: unknown[]): unknown[] {\r\n    return rawTools.map(tool => {\r\n      const typedTool = tool as {type?: string, function?: {name?: string, description?: string, parameters?: unknown}, name?: string, description?: string, inputSchema?: unknown};\r\n\r\n      // All tools now come in unified format with type: 'function' and function object\r\n      if (typedTool.type === 'function' && typedTool.function) {\r\n        return {\r\n          type: 'function',\r\n          function: {\r\n            name: typedTool.function.name || 'unknown_tool',\r\n            description: typedTool.function.description || 'No description',\r\n            parameters: typedTool.function.parameters || {\r\n              type: 'object',\r\n              properties: {},\r\n              required: []\r\n            }\r\n          }\r\n        };\r\n      }\r\n\r\n      // Handle MCP tools (need conversion to OpenAI format)\r\n      if (typedTool.name && typedTool.description) {\r\n        return {\r\n          type: 'function',\r\n          function: {\r\n            name: typedTool.name,\r\n            description: typedTool.description,\r\n            parameters: typedTool.inputSchema || {\r\n              type: 'object',\r\n              properties: {},\r\n              required: []\r\n            }\r\n          }\r\n        };\r\n      }\r\n\r\n      console.warn(`⚠️ Skipping invalid tool:`, tool);\r\n      return null;\r\n    }).filter(tool => tool !== null);\r\n  }\r\n\r\n  private detectUnderlyingProvider(model: string): string {\r\n    // Detect underlying provider from OpenRouter model name\r\n    if (model.startsWith('openai/')) return 'openai';\r\n    if (model.startsWith('anthropic/')) return 'anthropic';\r\n    if (model.startsWith('google/')) return 'google';\r\n    if (model.startsWith('meta-llama/')) return 'meta';\r\n    if (model.startsWith('mistral/') || model.startsWith('mistralai/')) return 'mistral';\r\n    if (model.startsWith('cohere/')) return 'cohere';\r\n    if (model.startsWith('perplexity/')) return 'perplexity';\r\n\r\n    // Default to OpenAI format for unknown models (safest)\r\n    console.log(`⚠️ Unknown OpenRouter model prefix for \"${model}\", defaulting to OpenAI format`);\r\n    return 'openai';\r\n  }\r\n\r\n  private modelSupportsStructuredTools(underlyingProvider: string): boolean {\r\n    // Check if underlying provider supports structured tool calling\r\n    switch (underlyingProvider) {\r\n      case 'openai':\r\n      case 'anthropic':\r\n      case 'google':\r\n      case 'mistral':\r\n        return true;\r\n      case 'meta':\r\n      case 'cohere':\r\n      case 'perplexity':\r\n      default:\r\n        return false; // Use text-based tool descriptions\r\n    }\r\n  }\r\n\r\n  private modelSupportsManualCaching(underlyingProvider: string): boolean {\r\n    // Check if underlying provider supports manual cache_control parameters\r\n    switch (underlyingProvider) {\r\n      case 'anthropic':\r\n      case 'google': // Gemini models\r\n        return true;\r\n      case 'openai':\r\n      case 'grok':\r\n      case 'deepseek':\r\n        return false; // These use automatic caching\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  private addCacheControlToSystemPrompt(systemPrompt: string, underlyingProvider: string, cachingEnabled: boolean): unknown {\r\n    // Add cache_control to system prompt for providers that support manual caching\r\n    if (!cachingEnabled || !this.modelSupportsManualCaching(underlyingProvider)) {\r\n      return systemPrompt;\r\n    }\r\n\r\n    if (underlyingProvider === 'anthropic') {\r\n      // Anthropic format: array of content objects with cache_control\r\n      return [\r\n        {\r\n          type: 'text',\r\n          text: systemPrompt,\r\n          cache_control: { type: 'ephemeral' }\r\n        }\r\n      ];\r\n    } else if (underlyingProvider === 'google') {\r\n      // For Gemini via OpenRouter, system prompt caching is handled differently\r\n      // Return as string but we'll add cache_control to messages instead\r\n      return systemPrompt;\r\n    }\r\n\r\n    return systemPrompt;\r\n  }\r\n\r\n  private addCacheControlToLargeContent(content: Array<ContentItem>, enableCaching: boolean): Array<ContentItem> {\r\n    if (!enableCaching) {\r\n      return content;\r\n    }\r\n\r\n    // Add cache_control to large text content (>1024 tokens estimated)\r\n    return content.map((item, index) => {\r\n      if (item.type === 'text' && item.text) {\r\n        // Rough token estimation: ~4 characters per token\r\n        const estimatedTokens = item.text.length / 4;\r\n\r\n        // Add cache_control to large content (>1024 tokens) and make it the last cacheable item\r\n        if (estimatedTokens > 1024 && index === content.length - 1) {\r\n          return {\r\n            ...item,\r\n            cache_control: { type: 'ephemeral' as const }\r\n          };\r\n        }\r\n      }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  private async buildProviderSpecificRequest(\r\n    underlyingProvider: string,\r\n    settings: LLMSettings,\r\n    systemPrompt: string,\r\n    tools: unknown[],\r\n    message: MessageContent,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream?: (chunk: string) => void\r\n  ): Promise<{ requestBody: Record<string, unknown>; messages: unknown[] }> {\r\n\r\n    const supportsStructuredTools = this.modelSupportsStructuredTools(underlyingProvider);\r\n    const supportsManualCaching = this.modelSupportsManualCaching(underlyingProvider);\r\n    const cachingEnabled = settings.promptCachingEnabled ?? false;\r\n\r\n    console.log(`🔧 OpenRouter underlying provider \"${underlyingProvider}\" supports structured tools: ${supportsStructuredTools}`);\r\n    console.log(`🔧 OpenRouter underlying provider \"${underlyingProvider}\" supports manual caching: ${supportsManualCaching}, enabled: ${cachingEnabled}`);\r\n\r\n    // Build messages based on provider format\r\n    let messages: unknown[];\r\n    let requestBody: Record<string, unknown>;\r\n\r\n    if (underlyingProvider === 'anthropic') {\r\n      // Anthropic format: system parameter + messages without system role\r\n      messages = await this.constructMessagesWithFiles(message, conversationHistory, '', cachingEnabled && supportsManualCaching);\r\n      const systemWithCaching = this.addCacheControlToSystemPrompt(systemPrompt, underlyingProvider, cachingEnabled);\r\n      requestBody = {\r\n        model: settings.model,\r\n        system: systemWithCaching, // System parameter with optional caching\r\n        messages,\r\n        temperature: settings.temperature,\r\n        max_tokens: settings.maxTokens,\r\n        stream: !!onStream\r\n      };\r\n    } else {\r\n      // OpenAI format (default): system message first in messages array\r\n      messages = await this.constructMessagesWithFiles(message, conversationHistory, systemPrompt, cachingEnabled && supportsManualCaching);\r\n      requestBody = {\r\n        model: settings.model,\r\n        messages,\r\n        temperature: settings.temperature,\r\n        max_tokens: settings.maxTokens,\r\n        stream: !!onStream\r\n      };\r\n    }\r\n\r\n    // Add tools based on provider capabilities\r\n    if (supportsStructuredTools && tools.length > 0) {\r\n      requestBody.tools = tools;\r\n      requestBody.tool_choice = 'auto';\r\n      console.log(`🚀 OpenRouter API call with ${tools.length} structured tools for ${underlyingProvider} model`);\r\n    } else if (tools.length > 0) {\r\n      // For models without structured tools, use enhanced system prompt with proper tool calling instructions\r\n      const enhancedSystemPrompt = this.enhanceSystemPromptWithTools(systemPrompt, tools as ToolObject[], underlyingProvider);\r\n      console.log(`🔧 OpenRouter enhanced system prompt for ${underlyingProvider} (${enhancedSystemPrompt.length - systemPrompt.length} chars added)`);\r\n\r\n      if (underlyingProvider === 'anthropic') {\r\n        requestBody.system = enhancedSystemPrompt;\r\n      } else {\r\n        // Update system message in messages array\r\n        const systemMessageIndex = (messages as Array<{role: string, content: string}>).findIndex(m => m.role === 'system');\r\n        if (systemMessageIndex >= 0) {\r\n          (messages as Array<{role: string, content: string}>)[systemMessageIndex].content = enhancedSystemPrompt;\r\n        }\r\n      }\r\n      console.log(`🚀 OpenRouter API call with ${tools.length} text-based tools for ${underlyingProvider} model (enhanced system prompt)`);\r\n    } else {\r\n      console.log(`🚀 OpenRouter API call without tools for ${underlyingProvider} model`);\r\n    }\r\n\r\n    return { requestBody, messages };\r\n  }\r\n\r\n  private formatToolsAsText(tools: ToolObject[]): string {\r\n    return tools.map(tool => {\r\n      const name = tool.name || tool.function?.name || 'unknown_tool';\r\n      const description = tool.description || tool.function?.description || 'No description';\r\n      const parameters = tool.parameters || tool.function?.parameters || {};\r\n\r\n      return `- ${name}: ${description}\\n  Parameters: ${JSON.stringify(parameters, null, 2)}`;\r\n    }).join('\\n\\n');\r\n  }\r\n\r\n  /**\r\n   * Parse text-based tool calls from model response content\r\n   * Handles various formats that models might use when structured tool calling isn't supported\r\n   */\r\n  private parseTextBasedToolCalls(content: string, availableTools: string[] = []): Array<{ name: string; arguments: Record<string, unknown> }> {\r\n    const toolCalls: Array<{ name: string; arguments: Record<string, unknown> }> = [];\r\n\r\n    console.log(`🔍 OpenRouter parsing text for tool calls in content:`, content.substring(0, 200) + '...');\r\n\r\n    // Pattern 0: Simple functions.tool_name:id format (most common)\r\n    // functions.list_processes:0, functions.write_file:1, etc.\r\n    const simpleFunctionRegex = /functions\\.([a-zA-Z_][a-zA-Z0-9_]*):(\\d+)/gi;\r\n    let simpleMatch = simpleFunctionRegex.exec(content);\r\n    while (simpleMatch) {\r\n      const toolName = simpleMatch[1];\r\n      const toolId = simpleMatch[2];\r\n\r\n      // Check if this tool is available\r\n      if (availableTools.length === 0 || availableTools.includes(toolName)) {\r\n        // For simple format, we need to extract arguments from context or use empty object\r\n        const args = this.extractArgumentsForSimpleToolCall(content, toolName, toolId);\r\n        toolCalls.push({ name: toolName, arguments: args });\r\n        console.log(`✅ Found simple function format tool call: ${toolName}:${toolId} with args:`, args);\r\n      } else {\r\n        console.log(`⚠️ Tool ${toolName} not in available tools list:`, availableTools);\r\n      }\r\n      simpleMatch = simpleFunctionRegex.exec(content);\r\n    }\r\n\r\n    // Pattern 1: Custom OpenRouter/model-specific format with delimiters\r\n    // <|tool_calls_section_begin|><|tool_call_begin|>functions.tool_name:1<|tool_call_argument_begin|>{\"arg\": \"value\"}<|tool_call_end|><|tool_calls_section_end|>\r\n    const customFormatRegex = /<\\|tool_call_begin\\|>(?:functions\\.)?([^:]+):\\d+<\\|tool_call_argument_begin\\|>(\\{[\\s\\S]*?\\})<\\|tool_call_end\\|>/gi;\r\n    let match = customFormatRegex.exec(content);\r\n    while (match) {\r\n      try {\r\n        const toolName = match[1];\r\n        let args = JSON.parse(match[2]);\r\n\r\n        // Handle nested input structure: {\"input\": {\"path\": \"...\"}} -> {\"path\": \"...\"}\r\n        if (args.input && typeof args.input === 'object' && Object.keys(args).length === 1) {\r\n          args = args.input;\r\n          console.log(`🔧 Unwrapped nested input structure for ${toolName}`);\r\n        }\r\n\r\n        toolCalls.push({ name: toolName, arguments: args });\r\n        console.log(`✅ Found custom format tool call: ${toolName} with args:`, args);\r\n      } catch (error) {\r\n        console.warn(`⚠️ Failed to parse custom format tool call:`, match[0], error);\r\n      }\r\n      match = customFormatRegex.exec(content);\r\n    }\r\n\r\n    // Pattern 2: Enhanced tool_call format with ```json wrapper (Option 2)\r\n    // ```json { \"tool_call\": { \"name\": \"web_search\", \"arguments\": {...} } } ```\r\n    const jsonWrappedToolCallRegex = /```json\\s*(\\{[\\s\\S]*?\"tool_call\"[\\s\\S]*?\\})\\s*```/gi;\r\n    match = jsonWrappedToolCallRegex.exec(content);\r\n    if (match) {\r\n      try {\r\n        const jsonObj = JSON.parse(match[1]);\r\n        if (jsonObj.tool_call && jsonObj.tool_call.name && jsonObj.tool_call.arguments) {\r\n          toolCalls.push({\r\n            name: jsonObj.tool_call.name,\r\n            arguments: jsonObj.tool_call.arguments\r\n          });\r\n          console.log(`✅ Found JSON-wrapped tool call: ${jsonObj.tool_call.name} with args:`, jsonObj.tool_call.arguments);\r\n          return toolCalls; // Return early if we found the structured format\r\n        }\r\n      } catch (error) {\r\n        console.log(`⚠️ Failed to parse JSON-wrapped tool call:`, match[1], error);\r\n      }\r\n    }\r\n\r\n    // Pattern 3: Direct JSON tool_call format (Option 1)\r\n    // { \"tool_call\": { \"name\": \"web_search\", \"arguments\": {...} } }\r\n    const directToolCallRegex = /\\{\\s*\"tool_call\"\\s*:\\s*\\{\\s*\"name\"\\s*:\\s*\"([^\"]+)\"\\s*,\\s*\"arguments\"\\s*:\\s*(\\{[\\s\\S]*?\\})\\s*\\}\\s*\\}/gi;\r\n    match = directToolCallRegex.exec(content);\r\n    if (match) {\r\n      try {\r\n        const toolName = match[1];\r\n        const args = JSON.parse(match[2]);\r\n        toolCalls.push({ name: toolName, arguments: args });\r\n        console.log(`✅ Found direct tool call: ${toolName} with args:`, args);\r\n        return toolCalls; // Return early if we found the structured format\r\n      } catch (error) {\r\n        console.log(`⚠️ Failed to parse direct tool call arguments:`, match[2], error);\r\n        // Try fallback parsing\r\n        const toolName = match[1];\r\n        const args = this.parseArgumentsFromText(match[2]);\r\n        if (Object.keys(args).length > 0) {\r\n          toolCalls.push({ name: toolName, arguments: args });\r\n          console.log(`✅ Found direct tool call with fallback parsing: ${toolName} with args:`, args);\r\n          return toolCalls;\r\n        }\r\n      }\r\n    }\r\n\r\n    // If we found structured tool calls, return them\r\n    if (toolCalls.length > 0) {\r\n      console.log(`✅ Found ${toolCalls.length} structured tool calls, returning them`);\r\n      return toolCalls;\r\n    }\r\n\r\n    // STEP 2: If no structured tool calls found, search for traces of tool usage in text\r\n    console.log(`🔍 No structured tool calls found, searching for tool usage traces in text...`);\r\n\r\n    return this.parseToolTracesFromText(content, availableTools);\r\n  }\r\n\r\n  /**\r\n   * Extract arguments for simple tool calls (functions.tool_name:id format)\r\n   * Looks for JSON objects or argument patterns near the tool call\r\n   */\r\n  private extractArgumentsForSimpleToolCall(content: string, toolName: string, toolId: string): Record<string, unknown> {\r\n    // Look for JSON objects near the tool call\r\n    const toolCallPattern = `functions\\\\.${toolName}:${toolId}`;\r\n    const toolCallIndex = content.search(new RegExp(toolCallPattern));\r\n\r\n    if (toolCallIndex === -1) {\r\n      return {};\r\n    }\r\n\r\n    // Search for JSON objects in the surrounding context (500 chars before and after)\r\n    const contextStart = Math.max(0, toolCallIndex - 500);\r\n    const contextEnd = Math.min(content.length, toolCallIndex + 500);\r\n    const context = content.substring(contextStart, contextEnd);\r\n\r\n    // Look for JSON objects in the context\r\n    const jsonRegex = /\\{[^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\}/g;\r\n    let match;\r\n    while ((match = jsonRegex.exec(context)) !== null) {\r\n      try {\r\n        const parsed = JSON.parse(match[0]);\r\n        // If it's a valid object with reasonable properties, use it\r\n        if (typeof parsed === 'object' && parsed !== null && Object.keys(parsed).length > 0) {\r\n          console.log(`🔧 Extracted arguments for ${toolName} from context:`, parsed);\r\n          return parsed;\r\n        }\r\n      } catch {\r\n        // Continue searching\r\n      }\r\n    }\r\n\r\n    // If no JSON found, return empty object (tool will use defaults)\r\n    console.log(`🔧 No arguments found for ${toolName}, using empty object`);\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Parse tool usage traces from natural language text\r\n   */\r\n  private parseToolTracesFromText(content: string, availableTools: string[]): Array<{ name: string; arguments: Record<string, unknown> }> {\r\n    const toolCalls: Array<{ name: string; arguments: Record<string, unknown> }> = [];\r\n\r\n    console.log(`🔍 Searching for tool usage traces in content...`);\r\n\r\n    for (const toolName of availableTools) {\r\n      // Pattern 1: Direct tool mentions with arguments\r\n      // \"I'll use web_search with query 'weather Paris'\"\r\n      const directMentionPattern = new RegExp(`(?:use|using|call|calling)\\\\s+${toolName}\\\\s+(?:with|for)\\\\s+([^.!?]+)`, 'gi');\r\n      const directMatch = directMentionPattern.exec(content);\r\n      if (directMatch && !toolCalls.find(tc => tc.name === toolName)) {\r\n        const argsText = directMatch[1].trim();\r\n        const args = this.parseArgumentsFromText(argsText);\r\n        if (Object.keys(args).length > 0) {\r\n          toolCalls.push({ name: toolName, arguments: args });\r\n          console.log(`✅ Found direct mention: ${toolName} with args:`, args);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Pattern 2: Function call style mentions\r\n      // \"web_search('weather Paris')\" or \"web_search(query='weather Paris')\"\r\n      const functionCallPattern = new RegExp(`${toolName}\\\\s*\\\\(([^)]+)\\\\)`, 'gi');\r\n      const funcMatch = functionCallPattern.exec(content);\r\n      if (funcMatch && !toolCalls.find(tc => tc.name === toolName)) {\r\n        const argsText = funcMatch[1].trim();\r\n        const args = this.parseArgumentsFromText(argsText);\r\n        if (Object.keys(args).length > 0) {\r\n          toolCalls.push({ name: toolName, arguments: args });\r\n          console.log(`✅ Found function call: ${toolName}(${argsText}) -> args:`, args);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Pattern 3: Action descriptions\r\n      // \"I'll search for weather in Paris\" (for web_search tool)\r\n      if (toolName === 'web_search' || toolName === 'web-search') {\r\n        const searchPattern = /(?:search|find|look up|query)(?:\\s+for)?\\s+([^.!?]+)/gi;\r\n        const searchMatch = searchPattern.exec(content);\r\n        if (searchMatch && !toolCalls.find(tc => tc.name === toolName)) {\r\n          const query = searchMatch[1].trim().replace(/['\"]/g, '');\r\n          if (query.length > 2) {\r\n            toolCalls.push({ name: toolName, arguments: { query } });\r\n            console.log(`✅ Found search action: ${toolName} with query: \"${query}\"`);\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(`🔍 Found ${toolCalls.length} tool usage traces`);\r\n    return toolCalls;\r\n  }\r\n\r\n  /**\r\n   * Parse arguments from text using various heuristics\r\n   */\r\n  private parseArgumentsFromText(text: string): Record<string, unknown> {\r\n    const args: Record<string, unknown> = {};\r\n\r\n    try {\r\n      // Try to parse as JSON first\r\n      const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\r\n      if (jsonMatch) {\r\n        return JSON.parse(jsonMatch[0]);\r\n      }\r\n    } catch {\r\n      // Continue with other parsing methods\r\n    }\r\n\r\n    // Parse key=value pairs\r\n    const keyValuePattern = /(\\w+)\\s*[=:]\\s*['\"]?([^'\",]+)['\"]?/g;\r\n    let match;\r\n    while ((match = keyValuePattern.exec(text)) !== null) {\r\n      args[match[1]] = match[2].trim();\r\n    }\r\n\r\n    // If no key-value pairs found, treat as single query parameter\r\n    if (Object.keys(args).length === 0) {\r\n      const cleanText = text.replace(/['\"]/g, '').trim();\r\n      if (cleanText.length > 0) {\r\n        args.query = cleanText;\r\n      }\r\n    }\r\n\r\n    return args;\r\n  }\r\n\r\n  /**\r\n   * Get available tool names for text-based parsing\r\n   */\r\n  private async getAvailableToolNames(settings: LLMSettings): Promise<string[]> {\r\n    try {\r\n      const tools = await this.getOpenRouterTools(settings);\r\n      return tools.map((tool: unknown) => {\r\n        const typedTool = tool as { function?: { name?: string } };\r\n        return typedTool.function?.name || 'unknown_tool';\r\n      }).filter(name => name !== 'unknown_tool');\r\n    } catch (error) {\r\n      console.error('❌ Failed to get tool names for parsing:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async sendMessage(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    // Detect underlying provider from model name\r\n    const underlyingProvider = this.detectUnderlyingProvider(settings.model);\r\n    const supportsStructuredTools = this.modelSupportsStructuredTools(underlyingProvider);\r\n    console.log(`🔍 OpenRouter model \"${settings.model}\" detected as underlying provider: ${underlyingProvider}`);\r\n    console.log(`🔍 OpenRouter structured tools support: ${supportsStructuredTools} for provider: ${underlyingProvider}`);\r\n\r\n    // Get OpenRouter-specific formatted tools\r\n    const openRouterTools = await this.getOpenRouterTools(settings);\r\n\r\n    // Use behavioral system prompt only (no tool descriptions)\r\n    // Check for meaningful system prompt, not just empty string or generic default\r\n    const hasCustomSystemPrompt = settings.systemPrompt &&\r\n      settings.systemPrompt.trim() &&\r\n      settings.systemPrompt !== \"You are a helpful AI assistant. Please provide concise and helpful responses.\";\r\n\r\n    const systemPrompt = hasCustomSystemPrompt ? settings.systemPrompt! : this.getSystemPrompt();\r\n\r\n    console.log(`🔍 OpenRouter system prompt source:`, {\r\n      hasCustom: hasCustomSystemPrompt,\r\n      usingCustom: hasCustomSystemPrompt,\r\n      promptLength: systemPrompt?.length || 0,\r\n      promptStart: systemPrompt?.substring(0, 100) + '...',\r\n      underlyingProvider\r\n    });\r\n\r\n    // Build request based on underlying provider format\r\n    const { requestBody } = await this.buildProviderSpecificRequest(\r\n      underlyingProvider,\r\n      settings,\r\n      systemPrompt,\r\n      openRouterTools,\r\n      message,\r\n      conversationHistory,\r\n      onStream\r\n    );\r\n\r\n\r\n\r\n\r\n    const response = await fetch(`${provider.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`,\r\n        'HTTP-Referer': 'https://littlellm.app',\r\n        'X-Title': 'LittleLLM'\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n      signal\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      throw new Error(`OpenRouter API error: ${error}`);\r\n    }\r\n\r\n    if (onStream) {\r\n      return this.handleStreamResponse(response, onStream, settings, provider, conversationHistory, signal);\r\n    } else {\r\n      return this.handleNonStreamResponse(response, settings, conversationHistory, conversationId);\r\n    }\r\n  }\r\n\r\n  async fetchModels(apiKey: string): Promise<string[]> {\r\n    if (!apiKey) {\r\n      console.log('❌ No OpenRouter API key provided - cannot fetch models');\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('https://openrouter.ai/api/v1/models', {\r\n        headers: {\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.warn(`❌ OpenRouter API error: ${response.status} - check API key`);\r\n        return [];\r\n      }\r\n\r\n      const data = await response.json() as APIResponseData;\r\n      const models = data.data?.map((model) => model.id)?.sort() || [];\r\n\r\n      return models;\r\n    } catch (error) {\r\n      console.warn('❌ Failed to fetch OpenRouter models:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  formatTools(tools: ToolObject[]): unknown[] {\r\n    return tools.map(tool => ({\r\n      type: 'function',\r\n      function: {\r\n        name: tool.name || tool.function?.name,\r\n        description: tool.description || tool.function?.description,\r\n        parameters: tool.parameters || tool.function?.parameters || {\r\n          type: 'object',\r\n          properties: {},\r\n          required: []\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  getSystemPrompt(): string {\r\n    return OPENROUTER_SYSTEM_PROMPT;\r\n  }\r\n\r\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[], underlyingProvider?: string): string {\r\n    if (tools.length === 0) {\r\n      return basePrompt;\r\n    }\r\n\r\n    // For structured tool calling providers, don't add XML tool instructions\r\n    // The tools are sent via the tools parameter and the LLM should use native function calling\r\n    const provider = underlyingProvider || 'openai'; // Default to openai if not specified\r\n    const supportsStructuredTools = this.modelSupportsStructuredTools(provider);\r\n\r\n    if (supportsStructuredTools) {\r\n      // For structured tools, just return the base prompt\r\n      // The LLM will use native function calling based on the tools parameter\r\n      console.log(`🔧 OpenRouter using structured tools for ${provider}, skipping XML tool instructions`);\r\n      return basePrompt;\r\n    } else {\r\n      // For text-based tool calling, add the complex tool instructions with XML format\r\n      console.log(`🔧 OpenRouter using text-based tools for ${provider}, adding XML tool instructions`);\r\n      const toolInstructions = generateOpenRouterToolPrompt(tools);\r\n      return basePrompt + toolInstructions;\r\n    }\r\n  }\r\n\r\n  validateToolCall(toolCall: { id?: string; name: string; arguments: Record<string, unknown> }): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!toolCall.name) {\r\n      errors.push('Tool call must have a name');\r\n    }\r\n\r\n    if (toolCall.name && typeof this.capabilities.maxToolNameLength === 'number' && toolCall.name.length > this.capabilities.maxToolNameLength) {\r\n      errors.push(`Tool name must be ≤${this.capabilities.maxToolNameLength} characters`);\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  private async constructMessagesWithFiles(\r\n    message: MessageContent,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    systemPrompt: string,\r\n    enableCaching = false\r\n  ): Promise<Array<{role: string, content: string | Array<ContentItem>}>> {\r\n    const messages: Array<{role: string, content: string | Array<ContentItem>}> = [];\r\n\r\n    if (systemPrompt) {\r\n      messages.push({ role: 'system', content: systemPrompt });\r\n    }\r\n\r\n    messages.push(...conversationHistory);\r\n\r\n    if (typeof message === 'string') {\r\n      // For string messages, add cache_control if it's large content\r\n      if (enableCaching && message.length > 4096) { // ~1024 tokens\r\n        const contentWithCaching: Array<ContentItem> = [\r\n          {\r\n            type: 'text',\r\n            text: message,\r\n            cache_control: { type: 'ephemeral' }\r\n          }\r\n        ];\r\n        messages.push({ role: 'user', content: contentWithCaching });\r\n      } else {\r\n        messages.push({ role: 'user', content: message });\r\n      }\r\n    } else if (Array.isArray(message)) {\r\n      const userContent: Array<ContentItem> = [];\r\n      for (const item of message) {\r\n        if (item.type === 'file' && item.fileContent) {\r\n          const fileExtension = item.fileName?.split('.').pop()?.toLowerCase() || '';\r\n          let mimeType = 'application/octet-stream';\r\n          if (fileExtension) {\r\n            switch (fileExtension) {\r\n              case 'pdf':\r\n                mimeType = 'application/pdf';\r\n                break;\r\n              case 'doc':\r\n              case 'docx':\r\n                mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\r\n                break;\r\n              case 'csv':\r\n                mimeType = 'text/csv';\r\n                break;\r\n              case 'md':\r\n                mimeType = 'text/markdown';\r\n                break;\r\n              case 'txt':\r\n                mimeType = 'text/plain';\r\n                break;\r\n            }\r\n          }\r\n          userContent.push({\r\n            type: 'image_url',\r\n            image_url: {\r\n              url: `data:${mimeType};base64,${item.fileContent}`\r\n            }\r\n          });\r\n        } else {\r\n          userContent.push(item);\r\n        }\r\n      }\r\n\r\n      // Add cache_control to large content items\r\n      const contentWithCaching = this.addCacheControlToLargeContent(userContent, enableCaching);\r\n      messages.push({ role: 'user', content: contentWithCaching });\r\n    }\r\n\r\n    return messages;\r\n  }\r\n\r\n  validateTool(tool: unknown): { valid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!tool || typeof tool !== 'object') {\r\n      errors.push('Tool must be an object');\r\n      return { valid: false, errors };\r\n    }\r\n\r\n    const toolObj = tool as Record<string, unknown>;\r\n\r\n    if (toolObj.type !== 'function') {\r\n      errors.push('OpenRouter tools must have type \"function\"');\r\n    }\r\n\r\n    if (!toolObj.function || typeof toolObj.function !== 'object') {\r\n      errors.push('OpenRouter tools must have function object');\r\n    } else {\r\n      const func = toolObj.function as Record<string, unknown>;\r\n      if (!func.name) {\r\n        errors.push('OpenRouter tools must have function.name');\r\n      }\r\n      if (func.name && typeof func.name === 'string' && func.name.length > 64) {\r\n        errors.push('OpenRouter function names must be ≤64 characters');\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors };\r\n  }\r\n\r\n  // Private helper methods\r\n  // These methods are injected by the ProviderAdapter from the LLMService\r\n  private getMCPToolsForProvider!: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\r\n  private executeMCPTool!: (toolName: string, args: Record<string, unknown>) => Promise<string>;\r\n\r\n  private async executeToolsAndFollowUp(\r\n    toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }>,\r\n    initialContent: string,\r\n    initialUsage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream?: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔧 OpenRouter detected ${toolCalls.length} tool calls, executing...`);\r\n\r\n    // Convert to standard format for tool execution\r\n    const standardToolCalls = toolCalls\r\n      .filter(tc => tc.id && tc.function?.name)\r\n      .map(tc => ({\r\n        id: tc.id!,\r\n        name: tc.function!.name!,\r\n        arguments: JSON.parse(tc.function!.arguments || '{}')\r\n      }));\r\n\r\n    // Execute all tool calls in parallel\r\n    const toolResults = [];\r\n    for (const toolCall of standardToolCalls) {\r\n      try {\r\n        console.log(`🔧 Executing OpenRouter tool call: ${toolCall.name} with args:`, toolCall.arguments);\r\n        console.log(`🔧 OpenRouter executeMCPTool method available:`, typeof this.executeMCPTool);\r\n\r\n        const toolResult = await this.executeMCPTool(toolCall.name, toolCall.arguments);\r\n        console.log(`✅ OpenRouter tool execution successful for ${toolCall.name}:`, toolResult?.substring(0, 100) + '...');\r\n\r\n        toolResults.push({\r\n          role: 'tool',\r\n          tool_call_id: toolCall.id,\r\n          name: toolCall.name,\r\n          content: toolResult\r\n        });\r\n      } catch (error) {\r\n        console.error(`❌ OpenRouter tool execution failed for ${toolCall.name}:`, error);\r\n        console.error(`❌ Error details:`, {\r\n          name: error instanceof Error ? error.name : 'Unknown',\r\n          message: error instanceof Error ? error.message : String(error),\r\n          stack: error instanceof Error ? error.stack : undefined\r\n        });\r\n\r\n        const errorMessage = `Tool execution failed: ${error instanceof Error ? error.message : String(error)}`;\r\n        toolResults.push({\r\n          role: 'tool',\r\n          tool_call_id: toolCall.id,\r\n          name: toolCall.name,\r\n          content: JSON.stringify({ error: errorMessage })\r\n        });\r\n      }\r\n    }\r\n\r\n    // Build follow-up messages in OpenAI format\r\n    const followUpMessages = [\r\n      ...conversationHistory,\r\n      {\r\n        role: 'assistant',\r\n        content: initialContent || null,\r\n        tool_calls: toolCalls.map(tc => ({\r\n          id: tc.id || '',\r\n          type: 'function' as const,\r\n          function: {\r\n            name: tc.function?.name || '',\r\n            arguments: tc.function?.arguments || '{}'\r\n          }\r\n        }))\r\n      },\r\n      ...toolResults,\r\n      {\r\n        role: 'user',\r\n        content: 'Please provide a final response based on the tool execution results above. Analyze the data and answer the user\\'s most recent question directly. Do not repeat previous responses or refer to earlier requests in this conversation.'\r\n      }\r\n    ];\r\n\r\n    console.log(`🔄 Making OpenRouter follow-up call to process tool results...`);\r\n\r\n    // Get tools for follow-up call to maintain structured tool calling context\r\n    const tools = await this.getOpenRouterTools(settings);\r\n    const underlyingProvider = this.detectUnderlyingProvider(settings.model);\r\n    const supportsStructuredTools = this.modelSupportsStructuredTools(underlyingProvider);\r\n\r\n    const followUpRequestBody: Record<string, unknown> = {\r\n      model: settings.model,\r\n      messages: followUpMessages,\r\n      temperature: settings.temperature,\r\n      max_tokens: settings.maxTokens,\r\n      stream: false\r\n    };\r\n\r\n    // Include tools in follow-up call to maintain structured tool calling context\r\n    if (supportsStructuredTools && tools.length > 0) {\r\n      followUpRequestBody.tools = tools;\r\n      followUpRequestBody.tool_choice = 'auto';\r\n      console.log(`🔧 OpenRouter follow-up call includes ${tools.length} structured tools to maintain context`);\r\n    }\r\n\r\n    const followUpResponse = await fetch(`${provider.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`,\r\n        'HTTP-Referer': 'https://littlellm.app',\r\n        'X-Title': 'LittleLLM'\r\n      },\r\n      body: JSON.stringify(followUpRequestBody)\r\n    });\r\n\r\n    if (followUpResponse.ok) {\r\n      const followUpData = await followUpResponse.json();\r\n      const followUpMessage = followUpData.choices[0]?.message;\r\n\r\n      // Combine usage statistics\r\n      const combinedUsage = {\r\n        promptTokens: (initialUsage?.prompt_tokens || 0) + (followUpData.usage?.prompt_tokens || 0),\r\n        completionTokens: (initialUsage?.completion_tokens || 0) + (followUpData.usage?.completion_tokens || 0),\r\n        totalTokens: (initialUsage?.total_tokens || 0) + (followUpData.usage?.total_tokens || 0)\r\n      };\r\n\r\n      // Stream the follow-up content if streaming is enabled\r\n      if (onStream && followUpMessage?.content) {\r\n        onStream(followUpMessage.content);\r\n      }\r\n\r\n      return {\r\n        content: followUpMessage?.content || 'Tool execution completed.',\r\n        usage: combinedUsage,\r\n        toolCalls: standardToolCalls\r\n      };\r\n    } else {\r\n      const errorText = await followUpResponse.text();\r\n      console.error(`❌ OpenRouter follow-up call failed (${followUpResponse.status}):`, errorText);\r\n\r\n      // Return original response with tool calls\r\n      return {\r\n        content: initialContent || 'Tool execution completed, but follow-up failed.',\r\n        usage: initialUsage ? {\r\n          promptTokens: initialUsage.prompt_tokens || 0,\r\n          completionTokens: initialUsage.completion_tokens || 0,\r\n          totalTokens: initialUsage.total_tokens || 0\r\n        } : undefined,\r\n        toolCalls: standardToolCalls\r\n      };\r\n    }\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleStreamResponse(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    signal?: AbortSignal\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n\r\n    console.log(`🔍 Starting OpenRouter stream response handling...`);\r\n    const reader = response.body?.getReader();\r\n    if (!reader) {\r\n      throw new Error('No response body');\r\n    }\r\n\r\n    let fullContent = '';\r\n    let usage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined = undefined;\r\n    let chunkCount = 0;\r\n    const toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }> = [];\r\n    const decoder = new TextDecoder();\r\n\r\n    try {\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n\r\n        const chunk = decoder.decode(value);\r\n        chunkCount++;\r\n        if (chunkCount <= 3) {\r\n          console.log(`🔍 OpenRouter stream chunk ${chunkCount}:`, chunk.substring(0, 200) + (chunk.length > 200 ? '...' : ''));\r\n        }\r\n        const lines = chunk.split('\\n');\r\n\r\n        for (const line of lines) {\r\n          if (line.startsWith('data: ')) {\r\n            const data = line.slice(6);\r\n            if (data === '[DONE]') continue;\r\n\r\n            try {\r\n              const parsed = JSON.parse(data);\r\n              const delta = parsed.choices?.[0]?.delta;\r\n\r\n              if (delta?.content) {\r\n                fullContent += delta.content;\r\n                onStream(delta.content);\r\n              }\r\n\r\n              if (delta?.tool_calls) {\r\n                for (const toolCall of delta.tool_calls) {\r\n                  const index = toolCall.index || 0;\r\n                  if (!toolCalls[index]) {\r\n                    toolCalls[index] = {\r\n                      id: toolCall.id,\r\n                      type: toolCall.type,\r\n                      function: { name: '', arguments: '' }\r\n                    };\r\n                  }\r\n\r\n                  if (toolCall.function?.name) {\r\n                    toolCalls[index].function!.name = toolCall.function.name;\r\n                  }\r\n                  if (toolCall.function?.arguments) {\r\n                    toolCalls[index].function!.arguments += toolCall.function.arguments;\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (parsed.usage) {\r\n                usage = parsed.usage;\r\n              }\r\n            } catch (error) {\r\n              console.error(`❌ OpenRouter error parsing chunk:`, error, `Data: ${data.substring(0, 100)}...`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n\r\n    // Filter out empty tool calls and log final state\r\n    const validToolCalls = toolCalls.filter(tc => tc && tc.function?.name);\r\n\r\n    console.log(`🔍 OpenRouter stream response completed:`, {\r\n      contentLength: fullContent.length,\r\n      hasUsage: !!usage,\r\n      usage: usage,\r\n      toolCallsCount: validToolCalls.length\r\n    });\r\n\r\n    // Check for text-based tool calls if no structured tool calls found\r\n    if (validToolCalls.length === 0 && fullContent && (fullContent.includes('tool_call') || fullContent.includes('<|tool_call') || fullContent.includes('functions.'))) {\r\n      console.log(`🔍 OpenRouter: No structured tool calls found in stream, checking for text-based tool calls...`);\r\n\r\n      // Get available tool names for parsing\r\n      const availableTools = await this.getAvailableToolNames(settings);\r\n      const textBasedToolCalls = this.parseTextBasedToolCalls(fullContent, availableTools);\r\n\r\n      if (textBasedToolCalls.length > 0) {\r\n        console.log(`🔧 OpenRouter: Found ${textBasedToolCalls.length} text-based tool calls in stream:`, textBasedToolCalls);\r\n\r\n        // Convert to structured format and execute\r\n        const structuredToolCalls = textBasedToolCalls.map((tc, index) => ({\r\n          id: `call_${Date.now()}_${index}`,\r\n          type: 'function' as const,\r\n          function: {\r\n            name: tc.name,\r\n            arguments: JSON.stringify(tc.arguments)\r\n          }\r\n        }));\r\n\r\n        // Execute tools and get follow-up response\r\n        return this.executeToolsAndFollowUp(\r\n          structuredToolCalls,\r\n          fullContent,\r\n          usage,\r\n          settings,\r\n          provider,\r\n          conversationHistory,\r\n          onStream\r\n        );\r\n      }\r\n    }\r\n\r\n    if (validToolCalls.length > 0) {\r\n      console.log(`🔧 OpenRouter assembled ${validToolCalls.length} structured tool calls:`, validToolCalls.map(tc => ({\r\n        name: tc.function?.name,\r\n        arguments: tc.function?.arguments\r\n      })));\r\n\r\n      // Execute tools and make follow-up call\r\n      return this.executeToolsAndFollowUp(validToolCalls, fullContent, usage, settings, provider, conversationHistory, onStream);\r\n    }\r\n\r\n    return {\r\n      content: fullContent,\r\n      usage: usage ? {\r\n        promptTokens: usage.prompt_tokens || 0,\r\n        completionTokens: usage.completion_tokens || 0,\r\n        totalTokens: usage.total_tokens || 0\r\n      } : undefined,\r\n      toolCalls: validToolCalls\r\n        .filter(tc => tc.id && tc.function?.name)\r\n        .map(tc => ({\r\n          id: tc.id!,\r\n          name: tc.function!.name!,\r\n          arguments: JSON.parse(tc.function!.arguments || '{}')\r\n        }))\r\n    };\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNonStreamResponse(\r\n    response: Response,\r\n    settings: LLMSettings,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    const data = await response.json();\r\n    const choice = data.choices[0];\r\n    const message = choice.message;\r\n\r\n    console.log('🔍 OpenRouter non-stream response:', {\r\n      hasToolCalls: !!(message.tool_calls && message.tool_calls.length > 0),\r\n      toolCallsCount: message.tool_calls?.length || 0,\r\n      content: message.content,\r\n      usage: data.usage\r\n    });\r\n\r\n    // Check for text-based tool calls if no structured tool calls found\r\n    if (!message.tool_calls || message.tool_calls.length === 0) {\r\n      if (message.content && (message.content.includes('tool_call') || message.content.includes('<|tool_call') || message.content.includes('functions.'))) {\r\n        console.log(`🔍 OpenRouter: No structured tool calls found, checking for text-based tool calls...`);\r\n\r\n        // Get available tool names for parsing\r\n        const availableTools = await this.getAvailableToolNames(settings);\r\n        const textBasedToolCalls = this.parseTextBasedToolCalls(message.content, availableTools);\r\n\r\n        if (textBasedToolCalls.length > 0) {\r\n          console.log(`🔧 OpenRouter: Found ${textBasedToolCalls.length} text-based tool calls:`, textBasedToolCalls);\r\n\r\n          // Convert to structured format and execute\r\n          const structuredToolCalls = textBasedToolCalls.map((tc, index) => ({\r\n            id: `call_${Date.now()}_${index}`,\r\n            type: 'function' as const,\r\n            function: {\r\n              name: tc.name,\r\n              arguments: JSON.stringify(tc.arguments)\r\n            }\r\n          }));\r\n\r\n          // Execute tools and get follow-up response\r\n          return this.executeToolsAndFollowUp(\r\n            structuredToolCalls,\r\n            message.content || '',\r\n            data.usage,\r\n            settings,\r\n            { id: 'openrouter', name: 'OpenRouter', baseUrl: 'https://openrouter.ai/api/v1' } as LLMProvider,\r\n            conversationHistory\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // Handle tool calls if present (OpenAI format) - execute immediately like Anthropic\r\n    if (message.tool_calls && message.tool_calls.length > 0) {\r\n      console.log(`🔧 OpenRouter response contains ${message.tool_calls.length} tool calls:`, message.tool_calls);\r\n\r\n      // Check if we have the parallel execution method injected\r\n      if ((this as unknown as {executeMultipleToolsParallel?: unknown, summarizeToolResultsForModel?: unknown}).executeMultipleToolsParallel && (this as unknown as {executeMultipleToolsParallel?: unknown, summarizeToolResultsForModel?: unknown}).summarizeToolResultsForModel) {\r\n        console.log(`🚀 Executing ${message.tool_calls.length} OpenRouter tools immediately`);\r\n\r\n        // Format tool calls for execution\r\n        const toolCallsForExecution = message.tool_calls.map((toolCall: { id: string; function: { name: string; arguments: string } }) => ({\r\n          id: toolCall.id,\r\n          name: toolCall.function.name,\r\n          arguments: JSON.parse(toolCall.function.arguments)\r\n        }));\r\n\r\n        // Execute tools in parallel immediately\r\n        const executeMultipleToolsParallel = (this as unknown as {executeMultipleToolsParallel: unknown}).executeMultipleToolsParallel;\r\n        const summarizeToolResultsForModel = (this as unknown as {summarizeToolResultsForModel: unknown}).summarizeToolResultsForModel;\r\n        \r\n        try {\r\n          const parallelResults = await (executeMultipleToolsParallel as (calls: unknown[], provider: string) => Promise<Array<{success: boolean}>>)(toolCallsForExecution, 'openrouter');\r\n          console.log(`✅ OpenRouter tool execution completed: ${parallelResults.filter(r => r.success).length}/${parallelResults.length} successful`);\r\n\r\n          // Get tool results summary for the model\r\n          const toolSummary = (summarizeToolResultsForModel as (results: unknown[]) => string)(parallelResults);\r\n          \r\n          // Return response with tool results included\r\n          return {\r\n            content: (message.content || '') + '\\n\\n' + toolSummary,\r\n            usage: data.usage ? {\r\n              promptTokens: data.usage.prompt_tokens,\r\n              completionTokens: data.usage.completion_tokens,\r\n              totalTokens: data.usage.total_tokens\r\n            } : undefined\r\n          };\r\n        } catch (error) {\r\n          console.error(`❌ OpenRouter tool execution failed:`, error);\r\n          // Fall back to returning tool calls for external handling\r\n          return {\r\n            content: message.content || '',\r\n            usage: data.usage ? {\r\n              promptTokens: data.usage.prompt_tokens,\r\n              completionTokens: data.usage.completion_tokens,\r\n              totalTokens: data.usage.total_tokens\r\n            } : undefined,\r\n            toolCalls: toolCallsForExecution\r\n          };\r\n        }\r\n      } else {\r\n        console.warn(`⚠️ OpenRouter provider missing tool execution methods - falling back to external handling`);\r\n        // Fall back to external handling if methods not injected\r\n        return {\r\n          content: message.content || '',\r\n          usage: data.usage ? {\r\n            promptTokens: data.usage.prompt_tokens,\r\n            completionTokens: data.usage.completion_tokens,\r\n            totalTokens: data.usage.total_tokens\r\n          } : undefined,\r\n          toolCalls: message.tool_calls.map((tc: { id: string; function: { name: string; arguments: string } }) => ({\r\n            id: tc.id,\r\n            name: tc.function.name,\r\n            arguments: JSON.parse(tc.function.arguments)\r\n          }))\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      content: message.content,\r\n      usage: data.usage ? {\r\n        promptTokens: data.usage.prompt_tokens,\r\n        completionTokens: data.usage.completion_tokens,\r\n        totalTokens: data.usage.total_tokens\r\n      } : undefined\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\ProviderAdapter.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 20 to the 15 allowed.","line":176,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":176,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6899,6985],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7212,7306],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7328,7419],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":237,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":237,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9892,9991],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":240,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":240,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10153,10236],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Provider adapter to integrate new provider architecture with existing llmService\r\n\r\nimport { ILLMProvider } from './BaseProvider';\r\nimport { ProviderFactory } from './ProviderFactory';\r\nimport { \r\n  LLMSettings, \r\n  LLMResponse, \r\n  MessageContent, \r\n  ContentItem, \r\n  LLMProvider,\r\n  ToolObject\r\n} from './types';\r\n\r\nexport class ProviderAdapter {\r\n  private mcpToolsGetter?: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\r\n  private toolExecutor?: (toolName: string, args: Record<string, unknown>) => Promise<string>;\r\n  private streamHandler?: (response: Response, onStream: (chunk: string) => void) => Promise<LLMResponse>;\r\n  private toolShouldSendChecker?: (conversationId: string | undefined, tools: ToolObject[]) => Promise<boolean>;\r\n  private memoryCreator?: (userMessage: string, aiResponse: string, conversationHistory: Array<{role: string, content: string}>, conversationId?: string) => Promise<void>;\r\n\r\n  // New tool execution dependencies\r\n  private multipleToolsExecutor?: (\r\n    toolCalls: Array<{ id?: string; name: string; arguments: Record<string, unknown> }>,\r\n    provider?: string\r\n  ) => Promise<Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>>;\r\n  private toolResultsSummarizer?: (\r\n    results: Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>\r\n  ) => string;\r\n  private toolResultsAggregator?: (\r\n    results: Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>\r\n  ) => string;\r\n  private toolResultFormatter?: (toolName: string, result: unknown) => string;\r\n\r\n  // Inject dependencies from the main service\r\n  setMCPToolsGetter(getter: (providerId: string, settings: LLMSettings) => Promise<unknown[]>) {\r\n    this.mcpToolsGetter = getter;\r\n  }\r\n\r\n  setToolExecutor(executor: (toolName: string, args: Record<string, unknown>) => Promise<string>) {\r\n    this.toolExecutor = executor;\r\n  }\r\n\r\n  setStreamHandler(handler: (response: Response, onStream: (chunk: string) => void) => Promise<LLMResponse>) {\r\n    this.streamHandler = handler;\r\n  }\r\n\r\n  setToolShouldSendChecker(checker: (conversationId: string | undefined, tools: ToolObject[]) => Promise<boolean>) {\r\n    this.toolShouldSendChecker = checker;\r\n  }\r\n\r\n  setMemoryCreator(creator: (userMessage: string, aiResponse: string, conversationHistory: Array<{role: string, content: string}>, conversationId?: string) => Promise<void>) {\r\n    this.memoryCreator = creator;\r\n  }\r\n\r\n  setMultipleToolsExecutor(executor: (\r\n    toolCalls: Array<{ id?: string; name: string; arguments: Record<string, unknown> }>,\r\n    provider?: string\r\n  ) => Promise<Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>>) {\r\n    this.multipleToolsExecutor = executor;\r\n  }\r\n\r\n  setToolResultsSummarizer(summarizer: (\r\n    results: Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>\r\n  ) => string) {\r\n    this.toolResultsSummarizer = summarizer;\r\n  }\r\n\r\n  setToolResultsAggregator(aggregator: (\r\n    results: Array<{ id?: string; name: string; result: string; success: boolean; executionTime: number }>\r\n  ) => string) {\r\n    this.toolResultsAggregator = aggregator;\r\n  }\r\n\r\n  setToolResultFormatter(formatter: (toolName: string, result: unknown) => string) {\r\n    this.toolResultFormatter = formatter;\r\n  }\r\n\r\n  // Check if a provider is available in the new architecture\r\n  hasProvider(providerId: string): boolean {\r\n    return ProviderFactory.hasProvider(providerId);\r\n  }\r\n\r\n  // Get provider instance\r\n  getProvider(providerId: string): ILLMProvider | null {\r\n    return ProviderFactory.getProvider(providerId);\r\n  }\r\n\r\n  // Send message using new provider architecture\r\n  async sendMessage(\r\n    providerId: string,\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    const providerInstance = this.getProvider(providerId);\r\n    if (!providerInstance) {\r\n      throw new Error(`Provider ${providerId} not found in new architecture`);\r\n    }\r\n\r\n    // Inject dependencies into the provider instance\r\n    await this.injectDependencies(providerInstance);\r\n\r\n    // Use the provider's sendMessage method\r\n    return providerInstance.sendMessage(\r\n      message,\r\n      settings,\r\n      provider,\r\n      conversationHistory,\r\n      onStream,\r\n      signal,\r\n      conversationId\r\n    );\r\n  }\r\n\r\n  // Fetch models using new provider architecture\r\n  async fetchModels(providerId: string, apiKey: string, baseUrl?: string): Promise<string[]> {\r\n    const providerInstance = this.getProvider(providerId);\r\n    if (!providerInstance) {\r\n      throw new Error(`Provider ${providerId} not found in new architecture`);\r\n    }\r\n\r\n    return providerInstance.fetchModels(apiKey, baseUrl);\r\n  }\r\n\r\n  // Format tools using new provider architecture\r\n  formatTools(providerId: string, tools: ToolObject[]): unknown[] {\r\n    const providerInstance = this.getProvider(providerId);\r\n    if (!providerInstance) {\r\n      throw new Error(`Provider ${providerId} not found in new architecture`);\r\n    }\r\n\r\n    return providerInstance.formatTools(tools);\r\n  }\r\n\r\n  // Get system prompt using new provider architecture\r\n  getSystemPrompt(providerId: string): string {\r\n    const providerInstance = this.getProvider(providerId);\r\n    if (!providerInstance) {\r\n      throw new Error(`Provider ${providerId} not found in new architecture`);\r\n    }\r\n\r\n    return providerInstance.getSystemPrompt();\r\n  }\r\n\r\n  // Validate tool call using new provider architecture\r\n  validateToolCall(providerId: string, toolCall: { id?: string; name: string; arguments: Record<string, unknown> }): { valid: boolean; errors: string[] } {\r\n    const providerInstance = this.getProvider(providerId);\r\n    if (!providerInstance) {\r\n      return { valid: false, errors: [`Provider ${providerId} not found`] };\r\n    }\r\n\r\n    return providerInstance.validateToolCall(toolCall);\r\n  }\r\n\r\n  // Validate tool using new provider architecture\r\n  validateTool(providerId: string, tool: unknown): { valid: boolean; errors: string[] } {\r\n    const providerInstance = this.getProvider(providerId);\r\n    if (!providerInstance) {\r\n      return { valid: false, errors: [`Provider ${providerId} not found`] };\r\n    }\r\n\r\n    return providerInstance.validateTool(tool);\r\n  }\r\n\r\n  // Get provider capabilities\r\n  getCapabilities(providerId: string) {\r\n    const providerInstance = this.getProvider(providerId);\r\n    return providerInstance?.capabilities;\r\n  }\r\n\r\n  // Private method to inject dependencies into provider instances\r\n  private async injectDependencies(providerInstance: ILLMProvider) {\r\n    console.log(`🔧 ProviderAdapter: Injecting dependencies into ${providerInstance.id}`);\r\n\r\n    // Inject the MCP tools getter - always inject if available\r\n    if (this.mcpToolsGetter) {\r\n      (providerInstance as unknown as {getMCPToolsForProvider: unknown}).getMCPToolsForProvider = this.mcpToolsGetter;\r\n      console.log(`✅ ProviderAdapter: Injected getMCPToolsForProvider into ${providerInstance.id}`);\r\n    } else {\r\n      console.warn(`⚠️ ProviderAdapter: No mcpToolsGetter available for ${providerInstance.id}`);\r\n    }\r\n\r\n    // Inject the tool executor - always inject if available\r\n    if (this.toolExecutor) {\r\n      (providerInstance as unknown as {executeMCPTool: unknown}).executeMCPTool = this.toolExecutor;\r\n    }\r\n\r\n    // Inject the parallel tool executor (like Anthropic uses) - always inject if available\r\n    if (this.multipleToolsExecutor) {\r\n      (providerInstance as unknown as {executeMultipleToolsParallel: unknown}).executeMultipleToolsParallel = this.multipleToolsExecutor;\r\n    }\r\n\r\n    // Inject tool result processing methods (like Anthropic uses) - always inject if available\r\n    if (this.toolResultsSummarizer) {\r\n      (providerInstance as unknown as {summarizeToolResultsForModel: unknown}).summarizeToolResultsForModel = this.toolResultsSummarizer;\r\n    }\r\n\r\n    if (this.toolResultsAggregator) {\r\n      (providerInstance as unknown as {aggregateToolResults: unknown}).aggregateToolResults = this.toolResultsAggregator;\r\n    }\r\n\r\n    if (this.toolResultFormatter) {\r\n      (providerInstance as unknown as {formatToolResult: unknown}).formatToolResult = this.toolResultFormatter;\r\n    }\r\n\r\n    // Inject the stream handler - always inject if available\r\n    if (this.streamHandler) {\r\n      (providerInstance as unknown as {handleStreamResponse: unknown}).handleStreamResponse = this.streamHandler;\r\n    }\r\n\r\n    // Inject the tool should send checker\r\n    if (this.toolShouldSendChecker && 'shouldSendTools' in providerInstance) {\r\n      (providerInstance as unknown as {shouldSendTools: unknown}).shouldSendTools = this.toolShouldSendChecker;\r\n    }\r\n\r\n    // Inject the memory creator\r\n    if (this.memoryCreator && 'createMemoryFromConversation' in providerInstance) {\r\n      (providerInstance as unknown as {createMemoryFromConversation: unknown}).createMemoryFromConversation = this.memoryCreator;\r\n    }\r\n\r\n    // Inject tool names for text-based tool calling providers\r\n    if ('setAvailableToolNames' in providerInstance && this.mcpToolsGetter) {\r\n      try {\r\n        // Get the actual MCP tools and extract their names\r\n        const mcpTools = await this.mcpToolsGetter(providerInstance.id, {} as LLMSettings);\r\n        const toolNames = (mcpTools as Array<{name?: string, function?: {name?: string}}>).map(tool => {\r\n          // Handle different tool formats\r\n          if (tool.name) return tool.name;\r\n          if (tool.function?.name) return tool.function.name;\r\n          return null;\r\n        }).filter(Boolean) as string[];\r\n\r\n        console.log(`🔧 Injecting ${toolNames.length} tool names into ${providerInstance.id}:`, toolNames);\r\n        (providerInstance as unknown as {setAvailableToolNames: (names: string[]) => void}).setAvailableToolNames(toolNames);\r\n      } catch (error) {\r\n        console.warn(`⚠️ Failed to inject tool names into ${providerInstance.id}:`, error);\r\n      }\r\n    }\r\n\r\n    // Special injection for AnthropicProvider with new tool execution methods\r\n    if (providerInstance.id === 'anthropic' && 'injectDependencies' in providerInstance) {\r\n      const anthropicProvider = providerInstance as unknown as {injectDependencies?: (deps: unknown) => void};\r\n      if (anthropicProvider.injectDependencies) {\r\n        anthropicProvider.injectDependencies({\r\n          executeMultipleToolsParallel: this.multipleToolsExecutor,\r\n          summarizeToolResultsForModel: this.toolResultsSummarizer,\r\n          aggregateToolResults: this.toolResultsAggregator,\r\n          formatToolResult: this.toolResultFormatter,\r\n          getMCPToolsForProvider: this.mcpToolsGetter\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ProviderAdapter;\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\ProviderFactory.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2924,2977],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Provider factory for managing LLM providers\r\n\r\nimport { ILLMProvider } from './BaseProvider';\r\nimport { debugLogger } from '../debugLogger';\r\nimport { OpenAIProvider } from './OpenAIProvider';\r\nimport { AnthropicProvider } from './AnthropicProvider';\r\nimport { GeminiProvider } from './GeminiProvider';\r\nimport { MistralProvider } from './MistralProvider';\r\nimport { DeepSeekProvider } from './DeepSeekProvider';\r\nimport { DeepinfraProvider } from './DeepinfraProvider';\r\nimport { LMStudioProvider } from './LMStudioProvider';\r\nimport { JanProvider } from './JanProvider';\r\nimport { OllamaProvider } from './OllamaProvider';\r\nimport { OpenRouterProvider } from './OpenRouterProvider';\r\nimport { RequestyProvider } from './RequestyProvider';\r\nimport { ReplicateProvider } from './ReplicateProvider';\r\nimport { N8NProvider } from './N8NProvider';\r\n// import { MistralProvider } from './MistralProvider';\r\n// import { DeepSeekProvider } from './DeepSeekProvider';\r\n// import { LMStudioProvider } from './LMStudioProvider';\r\n// import { OllamaProvider } from './OllamaProvider';\r\n// import { OpenRouterProvider } from './OpenRouterProvider';\r\n// import { RequestyProvider } from './RequestyProvider';\r\n// import { ReplicateProvider } from './ReplicateProvider';\r\n// import { N8NProvider } from './N8NProvider';\r\n\r\nexport class ProviderFactory {\r\n  private static providers: Map<string, ILLMProvider> = new Map();\r\n\r\n  static {\r\n    // Initialize providers\r\n    this.registerProvider(new OpenAIProvider());\r\n    this.registerProvider(new AnthropicProvider());\r\n    this.registerProvider(new GeminiProvider());\r\n    this.registerProvider(new MistralProvider());\r\n    this.registerProvider(new DeepSeekProvider());\r\n    this.registerProvider(new DeepinfraProvider());\r\n    this.registerProvider(new LMStudioProvider());\r\n    this.registerProvider(new JanProvider());\r\n    this.registerProvider(new OllamaProvider());\r\n    this.registerProvider(new OpenRouterProvider());\r\n    this.registerProvider(new RequestyProvider());\r\n    this.registerProvider(new ReplicateProvider());\r\n    this.registerProvider(new N8NProvider());\r\n    // this.registerProvider(new MistralProvider());\r\n    // this.registerProvider(new DeepSeekProvider());\r\n    // this.registerProvider(new LMStudioProvider());\r\n    // this.registerProvider(new OllamaProvider());\r\n    // this.registerProvider(new OpenRouterProvider());\r\n    // this.registerProvider(new RequestyProvider());\r\n    // this.registerProvider(new ReplicateProvider());\r\n    // this.registerProvider(new N8NProvider());\r\n  }\r\n\r\n  private static registerProvider(provider: ILLMProvider): void {\r\n    this.providers.set(provider.id, provider);\r\n    debugLogger.info('PROVIDER', `Registered provider: ${provider.id} (${provider.name})`);\r\n  }\r\n\r\n  static getProvider(providerId: string): ILLMProvider | null {\r\n    const provider = this.providers.get(providerId);\r\n    if (!provider) {\r\n      console.warn(`⚠️ Provider not found: ${providerId}`);\r\n      return null;\r\n    }\r\n    return provider;\r\n  }\r\n\r\n  static getAllProviders(): ILLMProvider[] {\r\n    return Array.from(this.providers.values());\r\n  }\r\n\r\n  static getProviderIds(): string[] {\r\n    return Array.from(this.providers.keys());\r\n  }\r\n\r\n  static hasProvider(providerId: string): boolean {\r\n    return this.providers.has(providerId);\r\n  }\r\n\r\n  static getProviderCapabilities(providerId: string) {\r\n    const provider = this.getProvider(providerId);\r\n    return provider?.capabilities;\r\n  }\r\n}\r\n\r\nexport default ProviderFactory;\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\ReplicateProvider.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3399,3470],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_conversationId' is defined but never used.","line":36,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tools' is defined but never used.","line":113,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Replicate provider implementation\r\n\r\nimport { BaseProvider } from './BaseProvider';\r\nimport { \r\n  LLMSettings, \r\n  LLMResponse, \r\n  MessageContent, \r\n  ContentItem, \r\n  LLMProvider,\r\n  ToolObject,\r\n  ProviderCapabilities\r\n} from './types';\r\n\r\nimport { REPLICATE_SYSTEM_PROMPT, generateReplicateToolPrompt } from './prompts/replicate';\r\n\r\nexport class ReplicateProvider extends BaseProvider {\r\n  readonly id = 'replicate';\r\n  readonly name = 'Replicate';\r\n  readonly capabilities: ProviderCapabilities = {\r\n    supportsVision: true,\r\n    supportsTools: false, // Replicate doesn't have native tool calling\r\n    supportsStreaming: true, // Replicate supports streaming via webhooks\r\n    supportsSystemMessages: true,\r\n    maxToolNameLength: undefined,\r\n    toolFormat: 'custom'\r\n  };\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  async sendMessage(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    _conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    // Replicate has a different API structure\r\n    let prompt = '';\r\n\r\n    // Build prompt from conversation history and current message\r\n    const systemPrompt = settings.systemPrompt || this.getSystemPrompt();\r\n    if (systemPrompt) {\r\n      prompt += `System: ${systemPrompt}\\n\\n`;\r\n    }\r\n\r\n    // Add conversation history\r\n    for (const msg of conversationHistory) {\r\n      const role = msg.role === 'assistant' ? 'Assistant' : 'User';\r\n      const content = typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content);\r\n      prompt += `${role}: ${content}\\n\\n`;\r\n    }\r\n\r\n    // Add current message\r\n    const currentContent = typeof message === 'string' ? message : JSON.stringify(message);\r\n    prompt += `User: ${currentContent}\\n\\nAssistant:`;\r\n\r\n    const requestBody = {\r\n      input: {\r\n        prompt: prompt,\r\n        max_new_tokens: settings.maxTokens,\r\n        temperature: settings.temperature,\r\n        top_p: 0.9,\r\n        top_k: 50,\r\n        stop_sequences: \"<|endoftext|>,<|im_end|>\"\r\n      }\r\n    };\r\n\r\n    const response = await fetch(`${provider.baseUrl}/predictions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Token ${settings.apiKey}`\r\n      },\r\n      body: JSON.stringify({\r\n        version: settings.model,\r\n        input: requestBody.input\r\n      }),\r\n      signal\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      throw new Error(`Replicate API error: ${error}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    // Replicate returns a prediction object, we need to poll for completion\r\n    if (data.status === 'starting' || data.status === 'processing') {\r\n      // For simplicity, we'll wait for completion\r\n      const completedData = await this.pollForCompletion(data.urls.get, settings.apiKey, signal);\r\n      return this.parseReplicateResponse(completedData, prompt);\r\n    }\r\n\r\n    return this.parseReplicateResponse(data, prompt);\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  async fetchModels(apiKey: string): Promise<string[]> {\r\n    if (!apiKey) {\r\n      console.error('❌ No Replicate API key provided - cannot fetch models');\r\n      throw new Error('Replicate API key is required to fetch available models. Please add your API key in settings.');\r\n    }\r\n\r\n    // Replicate doesn't have a simple models endpoint like other providers\r\n    // Users need to specify the exact model version hash they want to use\r\n    throw new Error('Replicate requires specific model version hashes. Please specify the exact model version in the model field (e.g., \"meta/llama-2-70b-chat:02e509c789964a7ea8736978a43525956ef40397be9033abf9fd2badfe68c9e3\").');\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  formatTools(_tools: ToolObject[]): unknown[] {\r\n    // Replicate doesn't support tools in the same way\r\n    return [];\r\n  }\r\n\r\n  getSystemPrompt(): string {\r\n    return REPLICATE_SYSTEM_PROMPT;\r\n  }\r\n\r\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\r\n    if (tools.length === 0) {\r\n      return basePrompt;\r\n    }\r\n\r\n    const toolInstructions = generateReplicateToolPrompt(tools);\r\n    return basePrompt + toolInstructions;\r\n  }\r\n\r\n  // Private helper methods\r\n  private async pollForCompletion(getUrl: string, apiKey: string, signal?: AbortSignal): Promise<{status: string, output?: unknown}> {\r\n    let attempts = 0;\r\n    const maxAttempts = 60; // 5 minutes max\r\n    \r\n    while (attempts < maxAttempts) {\r\n      await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds\r\n      \r\n      const response = await fetch(getUrl, {\r\n        headers: {\r\n          'Authorization': `Token ${apiKey}`\r\n        },\r\n        signal\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to poll Replicate prediction: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.status === 'succeeded') {\r\n        return data;\r\n      } else if (data.status === 'failed') {\r\n        throw new Error(`Replicate prediction failed: ${data.error}`);\r\n      }\r\n      \r\n      attempts++;\r\n    }\r\n    \r\n    throw new Error('Replicate prediction timed out');\r\n  }\r\n\r\n  private parseReplicateResponse(data: {output?: unknown}, prompt: string): LLMResponse {\r\n    let content = '';\r\n    \r\n    if (data.output) {\r\n      if (Array.isArray(data.output)) {\r\n        content = data.output.join('');\r\n      } else if (typeof data.output === 'string') {\r\n        content = data.output;\r\n      } else {\r\n        content = JSON.stringify(data.output);\r\n      }\r\n    }\r\n\r\n    // Estimate token usage\r\n    const usage = this.createEstimatedUsage(prompt, content, 'Replicate estimated');\r\n\r\n    return {\r\n      content,\r\n      usage\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\RequestyProvider.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2937,3005],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3296,3369],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"models\".","line":117,"column":22,"nodeType":"LogicalExpression","messageId":"doImmediateAction","endLine":117,"endColumn":71,"fix":{"range":[3470,3558],"text":"return data.data?.map((model) => model.id)?.sort() || []"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3590,3648],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4509,4591],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_signal' is defined but never used.","line":167,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":12,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_toolName' is defined but never used.","line":182,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":41,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_args' is defined but never used.","line":182,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":56,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_settings' is defined but never used.","line":218,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":218,"endColumn":14,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_conversationHistory' is defined but never used.","line":219,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":219,"endColumn":25,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_conversationId' is defined but never used.","line":220,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":220,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Requesty provider implementation\r\n\r\nimport { BaseProvider } from './BaseProvider';\r\nimport {\r\n  LLMSettings,\r\n  LLMResponse,\r\n  MessageContent,\r\n  ContentItem,\r\n  LLMProvider,\r\n  ToolObject,\r\n  ProviderCapabilities,\r\n  APIResponseData\r\n} from './types';\r\n\r\nimport { REQUESTY_SYSTEM_PROMPT } from './prompts/requesty';\r\nimport { OpenAICompatibleStreaming } from './shared/OpenAICompatibleStreaming';\r\n\r\nexport class RequestyProvider extends BaseProvider {\r\n  readonly id = 'requesty';\r\n  readonly name = 'Requesty';\r\n  readonly capabilities: ProviderCapabilities = {\r\n    supportsVision: true,\r\n    supportsTools: true,\r\n    supportsStreaming: true,\r\n    supportsSystemMessages: true,\r\n    maxToolNameLength: 64,\r\n    toolFormat: 'openai'\r\n  };\r\n\r\n  async sendMessage(\r\n    message: MessageContent,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}> = [],\r\n    onStream?: (chunk: string) => void,\r\n    signal?: AbortSignal,\r\n    conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    // Requesty uses OpenAI-compatible API\r\n    const messages = [];\r\n\r\n    // Get MCP tools for Requesty\r\n    const mcpTools = await this.getMCPToolsForProvider('requesty', settings);\r\n\r\n    // Build system prompt with tool instructions\r\n    let systemPrompt = settings.systemPrompt || this.getSystemPrompt();\r\n    if (mcpTools.length > 0) {\r\n      systemPrompt = this.enhanceSystemPromptWithTools(systemPrompt, mcpTools as ToolObject[]);\r\n    }\r\n\r\n    if (systemPrompt) {\r\n      messages.push({ role: 'system', content: systemPrompt });\r\n    }\r\n\r\n    // Add conversation history\r\n    messages.push(...conversationHistory);\r\n\r\n    // Add current message\r\n    messages.push({ role: 'user', content: message });\r\n\r\n    const requestBody: Record<string, unknown> = {\r\n      model: settings.model,\r\n      messages: messages,\r\n      temperature: settings.temperature,\r\n      max_tokens: settings.maxTokens,\r\n      stream: !!onStream\r\n    };\r\n\r\n    // Add tools if available\r\n    if (mcpTools.length > 0) {\r\n      requestBody.tools = mcpTools;\r\n      requestBody.tool_choice = 'auto';\r\n    }\r\n\r\n    const response = await fetch(`${provider.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${settings.apiKey}`\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n      signal\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      throw new Error(`Requesty API error: ${error}`);\r\n    }\r\n\r\n    if (onStream) {\r\n      return this.handleStreamResponse(response, onStream, settings, provider, conversationHistory, signal);\r\n    } else {\r\n      return this.handleNonStreamResponse(response, settings, conversationHistory, conversationId);\r\n    }\r\n  }\r\n\r\n  async fetchModels(apiKey: string): Promise<string[]> {\r\n    if (!apiKey) {\r\n      console.log('❌ No Requesty API key provided - cannot fetch models');\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('https://router.requesty.ai/v1/models', {\r\n        headers: {\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.warn(`❌ Requesty API error: ${response.status} - check API key`);\r\n        return [];\r\n      }\r\n\r\n      const data = await response.json() as APIResponseData;\r\n      const models = data.data?.map((model) => model.id)?.sort() || [];\r\n\r\n      return models;\r\n    } catch (error) {\r\n      console.warn('❌ Failed to fetch Requesty models:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  formatTools(tools: ToolObject[]): unknown[] {\r\n    return tools.map(tool => ({\r\n      type: 'function',\r\n      function: {\r\n        name: tool.name || tool.function?.name,\r\n        description: tool.description || tool.function?.description,\r\n        parameters: tool.parameters || tool.function?.parameters || {\r\n          type: 'object',\r\n          properties: {},\r\n          required: []\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  getSystemPrompt(): string {\r\n    return REQUESTY_SYSTEM_PROMPT;\r\n  }\r\n\r\n  enhanceSystemPromptWithTools(basePrompt: string, tools: ToolObject[]): string {\r\n    if (tools.length === 0) {\r\n      return basePrompt;\r\n    }\r\n\r\n    // Requesty uses structured tool calling with tools parameter and tool_choice\r\n    // Don't add XML tool instructions as they conflict with native function calling\r\n    console.log(`🔧 Requesty using structured tools, skipping XML tool instructions`);\r\n    return basePrompt;\r\n  }\r\n\r\n  // Private helper methods\r\n  // This method is injected by the ProviderAdapter from the LLMService\r\n  private getMCPToolsForProvider!: (providerId: string, settings: LLMSettings) => Promise<unknown[]>;\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleStreamResponse(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    _signal?: AbortSignal\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    return OpenAICompatibleStreaming.handleStreamResponse(\r\n      response,\r\n      onStream,\r\n      settings,\r\n      provider,\r\n      conversationHistory,\r\n      'Requesty',\r\n      this.executeToolsAndFollowUp.bind(this)\r\n    );\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private async executeMCPTool(_toolName: string, _args: Record<string, unknown>): Promise<string> {\r\n    // This will be injected by the main service\r\n    return JSON.stringify({ error: 'Tool execution not available' });\r\n  }\r\n\r\n  private async executeToolsAndFollowUp(\r\n    toolCalls: Array<{ id?: string; type?: string; function?: { name?: string; arguments?: string } }>,\r\n    initialContent: string,\r\n    initialUsage: { prompt_tokens?: number; completion_tokens?: number; total_tokens?: number } | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void\r\n  ): Promise<LLMResponse> {\r\n    return OpenAICompatibleStreaming.executeToolsAndFollowUp(\r\n      toolCalls,\r\n      initialContent,\r\n      initialUsage,\r\n      settings,\r\n      provider,\r\n      conversationHistory,\r\n      onStream,\r\n      'Requesty',\r\n      this.executeMCPTool.bind(this),\r\n      {},\r\n      () => this.getMCPToolsForProvider(provider.id, settings),\r\n      (tools: unknown[]) => {\r\n        const basePrompt = settings.systemPrompt || this.getSystemPrompt();\r\n        return this.enhanceSystemPromptWithTools(basePrompt, tools as ToolObject[]);\r\n      }\r\n    );\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  private async handleNonStreamResponse(\r\n    response: Response,\r\n    _settings: LLMSettings,\r\n    _conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    _conversationId?: string\r\n  ): Promise<LLMResponse> {\r\n    /* eslint-enable @typescript-eslint/no-unused-vars */\r\n    const data = await response.json();\r\n    const choice = data.choices[0];\r\n    const message = choice.message;\r\n\r\n    if (message.tool_calls && message.tool_calls.length > 0) {\r\n      return {\r\n        content: message.content || '',\r\n        usage: data.usage ? {\r\n          promptTokens: data.usage.prompt_tokens,\r\n          completionTokens: data.usage.completion_tokens,\r\n          totalTokens: data.usage.total_tokens\r\n        } : undefined,\r\n        toolCalls: message.tool_calls.map((tc: { id: string; function: { name: string; arguments: string } }) => ({\r\n          id: tc.id,\r\n          name: tc.function.name,\r\n          arguments: JSON.parse(tc.function.arguments)\r\n        }))\r\n      };\r\n    }\r\n\r\n    return {\r\n      content: message.content,\r\n      usage: data.usage ? {\r\n        promptTokens: data.usage.prompt_tokens,\r\n        completionTokens: data.usage.completion_tokens,\r\n        totalTokens: data.usage.total_tokens\r\n      } : undefined\r\n    };\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\anthropic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\deepinfra.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\deepseek.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\gemini.ts","messages":[{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"instructions\".","line":8,"column":24,"nodeType":"TemplateLiteral","messageId":"doImmediateAction","endLine":85,"endColumn":167,"fix":{"range":[345,3363],"text":"return `\r\n# Concise Universal AI Assistant System Prompt\r\n\r\nYou are an intelligent AI assistant with multiple operational modes and tool capabilities. Engage conversationally by default, using tools strategically when they provide clear value.\r\n\r\n## Core Behavior\r\n\r\n**Natural Conversation First**: Answer general questions, provide explanations, and engage casually without tools. Be direct and helpful.\r\n\r\n**Smart Tool Usage**: Use tools for:\r\n- Current/real-time information (news, weather, stock prices)\r\n- File operations and system tasks\r\n- Complex calculations or data analysis  \r\n- Information beyond your training knowledge\r\n- External system interactions\r\n\r\n**Avoid Tools For**: General knowledge, casual conversation, established facts, explanations you can provide confidently.\r\n\r\n## Tool Execution Format\r\n\r\nUse XML-style tags for tool calls:\r\n\r\n\\`\\`\\`xml\r\n<tool_name>\r\n<parameter1_name>value1</parameter1_name>\r\n<parameter2_name>value2</parameter2_name>\r\n</tool_name>\r\n\\`\\`\\`\r\n\r\n**Multi-Tool Workflows**: Execute tools in logical sequence automatically. Continue when tools succeed, stop only for errors or clarification needs.\r\n\r\n**Example Patterns**:\r\n- News request: Search → Fetch articles → Summarize\r\n- File task: List files → Read content → Make changes\r\n- Research: Search web → Access documents → Analyze → Present findings\r\n\r\n## Operational Modes\r\n\r\n**Research Mode**: Focus on information gathering, verification, and comprehensive analysis using multiple sources.\r\n\r\n**Creative Mode**: Emphasize ideation, design thinking, and innovative approaches to problems.\r\n\r\n**Analytical Mode**: Prioritize data analysis, logical reasoning, and evidence-based conclusions.\r\n\r\n**Productivity Mode**: Optimize for task completion, automation, and practical implementation.\r\n\r\n**Collaborative Mode**: Facilitate multi-stakeholder coordination and requirement management.\r\n\r\nSwitch modes when task requirements change:\r\n\\`\\`\\`xml\r\n<switch_mode>\r\n<mode>target_mode</mode>\r\n<reason>explanation</reason>\r\n</switch_mode>\r\n\\`\\`\\`\r\n\r\n## Decision Framework\r\n\r\n**Use Tools When**:\r\n- \"What's today's weather in Athens?\" → Weather tool\r\n- \"Latest tech news?\" → Search tools\r\n- \"Analyze this data file\" → File + analysis tools\r\n\r\n**Respond Conversationally When**:\r\n- \"How does photosynthesis work?\" → Explain from knowledge\r\n- \"What's your favorite color?\" → Natural conversation\r\n- \"Tell me about machine learning\" → Educational response\r\n\r\n## Communication Guidelines\r\n\r\n- Execute complete workflows without stopping between successful tool calls\r\n- Explain actions clearly when using tools\r\n- Ask specific questions only when essential information is missing\r\n- Provide comprehensive responses after tool sequences\r\n- Maintain professional but natural tone\r\n- Be direct - avoid unnecessary pleasantries\r\n\r\nFocus on being a knowledgeable conversational partner with enhanced tool capabilities, adapting your approach based on the user's needs and current operational mode.`"}}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_tools' is defined but never used.","line":4,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":48,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Google Gemini provider system prompt\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport function generateGeminiToolPrompt(_tools: unknown[]): string {\r\n  // Note: tools parameter kept for API compatibility but not currently used\r\n  // Tool categorization and dynamic prompts could be implemented here in the future\r\n\r\n  const instructions = `\r\n# Concise Universal AI Assistant System Prompt\r\n\r\nYou are an intelligent AI assistant with multiple operational modes and tool capabilities. Engage conversationally by default, using tools strategically when they provide clear value.\r\n\r\n## Core Behavior\r\n\r\n**Natural Conversation First**: Answer general questions, provide explanations, and engage casually without tools. Be direct and helpful.\r\n\r\n**Smart Tool Usage**: Use tools for:\r\n- Current/real-time information (news, weather, stock prices)\r\n- File operations and system tasks\r\n- Complex calculations or data analysis  \r\n- Information beyond your training knowledge\r\n- External system interactions\r\n\r\n**Avoid Tools For**: General knowledge, casual conversation, established facts, explanations you can provide confidently.\r\n\r\n## Tool Execution Format\r\n\r\nUse XML-style tags for tool calls:\r\n\r\n\\`\\`\\`xml\r\n<tool_name>\r\n<parameter1_name>value1</parameter1_name>\r\n<parameter2_name>value2</parameter2_name>\r\n</tool_name>\r\n\\`\\`\\`\r\n\r\n**Multi-Tool Workflows**: Execute tools in logical sequence automatically. Continue when tools succeed, stop only for errors or clarification needs.\r\n\r\n**Example Patterns**:\r\n- News request: Search → Fetch articles → Summarize\r\n- File task: List files → Read content → Make changes\r\n- Research: Search web → Access documents → Analyze → Present findings\r\n\r\n## Operational Modes\r\n\r\n**Research Mode**: Focus on information gathering, verification, and comprehensive analysis using multiple sources.\r\n\r\n**Creative Mode**: Emphasize ideation, design thinking, and innovative approaches to problems.\r\n\r\n**Analytical Mode**: Prioritize data analysis, logical reasoning, and evidence-based conclusions.\r\n\r\n**Productivity Mode**: Optimize for task completion, automation, and practical implementation.\r\n\r\n**Collaborative Mode**: Facilitate multi-stakeholder coordination and requirement management.\r\n\r\nSwitch modes when task requirements change:\r\n\\`\\`\\`xml\r\n<switch_mode>\r\n<mode>target_mode</mode>\r\n<reason>explanation</reason>\r\n</switch_mode>\r\n\\`\\`\\`\r\n\r\n## Decision Framework\r\n\r\n**Use Tools When**:\r\n- \"What's today's weather in Athens?\" → Weather tool\r\n- \"Latest tech news?\" → Search tools\r\n- \"Analyze this data file\" → File + analysis tools\r\n\r\n**Respond Conversationally When**:\r\n- \"How does photosynthesis work?\" → Explain from knowledge\r\n- \"What's your favorite color?\" → Natural conversation\r\n- \"Tell me about machine learning\" → Educational response\r\n\r\n## Communication Guidelines\r\n\r\n- Execute complete workflows without stopping between successful tool calls\r\n- Explain actions clearly when using tools\r\n- Ask specific questions only when essential information is missing\r\n- Provide comprehensive responses after tool sequences\r\n- Maintain professional but natural tone\r\n- Be direct - avoid unnecessary pleasantries\r\n\r\nFocus on being a knowledgeable conversational partner with enhanced tool capabilities, adapting your approach based on the user's needs and current operational mode.`;\r\n\r\n  return instructions;\r\n}\r\n\r\n// Behavioral system prompt (no tool descriptions - those go in tools parameter)\r\nexport const GEMINI_SYSTEM_PROMPT = `# Concise Universal AI Assistant System Prompt\r\n\r\nYou are an intelligent AI assistant with multiple operational modes and tool capabilities. Engage conversationally by default, using tools strategically when they provide clear value.\r\n\r\n## Core Behavior\r\n\r\n**Natural Conversation First**: Answer general questions, provide explanations, and engage casually without tools. Be direct and helpful.\r\n\r\n**Smart Tool Usage**: Use tools for:\r\n- Current/real-time information (news, weather, stock prices)\r\n- File operations and system tasks\r\n- Complex calculations or data analysis\r\n- Information beyond your training knowledge\r\n- External system interactions\r\n\r\n**Balanced Approach**: Seamlessly blend conversational responses with tool-enhanced capabilities based on the user's actual needs.\r\n\r\n## Tool Usage Guidelines\r\n\r\n1. **Assessment**: Evaluate whether tools are actually needed for the user's request\r\n2. **Conversation First**: For general questions, casual chat, or topics within your knowledge, respond naturally without tools\r\n3. **Tool Value Check**: Use tools when they provide clear benefits\r\n4. **Smart Execution**: When tools are needed, use them efficiently in logical sequence\r\n5. **Natural Flow**: Seamlessly transition between conversation and tool usage as appropriate\r\n\r\n## When to Use Tools vs. Conversation\r\n\r\n**Use Tools When**:\r\n- User asks for current/recent information\r\n- Request involves file operations or system commands\r\n- Complex calculations or data analysis required\r\n- Information verification from external sources needed\r\n- User explicitly requests tool usage\r\n\r\n**Use Conversation When**:\r\n- General knowledge questions you can answer confidently\r\n- Casual conversation or personal interaction\r\n- Explaining concepts, providing advice, or brainstorming\r\n- Questions about your capabilities or general topics\r\n- Historical information or established facts\r\n\r\n## Multi-Tool Workflow Execution\r\n\r\n**Continue Automatically When**:\r\n- Tool execution is successful and more tools are clearly needed to complete the specific request\r\n- You have a clear plan requiring multiple sequential tool calls for a complex task\r\n- The user's request explicitly requires gathering information from multiple sources\r\n\r\n**Respond Conversationally When**:\r\n- You can answer the question with your existing knowledge\r\n- The user is asking for explanations, advice, or general information\r\n- Tools would not meaningfully improve your response\r\n- The request is for casual conversation or simple clarification\r\n\r\n**Stop and Wait When**:\r\n- Tool execution fails or returns an error\r\n- You need user clarification or additional information\r\n- The complete task has been accomplished\r\n- You encounter ambiguous requirements that need resolution\r\n\r\n## Response Style\r\n\r\n- Be helpful, accurate, and engaging\r\n- Provide clear explanations and context\r\n- Use tools strategically to enhance your responses\r\n- Maintain natural conversation flow\r\n- Be direct and purposeful in responses\r\n- Avoid unnecessary pleasantries or filler content\r\n\r\nFocus on being a knowledgeable conversational partner with enhanced tool capabilities, adapting your approach based on the user's needs and current operational mode.`;\r\n\r\nexport default GEMINI_SYSTEM_PROMPT;\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\jan.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[675,814],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[817,891],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"instructions\".","line":22,"column":24,"nodeType":"TemplateLiteral","messageId":"doImmediateAction","endLine":162,"endColumn":2,"fix":{"range":[895,5426],"text":"return `\n# Jan AI Assistant System Prompt\n\nYou are an intelligent AI assistant running locally through Jan AI with enhanced tool capabilities. Prioritize privacy, efficiency, and helpful responses while leveraging available tools strategically.\n\n## Core Behavior\n\n**Local-First Approach**: You run entirely on the user's device, ensuring complete privacy and data control. Be mindful of computational efficiency while providing comprehensive assistance.\n\n**Natural Conversation**: Engage conversationally by default. Answer general questions, provide explanations, and maintain helpful dialogue without unnecessary tool usage.\n\n**Strategic Tool Usage**: Use tools for:\n- Real-time information (weather, news, current events)\n- File system operations and local data access\n- Complex calculations and data analysis\n- Information beyond your training knowledge\n- External system interactions and automation\n- Web searches and research tasks\n\n**Avoid Tools For**: General knowledge, casual conversation, established facts, explanations within your training data.\n\n## Tool Execution\n\nJan AI supports OpenAI-compatible tool calling. When using tools, follow this format:\n\n**Single Tool Call**:\n\\`\\`\\`json\n{\n  \"tool_call\": {\n    \"name\": \"tool_name\",\n    \"arguments\": {\n      \"parameter1\": \"value1\",\n      \"parameter2\": \"value2\"\n    }\n  }\n}\n\\`\\`\\`\n\n**Multi-Tool Workflows**: Execute tools in logical sequence. Continue automatically when tools succeed, only stop for errors or when user clarification is needed.\n\n**Example Workflow Patterns**:\n- Research request: Search → Fetch content → Analyze → Summarize\n- File management: List directory → Read files → Process → Report\n- Data analysis: Load data → Calculate → Visualize → Interpret\n\n## Operational Modes\n\n**Privacy Mode** (Default): Emphasize local processing, minimal external calls, data protection.\n\n**Research Mode**: Focus on information gathering using web search and document analysis tools.\n\n**Productivity Mode**: Optimize for task automation, file management, and system operations.\n\n**Analysis Mode**: Prioritize data processing, calculations, and logical reasoning.\n\n**Creative Mode**: Emphasize ideation, content generation, and innovative problem-solving.\n\nSwitch modes when task requirements change:\n\\`\\`\\`json\n{\n  \"mode_switch\": {\n    \"target_mode\": \"mode_name\",\n    \"reason\": \"explanation\"\n  }\n}\n\\`\\`\\`\n\n## Decision Framework\n\n**Use Tools When**:\n- \"What's the current weather?\" → Weather tool\n- \"Search for recent AI news\" → Web search tools\n- \"Analyze this CSV file\" → File reading + analysis tools\n- \"List files in my Documents folder\" → Directory listing tool\n\n**Respond Directly When**:\n- \"Explain quantum computing\" → Use training knowledge\n- \"What's the capital of France?\" → Direct factual response\n- \"How do I learn Python?\" → Educational guidance\n- \"Tell me a joke\" → Natural conversation\n\n## Communication Guidelines\n\n- Execute complete workflows without interruption between successful tool calls\n- Provide clear explanations when using tools\n- Ask specific questions only when essential information is missing\n- Deliver comprehensive responses after tool sequences complete\n- Maintain helpful, professional tone while being conversational\n- Respect user privacy and local-first principles\n- Be efficient with computational resources\n\n## Available Tools\n\n${availableToolNames.length > 0 ? availableToolNames.join(', ') : 'No tools currently available'}\n\n## Example Workflow\n\n**User Request:** \"Check the weather and find recent tech news\"\n\n**Stage 1 - Planning:**\nTask requires: (1) Get current weather information, (2) Search for recent technology news\n\n**Stage 2 - Execution:**\n\\`\\`\\`json\n{\n  \"tool_call\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"current\"\n    }\n  }\n}\n\\`\\`\\`\n\n\\`\\`\\`json\n{\n  \"tool_call\": {\n    \"name\": \"web_search\",\n    \"arguments\": {\n      \"query\": \"latest technology news today\",\n      \"limit\": 5\n    }\n  }\n}\n\\`\\`\\`\n\n**Stage 3 - Synthesis:**\n[After receiving tool results, provide comprehensive response combining weather and news information]\n\n---\n\n**CRITICAL REMINDERS:**\n- Only use tools from the available list: ${availableToolNames.join(', ')}\n- Always use proper JSON formatting for tool calls\n- Use parameters directly in \"arguments\" object - NO \"input\" wrapper\n- Complete workflows: Planning → Execution → Synthesis\n- Respect privacy and local-first principles\n- Provide helpful, comprehensive final responses\n- Be efficient with local computational resources\n\n`"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Jan AI provider system prompt\n// Optimized for Jan AI's local inference capabilities and OpenAI-compatible API\n\nexport function generateJanToolPrompt(tools: unknown[]): string {\n  // Type guard for tool objects - supports both OpenAI format and direct name format\n  const isToolObject = (t: unknown): t is {\n    function?: { name?: string; description?: string; parameters?: Record<string, unknown> };\n    name?: string;\n    description?: string;\n  } => {\n    return typeof t === 'object' && t !== null;\n  };\n\n  const availableToolNames = tools\n    .filter(isToolObject)\n    .map(tool => tool.function?.name || tool.name)  // Support both formats\n    .filter(Boolean);\n\n  console.log(`🔧 generateJanToolPrompt: Extracted ${availableToolNames.length} tool names from ${tools.length} tools:`, availableToolNames);\n  console.log(`🔧 generateJanToolPrompt: Sample tool structure:`, tools[0]);\n\n  const instructions = `\n# Jan AI Assistant System Prompt\n\nYou are an intelligent AI assistant running locally through Jan AI with enhanced tool capabilities. Prioritize privacy, efficiency, and helpful responses while leveraging available tools strategically.\n\n## Core Behavior\n\n**Local-First Approach**: You run entirely on the user's device, ensuring complete privacy and data control. Be mindful of computational efficiency while providing comprehensive assistance.\n\n**Natural Conversation**: Engage conversationally by default. Answer general questions, provide explanations, and maintain helpful dialogue without unnecessary tool usage.\n\n**Strategic Tool Usage**: Use tools for:\n- Real-time information (weather, news, current events)\n- File system operations and local data access\n- Complex calculations and data analysis\n- Information beyond your training knowledge\n- External system interactions and automation\n- Web searches and research tasks\n\n**Avoid Tools For**: General knowledge, casual conversation, established facts, explanations within your training data.\n\n## Tool Execution\n\nJan AI supports OpenAI-compatible tool calling. When using tools, follow this format:\n\n**Single Tool Call**:\n\\`\\`\\`json\n{\n  \"tool_call\": {\n    \"name\": \"tool_name\",\n    \"arguments\": {\n      \"parameter1\": \"value1\",\n      \"parameter2\": \"value2\"\n    }\n  }\n}\n\\`\\`\\`\n\n**Multi-Tool Workflows**: Execute tools in logical sequence. Continue automatically when tools succeed, only stop for errors or when user clarification is needed.\n\n**Example Workflow Patterns**:\n- Research request: Search → Fetch content → Analyze → Summarize\n- File management: List directory → Read files → Process → Report\n- Data analysis: Load data → Calculate → Visualize → Interpret\n\n## Operational Modes\n\n**Privacy Mode** (Default): Emphasize local processing, minimal external calls, data protection.\n\n**Research Mode**: Focus on information gathering using web search and document analysis tools.\n\n**Productivity Mode**: Optimize for task automation, file management, and system operations.\n\n**Analysis Mode**: Prioritize data processing, calculations, and logical reasoning.\n\n**Creative Mode**: Emphasize ideation, content generation, and innovative problem-solving.\n\nSwitch modes when task requirements change:\n\\`\\`\\`json\n{\n  \"mode_switch\": {\n    \"target_mode\": \"mode_name\",\n    \"reason\": \"explanation\"\n  }\n}\n\\`\\`\\`\n\n## Decision Framework\n\n**Use Tools When**:\n- \"What's the current weather?\" → Weather tool\n- \"Search for recent AI news\" → Web search tools\n- \"Analyze this CSV file\" → File reading + analysis tools\n- \"List files in my Documents folder\" → Directory listing tool\n\n**Respond Directly When**:\n- \"Explain quantum computing\" → Use training knowledge\n- \"What's the capital of France?\" → Direct factual response\n- \"How do I learn Python?\" → Educational guidance\n- \"Tell me a joke\" → Natural conversation\n\n## Communication Guidelines\n\n- Execute complete workflows without interruption between successful tool calls\n- Provide clear explanations when using tools\n- Ask specific questions only when essential information is missing\n- Deliver comprehensive responses after tool sequences complete\n- Maintain helpful, professional tone while being conversational\n- Respect user privacy and local-first principles\n- Be efficient with computational resources\n\n## Available Tools\n\n${availableToolNames.length > 0 ? availableToolNames.join(', ') : 'No tools currently available'}\n\n## Example Workflow\n\n**User Request:** \"Check the weather and find recent tech news\"\n\n**Stage 1 - Planning:**\nTask requires: (1) Get current weather information, (2) Search for recent technology news\n\n**Stage 2 - Execution:**\n\\`\\`\\`json\n{\n  \"tool_call\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"current\"\n    }\n  }\n}\n\\`\\`\\`\n\n\\`\\`\\`json\n{\n  \"tool_call\": {\n    \"name\": \"web_search\",\n    \"arguments\": {\n      \"query\": \"latest technology news today\",\n      \"limit\": 5\n    }\n  }\n}\n\\`\\`\\`\n\n**Stage 3 - Synthesis:**\n[After receiving tool results, provide comprehensive response combining weather and news information]\n\n---\n\n**CRITICAL REMINDERS:**\n- Only use tools from the available list: ${availableToolNames.join(', ')}\n- Always use proper JSON formatting for tool calls\n- Use parameters directly in \"arguments\" object - NO \"input\" wrapper\n- Complete workflows: Planning → Execution → Synthesis\n- Respect privacy and local-first principles\n- Provide helpful, comprehensive final responses\n- Be efficient with local computational resources\n\n`;\n\n  return instructions;\n}\n\n// Default system prompt for Jan AI\nexport const JAN_SYSTEM_PROMPT = `You are a helpful AI assistant running locally through Jan AI. You prioritize user privacy, provide accurate information, and can use various tools to assist with tasks. Be conversational, helpful, and efficient while respecting the local-first nature of this setup.`;\n\nexport default JAN_SYSTEM_PROMPT;\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\lmstudio.ts","messages":[{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"finalInstructions\".","line":102,"column":29,"nodeType":"BinaryExpression","messageId":"doImmediateAction","endLine":116,"endColumn":93,"fix":{"range":[3498,4254],"text":"return instructions + `\r\n\r\n## Important Guidelines\r\n\r\n- **ONLY use tools from the available list above**\r\n- **DO NOT invent tool names** - use exactly what's provided\r\n- **For web information**: Use web_search with specific queries\r\n- **For files**: Use appropriate file operation tools (read_file, write_file, etc.)\r\n- **For memory**: Use memory tools to store/recall information\r\n- **For system tasks**: Use terminal/system command tools\r\n- **Answer directly** for general knowledge questions\r\n- **Be conversational** when tools aren't needed\r\n- **Use multiple tools** when a task requires several operations\r\n\r\nRemember: Tools are powerful helpers, but not every question needs them. Use your judgment!`"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// LM Studio provider system prompt\r\n// EXACT copy from original llmService.ts generateSimpleToolInstructions method\r\n// This is the complete tool calling prompt used for LM Studio\r\n\r\nexport function generateLMStudioToolPrompt(tools: unknown[]): string {\r\n  // Type guard for tool objects - EXACT copy from original\r\n  const isToolObject = (t: unknown): t is { function?: { name?: string; description?: string; parameters?: Record<string, unknown> } } => {\r\n    return typeof t === 'object' && t !== null;\r\n  };\r\n\r\n  const availableToolNames = tools\r\n    .filter(isToolObject)\r\n    .map(tool => tool.function?.name)\r\n    .filter(Boolean);\r\n\r\n  const instructions = `\r\n# AI Assistant with Tool Capabilities\r\n\r\nYou are an intelligent AI assistant with access to various tools. Use tools strategically when they provide clear value, but engage conversationally for general questions.\r\n\r\n## When to Use Tools\r\n\r\n**USE TOOLS FOR:**\r\n- **System Information**: CPU model, RAM amount, disk space, OS version (LLM doesn't know user's system)\r\n- **Live/Current Information**: Today's weather, latest news, current stock prices, system usage\r\n- **File System Access**: Reading, writing, or listing actual files on the user's computer\r\n- **Memory Operations**: Storing or retrieving user-specific information\r\n- **System Commands**: Running terminal commands, checking system status\r\n- **External Data**: Web searches for information not in your training or that might be outdated\r\n\r\n**ANSWER DIRECTLY FOR:**\r\n- General knowledge and explanations (concepts, history, science)\r\n- Math calculations you can perform\r\n- Programming concepts and code examples\r\n- Definitions and how-to explanations\r\n- Creative writing and brainstorming\r\n- Casual conversation\r\n\r\n## Available Tools:\r\n${availableToolNames.length > 0 ? availableToolNames.join(', ') : 'No tools available'}\r\n\r\n## Tool Usage Instructions\r\n\r\nWhen you need to use tools:\r\n1. **Think step-by-step** about what needs to be done\r\n2. **Identify each sub-task** that requires a tool\r\n3. **Call tools using structured JSON format**\r\n4. **Use multiple tool calls** if needed (separate JSON blocks)\r\n5. **Wait for results** before providing your final response\r\n\r\n## Examples\r\n\r\n**Example 1: Current Information Request**\r\nUser: \"Get the weather in Paris and today's news\"\r\nResponse: Use tools for both (current data needed)\r\n\r\n\\`\\`\\`json\r\n{\r\n  \"tool_call\": {\r\n    \"name\": \"web_search\",\r\n    \"arguments\": {\r\n      \"query\": \"weather Paris current temperature forecast\"\r\n    }\r\n  }\r\n}\r\n\r\n{\r\n  \"tool_call\": {\r\n    \"name\": \"web_search\",\r\n    \"arguments\": {\r\n      \"query\": \"today news headlines current events\"\r\n    }\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\n**Example 2: File Operation**\r\nUser: \"Save this conversation to a file\"\r\nResponse: Use memory or file tools\r\n\r\n**Example 3: General Question**\r\nUser: \"Explain how photosynthesis works\"\r\nResponse: Answer directly (no tools needed - this is general knowledge)\r\n\r\n**Example 4: Mixed Request**\r\nUser: \"Explain machine learning and find the latest AI news\"\r\nResponse: Explain ML directly, then use web_search for current AI news\r\n\r\n## Tool Call Format\r\n\r\n- Always use structured JSON format\r\n- Start with \\`\\`\\`json and end with \\`\\`\\`\r\n- Each tool call is a separate JSON block\r\n- Only output tool calls when tools are needed\r\n- After tool results, provide natural language response\r\n\r\n**CRITICAL**: Only use tools from the available list: ${availableToolNames.join(', ')}\r\n\r\n`;\r\n\r\n  // Add comprehensive guidance for tool usage\r\n  const finalInstructions = instructions + `\r\n\r\n## Important Guidelines\r\n\r\n- **ONLY use tools from the available list above**\r\n- **DO NOT invent tool names** - use exactly what's provided\r\n- **For web information**: Use web_search with specific queries\r\n- **For files**: Use appropriate file operation tools (read_file, write_file, etc.)\r\n- **For memory**: Use memory tools to store/recall information\r\n- **For system tasks**: Use terminal/system command tools\r\n- **Answer directly** for general knowledge questions\r\n- **Be conversational** when tools aren't needed\r\n- **Use multiple tools** when a task requires several operations\r\n\r\nRemember: Tools are powerful helpers, but not every question needs them. Use your judgment!`;\r\n\r\n  return finalInstructions;\r\n}\r\n\r\n// Default system prompt - clear instructions for tool usage\r\nexport const LMSTUDIO_SYSTEM_PROMPT = `# AI Assistant with Tool Capabilities\r\n\r\nYou are an intelligent AI assistant with access to various tools. Use tools strategically when they provide clear value.\r\n\r\n## When to Use Tools\r\n\r\n**Use tools when you need to:**\r\n- Get ANY system information (CPU model, RAM amount, disk space, OS version, current usage)\r\n- Access files or directories on the user's computer\r\n- Search the web for current/recent information (today's weather, latest news)\r\n- Store or retrieve information from memory\r\n- Execute system commands or terminal operations\r\n- Get any data that's not in your training knowledge or might be outdated\r\n\r\n**Answer directly for:**\r\n- General knowledge questions (explaining concepts, historical facts, science)\r\n- Programming concepts and code examples\r\n- Math problems you can solve directly\r\n- Casual conversation and explanations\r\n- Definitions and how-to guides\r\n\r\n## Tool Usage Examples\r\n\r\n**When to USE tools:**\r\n- \"What CPU do I have?\" → Use get_system_info (system specs unknown to LLM)\r\n- \"What's my current CPU usage?\" → Use get_cpu_usage (live data)\r\n- \"What files are in my Downloads folder?\" → Use list_directory (file access)\r\n- \"What's the weather in Paris today?\" → Use web_search (current info)\r\n- \"How much RAM do I have?\" → Use get_system_info (system specs unknown to LLM)\r\n\r\n**When to ANSWER directly:**\r\n- \"How does photosynthesis work?\" → Answer from knowledge (general science)\r\n- \"What's 15 × 23?\" → Calculate directly (simple math)\r\n- \"Explain machine learning\" → Answer from knowledge (concepts)\r\n- \"How do I write a for loop in Python?\" → Answer from knowledge (programming concepts)\r\n\r\n## Response Format\r\n\r\n**Always explain your thinking first, then use tools:**\r\n\r\n1. **Explain what you're going to do** and why\r\n2. **Use the tool** with the format: to=tool_name json{arguments}\r\n3. **Wait for results** and then provide a helpful response\r\n\r\nExamples:\r\n- \"I'll check your system information to see what CPU you have.\"\r\n  to=get_system_info json{}\r\n\r\n- \"Let me search for current weather information in Paris.\"\r\n  to=web_search json{\"query\": \"weather Paris\"}\r\n\r\n- \"I'll check how much RAM your system has.\"\r\n  to=get_system_info json{}\r\n\r\n- \"I'll save your name to memory for future reference.\"\r\n  to=memory-store json{\"key\": \"user_name\", \"value\": \"John\"}\r\n\r\n**Always show your reasoning before using tools** - this helps users understand what you're doing.`;\r\n\r\nexport default LMSTUDIO_SYSTEM_PROMPT;\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\mistral.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\n8n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\ollama.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[756,898],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":21,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[902,979],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"instructions\".","line":23,"column":24,"nodeType":"TemplateLiteral","messageId":"doImmediateAction","endLine":151,"endColumn":2,"fix":{"range":[985,5295],"text":"return `\r\n# Concise Universal AI Assistant System Prompt\r\n\r\nYou are an intelligent AI assistant with multiple operational modes and tool capabilities. Engage conversationally by default, using tools strategically when they provide clear value.\r\n\r\n## Core Behavior\r\n\r\n**Natural Conversation First**: Answer general questions, provide explanations, and engage casually without tools. Be direct and helpful.\r\n\r\n**Smart Tool Usage**: Use tools for:\r\n- Current/real-time information (news, weather, stock prices)\r\n- File operations and system tasks\r\n- Complex calculations or data analysis  \r\n- Information beyond your training knowledge\r\n- External system interactions\r\n\r\n**Avoid Tools For**: General knowledge, casual conversation, established facts, explanations you can provide confidently.\r\n\r\n## Tool Execution Format\r\n\r\nUse JSON format for tool calls:\r\n\r\n\\`\\`\\`json\r\n{\r\n  \"tool_call\": {\r\n    \"name\": \"tool_name\",\r\n    \"arguments\": {\r\n      \"parameter1_name\": \"value1\",\r\n      \"parameter2_name\": \"value2\"\r\n    }\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\n**Multi-Tool Workflows**: Execute tools in logical sequence automatically. Continue when tools succeed, stop only for errors or clarification needs.\r\n\r\n**Example Patterns**:\r\n- News request: Search → Fetch articles → Summarize\r\n- File task: List files → Read content → Make changes\r\n- Research: Search web → Access documents → Analyze → Present findings\r\n\r\n## Operational Modes\r\n\r\n**Research Mode**: Focus on information gathering, verification, and comprehensive analysis using multiple sources.\r\n\r\n**Creative Mode**: Emphasize ideation, design thinking, and innovative approaches to problems.\r\n\r\n**Analytical Mode**: Prioritize data analysis, logical reasoning, and evidence-based conclusions.\r\n\r\n**Productivity Mode**: Optimize for task completion, automation, and practical implementation.\r\n\r\n**Collaborative Mode**: Facilitate multi-stakeholder coordination and requirement management.\r\n\r\nSwitch modes when task requirements change:\r\n\\`\\`\\`xml\r\n<switch_mode>\r\n<mode>target_mode</mode>\r\n<reason>explanation</reason>\r\n</switch_mode>\r\n\\`\\`\\`\r\n\r\n## Decision Framework\r\n\r\n**Use Tools When**:\r\n- \"What's today's weather in Athens?\" → Weather tool\r\n- \"Latest tech news?\" → Search tools\r\n- \"Analyze this data file\" → File + analysis tools\r\n\r\n**Respond Conversationally When**:\r\n- \"How does photosynthesis work?\" → Explain from knowledge\r\n- \"What's your favorite color?\" → Natural conversation\r\n- \"Tell me about machine learning\" → Educational response\r\n\r\n## Communication Guidelines\r\n\r\n- Execute complete workflows without stopping between successful tool calls\r\n- Explain actions clearly when using tools\r\n- Ask specific questions only when essential information is missing\r\n- Provide comprehensive responses after tool sequences\r\n- Maintain professional but natural tone\r\n- Be direct - avoid unnecessary pleasantries\r\n\r\nFocus on being a knowledgeable conversational partner with enhanced tool capabilities, adapting your approach based on the user's needs and current operational mode.\r\n\r\n### Available Tools:\r\n${availableToolNames.length > 0 ? availableToolNames.join(', ') : 'No tools available'}\r\n\r\n## EXAMPLE WORKFLOW:\r\n\r\n**User Request:** \"List files in my Downloads folder and search for weather\"\r\n\r\n**Stage 1 - Planning:**\r\nTask requires: (1) List directory contents, (2) Search for weather information\r\n\r\n**Stage 2 - Execution:**\r\n\\`\\`\\`json\r\n{\r\n  \"tool_call\": {\r\n    \"name\": \"list_directory\",\r\n    \"arguments\": {\r\n      \"path\": \"C:\\\\Users\\\\username\\\\Downloads\"\r\n    }\r\n  }\r\n}\r\n{\r\n  \"tool_call\": {\r\n    \"name\": \"web_search\",\r\n    \"arguments\": {\r\n      \"query\": \"current weather forecast\"\r\n    }\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\n**Stage 3 - Synthesis:**\r\n[After receiving tool results, provide comprehensive natural language response combining weather and news information]\r\n\r\n---\r\n\r\n**CRITICAL REMINDERS:**\r\n- Only use tools from the available list above: ${availableToolNames.join(', ')}\r\n- **ALWAYS use XML format for tool calls as shown above**\r\n- Use the exact tool names from the available list\r\n- **IMPORTANT**: Use parameter names directly as XML tags\r\n- **EXAMPLE**: <web_search><query>search terms</query></web_search>\r\n- Complete the full workflow: Planning → Execution → Synthesis\r\n- Provide helpful, comprehensive final responses\r\n\r\n`"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Ollama provider system prompt\r\n// EXACT copy from original llmService.ts generateSimpleToolInstructions method\r\n// This is the complete tool calling prompt used for Ollama\r\n\r\nexport function generateOllamaToolPrompt(tools: unknown[]): string {\r\n  // Type guard for tool objects - supports both OpenAI format and direct name format\r\n  const isToolObject = (t: unknown): t is {\r\n    function?: { name?: string; description?: string; parameters?: Record<string, unknown> };\r\n    name?: string;\r\n    description?: string;\r\n  } => {\r\n    return typeof t === 'object' && t !== null;\r\n  };\r\n\r\n  const availableToolNames = tools\r\n    .filter(isToolObject)\r\n    .map(tool => tool.function?.name || tool.name)  // Support both formats\r\n    .filter(Boolean);\r\n\r\n  console.log(`🔧 generateOllamaToolPrompt: Extracted ${availableToolNames.length} tool names from ${tools.length} tools:`, availableToolNames);\r\n  console.log(`🔧 generateOllamaToolPrompt: Sample tool structure:`, tools[0]);\r\n\r\n  const instructions = `\r\n# Concise Universal AI Assistant System Prompt\r\n\r\nYou are an intelligent AI assistant with multiple operational modes and tool capabilities. Engage conversationally by default, using tools strategically when they provide clear value.\r\n\r\n## Core Behavior\r\n\r\n**Natural Conversation First**: Answer general questions, provide explanations, and engage casually without tools. Be direct and helpful.\r\n\r\n**Smart Tool Usage**: Use tools for:\r\n- Current/real-time information (news, weather, stock prices)\r\n- File operations and system tasks\r\n- Complex calculations or data analysis  \r\n- Information beyond your training knowledge\r\n- External system interactions\r\n\r\n**Avoid Tools For**: General knowledge, casual conversation, established facts, explanations you can provide confidently.\r\n\r\n## Tool Execution Format\r\n\r\nUse JSON format for tool calls:\r\n\r\n\\`\\`\\`json\r\n{\r\n  \"tool_call\": {\r\n    \"name\": \"tool_name\",\r\n    \"arguments\": {\r\n      \"parameter1_name\": \"value1\",\r\n      \"parameter2_name\": \"value2\"\r\n    }\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\n**Multi-Tool Workflows**: Execute tools in logical sequence automatically. Continue when tools succeed, stop only for errors or clarification needs.\r\n\r\n**Example Patterns**:\r\n- News request: Search → Fetch articles → Summarize\r\n- File task: List files → Read content → Make changes\r\n- Research: Search web → Access documents → Analyze → Present findings\r\n\r\n## Operational Modes\r\n\r\n**Research Mode**: Focus on information gathering, verification, and comprehensive analysis using multiple sources.\r\n\r\n**Creative Mode**: Emphasize ideation, design thinking, and innovative approaches to problems.\r\n\r\n**Analytical Mode**: Prioritize data analysis, logical reasoning, and evidence-based conclusions.\r\n\r\n**Productivity Mode**: Optimize for task completion, automation, and practical implementation.\r\n\r\n**Collaborative Mode**: Facilitate multi-stakeholder coordination and requirement management.\r\n\r\nSwitch modes when task requirements change:\r\n\\`\\`\\`xml\r\n<switch_mode>\r\n<mode>target_mode</mode>\r\n<reason>explanation</reason>\r\n</switch_mode>\r\n\\`\\`\\`\r\n\r\n## Decision Framework\r\n\r\n**Use Tools When**:\r\n- \"What's today's weather in Athens?\" → Weather tool\r\n- \"Latest tech news?\" → Search tools\r\n- \"Analyze this data file\" → File + analysis tools\r\n\r\n**Respond Conversationally When**:\r\n- \"How does photosynthesis work?\" → Explain from knowledge\r\n- \"What's your favorite color?\" → Natural conversation\r\n- \"Tell me about machine learning\" → Educational response\r\n\r\n## Communication Guidelines\r\n\r\n- Execute complete workflows without stopping between successful tool calls\r\n- Explain actions clearly when using tools\r\n- Ask specific questions only when essential information is missing\r\n- Provide comprehensive responses after tool sequences\r\n- Maintain professional but natural tone\r\n- Be direct - avoid unnecessary pleasantries\r\n\r\nFocus on being a knowledgeable conversational partner with enhanced tool capabilities, adapting your approach based on the user's needs and current operational mode.\r\n\r\n### Available Tools:\r\n${availableToolNames.length > 0 ? availableToolNames.join(', ') : 'No tools available'}\r\n\r\n## EXAMPLE WORKFLOW:\r\n\r\n**User Request:** \"List files in my Downloads folder and search for weather\"\r\n\r\n**Stage 1 - Planning:**\r\nTask requires: (1) List directory contents, (2) Search for weather information\r\n\r\n**Stage 2 - Execution:**\r\n\\`\\`\\`json\r\n{\r\n  \"tool_call\": {\r\n    \"name\": \"list_directory\",\r\n    \"arguments\": {\r\n      \"path\": \"C:\\\\Users\\\\username\\\\Downloads\"\r\n    }\r\n  }\r\n}\r\n{\r\n  \"tool_call\": {\r\n    \"name\": \"web_search\",\r\n    \"arguments\": {\r\n      \"query\": \"current weather forecast\"\r\n    }\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\n**Stage 3 - Synthesis:**\r\n[After receiving tool results, provide comprehensive natural language response combining weather and news information]\r\n\r\n---\r\n\r\n**CRITICAL REMINDERS:**\r\n- Only use tools from the available list above: ${availableToolNames.join(', ')}\r\n- **ALWAYS use XML format for tool calls as shown above**\r\n- Use the exact tool names from the available list\r\n- **IMPORTANT**: Use parameter names directly as XML tags\r\n- **EXAMPLE**: <web_search><query>search terms</query></web_search>\r\n- Complete the full workflow: Planning → Execution → Synthesis\r\n- Provide helpful, comprehensive final responses\r\n\r\n`;\r\n\r\n  return instructions;\r\n}\r\n\r\n// Default system prompt (empty string as in original)\r\nexport const OLLAMA_SYSTEM_PROMPT = '';\r\n\r\nexport default OLLAMA_SYSTEM_PROMPT;\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\openai.ts","messages":[{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"instructions\".","line":67,"column":24,"nodeType":"TemplateLiteral","messageId":"doImmediateAction","endLine":144,"endColumn":167,"fix":{"range":[3128,6146],"text":"return `\r\n# Concise Universal AI Assistant System Prompt\r\n\r\nYou are an intelligent AI assistant with multiple operational modes and tool capabilities. Engage conversationally by default, using tools strategically when they provide clear value.\r\n\r\n## Core Behavior\r\n\r\n**Natural Conversation First**: Answer general questions, provide explanations, and engage casually without tools. Be direct and helpful.\r\n\r\n**Smart Tool Usage**: Use tools for:\r\n- Current/real-time information (news, weather, stock prices)\r\n- File operations and system tasks\r\n- Complex calculations or data analysis  \r\n- Information beyond your training knowledge\r\n- External system interactions\r\n\r\n**Avoid Tools For**: General knowledge, casual conversation, established facts, explanations you can provide confidently.\r\n\r\n## Tool Execution Format\r\n\r\nUse XML-style tags for tool calls:\r\n\r\n\\`\\`\\`xml\r\n<tool_name>\r\n<parameter1_name>value1</parameter1_name>\r\n<parameter2_name>value2</parameter2_name>\r\n</tool_name>\r\n\\`\\`\\`\r\n\r\n**Multi-Tool Workflows**: Execute tools in logical sequence automatically. Continue when tools succeed, stop only for errors or clarification needs.\r\n\r\n**Example Patterns**:\r\n- News request: Search → Fetch articles → Summarize\r\n- File task: List files → Read content → Make changes\r\n- Research: Search web → Access documents → Analyze → Present findings\r\n\r\n## Operational Modes\r\n\r\n**Research Mode**: Focus on information gathering, verification, and comprehensive analysis using multiple sources.\r\n\r\n**Creative Mode**: Emphasize ideation, design thinking, and innovative approaches to problems.\r\n\r\n**Analytical Mode**: Prioritize data analysis, logical reasoning, and evidence-based conclusions.\r\n\r\n**Productivity Mode**: Optimize for task completion, automation, and practical implementation.\r\n\r\n**Collaborative Mode**: Facilitate multi-stakeholder coordination and requirement management.\r\n\r\nSwitch modes when task requirements change:\r\n\\`\\`\\`xml\r\n<switch_mode>\r\n<mode>target_mode</mode>\r\n<reason>explanation</reason>\r\n</switch_mode>\r\n\\`\\`\\`\r\n\r\n## Decision Framework\r\n\r\n**Use Tools When**:\r\n- \"What's today's weather in Athens?\" → Weather tool\r\n- \"Latest tech news?\" → Search tools\r\n- \"Analyze this data file\" → File + analysis tools\r\n\r\n**Respond Conversationally When**:\r\n- \"How does photosynthesis work?\" → Explain from knowledge\r\n- \"What's your favorite color?\" → Natural conversation\r\n- \"Tell me about machine learning\" → Educational response\r\n\r\n## Communication Guidelines\r\n\r\n- Execute complete workflows without stopping between successful tool calls\r\n- Explain actions clearly when using tools\r\n- Ask specific questions only when essential information is missing\r\n- Provide comprehensive responses after tool sequences\r\n- Maintain professional but natural tone\r\n- Be direct - avoid unnecessary pleasantries\r\n\r\nFocus on being a knowledgeable conversational partner with enhanced tool capabilities, adapting your approach based on the user's needs and current operational mode.`"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// OpenAI provider system prompt\r\n// EXACT copy from original llmService.ts generateComplexToolInstructions method\r\n// This is the complete tool calling prompt used for OpenAI\r\n\r\nexport function generateOpenAIToolPrompt(tools: unknown[]): string {\r\n  // Type guard for tool objects - EXACT copy from original\r\n  const isToolObject = (t: unknown): t is { function?: { name?: string; description?: string; parameters?: Record<string, unknown> } } => {\r\n    return typeof t === 'object' && t !== null;\r\n  };\r\n\r\n  // Dynamic tool categorization based on actual tool names and descriptions - EXACT copy from original\r\n  const categorizeTools = (tools: unknown[]) => {\r\n    const categories: Record<string, unknown[]> = {};\r\n\r\n    tools.forEach(tool => {\r\n      if (!isToolObject(tool) || !tool.function?.name) return;\r\n\r\n      const name = tool.function.name.toLowerCase();\r\n      const desc = (tool.function.description || '').toLowerCase();\r\n\r\n      // Dynamic categorization based on keywords in names and descriptions\r\n      let category = 'general';\r\n\r\n      if (name.includes('search') || desc.includes('search') ||\r\n          name.includes('web') || desc.includes('web') ||\r\n          name.includes('internet') || desc.includes('internet')) {\r\n        category = 'search';\r\n      } else if (name.includes('memory') || desc.includes('memory') ||\r\n                 name.includes('remember') || desc.includes('remember')) {\r\n        category = 'memory';\r\n      } else if (name.includes('file') || desc.includes('file') ||\r\n                 name.includes('document') || desc.includes('document') ||\r\n                 name.includes('read') || name.includes('write')) {\r\n        category = 'files';\r\n      } else if (name.includes('data') || desc.includes('data') ||\r\n                 name.includes('database') || desc.includes('database') ||\r\n                 name.includes('sql') || desc.includes('query')) {\r\n        category = 'data';\r\n      } else if (name.includes('api') || desc.includes('api') ||\r\n                 name.includes('http') || desc.includes('http') ||\r\n                 name.includes('request') || desc.includes('request')) {\r\n        category = 'api';\r\n      } else if (name.includes('code') || desc.includes('code') ||\r\n                 name.includes('git') || desc.includes('git') ||\r\n                 name.includes('repo') || desc.includes('repository')) {\r\n        category = 'development';\r\n      } else if (name.includes('time') || desc.includes('time') ||\r\n                 name.includes('date') || desc.includes('date') ||\r\n                 name.includes('calendar') || desc.includes('calendar')) {\r\n        category = 'time';\r\n      } else if (name.includes('image') || desc.includes('image') ||\r\n                 name.includes('photo') || desc.includes('photo') ||\r\n                 name.includes('visual') || desc.includes('visual')) {\r\n        category = 'media';\r\n      }\r\n\r\n      if (!categories[category]) categories[category] = [];\r\n      categories[category].push(tool);\r\n    });\r\n\r\n    return categories;\r\n  };\r\n\r\n  // Tool categories available for future use\r\n  categorizeTools(tools);\r\n\r\n  const instructions = `\r\n# Concise Universal AI Assistant System Prompt\r\n\r\nYou are an intelligent AI assistant with multiple operational modes and tool capabilities. Engage conversationally by default, using tools strategically when they provide clear value.\r\n\r\n## Core Behavior\r\n\r\n**Natural Conversation First**: Answer general questions, provide explanations, and engage casually without tools. Be direct and helpful.\r\n\r\n**Smart Tool Usage**: Use tools for:\r\n- Current/real-time information (news, weather, stock prices)\r\n- File operations and system tasks\r\n- Complex calculations or data analysis  \r\n- Information beyond your training knowledge\r\n- External system interactions\r\n\r\n**Avoid Tools For**: General knowledge, casual conversation, established facts, explanations you can provide confidently.\r\n\r\n## Tool Execution Format\r\n\r\nUse XML-style tags for tool calls:\r\n\r\n\\`\\`\\`xml\r\n<tool_name>\r\n<parameter1_name>value1</parameter1_name>\r\n<parameter2_name>value2</parameter2_name>\r\n</tool_name>\r\n\\`\\`\\`\r\n\r\n**Multi-Tool Workflows**: Execute tools in logical sequence automatically. Continue when tools succeed, stop only for errors or clarification needs.\r\n\r\n**Example Patterns**:\r\n- News request: Search → Fetch articles → Summarize\r\n- File task: List files → Read content → Make changes\r\n- Research: Search web → Access documents → Analyze → Present findings\r\n\r\n## Operational Modes\r\n\r\n**Research Mode**: Focus on information gathering, verification, and comprehensive analysis using multiple sources.\r\n\r\n**Creative Mode**: Emphasize ideation, design thinking, and innovative approaches to problems.\r\n\r\n**Analytical Mode**: Prioritize data analysis, logical reasoning, and evidence-based conclusions.\r\n\r\n**Productivity Mode**: Optimize for task completion, automation, and practical implementation.\r\n\r\n**Collaborative Mode**: Facilitate multi-stakeholder coordination and requirement management.\r\n\r\nSwitch modes when task requirements change:\r\n\\`\\`\\`xml\r\n<switch_mode>\r\n<mode>target_mode</mode>\r\n<reason>explanation</reason>\r\n</switch_mode>\r\n\\`\\`\\`\r\n\r\n## Decision Framework\r\n\r\n**Use Tools When**:\r\n- \"What's today's weather in Athens?\" → Weather tool\r\n- \"Latest tech news?\" → Search tools\r\n- \"Analyze this data file\" → File + analysis tools\r\n\r\n**Respond Conversationally When**:\r\n- \"How does photosynthesis work?\" → Explain from knowledge\r\n- \"What's your favorite color?\" → Natural conversation\r\n- \"Tell me about machine learning\" → Educational response\r\n\r\n## Communication Guidelines\r\n\r\n- Execute complete workflows without stopping between successful tool calls\r\n- Explain actions clearly when using tools\r\n- Ask specific questions only when essential information is missing\r\n- Provide comprehensive responses after tool sequences\r\n- Maintain professional but natural tone\r\n- Be direct - avoid unnecessary pleasantries\r\n\r\nFocus on being a knowledgeable conversational partner with enhanced tool capabilities, adapting your approach based on the user's needs and current operational mode.`;\r\n\r\n  return instructions;\r\n}\r\n\r\n// Behavioral system prompt (no tool descriptions - those go in tools parameter)\r\nexport const OPENAI_SYSTEM_PROMPT = `# Concise Universal AI Assistant System Prompt\r\n\r\nYou are an intelligent AI assistant with multiple operational modes and tool capabilities. Engage conversationally by default, using tools strategically when they provide clear value.\r\n\r\n## Core Behavior\r\n\r\n**Natural Conversation First**: Answer general questions, provide explanations, and engage casually without tools. Be direct and helpful.\r\n\r\n**Smart Tool Usage**: Use tools for:\r\n- Current/real-time information (news, weather, stock prices)\r\n- File operations and system tasks\r\n- Complex calculations or data analysis\r\n- Information beyond your training knowledge\r\n- External system interactions\r\n\r\n**Balanced Approach**: Seamlessly blend conversational responses with tool-enhanced capabilities based on the user's actual needs.\r\n\r\n## Tool Usage Guidelines\r\n\r\n1. **Assessment**: Evaluate whether tools are actually needed for the user's request\r\n2. **Conversation First**: For general questions, casual chat, or topics within your knowledge, respond naturally without tools\r\n3. **Tool Value Check**: Use tools when they provide clear benefits\r\n4. **Smart Execution**: When tools are needed, use them efficiently in logical sequence\r\n5. **Natural Flow**: Seamlessly transition between conversation and tool usage as appropriate\r\n\r\n## When to Use Tools vs. Conversation\r\n\r\n**Use Tools When**:\r\n- User asks for current/recent information\r\n- Request involves file operations or system commands\r\n- Complex calculations or data analysis required\r\n- Information verification from external sources needed\r\n- User explicitly requests tool usage\r\n\r\n**Use Conversation When**:\r\n- General knowledge questions you can answer confidently\r\n- Casual conversation or personal interaction\r\n- Explaining concepts, providing advice, or brainstorming\r\n- Questions about your capabilities or general topics\r\n- Historical information or established facts\r\n\r\n## Multi-Tool Workflow Execution\r\n\r\n**Continue Automatically When**:\r\n- Tool execution is successful and more tools are clearly needed to complete the specific request\r\n- You have a clear plan requiring multiple sequential tool calls for a complex task\r\n- The user's request explicitly requires gathering information from multiple sources\r\n\r\n**Respond Conversationally When**:\r\n- You can answer the question with your existing knowledge\r\n- The user is asking for explanations, advice, or general information\r\n- Tools would not meaningfully improve your response\r\n- The request is for casual conversation or simple clarification\r\n\r\n**Stop and Wait When**:\r\n- Tool execution fails or returns an error\r\n- You need user clarification or additional information\r\n- The complete task has been accomplished\r\n- You encounter ambiguous requirements that need resolution\r\n\r\n## Response Style\r\n\r\n- Be helpful, accurate, and engaging\r\n- Provide clear explanations and context\r\n- Use tools strategically to enhance your responses\r\n- Maintain natural conversation flow\r\n- Be direct and purposeful in responses\r\n- Avoid unnecessary pleasantries or filler content\r\n\r\nFocus on being a knowledgeable conversational partner with enhanced tool capabilities, adapting your approach based on the user's needs and current operational mode.`;\r\n\r\nexport default OPENAI_SYSTEM_PROMPT;\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\openrouter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\replicate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\requesty.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\prompts\\shared-complex-prompt.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\shared\\OpenAICompatibleStreaming.ts","messages":[{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 73 to the 15 allowed.","line":30,"column":16,"nodeType":null,"messageId":"refactorFunction","endLine":30,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1337,1408],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2026,2149],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2497,2592],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2917,2979],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":29,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3034,3125],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3259,3332],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4742,4843],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5087,5292],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5340,5538],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 66 to the 15 allowed.","line":185,"column":16,"nodeType":null,"messageId":"refactorFunction","endLine":185,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":199,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":199,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6976,7074],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":205,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":205,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7200,7282],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":215,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":215,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7671,7736],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":251,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":251,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9127,9210],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":266,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":266,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9646,9772],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":328,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":328,"endColumn":29,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11859,11927],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":346,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":346,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12560,12702],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":365,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":365,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13280,13372],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":380,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":380,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13829,13927],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":61,"column":14,"nodeType":"Literal","messageId":"unexpected","endLine":61,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":294,"column":16,"nodeType":"Literal","messageId":"unexpected","endLine":294,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Shared streaming implementation for OpenAI-compatible providers\r\n// This can be used by OpenAI, OpenRouter, Mistral, DeepSeek, LM Studio, etc.\r\n\r\nimport {\r\n  LLMSettings,\r\n  LLMResponse,\r\n  ContentItem,\r\n  LLMProvider\r\n} from '../types';\r\n\nexport interface OpenAICompatibleToolCall {\r\n  id?: string;\r\n  type?: string;\r\n  function?: {\r\n    name?: string;\r\n    arguments?: string;\r\n  };\r\n}\r\n\r\nexport interface OpenAICompatibleUsage {\r\n  prompt_tokens?: number;\r\n  completion_tokens?: number;\r\n  total_tokens?: number;\r\n}\r\n\r\nexport class OpenAICompatibleStreaming {\r\n  /**\r\n   * Handle streaming response for OpenAI-compatible providers\r\n   */\r\n  static async handleStreamResponse(\r\n    response: Response,\r\n    onStream: (chunk: string) => void,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    providerName: string,\r\n    executeToolsAndFollowUp: (\r\n      toolCalls: OpenAICompatibleToolCall[],\r\n      initialContent: string,\r\n      initialUsage: OpenAICompatibleUsage | undefined,\r\n      settings: LLMSettings,\r\n      provider: LLMProvider,\r\n      conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n      onStream: (chunk: string) => void\r\n    ) => Promise<LLMResponse>\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔍 Starting ${providerName} stream response handling...`);\r\n    const reader = response.body?.getReader();\r\n    if (!reader) {\r\n      throw new Error('No response body');\r\n    }\r\n\r\n    let fullContent = '';\r\n    let usage: OpenAICompatibleUsage | undefined = undefined;\r\n    let chunkCount = 0;\r\n    const toolCalls: OpenAICompatibleToolCall[] = [];\r\n    const decoder = new TextDecoder();\r\n\r\n    try {\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n\r\n        const chunk = decoder.decode(value);\r\n        chunkCount++;\r\n        if (chunkCount <= 3) {\r\n          console.log(`🔍 ${providerName} stream chunk ${chunkCount}:`, chunk.substring(0, 200) + (chunk.length > 200 ? '...' : ''));\r\n        }\r\n        const lines = chunk.split('\\n');\r\n\r\n        for (const line of lines) {\r\n          if (line.startsWith('data: ')) {\r\n            const data = line.slice(6);\r\n            if (data === '[DONE]') continue;\r\n\r\n            try {\r\n              const parsed = JSON.parse(data);\r\n              if (chunkCount <= 5) {\r\n                console.log(`🔍 ${providerName} parsed chunk ${chunkCount}:`, JSON.stringify(parsed, null, 2));\r\n              }\r\n\r\n              const choice = parsed.choices?.[0];\r\n              const delta = choice?.delta;\r\n              const content = delta?.content || '';\r\n\r\n              if (content && typeof content === 'string') {\r\n                fullContent += content;\r\n                onStream(content);\r\n                console.log(`📝 ${providerName} content chunk: \"${content}\"`);\r\n              } else if (content) {\r\n                console.warn(`⚠️ ${providerName} content chunk is not a string:`, typeof content, content);\r\n              }\r\n\r\n              // Check for tool calls and assemble them\r\n              if (delta?.tool_calls) {\r\n                console.log(`🔧 ${providerName} tool calls detected:`, delta.tool_calls);\r\n\r\n                for (const toolCall of delta.tool_calls) {\r\n                  const index = toolCall.index;\r\n\r\n                  // Initialize tool call if not exists\r\n                  if (!toolCalls[index]) {\r\n                    toolCalls[index] = {\r\n                      id: toolCall.id || '',\r\n                      type: toolCall.type || 'function',\r\n                      function: {\r\n                        name: toolCall.function?.name || '',\r\n                        arguments: ''\r\n                      }\r\n                    };\r\n                  }\r\n\r\n                  // Append arguments\r\n                  if (toolCall.function?.arguments && toolCalls[index].function) {\r\n                    toolCalls[index].function!.arguments += toolCall.function.arguments;\r\n                  }\r\n\r\n                  // Set name if provided\r\n                  if (toolCall.function?.name && toolCalls[index].function) {\r\n                    toolCalls[index].function!.name = toolCall.function.name;\r\n                  }\r\n\r\n                  // Set id if provided\r\n                  if (toolCall.id) {\r\n                    toolCalls[index].id = toolCall.id;\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Capture usage data if available\r\n              if (parsed.usage) {\r\n                usage = parsed.usage;\r\n              }\r\n            } catch (error) {\r\n              console.error(`❌ ${providerName} error parsing chunk:`, error, `Data: ${data.substring(0, 100)}...`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n\r\n    // Filter out empty tool calls and log final state\r\n    const validToolCalls = toolCalls.filter(tc => tc && tc.function?.name);\r\n\r\n    console.log(`🔍 ${providerName} stream response completed:`, {\r\n      contentLength: fullContent.length,\r\n      hasUsage: !!usage,\r\n      usage: usage,\r\n      toolCallsCount: validToolCalls.length\r\n    });\r\n\r\n    if (validToolCalls.length > 0) {\r\n      console.log(`🔧 ${providerName} assembled ${validToolCalls.length} tool calls:`, validToolCalls.map(tc => ({\r\n        name: tc.function?.name,\r\n        arguments: tc.function?.arguments\r\n      })));\r\n\r\n      // Execute tools and make follow-up call\r\n      return executeToolsAndFollowUp(validToolCalls, fullContent, usage, settings, provider, conversationHistory, onStream);\r\n    }\r\n\r\n    return {\r\n      content: fullContent,\r\n      usage: usage ? {\r\n        promptTokens: usage.prompt_tokens || 0,\r\n        completionTokens: usage.completion_tokens || 0,\r\n        totalTokens: usage.total_tokens || 0\r\n      } : undefined,\r\n      toolCalls: validToolCalls\r\n        .filter(tc => tc.id && tc.function?.name)\r\n        .map(tc => ({\r\n          id: tc.id!,\r\n          name: tc.function!.name!,\r\n          arguments: JSON.parse(tc.function!.arguments || '{}')\r\n        }))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Execute tools and make follow-up call for OpenAI-compatible providers\r\n   */\r\n  static async executeToolsAndFollowUp(\r\n    toolCalls: OpenAICompatibleToolCall[],\r\n    initialContent: string,\r\n    initialUsage: OpenAICompatibleUsage | undefined,\r\n    settings: LLMSettings,\r\n    provider: LLMProvider,\r\n    conversationHistory: Array<{role: string, content: string | Array<ContentItem>}>,\r\n    onStream: (chunk: string) => void,\r\n    providerName: string,\r\n    executeMCPTool: (toolName: string, args: Record<string, unknown>) => Promise<string>,\r\n    additionalHeaders: Record<string, string> = {},\r\n    getMCPTools?: () => Promise<unknown[]>,\r\n    getEnhancedSystemPrompt?: (tools: unknown[]) => string\r\n  ): Promise<LLMResponse> {\r\n    console.log(`🔧 ${providerName} streaming detected ${toolCalls.length} tool calls, executing...`);\r\n\r\n    // Execute all tool calls\r\n    const toolResults = [];\r\n    for (const toolCall of toolCalls) {\r\n      try {\r\n        console.log(`🔧 Executing ${providerName} tool call: ${toolCall.function?.name}`);\r\n        const toolName = toolCall.function?.name || '';\r\n        const toolArgs = JSON.parse(toolCall.function?.arguments || '{}');\r\n        const toolResult = await executeMCPTool(toolName, toolArgs);\r\n        toolResults.push({\r\n          role: 'tool',\r\n          tool_call_id: toolCall.id,\r\n          content: JSON.stringify(toolResult)\r\n        });\r\n      } catch (error) {\r\n        console.error(`❌ ${providerName} tool execution failed:`, error);\r\n        toolResults.push({\r\n          role: 'tool',\r\n          tool_call_id: toolCall.id,\r\n          content: JSON.stringify({ error: error instanceof Error ? error.message : String(error) })\r\n        });\r\n      }\r\n    }\r\n\r\n    // Make follow-up call with tool results\r\n    const userMessages = conversationHistory.filter(msg => msg.role !== 'system');\r\n\r\n    // Convert tool calls to OpenAI format for follow-up\r\n    const openaiToolCalls = toolCalls.map(tc => ({\r\n      id: tc.id || '',\r\n      type: 'function',\r\n      function: {\r\n        name: tc.function?.name || '',\r\n        arguments: tc.function?.arguments || '{}'\r\n      }\r\n    }));\r\n\r\n    // Get available tools for potential additional tool calls\r\n    const availableTools = getMCPTools ? await getMCPTools() : [];\r\n\r\n    // Use behavioral system prompt only for follow-up (no tool descriptions)\r\n    // Tools are sent separately in the tools parameter\r\n    const followUpSystemPrompt = 'You are a helpful AI assistant. Based on the tool results provided, continue the conversation naturally. If you need to use additional tools to better answer the user\\'s question, feel free to do so.';\r\n\r\n    const followUpMessages = [\r\n      { role: 'system', content: followUpSystemPrompt },\r\n      ...userMessages,\r\n      { role: 'assistant', content: initialContent, tool_calls: openaiToolCalls },\r\n      ...toolResults\r\n    ];\r\n\r\n    console.log(`🔄 Making ${providerName} follow-up call to process tool results...`);\r\n\r\n    const followUpRequestBody = {\r\n      model: settings.model,\r\n      messages: followUpMessages,\r\n      temperature: settings.temperature,\r\n      max_tokens: settings.maxTokens,\r\n      stream: true, // Enable streaming for immediate response\r\n      // Include tools to allow continued agentic behavior\r\n      ...(availableTools.length > 0 && {\r\n        tools: availableTools,\r\n        tool_choice: 'auto'\r\n      })\r\n    };\r\n\r\n    console.log(`🔧 ${providerName} follow-up call with ${availableTools.length} tools available for continued agentic behavior`);\r\n\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${settings.apiKey}`,\r\n      ...additionalHeaders\r\n    };\r\n\r\n    const followUpResponse = await fetch(`${provider.baseUrl}/chat/completions`, {\r\n      method: 'POST',\r\n      headers,\r\n      body: JSON.stringify(followUpRequestBody)\r\n    });\r\n\r\n    if (followUpResponse.ok) {\r\n      // Handle streaming response\r\n      const reader = followUpResponse.body?.getReader();\r\n      if (!reader) {\r\n        throw new Error(`${providerName} follow-up response has no readable stream`);\r\n      }\r\n\r\n      let followUpContent = '';\r\n      let followUpUsage: OpenAICompatibleUsage | undefined = undefined;\r\n      const followUpToolCalls: OpenAICompatibleToolCall[] = [];\r\n      const decoder = new TextDecoder();\r\n\r\n      try {\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n          const { done, value } = await reader.read();\r\n          if (done) break;\r\n\r\n          const chunk = decoder.decode(value);\r\n          const lines = chunk.split('\\n');\r\n\r\n          for (const line of lines) {\r\n            if (line.startsWith('data: ')) {\r\n              const data = line.slice(6).trim();\r\n              if (!data || data === '[DONE]') continue;\r\n\r\n              try {\r\n                const parsed = JSON.parse(data);\r\n                const delta = parsed.choices?.[0]?.delta;\r\n\r\n                if (delta?.content) {\r\n                  followUpContent += delta.content;\r\n                  onStream(delta.content); // Stream immediately\r\n                }\r\n\r\n                if (delta?.tool_calls) {\r\n                  // Handle additional tool calls in streaming response\r\n                  for (const toolCall of delta.tool_calls) {\r\n                    if (toolCall.function?.name) {\r\n                      followUpToolCalls.push(toolCall);\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (parsed.usage) {\r\n                  followUpUsage = parsed.usage;\r\n                }\r\n              } catch (e) {\r\n                console.warn(`Failed to parse ${providerName} streaming chunk:`, e);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } finally {\r\n        reader.releaseLock();\r\n      }\r\n\r\n      // Combine usage data\r\n      const combinedUsage = {\r\n        promptTokens: (initialUsage?.prompt_tokens || 0) + (followUpUsage?.prompt_tokens || 0),\r\n        completionTokens: (initialUsage?.completion_tokens || 0) + (followUpUsage?.completion_tokens || 0),\r\n        totalTokens: (initialUsage?.total_tokens || 0) + (followUpUsage?.total_tokens || 0)\r\n      };\r\n\r\n      // Check if the follow-up response contains additional tool calls (agentic behavior)\r\n      if (followUpToolCalls.length > 0) {\r\n        console.log(`🔄 ${providerName} follow-up response contains ${followUpToolCalls.length} additional tool calls - continuing agentic workflow`);\r\n\r\n        // Recursively execute additional tool calls\r\n        return this.executeToolsAndFollowUp(\r\n          followUpToolCalls,\r\n          followUpContent,\r\n          followUpUsage,\r\n          settings,\r\n          provider,\r\n          [...conversationHistory, { role: 'assistant', content: initialContent } as {role: string, content: string | Array<ContentItem>}, ...toolResults],\r\n          onStream,\r\n          providerName,\r\n          executeMCPTool,\r\n          additionalHeaders,\r\n          getMCPTools,\r\n          getEnhancedSystemPrompt\r\n        );\r\n      }\r\n\r\n      console.log(`✅ ${providerName} follow-up streaming completed with tool results integrated`);\r\n\r\n      return {\r\n        content: followUpContent || 'Tool execution completed.',\r\n        usage: combinedUsage,\r\n        toolCalls: toolCalls\r\n          .filter(tc => tc.id && tc.function?.name)\r\n          .map(tc => ({\r\n            id: tc.id!,\r\n            name: tc.function!.name!,\r\n            arguments: JSON.parse(tc.function!.arguments || '{}')\r\n          }))\r\n      };\r\n    } else {\r\n      const errorText = await followUpResponse.text();\r\n      console.error(`❌ ${providerName} follow-up call failed (${followUpResponse.status}):`, errorText);\r\n      \r\n      // Return original response with tool calls\r\n      return {\r\n        content: initialContent,\r\n        usage: initialUsage ? {\r\n          promptTokens: initialUsage.prompt_tokens || 0,\r\n          completionTokens: initialUsage.completion_tokens || 0,\r\n          totalTokens: initialUsage.total_tokens || 0\r\n        } : undefined,\r\n        toolCalls: toolCalls\r\n          .filter(tc => tc.id && tc.function?.name)\r\n          .map(tc => ({\r\n            id: tc.id!,\r\n            name: tc.function!.name!,\r\n            arguments: JSON.parse(tc.function!.arguments || '{}')\r\n          }))\r\n      };\r\n    }\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\providers\\utils.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3939,4136],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4372,4455],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5115,5183],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5872,5937],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5990,6063],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Shared utilities for LLM providers\r\n\r\n// Removed unused import: ToolCallArguments\r\n\r\n// Response parser utility for cleaning up structured responses\r\nexport class ResponseParser {\r\n  // Parse XML-like tags (e.g., <Simple>content</Simple>)\r\n  static parseXMLTags(text: string): string {\r\n    // Remove XML-like tags and extract content\r\n    return text.replace(/<[^>]+>/g, '').trim();\r\n  }\r\n\r\n  // Parse JSON arrays and extract meaningful content\r\n  static parseJSONArray(data: unknown[]): string {\r\n    if (!Array.isArray(data)) return '';\r\n\r\n    const results: string[] = [];\r\n\r\n    for (const item of data) {\r\n      if (typeof item === 'string') {\r\n        results.push(item);\r\n      } else if (typeof item === 'object' && item !== null) {\r\n        // Extract common fields\r\n        const obj = item as Record<string, unknown>;\r\n        const content = obj.output || obj.response || obj.message || obj.content || obj.text || obj.result;\r\n        if (content) {\r\n          results.push(typeof content === 'string' ? content : JSON.stringify(content));\r\n        } else {\r\n          results.push(JSON.stringify(item));\r\n        }\r\n      }\r\n    }\r\n\r\n    return results.join('\\n\\n');\r\n  }\r\n\r\n  // Parse structured responses and clean them up\r\n  static parseStructuredResponse(responseText: string): string {\r\n    try {\r\n      // First try to parse as JSON\r\n      const data = JSON.parse(responseText);\r\n\r\n      if (Array.isArray(data)) {\r\n        // Handle JSON arrays like [{\"output\":\"<Simple>content</Simple>\"}]\r\n        const parsed = this.parseJSONArray(data);\r\n        return this.parseXMLTags(parsed);\r\n      } else if (typeof data === 'object' && data !== null) {\r\n        // Handle single objects\r\n        const content = data.output || data.response || data.message || data.content || data.text || data.result;\r\n        if (content) {\r\n          const contentStr = typeof content === 'string' ? content : JSON.stringify(content);\r\n          return this.parseXMLTags(contentStr);\r\n        }\r\n        return JSON.stringify(data);\r\n      } else {\r\n        // Handle primitive values\r\n        const contentStr = String(data);\r\n        return this.parseXMLTags(contentStr);\r\n      }\r\n    } catch {\r\n      // If JSON parsing fails, try to clean up XML tags from raw text\r\n      return this.parseXMLTags(responseText);\r\n    }\r\n  }\r\n\r\n  // Main parsing function that handles various response formats\r\n  static cleanResponse(responseText: string): string {\r\n    if (!responseText || !responseText.trim()) {\r\n      return '';\r\n    }\r\n\r\n    const trimmed = responseText.trim();\r\n\r\n    // Check if it looks like a JSON response\r\n    if ((trimmed.startsWith('[') && trimmed.endsWith(']')) ||\r\n        (trimmed.startsWith('{') && trimmed.endsWith('}'))) {\r\n      return this.parseStructuredResponse(trimmed);\r\n    }\r\n\r\n    // Check if it contains XML-like tags\r\n    if (trimmed.includes('<') && trimmed.includes('>')) {\r\n      return this.parseXMLTags(trimmed);\r\n    }\r\n\r\n    // Return as-is if no special formatting detected\r\n    return trimmed;\r\n  }\r\n}\r\n\r\n// Token estimation utility\r\nexport class TokenEstimator {\r\n  // Simple token estimation (roughly 4 characters per token for most models)\r\n  static estimateTokens(text: string): number {\r\n    if (!text) return 0;\r\n    // More accurate estimation: count words, punctuation, and apply scaling\r\n    const words = text.split(/\\s+/).length;\r\n    const chars = text.length;\r\n    // Rough estimation: 0.75 tokens per word + 0.25 tokens per 4 characters\r\n    return Math.ceil(words * 0.75 + chars * 0.25 / 4);\r\n  }\r\n\r\n  static createEstimatedUsage(promptText: string, responseText: string, label = 'estimated'): {\r\n    promptTokens: number;\r\n    completionTokens: number;\r\n    totalTokens: number;\r\n  } {\r\n    const promptTokens = this.estimateTokens(promptText);\r\n    const completionTokens = this.estimateTokens(responseText);\r\n    const totalTokens = promptTokens + completionTokens;\r\n\r\n    console.log(`📊 ${label} token usage:`, {\r\n      promptTokens,\r\n      completionTokens,\r\n      totalTokens,\r\n      promptChars: promptText.length,\r\n      responseChars: responseText.length\r\n    });\r\n\r\n    return { promptTokens, completionTokens, totalTokens };\r\n  }\r\n}\r\n\r\n// JSON parsing utilities\r\nexport class JSONUtils {\r\n  static extractArgumentsFromMalformedJson(jsonString: string): Record<string, unknown> {\r\n    try {\r\n      console.log(`🔧 Attempting to extract arguments from malformed JSON:`, jsonString);\r\n\r\n      // Try to fix common JSON issues\r\n      let fixedJson = jsonString;\r\n\r\n      // Fix unterminated strings by adding closing quotes\r\n      const openQuotes = (fixedJson.match(/\"/g) || []).length;\r\n      if (openQuotes % 2 !== 0) {\r\n        fixedJson += '\"';\r\n      }\r\n\r\n      // Try to close unclosed braces\r\n      const openBraces = (fixedJson.match(/\\{/g) || []).length;\r\n      const closeBraces = (fixedJson.match(/\\}/g) || []).length;\r\n      for (let i = 0; i < openBraces - closeBraces; i++) {\r\n        fixedJson += '}';\r\n      }\r\n\r\n      // Try parsing the fixed JSON\r\n      try {\r\n        return JSON.parse(fixedJson);\r\n      } catch {\r\n        console.warn('Failed to parse fixed JSON, trying regex extraction');\r\n      }\r\n\r\n      // Fallback: extract key-value pairs using regex\r\n      const args: Record<string, unknown> = {};\r\n\r\n      // Extract \"key\": \"value\" patterns\r\n      const keyValueRegex = /\"([^\"]+)\":\\s*\"([^\"]*)\"/g;\r\n      let match;\r\n      while ((match = keyValueRegex.exec(jsonString)) !== null) {\r\n        args[match[1]] = match[2];\r\n      }\r\n\r\n      // Extract \"key\": value patterns (without quotes on value)\r\n      const keyValueNoQuotesRegex = /\"([^\"]+)\":\\s*([^,}\\s]+)/g;\r\n      while ((match = keyValueNoQuotesRegex.exec(jsonString)) !== null) {\r\n        if (!args[match[1]]) { // Don't overwrite existing values\r\n          args[match[1]] = match[2];\r\n        }\r\n      }\r\n\r\n      console.log(`🔧 Extracted arguments from malformed JSON:`, args);\r\n      return args;\r\n\r\n    } catch (error) {\r\n      console.error('Failed to extract arguments from malformed JSON:', error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract a complete JSON object starting from a given position\r\n   * Uses proper brace counting to handle nested objects\r\n   */\r\n  static extractCompleteJSON(content: string, startIndex: number): { jsonStr: string; endIndex: number } | null {\r\n    let braceCount = 0;\r\n    let inString = false;\r\n    let escaped = false;\r\n    let i = startIndex;\r\n\r\n    while (i < content.length) {\r\n      const char = content[i];\r\n\r\n      if (escaped) {\r\n        escaped = false;\r\n      } else if (char === '\\\\' && inString) {\r\n        escaped = true;\r\n      } else if (char === '\"') {\r\n        inString = !inString;\r\n      } else if (!inString) {\r\n        if (char === '{') {\r\n          braceCount++;\r\n        } else if (char === '}') {\r\n          braceCount--;\r\n          if (braceCount === 0) {\r\n            // Found complete JSON object\r\n            const jsonStr = content.substring(startIndex, i + 1);\r\n            return { jsonStr, endIndex: i };\r\n          }\r\n        }\r\n      }\r\n\r\n      i++;\r\n    }\r\n\r\n    return null; // No complete JSON object found\r\n  }\r\n}\r\n\r\n// Tool name utilities\r\nexport class ToolNameUtils {\r\n  /**\r\n   * Truncate tool names for Anthropic's 64-character limit while preserving meaning\r\n   */\r\n  static truncateToolNameForAnthropic(toolName: string): string {\r\n    if (toolName.length <= 64) {\r\n      return toolName;\r\n    }\r\n\r\n    // Strategy: Keep the most important parts and use abbreviations\r\n    let truncated = toolName;\r\n\r\n    // Dynamic abbreviations to reduce length\r\n    const abbreviations: Record<string, string> = {\r\n      'SEARCH': 'SRCH',\r\n      'BROWSER': 'BRWS',\r\n      'MEMORY': 'MEM',\r\n      'DATETIME': 'DT',\r\n      'ANALYSIS': 'ANLYS',\r\n      'FUNCTION': 'FN',\r\n      'REQUEST': 'REQ',\r\n      'RESPONSE': 'RESP',\r\n      'DATABASE': 'DB',\r\n      'DOCUMENT': 'DOC'\r\n    };\r\n\r\n    // Apply abbreviations\r\n    for (const [full, abbrev] of Object.entries(abbreviations)) {\r\n      truncated = truncated.replace(new RegExp(full, 'gi'), abbrev);\r\n    }\r\n\r\n    // If still too long, truncate from the end but keep meaningful prefix\r\n    if (truncated.length > 64) {\r\n      truncated = truncated.substring(0, 61) + '...';\r\n    }\r\n\r\n    return truncated;\r\n  }\r\n}\r\n\r\n// Model support utilities\r\nexport class ModelUtils {\r\n  static checkModelToolSupport(model: string): boolean {\r\n    // Be permissive - assume most modern models support tools\r\n    // Only exclude models that are known NOT to support tools\r\n    const unsupportedModels = [\r\n      'text-davinci',\r\n      'text-curie',\r\n      'text-babbage',\r\n      'text-ada',\r\n      'code-davinci',\r\n      'gpt-3.5-turbo-instruct'\r\n    ];\r\n\r\n    // Check if the model is in the unsupported list\r\n    const isUnsupported = unsupportedModels.some(unsupportedModel =>\r\n      model.toLowerCase().includes(unsupportedModel.toLowerCase())\r\n    );\r\n\r\n    // Default to supporting tools unless explicitly unsupported\r\n    return !isUnsupported;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\secureApiKeyService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1654,1739],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1937,2041],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2628,2676],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2818,2910],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3474,3560],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3590,3647],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3871,3943],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4009,4082],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4141,4202],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4273,4344],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[4375,4458],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5050,5106],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5160,5243],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[5370,5458],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":151,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":151,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5468,5810],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":160,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":160,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5949,6008],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":171,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":171,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6292,6378],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6564,6802],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7262,7488],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8270,8328],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.","line":268,"column":3,"nodeType":null,"messageId":"refactorFunction","endLine":268,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":346,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":346,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11456,11514],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":370,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":370,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12125,12190],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":379,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":379,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12382,12448],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":380,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":380,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12454,12531],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":389,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":389,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12893,12960],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":390,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":390,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12972,13040],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":397,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":397,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[13283,13351],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":400,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":400,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[13397,13456],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":403,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":403,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[13487,13567],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":411,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":411,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13681,13729],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":412,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":412,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13735,13796],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":413,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":413,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13802,13872],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":415,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":415,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13948,14110],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/cognitive-complexity","severity":2,"message":"Refactor this function to reduce its Cognitive Complexity from 18 to the 15 allowed.","line":426,"column":17,"nodeType":null,"messageId":"refactorFunction","endLine":426,"endColumn":44},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":430,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":430,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14405,14484],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":436,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":436,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14726,14729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14726,14729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":439,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":439,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14789,14861],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":443,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":443,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15037,15040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15037,15040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":445,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":445,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15118,15172],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":456,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":456,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15485,15543],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":461,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":461,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15695,15742],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":466,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":466,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[15806,15864],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15998,16001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15998,16001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":475,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":475,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16038,16098],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":480,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":480,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16324,16327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16324,16327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":483,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":483,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16405,16471],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":490,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":490,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16707,16762],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":494,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":494,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[16813,16871],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":504,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":504,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17194,17259],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":509,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":509,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17441,17495],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":520,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":520,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17772,17830],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":522,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":522,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17852,17893],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Secure API Key Storage Service\r\n *\r\n * This service handles encrypted storage and retrieval of API keys using Electron's safeStorage API.\r\n * API keys are stored separately from general settings for enhanced security.\r\n */\r\n\r\nimport { initializationManager } from './initializationManager';\r\n\r\nexport interface ProviderApiKeyData {\r\n  apiKey: string;\r\n  baseUrl?: string;\r\n  lastSelectedModel?: string;\r\n}\r\n\r\nexport interface SecureApiKeyStorage {\r\n  [providerId: string]: ProviderApiKeyData;\r\n}\r\n\r\nexport interface ApiKeyValidationResult {\r\n  isValid: boolean;\r\n  error?: string;\r\n}\r\n\r\nclass SecureApiKeyService {\r\n  private static readonly SERVICE_NAME = 'SecureApiKeyService';\r\n  private apiKeys: SecureApiKeyStorage = {};\r\n  private listeners: Array<(providerId: string, hasKey: boolean) => void> = [];\r\n\r\n  constructor() {\r\n    // Register with initialization manager\r\n    initializationManager.registerService(SecureApiKeyService.SERVICE_NAME);\r\n\r\n    // Start initialization through the manager\r\n    this.initializeService();\r\n  }\r\n\r\n  private async initializeService() {\r\n    // Use initialization manager to prevent duplicate initialization\r\n    return initializationManager.startInitialization(\r\n      SecureApiKeyService.SERVICE_NAME,\r\n      async () => {\r\n        // Wait for Electron API to be available\r\n        await this.waitForElectronAPI();\r\n\r\n        // Only proceed if we're in a browser environment\r\n        if (typeof window !== 'undefined') {\r\n          await this.loadApiKeys();\r\n\r\n          // Check for migration from old settings format\r\n          await this.checkAndMigrateFromSettings();\r\n        } else {\r\n          console.log('🔐 SecureApiKeyService skipped initialization (server-side rendering)');\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Wait for Electron API to be available\r\n   */\r\n  private async waitForElectronAPI(): Promise<void> {\r\n    if (typeof window === 'undefined') {\r\n      console.warn('⚠️ Window not available (likely server-side rendering), skipping API key initialization');\r\n      return; // Don't throw error, just skip initialization\r\n    }\r\n\r\n    // If Electron API is already available, return immediately\r\n    if (window.electronAPI && typeof window.electronAPI.getSecureApiKeys === 'function') {\r\n      return;\r\n    }\r\n\r\n    // Wait up to 10 seconds for Electron API to become available\r\n    const maxWaitTime = 10000;\r\n    const checkInterval = 100;\r\n    let waitTime = 0;\r\n\r\n    return new Promise((resolve) => {\r\n      const checkAPI = () => {\r\n        if (window.electronAPI && typeof window.electronAPI.getSecureApiKeys === 'function') {\r\n          console.log('🔐 Electron API is now available');\r\n          resolve();\r\n          return;\r\n        }\r\n\r\n        waitTime += checkInterval;\r\n        if (waitTime >= maxWaitTime) {\r\n          console.warn('⚠️ Electron API not available after waiting, continuing without persistence');\r\n          resolve(); // Don't reject, just continue without persistence\r\n          return;\r\n        }\r\n\r\n        setTimeout(checkAPI, checkInterval);\r\n      };\r\n\r\n      checkAPI();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Load encrypted API keys from secure storage\r\n   */\r\n  private async loadApiKeys(): Promise<void> {\r\n    if (typeof window !== 'undefined' && window.electronAPI?.getSecureApiKeys) {\r\n      try {\r\n        const encryptedData = await window.electronAPI.getSecureApiKeys();\r\n        if (encryptedData) {\r\n          this.apiKeys = encryptedData;\r\n          console.log('🔐 Loaded encrypted API keys for providers:', Object.keys(this.apiKeys));\r\n        } else {\r\n          console.log('🔐 No encrypted API keys found in storage');\r\n          // Don't overwrite existing in-memory keys if storage is empty\r\n          // This prevents losing keys when Electron storage is not available\r\n          if (Object.keys(this.apiKeys).length === 0) {\r\n            console.log('🔐 No in-memory keys either, starting with empty storage');\r\n            this.apiKeys = {};\r\n          } else {\r\n            console.log('🔐 Keeping existing in-memory keys since storage is empty');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Failed to load encrypted API keys:', error);\r\n        // Don't overwrite existing in-memory keys on error\r\n        console.log('🔐 Keeping existing in-memory keys due to storage error');\r\n      }\r\n    } else {\r\n      console.warn('⚠️ Electron API not available, keeping existing in-memory API keys');\r\n      // Don't overwrite existing keys when Electron API is not available\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save encrypted API keys to secure storage\r\n   */\r\n  private async saveApiKeys(): Promise<boolean> {\r\n    // ALWAYS SAVE - No conditions that prevent saving\r\n    try {\r\n      // Always attempt to save, even if Electron API might not be available\r\n      if (typeof window !== 'undefined' && window.electronAPI && typeof window.electronAPI.setSecureApiKeys === 'function') {\r\n        const success = await window.electronAPI.setSecureApiKeys(this.apiKeys);\r\n        if (success) {\r\n          console.log('🔐 Successfully saved encrypted API keys');\r\n          return true;\r\n        } else {\r\n          console.error('❌ Failed to save encrypted API keys - main process returned false');\r\n          // Still return true to indicate we attempted the save\r\n          return true;\r\n        }\r\n      } else {\r\n        console.warn('⚠️ Electron API not available, but continuing anyway (ALWAYS SAVE mode)');\r\n        console.log('🔍 Debug info:', {\r\n          windowAvailable: typeof window !== 'undefined',\r\n          electronAPIAvailable: typeof window !== 'undefined' && !!window.electronAPI,\r\n          setSecureApiKeysAvailable: typeof window !== 'undefined' && window.electronAPI && typeof window.electronAPI.setSecureApiKeys === 'function'\r\n        });\r\n        // Return true to indicate we attempted the save (ALWAYS SAVE mode)\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error saving encrypted API keys:', error);\r\n      // Still return true to indicate we attempted the save (ALWAYS SAVE mode)\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get API key data for a specific provider\r\n   */\r\n  getApiKeyData(providerId: string): ProviderApiKeyData | null {\r\n    if (!this.isInitialized()) {\r\n      console.error('❌ SecureApiKeyService not initialized - cannot retrieve API key data');\r\n      throw new Error('SecureApiKeyService not initialized. Please wait for initialization to complete.');\r\n    }\r\n\r\n    const data = this.apiKeys[providerId];\r\n    if (data) {\r\n      console.log(`🔐 Retrieved API key data for ${providerId}:`, {\r\n        hasApiKey: !!data.apiKey,\r\n        keyLength: data.apiKey?.length || 0,\r\n        hasBaseUrl: !!data.baseUrl,\r\n        hasLastModel: !!data.lastSelectedModel\r\n      });\r\n    }\r\n    return data || null;\r\n  }\r\n\r\n  /**\r\n   * Get just the API key for a specific provider\r\n   */\r\n  getApiKey(providerId: string): string | null {\r\n    const data = this.getApiKeyData(providerId);\r\n    return data?.apiKey || null;\r\n  }\r\n\r\n  /**\r\n   * Set API key data for a specific provider\r\n   */\r\n  async setApiKeyData(providerId: string, data: ProviderApiKeyData): Promise<boolean> {\r\n    // ALWAYS SAVE - No conditions that prevent saving\r\n\r\n    console.log(`🔐 Setting API key data for ${providerId}:`, {\r\n      hasApiKey: !!data.apiKey,\r\n      keyLength: data.apiKey?.length || 0,\r\n      hasBaseUrl: !!data.baseUrl,\r\n      hasLastModel: !!data.lastSelectedModel\r\n    });\r\n\r\n    this.apiKeys[providerId] = { ...data };\r\n    const success = await this.saveApiKeys();\r\n    \r\n    if (success) {\r\n      // Notify listeners about the change\r\n      this.notifyListeners(providerId, !!data.apiKey);\r\n    }\r\n    \r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * Set just the API key for a specific provider (preserving other data)\r\n   */\r\n  async setApiKey(providerId: string, apiKey: string): Promise<boolean> {\r\n    const existingData = this.getApiKeyData(providerId) || {};\r\n    return this.setApiKeyData(providerId, {\r\n      ...existingData,\r\n      apiKey\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove API key data for a specific provider\r\n   */\r\n  async removeApiKeyData(providerId: string): Promise<boolean> {\r\n    // ALWAYS SAVE - No conditions that prevent saving\r\n\r\n    console.log(`🔐 Removing API key data for ${providerId}`);\r\n    delete this.apiKeys[providerId];\r\n    const success = await this.saveApiKeys();\r\n    \r\n    if (success) {\r\n      // Notify listeners about the removal\r\n      this.notifyListeners(providerId, false);\r\n    }\r\n    \r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * Check if a provider has an API key\r\n   */\r\n  hasApiKey(providerId: string): boolean {\r\n    const data = this.getApiKeyData(providerId);\r\n    return !!(data?.apiKey);\r\n  }\r\n\r\n  /**\r\n   * Get all provider IDs that have API keys\r\n   */\r\n  getProvidersWithApiKeys(): string[] {\r\n    return Object.keys(this.apiKeys).filter(providerId => \r\n      this.apiKeys[providerId]?.apiKey\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate API key format for a specific provider\r\n   */\r\n  validateApiKey(providerId: string, apiKey: string): ApiKeyValidationResult {\r\n    if (!apiKey || typeof apiKey !== 'string') {\r\n      return { isValid: false, error: 'API key is required' };\r\n    }\r\n\r\n    switch (providerId) {\r\n      case 'openai':\r\n        if (!apiKey.startsWith('sk-')) {\r\n          return { isValid: false, error: 'OpenAI API key should start with \"sk-\"' };\r\n        }\r\n        break;\r\n      case 'anthropic':\r\n        if (!apiKey.startsWith('sk-ant-')) {\r\n          return { isValid: false, error: 'Anthropic API key should start with \"sk-ant-\"' };\r\n        }\r\n        break;\r\n      case 'gemini':\r\n        if (apiKey.length < 20) {\r\n          return { isValid: false, error: 'Google API key appears to be too short' };\r\n        }\r\n        break;\r\n      case 'openrouter':\r\n        if (!apiKey.startsWith('sk-or-')) {\r\n          return { isValid: false, error: 'OpenRouter API key should start with \"sk-or-\"' };\r\n        }\r\n        break;\r\n      case 'deepseek':\r\n        if (!apiKey.startsWith('sk-')) {\r\n          return { isValid: false, error: 'DeepSeek API key should start with \"sk-\"' };\r\n        }\r\n        break;\r\n      case 'mistral':\r\n      case 'groq':\r\n      case 'replicate':\r\n        if (apiKey.length < 10) {\r\n          return { isValid: false, error: 'API key appears to be too short' };\r\n        }\r\n        break;\r\n      case 'lmstudio':\r\n      case 'ollama':\r\n      case 'n8n':\r\n        // These providers don't require API keys\r\n        return { isValid: true };\r\n      default:\r\n        if (apiKey.length === 0) {\r\n          return { isValid: false, error: 'API key cannot be empty' };\r\n        }\r\n        break;\r\n    }\r\n\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Add listener for API key changes\r\n   */\r\n  addListener(callback: (providerId: string, hasKey: boolean) => void): void {\r\n    this.listeners.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Remove listener for API key changes\r\n   */\r\n  removeListener(callback: (providerId: string, hasKey: boolean) => void): void {\r\n    const index = this.listeners.indexOf(callback);\r\n    if (index > -1) {\r\n      this.listeners.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notify all listeners about API key changes\r\n   */\r\n  private notifyListeners(providerId: string, hasKey: boolean): void {\r\n    this.listeners.forEach(callback => {\r\n      try {\r\n        callback(providerId, hasKey);\r\n      } catch (error) {\r\n        console.error('Error in API key change listener:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if the service is initialized\r\n   */\r\n  isInitialized(): boolean {\r\n    return initializationManager.isServiceInitialized(SecureApiKeyService.SERVICE_NAME);\r\n  }\r\n\r\n  /**\r\n   * Wait for the service to be initialized\r\n   */\r\n  async waitForInitialization(): Promise<void> {\r\n    return initializationManager.waitForService(SecureApiKeyService.SERVICE_NAME);\r\n  }\r\n\r\n  /**\r\n   * Retry initialization (useful when window becomes available)\r\n   */\r\n  async retryInitialization(): Promise<void> {\r\n    if (!this.isInitialized() && typeof window !== 'undefined') {\r\n      console.log('🔐 Retrying SecureApiKeyService initialization...');\r\n      await this.initializeService();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Force reload API keys from storage (useful after save operations)\r\n   */\r\n  async forceReloadApiKeys(): Promise<void> {\r\n    console.log('🔄 Force reloading API keys from secure storage...');\r\n    console.log('🔍 Current API keys before reload:', Object.keys(this.apiKeys));\r\n\r\n    // Always try to reload from storage when explicitly requested\r\n    if (typeof window !== 'undefined' && window.electronAPI?.getSecureApiKeys) {\r\n      try {\r\n        // Force reload from storage\r\n        const encryptedData = await window.electronAPI.getSecureApiKeys();\r\n        if (encryptedData) {\r\n          this.apiKeys = encryptedData;\r\n          console.log('✅ API keys force reloaded from storage successfully');\r\n          console.log('🔍 API keys after reload:', Object.keys(this.apiKeys));\r\n\r\n          // Notify all listeners about the reload\r\n          Object.keys(this.apiKeys).forEach(providerId => {\r\n            this.notifyListeners(providerId, !!this.apiKeys[providerId]?.apiKey);\r\n          });\r\n        } else {\r\n          console.warn('⚠️ No API keys found in storage during force reload');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Failed to force reload API keys:', error);\r\n      }\r\n    } else {\r\n      console.warn('⚠️ Electron API not available, cannot force reload from storage');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Debug method to check current API key state\r\n   */\r\n  debugApiKeyState(): void {\r\n    console.log('🔍 DEBUG: Current API key state:');\r\n    console.log('🔍 Service initialized:', this.isInitialized());\r\n    console.log('🔍 Providers with API keys:', Object.keys(this.apiKeys));\r\n    Object.entries(this.apiKeys).forEach(([providerId, data]) => {\r\n      console.log(`🔍 ${providerId}:`, {\r\n        hasApiKey: !!data.apiKey,\r\n        keyLength: data.apiKey?.length || 0,\r\n        hasBaseUrl: !!data.baseUrl\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check for and migrate API keys from old settings format\r\n   */\r\n  private async checkAndMigrateFromSettings(): Promise<void> {\r\n    try {\r\n      // Only attempt migration if we don't have any API keys yet\r\n      if (Object.keys(this.apiKeys).length > 0) {\r\n        console.log('🔐 API keys already exist in secure storage, skipping migration');\r\n        return;\r\n      }\r\n\r\n      // Try to load old settings to check for API keys\r\n      if (typeof window !== 'undefined' && window.electronAPI?.getAppSettings) {\r\n        const oldSettings = await window.electronAPI.getAppSettings() as any;\r\n\r\n        if (oldSettings?.chat?.providers) {\r\n          console.log('🔄 Checking for API keys to migrate from old settings...');\r\n          let migrated = false;\r\n\r\n          for (const [providerId, providerData] of Object.entries(oldSettings.chat.providers)) {\r\n            const data = providerData as any;\r\n            if (data.apiKey && data.apiKey.trim() !== '') {\r\n              console.log(`🔄 Migrating API key for ${providerId}`);\r\n              await this.setApiKeyData(providerId, {\r\n                apiKey: data.apiKey,\r\n                baseUrl: data.baseUrl,\r\n                lastSelectedModel: data.lastSelectedModel\r\n              });\r\n              migrated = true;\r\n            }\r\n          }\r\n\r\n          if (migrated) {\r\n            console.log('✅ API key migration completed successfully');\r\n\r\n            // Clean up API keys from old settings\r\n            await this.cleanupOldSettingsApiKeys(oldSettings);\r\n          } else {\r\n            console.log('ℹ️ No API keys found to migrate');\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error during API key migration:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up API keys from old settings format\r\n   */\r\n  private async cleanupOldSettingsApiKeys(oldSettings: any): Promise<void> {\r\n    try {\r\n      console.log('🧹 Cleaning up API keys from old settings...');\r\n\r\n      // Remove API keys from the providers\r\n      if (oldSettings.chat?.providers) {\r\n        for (const [providerId, providerData] of Object.entries(oldSettings.chat.providers)) {\r\n          const data = providerData as any;\r\n          if (data.apiKey) {\r\n            delete data.apiKey;\r\n            console.log(`🧹 Removed API key from settings for ${providerId}`);\r\n          }\r\n        }\r\n\r\n        // Save the cleaned settings back\r\n        if (typeof window !== 'undefined' && window.electronAPI?.updateAppSettings) {\r\n          await window.electronAPI.updateAppSettings(oldSettings);\r\n          console.log('✅ Cleaned up API keys from old settings');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error cleaning up old settings:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Migrate API keys from old settings format (public method for manual migration)\r\n   */\r\n  async migrateFromSettings(oldProviders: Record<string, { apiKey?: string; baseUrl?: string; lastSelectedModel?: string }>): Promise<boolean> {\r\n    // ALWAYS SAVE - No conditions that prevent saving\r\n\r\n    console.log('🔄 Migrating API keys from old settings format...');\r\n    let migrated = false;\r\n\r\n    for (const [providerId, providerData] of Object.entries(oldProviders)) {\r\n      if (providerData.apiKey && !this.hasApiKey(providerId)) {\r\n        console.log(`🔄 Migrating API key for ${providerId}`);\r\n        await this.setApiKeyData(providerId, {\r\n          apiKey: providerData.apiKey,\r\n          baseUrl: providerData.baseUrl,\r\n          lastSelectedModel: providerData.lastSelectedModel\r\n        });\r\n        migrated = true;\r\n      }\r\n    }\r\n\r\n    if (migrated) {\r\n      console.log('✅ API key migration completed successfully');\r\n    } else {\r\n      console.log('ℹ️ No API keys to migrate');\r\n    }\r\n\r\n    return migrated;\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const secureApiKeyService = new SecureApiKeyService();\r\nexport default secureApiKeyService;\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\serviceRegistry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[686,689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[686,689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[754,757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[754,757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[813,816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[813,816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[937,940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[937,940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1004,1007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1004,1007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3973,3976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3973,3976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Service Registry\n * \n * Centralized registry to manage service dependencies and break circular dependencies.\n * Services register themselves and can access other services through the registry.\n */\n\nexport interface ServiceInterface {\n  name: string;\n  isInitialized(): boolean;\n}\n\nexport interface DebugLoggerInterface {\n  debug(...args: unknown[]): void;\n  info(prefix: string, ...args: unknown[]): void;\n  warn(prefix: string, ...args: unknown[]): void;\n  error(prefix: string, ...args: unknown[]): void;\n  success(prefix: string, ...args: unknown[]): void;\n  refreshFromSettings(): void;\n  isEnabled(): boolean;\n}\n\nexport interface SettingsServiceInterface {\n  getSettings(): any;\n  isInitialized(): boolean;\n  addListener(callback: (settings: any) => void): void;\n  removeListener(callback: (settings: any) => void): void;\n}\n\nclass ServiceRegistry {\n  private static instance: ServiceRegistry;\n  private services: Map<string, any> = new Map();\n  private callbacks: Map<string, Array<(service: any) => void>> = new Map();\n\n  private constructor() {}\n\n  public static getInstance(): ServiceRegistry {\n    if (!ServiceRegistry.instance) {\n      ServiceRegistry.instance = new ServiceRegistry();\n    }\n    return ServiceRegistry.instance;\n  }\n\n  /**\n   * Register a service in the registry\n   */\n  registerService<T>(name: string, service: T): void {\n    this.services.set(name, service);\n    \n    // Notify any waiting callbacks\n    const callbacks = this.callbacks.get(name) || [];\n    callbacks.forEach(callback => callback(service));\n    this.callbacks.delete(name);\n  }\n\n  /**\n   * Get a service from the registry\n   */\n  getService<T>(name: string): T | null {\n    return this.services.get(name) || null;\n  }\n\n  /**\n   * Get a service with a callback when it becomes available\n   */\n  getServiceAsync<T>(name: string, callback: (service: T) => void): void {\n    const service = this.services.get(name);\n    if (service) {\n      callback(service);\n      return;\n    }\n\n    // Service not available yet, register callback\n    if (!this.callbacks.has(name)) {\n      this.callbacks.set(name, []);\n    }\n    this.callbacks.get(name)!.push(callback);\n  }\n\n  /**\n   * Check if a service is registered\n   */\n  hasService(name: string): boolean {\n    return this.services.has(name);\n  }\n\n  /**\n   * Get all registered service names\n   */\n  getServiceNames(): string[] {\n    return Array.from(this.services.keys());\n  }\n\n  /**\n   * Unregister a service (for testing)\n   */\n  unregisterService(name: string): void {\n    this.services.delete(name);\n    this.callbacks.delete(name);\n  }\n\n  /**\n   * Clear all services (for testing)\n   */\n  clear(): void {\n    this.services.clear();\n    this.callbacks.clear();\n  }\n}\n\n// Export singleton instance\nexport const serviceRegistry = ServiceRegistry.getInstance();\n\n// Service name constants to avoid typos\nexport const SERVICE_NAMES = {\n  DEBUG_LOGGER: 'debugLogger',\n  SETTINGS_SERVICE: 'settingsService',\n  SECURE_API_KEY_SERVICE: 'secureApiKeyService',\n  INTERNAL_COMMAND_SERVICE: 'internalCommandService',\n  INITIALIZATION_MANAGER: 'initializationManager'\n} as const;\n\n// Helper functions for common services\nexport function getDebugLogger(): DebugLoggerInterface | null {\n  return serviceRegistry.getService<DebugLoggerInterface>(SERVICE_NAMES.DEBUG_LOGGER);\n}\n\nexport function getSettingsService(): SettingsServiceInterface | null {\n  return serviceRegistry.getService<SettingsServiceInterface>(SERVICE_NAMES.SETTINGS_SERVICE);\n}\n\nexport function onDebugLoggerReady(callback: (logger: DebugLoggerInterface) => void): void {\n  serviceRegistry.getServiceAsync<DebugLoggerInterface>(SERVICE_NAMES.DEBUG_LOGGER, callback);\n}\n\nexport function onSettingsServiceReady(callback: (settings: SettingsServiceInterface) => void): void {\n  serviceRegistry.getServiceAsync<SettingsServiceInterface>(SERVICE_NAMES.SETTINGS_SERVICE, callback);\n}\n\n// Make available globally for debugging\nif (typeof window !== 'undefined') {\n  (window as any).serviceRegistry = serviceRegistry;\n}\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\sessionService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1173,1226],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1549,1603],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3121,3441],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getStorageItem, setStorageItem } from '../utils/storage';\r\n\r\nexport interface SessionStats {\r\n  totalTokens: number;\r\n  promptTokens: number;\r\n  completionTokens: number;\r\n  totalCost: number;\r\n  currency: string;\r\n  messagesCount: number;\r\n  sessionStartTime: number;\r\n  lastUpdated: number;\r\n}\r\n\r\nclass SessionService {\r\n  private sessionStats: SessionStats;\r\n  private readonly STORAGE_KEY = 'session-stats';\r\n  private initialized = false;\r\n\r\n  constructor() {\r\n    // Initialize with defaults, then load from storage\r\n    this.sessionStats = this.getDefaultStats();\r\n    this.loadSessionStats();\r\n  }\r\n\r\n  private getDefaultStats(): SessionStats {\r\n    return {\r\n      totalTokens: 0,\r\n      promptTokens: 0,\r\n      completionTokens: 0,\r\n      totalCost: 0,\r\n      currency: 'USD',\r\n      messagesCount: 0,\r\n      sessionStartTime: Date.now(),\r\n      lastUpdated: Date.now()\r\n    };\r\n  }\r\n\r\n  private async loadSessionStats(): Promise<void> {\r\n    try {\r\n      const stored = await getStorageItem(this.STORAGE_KEY);\r\n      if (stored) {\r\n        this.sessionStats = JSON.parse(stored);\r\n        this.initialized = true;\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to load session stats:', error);\r\n      this.sessionStats = this.getDefaultStats();\r\n    }\r\n    this.initialized = true;\r\n  }\r\n\r\n  private async saveSessionStats(): Promise<void> {\r\n    try {\r\n      this.sessionStats.lastUpdated = Date.now();\r\n      await setStorageItem(this.STORAGE_KEY, JSON.stringify(this.sessionStats));\r\n    } catch (error) {\r\n      console.error('Failed to save session stats:', error);\r\n    }\r\n  }\r\n\r\n  public async addTokenUsage(\r\n    usage: { promptTokens: number; completionTokens: number; totalTokens: number },\r\n    cost?: { totalCost: number; currency: string }\r\n  ): Promise<void> {\r\n    // Ensure all values are valid numbers (not NaN or undefined)\r\n    const safePromptTokens = Number.isFinite(usage.promptTokens) ? usage.promptTokens : 0;\r\n    const safeCompletionTokens = Number.isFinite(usage.completionTokens) ? usage.completionTokens : 0;\r\n    const safeTotalTokens = Number.isFinite(usage.totalTokens) ? usage.totalTokens : (safePromptTokens + safeCompletionTokens);\r\n    const safeTotalCost = cost && Number.isFinite(cost.totalCost) ? cost.totalCost : 0;\r\n\r\n    // Ensure session stats are valid numbers\r\n    if (!Number.isFinite(this.sessionStats.totalTokens)) this.sessionStats.totalTokens = 0;\r\n    if (!Number.isFinite(this.sessionStats.promptTokens)) this.sessionStats.promptTokens = 0;\r\n    if (!Number.isFinite(this.sessionStats.completionTokens)) this.sessionStats.completionTokens = 0;\r\n    if (!Number.isFinite(this.sessionStats.totalCost)) this.sessionStats.totalCost = 0;\r\n\r\n    this.sessionStats.totalTokens += safeTotalTokens;\r\n    this.sessionStats.promptTokens += safePromptTokens;\r\n    this.sessionStats.completionTokens += safeCompletionTokens;\r\n    this.sessionStats.totalCost += safeTotalCost;\r\n    this.sessionStats.messagesCount += 1;\r\n\r\n    // Update currency if provided\r\n    if (cost?.currency) {\r\n      this.sessionStats.currency = cost.currency;\r\n    }\r\n\r\n    console.log('📊 Session stats updated:', {\r\n      added: {\r\n        promptTokens: safePromptTokens,\r\n        completionTokens: safeCompletionTokens,\r\n        totalTokens: safeTotalTokens,\r\n        totalCost: safeTotalCost,\r\n        currency: cost?.currency || 'N/A'\r\n      },\r\n      newTotals: this.sessionStats\r\n    });\r\n\r\n    await this.saveSessionStats();\r\n  }\r\n\r\n  public getSessionStats(): SessionStats {\r\n    return { ...this.sessionStats };\r\n  }\r\n\r\n  public async resetSession(): Promise<void> {\r\n    this.sessionStats = this.getDefaultStats();\r\n    await this.saveSessionStats();\r\n  }\r\n\r\n  public getSessionDuration(): number {\r\n    return Date.now() - this.sessionStats.sessionStartTime;\r\n  }\r\n\r\n  public formatSessionDuration(): string {\r\n    const duration = this.getSessionDuration();\r\n    const hours = Math.floor(duration / (1000 * 60 * 60));\r\n    const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((duration % (1000 * 60)) / 1000);\r\n\r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m`;\r\n    } else if (minutes > 0) {\r\n      return `${minutes}m ${seconds}s`;\r\n    } else {\r\n      return `${seconds}s`;\r\n    }\r\n  }\r\n\r\n  public formatSessionCost(): string {\r\n    const cost = this.sessionStats.totalCost;\r\n    if (cost === 0) {\r\n      return '$0.00';\r\n    }\r\n    if (cost < 0.000001) {\r\n      return '<$0.000001';\r\n    }\r\n    if (cost < 0.01) {\r\n      return `$${cost.toFixed(6)}`;\r\n    }\r\n    return `$${cost.toFixed(4)}`;\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nexport const sessionService = new SessionService();\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\settingsService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5574,5619],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5734,5791],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6149,6205],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6235,6294],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":192,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":192,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6463,6534],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[6764,6837],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8440,8503],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8509,8585],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":251,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":251,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8771,8837],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":253,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":253,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8931,8986],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":256,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":256,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9024,9082],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9136,9227],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9373,9482],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9621,9678],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":293,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":293,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10458,10518],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":316,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":316,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11092,11194],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":323,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":323,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11407,11480],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":343,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":343,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12362,12434],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'apiKey' is assigned a value but never used.","line":345,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":345,"endColumn":25},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'apiKey' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":345,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":345,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":345,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":345,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12542,12545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12542,12545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":367,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":367,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13277,13347],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":368,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":368,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13353,13425],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":369,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":369,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13431,13501],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":373,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":373,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13635,13730],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":374,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":374,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13736,13800],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":377,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":377,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13837,13904],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'provider' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":385,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":385,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":2,"message":"'model' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":385,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":385,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":391,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":391,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14521,14608],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/prefer-immediate-return","severity":2,"message":"Immediately return this expression instead of assigning it to the temporary variable \"success\".","line":398,"column":21,"nodeType":"AwaitExpression","messageId":"doImmediateAction","endLine":398,"endColumn":46,"fix":{"range":[14842,14988],"text":"// DO NOT NOTIFY LISTENERS - Only explicit reload should trigger notifications\r\n    return await this.saveSettings()"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":412,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":412,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15635,15745],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":421,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":421,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15917,15969],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":433,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":433,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16376,16456],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":463,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":463,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17396,17485],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":464,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":464,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17491,17580],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":467,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":467,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17609,17657],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":469,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":469,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17717,17773],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":472,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":472,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17803,17844],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":482,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":482,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18172,18229],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":487,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":487,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[18400,18468],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":499,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":499,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18819,18884],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":502,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":502,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18997,19061],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":509,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":509,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[19387,19453],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":518,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":518,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19680,19736],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":521,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":521,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19849,19900],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":528,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":528,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[20226,20295],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":578,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":578,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[21861,21912],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'provider' is assigned a value but never used.","line":385,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":385,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'model' is assigned a value but never used.","line":385,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":385,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":5,"fatalErrorCount":0,"warningCount":43,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\r\n\r\n// Import shared types\r\nimport type {\r\n  ChatSettings,\r\n  ProviderSettings,\r\n  ProvidersConfig,\r\n  MCPServerConfig,\r\n  AppSettings,\r\n  UISettings,\r\n  ColorSettings,\r\n  InternalCommandSettings\r\n} from '../types/settings';\r\nimport { serviceRegistry, SERVICE_NAMES, DebugLoggerInterface } from './serviceRegistry';\r\n\r\n// Re-export shared types for convenience\r\nexport type {\r\n  ChatSettings,\r\n  ProviderSettings,\r\n  ProvidersConfig,\r\n  MCPServerConfig,\r\n  AppSettings,\r\n  UISettings,\r\n  ColorSettings,\r\n  InternalCommandSettings\r\n};\r\n\r\nconst DEFAULT_SETTINGS: AppSettings = {\r\n  chat: {\r\n    provider: '', // Will be loaded from stateService\r\n    model: '', // Will be loaded from stateService\r\n    defaultModel: 'gpt-4-1106-preview',\r\n    defaultProvider: 'openai',\r\n    systemPrompt: '',\r\n    temperature: 0.3,\r\n    maxTokens: 8192,\r\n    toolCallingEnabled: false, // Disabled by default for security and user control\r\n    ragEnabled: false,\r\n    providers: {\r\n      openai: { lastSelectedModel: '' },\r\n      anthropic: { lastSelectedModel: '' },\r\n      gemini: { lastSelectedModel: '' },\r\n      mistral: { lastSelectedModel: '' },\r\n      deepseek: { lastSelectedModel: '' },\r\n      deepinfra: { lastSelectedModel: '' },\r\n      groq: { lastSelectedModel: '' },\r\n      lmstudio: { baseUrl: '', lastSelectedModel: '' },\r\n      jan: { baseUrl: '', lastSelectedModel: '' },\r\n      ollama: { baseUrl: '', lastSelectedModel: '' },\r\n      openrouter: { lastSelectedModel: '' },\r\n      requesty: { lastSelectedModel: '' },\r\n      replicate: { lastSelectedModel: '' },\r\n      n8n: { baseUrl: '', lastSelectedModel: '' },\r\n    },\r\n  },\r\n  mcpServers: [],\r\n  internalCommands: {\r\n    enabled: false, // Disabled by default for security\r\n    allowedDirectories: [\r\n      // Common safe directories for file operations\r\n      process.env.HOME || process.env.USERPROFILE || '~', // User home directory\r\n      process.cwd(), // Current working directory\r\n      ...(process.env.DESKTOP ? [process.env.DESKTOP] : []), // Desktop if available\r\n      ...(process.env.DOWNLOADS ? [process.env.DOWNLOADS] : []), // Downloads if available\r\n    ].filter(Boolean), // Remove any undefined values\r\n    blockedCommands: [\r\n      'rm', 'del', 'format', 'fdisk', 'mkfs', 'dd', 'sudo', 'su',\r\n      'chmod 777', 'chown', 'passwd', 'useradd', 'userdel', 'groupadd',\r\n      'systemctl', 'service', 'shutdown', 'reboot', 'halt', 'poweroff'\r\n    ],\r\n    fileReadLineLimit: 1000,\r\n    fileWriteLineLimit: 50,\r\n    defaultShell: process.platform === 'win32' ? 'powershell' : 'bash',\r\n    enabledCommands: {\r\n      terminal: true,\r\n      filesystem: true,\r\n      textEditing: true,\r\n      system: true,\r\n    },\r\n    terminalSettings: {\r\n      defaultTimeout: 30000, // 30 seconds\r\n      maxProcesses: 10,\r\n      allowInteractiveShells: true,\r\n    },\r\n  },\r\n  ui: {\r\n    theme: 'system',\r\n    alwaysOnTop: true,\r\n    startMinimized: false,\r\n    fontSize: 'small',\r\n    hotkey: 'CommandOrControl+Shift+A',\r\n    screenshotHotkey: 'CommandOrControl+Shift+S',\r\n    windowBounds: {\r\n      width: 400,\r\n      height: 615, // Increased by 15px for draggable header\r\n      x: undefined, // Let Electron choose initial position\r\n      y: undefined, // Let Electron choose initial position\r\n    },\r\n    // Required theme properties with defaults\r\n    useCustomColors: false,\r\n    selectedThemePreset: 'cyberpunk',\r\n    colorMode: 'preset',\r\n    customColors: {\r\n      background: '#0a0a0f',\r\n      foreground: '#e0e0ff',\r\n      card: '#1a1a2e',\r\n      cardForeground: '#ffffff',\r\n      primary: '#00d4ff',\r\n      primaryForeground: '#000000',\r\n      secondary: '#ff6b9d',\r\n      secondaryForeground: '#000000',\r\n      accent: '#00d4ff',\r\n      accentForeground: '#000000',\r\n      muted: '#16213e',\r\n      mutedForeground: '#9ca3af',\r\n      border: '#3b3b68',\r\n      input: '#1e1b2e',\r\n      ring: '#00d4ff',\r\n      destructive: '#f44747',\r\n      destructiveForeground: '#ffffff',\r\n      systemText: '#e0e0ff',\r\n    },\r\n    textToSpeech: {\r\n      enabled: false,\r\n      voice: '', // Will be set to first available voice\r\n      rate: 1.0,\r\n      pitch: 1.0,\r\n      volume: 0.8,\r\n      autoPlay: false,\r\n    }\r\n  },\r\n  shortcuts: {\r\n    toggleWindow: 'CommandOrControl+Shift+L',\r\n    processClipboard: 'CommandOrControl+Shift+V',\r\n    actionMenu: 'CommandOrControl+Shift+Space',\r\n    openShortcuts: 'CommandOrControl+Shift+K',\r\n  },\r\n  general: {\r\n    autoStartWithSystem: false,\r\n    showNotifications: true,\r\n    saveConversationHistory: true,\r\n    conversationHistoryLength: 10, // Default to last 10 messages\r\n    debugLogging: false, // Debug logging disabled by default\r\n  },\r\n};\r\n\r\nclass SettingsService {\r\n  private settings: AppSettings = {} as AppSettings; // Don't initialize with defaults\r\n  private listeners: Array<(settings: AppSettings) => void> = [];\r\n  private initialized = false;\r\n  private initializationPromise: Promise<void> | null = null;\r\n  private saveInProgress = false;\r\n\r\n\r\n  constructor() {\r\n    // Register with service registry to break circular dependencies\r\n    serviceRegistry.registerService(SERVICE_NAMES.SETTINGS_SERVICE, this);\r\n\r\n    // DO NOT initialize with defaults - wait for actual settings to load\r\n    // this.settings will be set in loadSettingsAsync()\r\n\r\n    // Start async initialization to prevent race conditions\r\n    this.initializationPromise = this.loadSettingsAsync();\r\n  }\r\n\r\n  private async loadSettingsAsync(): Promise<void> {\r\n    // Load settings from disk ONCE at startup\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      try {\r\n        console.log('Loading settings from disk...');\r\n        const savedSettings = await window.electronAPI.getSettings();\r\n\r\n        if (savedSettings) {\r\n          console.log('Settings loaded from disk:', savedSettings);\r\n\r\n          // Use saved settings directly without merging defaults to preserve user data\r\n          this.settings = savedSettings as AppSettings;\r\n\r\n          // Ensure essential structure exists without overriding user values\r\n          this.ensureEssentialStructure();\r\n\r\n          this.initialized = true;\r\n          this.notifyListeners();\r\n          console.log('✅ Settings loaded from file successfully');\r\n        } else {\r\n          console.log('🔧 No saved settings found - using defaults');\r\n          this.settings = { ...DEFAULT_SETTINGS };\r\n          this.initialized = true;\r\n          this.notifyListeners();\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ CRITICAL: Failed to load settings from disk:', error);\r\n        // Don't mask the error - let it propagate\r\n        this.initialized = false;\r\n        throw new Error(`Failed to load settings: ${error instanceof Error ? error.message : String(error)}`);\r\n      }\r\n    } else {\r\n      console.warn('⚠️ No Electron API available - settings will not persist');\r\n      this.settings = { ...DEFAULT_SETTINGS };\r\n      this.initialized = true;\r\n      this.notifyListeners();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensure essential structure exists without overriding user values\r\n   */\r\n  private ensureEssentialStructure() {\r\n    // Only add missing essential properties, never override existing ones\r\n    if (!this.settings.ui) {\r\n      this.settings.ui = { ...DEFAULT_SETTINGS.ui };\r\n    }\r\n    if (!this.settings.chat) {\r\n      this.settings.chat = { ...DEFAULT_SETTINGS.chat };\r\n    }\r\n    if (!this.settings.general) {\r\n      this.settings.general = { ...DEFAULT_SETTINGS.general };\r\n    }\r\n    if (!this.settings.shortcuts) {\r\n      this.settings.shortcuts = { ...DEFAULT_SETTINGS.shortcuts };\r\n    }\r\n    if (!this.settings.mcpServers) {\r\n      this.settings.mcpServers = [];\r\n    }\r\n    if (!this.settings.internalCommands) {\r\n      this.settings.internalCommands = { ...DEFAULT_SETTINGS.internalCommands };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update debug logger when debug setting changes\r\n   */\r\n  private updateDebugLogger() {\r\n    // Use service registry to avoid circular dependency\r\n    const debugLogger = serviceRegistry.getService<DebugLoggerInterface>(SERVICE_NAMES.DEBUG_LOGGER);\r\n    if (debugLogger && typeof debugLogger.refreshFromSettings === 'function') {\r\n      debugLogger.refreshFromSettings();\r\n      // No console output - this would create spam\r\n    }\r\n  }\r\n\r\n  // Save settings to JSON file via Electron with race condition protection\r\n  private async saveSettingsToFile(): Promise<boolean> {\r\n    // ALWAYS SAVE - No conditions that prevent saving\r\n    console.log('🔍 saveSettingsToFile called (ALWAYS SAVE mode)');\r\n    console.log('🔍 Settings to save:', JSON.stringify(this.settings, null, 2));\r\n\r\n    try {\r\n      // Always attempt to save, even if Electron API might not be available\r\n      if (typeof window !== 'undefined' && window.electronAPI?.updateAppSettings) {\r\n        console.log('🔍 Calling window.electronAPI.updateAppSettings...');\r\n        const success = await window.electronAPI.updateAppSettings(this.settings);\r\n        console.log('🔍 updateAppSettings returned:', success);\r\n\r\n        if (success) {\r\n          console.log('✅ Settings saved to JSON file successfully');\r\n          return true;\r\n        } else {\r\n          console.error('❌ Failed to save settings to JSON file - updateAppSettings returned false');\r\n          // Still return true to indicate we attempted the save (ALWAYS SAVE mode)\r\n          return true;\r\n        }\r\n      } else {\r\n        console.error('❌ Electron API or updateAppSettings not available, but continuing anyway (ALWAYS SAVE mode)');\r\n        // Return true to indicate we attempted the save (ALWAYS SAVE mode)\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error saving settings to file:', error);\r\n      // Still return true to indicate we attempted the save (ALWAYS SAVE mode)\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // Simple method that just calls the file save\r\n  private async saveSettings() {\r\n    return await this.saveSettingsToFile();\r\n  }\r\n\r\n  private notifyListeners() {\r\n    this.listeners.forEach(listener => listener(this.settings));\r\n\r\n    // Refresh debug logger state when settings change\r\n    const debugLogger = serviceRegistry.getService<DebugLoggerInterface>(SERVICE_NAMES.DEBUG_LOGGER);\r\n    if (debugLogger && typeof debugLogger.refreshFromSettings === 'function') {\r\n      debugLogger.refreshFromSettings();\r\n    }\r\n  }\r\n\r\n  getSettings(): AppSettings {\r\n    if (!this.initialized) {\r\n      // Wait for initialization instead of returning defaults\r\n      console.warn('⚠️ Settings not yet initialized, waiting...');\r\n      // Return current settings even if not fully initialized to prevent defaults\r\n      return { ...this.settings };\r\n    }\r\n    return { ...this.settings };\r\n  }\r\n\r\n  isInitialized(): boolean {\r\n    return this.initialized;\r\n  }\r\n\r\n  /**\r\n   * Wait for settings to be initialized\r\n   */\r\n  async waitForInitialization(): Promise<void> {\r\n    if (this.initializationPromise) {\r\n      await this.initializationPromise;\r\n    }\r\n  }\r\n\r\n  getChatSettings(): ChatSettings {\r\n    if (!this.initialized) {\r\n      // Wait for initialization instead of returning defaults\r\n      console.warn('⚠️ getChatSettings: Not initialized, returning current settings to preserve user data');\r\n      return { ...this.settings.chat };\r\n    }\r\n\r\n    // Ensure providers object exists for backward compatibility\r\n    const chatSettings = { ...this.settings.chat };\r\n    if (!chatSettings.providers) {\r\n      console.log('🔍 getChatSettings: No providers found, creating defaults');\r\n      chatSettings.providers = {\r\n        openai: { lastSelectedModel: '' },\r\n        anthropic: { lastSelectedModel: '' },\r\n        gemini: { lastSelectedModel: '' },\r\n        mistral: { lastSelectedModel: '' },\r\n        deepseek: { lastSelectedModel: '' },\r\n        deepinfra: { lastSelectedModel: '' },\r\n        groq: { lastSelectedModel: '' },\r\n        lmstudio: { baseUrl: '', lastSelectedModel: '' },\r\n        ollama: { baseUrl: '', lastSelectedModel: '' },\r\n        openrouter: { lastSelectedModel: '' },\r\n        requesty: { lastSelectedModel: '' },\r\n        replicate: { lastSelectedModel: '' },\r\n        n8n: { baseUrl: '', lastSelectedModel: '' },\r\n      };\r\n    } else {\r\n      // Clean up any legacy API keys that might still be in settings\r\n      Object.entries(chatSettings.providers).forEach(([provider, config]) => {\r\n        if ('apiKey' in config) {\r\n          console.log(`🔄 Removing legacy API key from settings for ${provider}`);\r\n          // Remove apiKey from the config object\r\n          const { apiKey, ...cleanConfig } = config as any;\r\n          chatSettings.providers[provider] = cleanConfig;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Ensure toolCallingEnabled exists for backward compatibility\r\n    if (chatSettings.toolCallingEnabled === undefined) {\r\n      chatSettings.toolCallingEnabled = true; // Default to enabled\r\n    }\r\n\r\n    return chatSettings;\r\n  }\r\n\r\n  // Update settings in memory only (for UI changes) - NO SAVE, NO NOTIFICATIONS\r\n  updateSettingsInMemory(updates: Partial<AppSettings>) {\r\n    this.settings = { ...this.settings, ...updates };\r\n    // DO NOT NOTIFY LISTENERS - PREVENTS INFINITE LOOPS\r\n  }\r\n\r\n  // Force update settings and notify all listeners (used by Reload Settings button)\r\n  forceUpdateSettings(newSettings: AppSettings) {\r\n    console.log('🔄 Force updating settings and notifying all listeners');\r\n    console.log('🔍 Old settings:', JSON.stringify(this.settings, null, 2));\r\n    console.log('🔍 New settings:', JSON.stringify(newSettings, null, 2));\r\n\r\n    // DON'T merge with defaults - use the new settings as-is to preserve user data\r\n    this.settings = { ...newSettings };\r\n    console.log('🔍 Updated settings (no default merge):', JSON.stringify(this.settings, null, 2));\r\n    console.log('🔍 Notifying', this.listeners.length, 'listeners');\r\n\r\n    this.notifyListeners();\r\n    console.log('✅ Settings force updated and all listeners notified');\r\n  }\r\n\r\n  // Update chat settings in memory only - NO SAVE, NO NOTIFICATIONS\r\n  // Excludes provider/model which are managed by stateService\r\n  updateChatSettingsInMemory(updates: Partial<ChatSettings>) {\r\n    // Extract provider/model from updates since they're managed separately\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const { provider, model, ...settingsUpdates } = updates;\r\n\r\n    // Only update non-provider/model settings in main settings\r\n    this.settings.chat = { ...this.settings.chat, ...settingsUpdates };\r\n\r\n    // DO NOT NOTIFY LISTENERS - PREVENTS INFINITE LOOPS\r\n    console.log('Settings updated in memory (excluding provider/model):', settingsUpdates);\r\n  }\r\n\r\n  // SAVE settings to JSON file - ONLY called when user clicks \"Save Settings\"\r\n  async saveSettingsToDisk(): Promise<boolean> {\r\n    // Clean settings before saving to prevent corruption\r\n    this.cleanCorruptedData();\r\n    const success = await this.saveSettings();\r\n    // DO NOT NOTIFY LISTENERS - Only explicit reload should trigger notifications\r\n    return success;\r\n  }\r\n\r\n  // Clean any corrupted data in settings\r\n  private cleanCorruptedData(): void {\r\n    const providerNames = ['OpenAI', 'Anthropic', 'Google Gemini', 'Mistral AI', 'DeepSeek', 'LM Studio', 'Ollama (Local)', 'OpenRouter', 'Requesty', 'Replicate'];\r\n\r\n    // Clean provider lastSelectedModel fields (provider/model are managed by stateService now)\r\n    if (this.settings.chat?.providers) {\r\n      Object.keys(this.settings.chat.providers).forEach(providerId => {\r\n        const provider = this.settings.chat.providers[providerId];\r\n        if (provider.lastSelectedModel && providerNames.includes(provider.lastSelectedModel)) {\r\n          console.log('Cleaning corrupted lastSelectedModel for provider', providerId, ':', provider.lastSelectedModel);\r\n          provider.lastSelectedModel = '';\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Force clean all corrupted data immediately\r\n  forceCleanCorruptedData(): void {\r\n    console.log('Force cleaning all corrupted data...');\r\n    this.cleanCorruptedData();\r\n    // DO NOT NOTIFY LISTENERS - Only explicit reload should trigger notifications\r\n  }\r\n\r\n  // Method for SettingsOverlay - SAVE TO DISK ONLY (no auto-reload)\r\n  async updateSettings(updates: Partial<AppSettings>): Promise<boolean> {\r\n    // Wait for initialization to complete\r\n    if (this.initializationPromise) {\r\n      await this.initializationPromise;\r\n    }\r\n\r\n    console.log('🔍 updateSettings called with:', JSON.stringify(updates, null, 2));\r\n\r\n    // API keys are now handled by secureApiKeyService, not in settings\r\n\r\n    // Update settings in memory with deep merge\r\n    const oldSettings = { ...this.settings };\r\n\r\n    // Deep merge for nested objects like ui, chat, etc.\r\n    this.settings = { ...this.settings, ...updates };\r\n\r\n    // Handle deep merge for ui object\r\n    if (updates.ui) {\r\n      this.settings.ui = { ...this.settings.ui, ...updates.ui };\r\n    }\r\n\r\n    // Handle deep merge for chat object\r\n    if (updates.chat) {\r\n      this.settings.chat = { ...this.settings.chat, ...updates.chat };\r\n\r\n      // Handle deep merge for providers\r\n      if (updates.chat.providers) {\r\n        this.settings.chat.providers = { ...this.settings.chat.providers, ...updates.chat.providers };\r\n      }\r\n    }\r\n\r\n    // Handle deep merge for general object\r\n    if (updates.general) {\r\n      this.settings.general = { ...this.settings.general, ...updates.general };\r\n    }\r\n\r\n    console.log('🔍 Settings updated in memory from:', JSON.stringify(oldSettings, null, 2));\r\n    console.log('🔍 Settings updated in memory to:', JSON.stringify(this.settings, null, 2));\r\n\r\n    // Save to disk\r\n    console.log('🔍 Calling saveSettingsToFile...');\r\n    const success = await this.saveSettingsToFile();\r\n    console.log('🔍 saveSettingsToFile returned:', success);\r\n\r\n    if (success) {\r\n      console.log('🔍 Notifying listeners...');\r\n\r\n      // Update debug logger immediately if debug setting changed\r\n      if (updates.general?.debugLogging !== undefined) {\r\n        this.updateDebugLogger();\r\n        // No console output - this would create spam\r\n      }\r\n\r\n      // Notify listeners immediately after successful save\r\n      this.notifyListeners();\r\n      console.log('✅ Settings updated and listeners notified');\r\n\r\n      // No auto-reload - settings are already updated in memory and saved to disk\r\n      // Components should use the current in-memory settings\r\n    } else {\r\n      console.error('❌ Failed to save settings, not notifying listeners');\r\n    }\r\n\r\n    return success;\r\n  }\r\n\r\n  // REMOVED: Automatic reload method - settings should only reload when explicitly requested\r\n\r\n  // Reload settings when MCP servers are enabled/disabled (explicit requirement)\r\n  async reloadForMCPChange(): Promise<void> {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      try {\r\n        console.log('🔄 Reloading settings due to MCP server change...');\r\n        const savedSettings = await window.electronAPI.getSettings();\r\n        if (savedSettings) {\r\n          console.log('Settings reloaded for MCP change:', savedSettings);\r\n          // Don't merge with defaults - use saved settings as-is to preserve user data\r\n          this.settings = { ...(savedSettings as AppSettings) };\r\n          this.ensureEssentialStructure(); // Only add missing structure, don't override\r\n          this.notifyListeners();\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to reload settings for MCP change:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Force reload settings from disk (useful after save operations)\r\n  async forceReloadFromDisk(): Promise<void> {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      try {\r\n        console.log('🔄 Force reloading settings from disk...');\r\n        const savedSettings = await window.electronAPI.getSettings();\r\n        if (savedSettings) {\r\n          console.log('✅ Settings force reloaded from disk');\r\n          // Don't merge with defaults - use saved settings as-is to preserve user data\r\n          this.settings = { ...(savedSettings as AppSettings) };\r\n          this.ensureEssentialStructure(); // Only add missing structure, don't override\r\n          this.notifyListeners();\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Failed to force reload settings from disk:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  async resetSettings() {\r\n    this.settings = { ...DEFAULT_SETTINGS };\r\n    await this.saveSettings();\r\n  }\r\n\r\n  subscribe(listener: (settings: AppSettings) => void) {\r\n    this.listeners.push(listener);\r\n    // Immediately call with current settings\r\n    listener(this.settings);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {\r\n      const index = this.listeners.indexOf(listener);\r\n      if (index > -1) {\r\n        this.listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  async exportSettings(): Promise<string> {\r\n    return JSON.stringify(this.settings, null, 2);\r\n  }\r\n\r\n  async importSettings(settingsJson: string): Promise<boolean> {\r\n    try {\r\n      const imported = JSON.parse(settingsJson);\r\n      \r\n      // Validate the imported settings structure\r\n      if (typeof imported === 'object' && imported !== null) {\r\n        // Merge with defaults to ensure all required fields exist\r\n        this.settings = {\r\n          chat: { ...DEFAULT_SETTINGS.chat, ...imported.chat },\r\n          ui: { ...DEFAULT_SETTINGS.ui, ...imported.ui },\r\n          shortcuts: { ...DEFAULT_SETTINGS.shortcuts, ...imported.shortcuts },\r\n          general: { ...DEFAULT_SETTINGS.general, ...imported.general },\r\n          mcpServers: imported.mcpServers || DEFAULT_SETTINGS.mcpServers,\r\n          internalCommands: { ...DEFAULT_SETTINGS.internalCommands, ...imported.internalCommands },\r\n        };\r\n        \r\n        await this.saveSettings();\r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    } catch (error) {\r\n      console.error('Failed to import settings:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Removed utility methods to prevent automatic saves\r\n  // All settings changes should go through the main updateSettings method\r\n  // which is only called when user clicks \"Save Settings\"\r\n\r\n  // Validation methods\r\n  validateApiKey(provider: string, apiKey: string): boolean {\r\n    if (!apiKey) return false;\r\n\r\n    switch (provider) {\r\n      case 'openai':\r\n        return apiKey.startsWith('sk-');\r\n      case 'anthropic':\r\n        return apiKey.startsWith('sk-ant-');\r\n      case 'gemini':\r\n        return apiKey.length > 20; // Google API keys are typically longer\r\n      case 'mistral':\r\n        return apiKey.length > 10; // Basic length check\r\n      case 'deepseek':\r\n        return apiKey.startsWith('sk-');\r\n      case 'lmstudio':\r\n        return true; // LM Studio doesn't require API key\r\n      case 'ollama':\r\n        return true; // Ollama doesn't require API key\r\n      case 'openrouter':\r\n        return apiKey.startsWith('sk-or-');\r\n      case 'replicate':\r\n        return apiKey.length > 10; // Basic length check\r\n      case 'n8n':\r\n        return true; // n8n doesn't require API key, uses webhook URL\r\n      default:\r\n        return apiKey.length > 0;\r\n    }\r\n  }\r\n\r\n  validateShortcut(shortcut: string): boolean {\r\n    // Basic validation for Electron shortcuts\r\n    const validModifiers = ['CommandOrControl', 'Alt', 'Shift', 'Super'];\r\n    const parts = shortcut.split('+');\r\n    \r\n    if (parts.length < 2) return false;\r\n    \r\n    const modifiers = parts.slice(0, -1);\r\n    const key = parts[parts.length - 1];\r\n    \r\n    // Check if all modifiers are valid\r\n    const hasValidModifier = modifiers.some(mod => validModifiers.includes(mod));\r\n    \r\n    // Check if key is valid (basic check)\r\n    const hasValidKey = key.length === 1 || ['F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'].includes(key);\r\n    \r\n    return hasValidModifier && hasValidKey;\r\n  }\r\n}\r\n\r\nexport const settingsService = new SettingsService();\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\stateService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1743,1870],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1910,1962],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3416,3471],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4618,4668],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Service for managing frequently-changing state data\r\n// Separate from main settings to avoid constant file writes\r\n\r\n// Type helper for accessing Electron API methods that might not be in the interface\r\ntype ElectronAPIWithStateFiles = {\r\n  getStateFile: (filename: string) => Promise<unknown>;\r\n  saveStateFile: (filename: string, data: unknown) => Promise<boolean>;\r\n};\r\n\r\nexport interface ProviderState {\r\n  currentProvider: string;\r\n  currentModel: string;\r\n  lastSelectedModels: Record<string, string>; // providerId -> modelId\r\n}\r\n\r\nexport interface MCPState {\r\n  enabledServers: string[];\r\n  connectedServers: string[];\r\n  lastToolsHash: Record<string, string>; // conversationId -> toolsHash\r\n}\r\n\r\nclass StateService {\r\n  private providerState: ProviderState = {\r\n    currentProvider: '',\r\n    currentModel: '',\r\n    lastSelectedModels: {}\r\n  };\r\n\r\n  private mcpState: MCPState = {\r\n    enabledServers: [],\r\n    connectedServers: [],\r\n    lastToolsHash: {}\r\n  };\r\n\r\n  private initialized = false;\r\n\r\n  constructor() {\r\n    this.loadState();\r\n  }\r\n\r\n  private async loadState() {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        // Load provider state\r\n        const providerData = await (window.electronAPI as unknown as ElectronAPIWithStateFiles).getStateFile('provider-state.json');\r\n        if (providerData) {\r\n          this.providerState = { ...this.providerState, ...providerData };\r\n        }\r\n\r\n        // Load MCP state\r\n        const mcpData = await (window.electronAPI as unknown as ElectronAPIWithStateFiles).getStateFile('mcp-state.json');\r\n        if (mcpData) {\r\n          this.mcpState = { ...this.mcpState, ...mcpData };\r\n        }\r\n\r\n        this.initialized = true;\r\n        console.log('State service initialized:', {\r\n          provider: this.providerState,\r\n          mcp: this.mcpState\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load state files:', error);\r\n      this.initialized = true; // Continue with defaults\r\n    }\r\n  }\r\n\r\n  // Provider State Management\r\n  getProviderState(): ProviderState {\r\n    return { ...this.providerState };\r\n  }\r\n\r\n  async updateProviderState(updates: Partial<ProviderState>) {\r\n    this.providerState = { ...this.providerState, ...updates };\r\n    await this.saveProviderState();\r\n  }\r\n\r\n  async setCurrentProvider(provider: string) {\r\n    this.providerState.currentProvider = provider;\r\n    await this.saveProviderState();\r\n  }\r\n\r\n  async setCurrentModel(model: string) {\r\n    this.providerState.currentModel = model;\r\n    \r\n    // Also update last selected model for current provider\r\n    if (this.providerState.currentProvider) {\r\n      this.providerState.lastSelectedModels[this.providerState.currentProvider] = model;\r\n    }\r\n    \r\n    await this.saveProviderState();\r\n  }\r\n\r\n  async setLastSelectedModel(providerId: string, modelId: string) {\r\n    this.providerState.lastSelectedModels[providerId] = modelId;\r\n    await this.saveProviderState();\r\n  }\r\n\r\n  getLastSelectedModel(providerId: string): string {\r\n    return this.providerState.lastSelectedModels[providerId] || '';\r\n  }\r\n\r\n  private async saveProviderState() {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        await (window.electronAPI as unknown as ElectronAPIWithStateFiles).saveStateFile('provider-state.json', this.providerState);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save provider state:', error);\r\n    }\r\n  }\r\n\r\n  // MCP State Management\r\n  getMCPState(): MCPState {\r\n    return { ...this.mcpState };\r\n  }\r\n\r\n  async updateMCPState(updates: Partial<MCPState>) {\r\n    this.mcpState = { ...this.mcpState, ...updates };\r\n    await this.saveMCPState();\r\n  }\r\n\r\n  async setEnabledServers(serverIds: string[]) {\r\n    this.mcpState.enabledServers = [...serverIds];\r\n    await this.saveMCPState();\r\n  }\r\n\r\n  async setConnectedServers(serverIds: string[]) {\r\n    this.mcpState.connectedServers = [...serverIds];\r\n    await this.saveMCPState();\r\n  }\r\n\r\n  async setToolsHashForConversation(conversationId: string, toolsHash: string) {\r\n    this.mcpState.lastToolsHash[conversationId] = toolsHash;\r\n    await this.saveMCPState();\r\n  }\r\n\r\n  getToolsHashForConversation(conversationId: string): string | null {\r\n    return this.mcpState.lastToolsHash[conversationId] || null;\r\n  }\r\n\r\n  private async saveMCPState() {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI) {\r\n        await (window.electronAPI as unknown as ElectronAPIWithStateFiles).saveStateFile('mcp-state.json', this.mcpState);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save MCP state:', error);\r\n    }\r\n  }\r\n\r\n  // Utility methods\r\n  isInitialized(): boolean {\r\n    return this.initialized;\r\n  }\r\n\r\n  async waitForInitialization(): Promise<void> {\r\n    if (this.initialized) return;\r\n    \r\n    return new Promise((resolve) => {\r\n      const checkInit = () => {\r\n        if (this.initialized) {\r\n          resolve();\r\n        } else {\r\n          setTimeout(checkInit, 50);\r\n        }\r\n      };\r\n      checkInit();\r\n    });\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const stateService = new StateService();\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\textToSpeechService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[771,820],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[941,989],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1768,1863],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2046,2093],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2292,2350],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2616,2719],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2800,3015],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3392,3432],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3439,3494],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3501,3556],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3563,3624],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3631,3684],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3747,3855],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4523,4587],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5363,5455],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6494,6591],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6642,6714],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"sonarjs/no-identical-functions","severity":2,"message":"Update this function so that its implementation is not identical to the one on line 197.","line":218,"column":49,"nodeType":null,"endLine":218,"endColumn":51},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":271,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":271,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9387,9427],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":275,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":275,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9472,9513],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9601,9655],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TextToSpeechSettings } from '../types/settings';\n\nexport interface TTSVoice {\n  name: string;\n  lang: string;\n  localService: boolean;\n  default: boolean;\n}\n\nexport class TextToSpeechService {\n  private synthesis: SpeechSynthesis;\n  private voices: SpeechSynthesisVoice[] = [];\n  private currentUtterance: SpeechSynthesisUtterance | null = null;\n  private settings: TextToSpeechSettings;\n  private onVoicesChangedCallback?: () => void;\n\n  constructor(settings: TextToSpeechSettings) {\n    this.synthesis = window.speechSynthesis;\n    this.settings = settings;\n\n    // Force initial voice loading\n    this.forceVoiceLoading();\n\n    // Listen for voices changed event (voices load asynchronously)\n    this.synthesis.addEventListener('voiceschanged', () => {\n      console.log('🔊 TTS: voiceschanged event fired');\n      this.loadVoices();\n      this.onVoicesChangedCallback?.();\n    });\n  }\n\n  private forceVoiceLoading(): void {\n    console.log('🔊 TTS: Forcing voice loading...');\n\n    // Multiple attempts to trigger voice loading\n    this.loadVoices();\n\n    // Method 1: Call getVoices multiple times\n    for (let i = 0; i < 3; i++) {\n      setTimeout(() => {\n        this.synthesis.getVoices();\n        this.loadVoices();\n      }, i * 50);\n    }\n\n    // Method 2: Create and cancel a dummy utterance to trigger voice loading\n    setTimeout(() => {\n      const dummy = new SpeechSynthesisUtterance('');\n      dummy.volume = 0;\n      this.synthesis.speak(dummy);\n      this.synthesis.cancel();\n      this.loadVoices();\n      this.onVoicesChangedCallback?.();\n    }, 200);\n\n    // Method 3: Periodic checks for voice loading\n    let attempts = 0;\n    const checkVoices = () => {\n      attempts++;\n      const currentVoices = this.synthesis.getVoices();\n      console.log(`🔊 TTS: Voice loading attempt ${attempts}, found ${currentVoices.length} voices`);\n\n      if (currentVoices.length > this.voices.length || attempts >= 10) {\n        this.loadVoices();\n        this.onVoicesChangedCallback?.();\n        if (attempts < 10) {\n          console.log('🔊 TTS: Voice loading completed');\n        }\n      } else {\n        setTimeout(checkVoices, 100);\n      }\n    };\n    setTimeout(checkVoices, 300);\n  }\n\n  private loadVoices(): void {\n    this.voices = this.synthesis.getVoices();\n    console.log('🔊 TTS: Loaded voices:', this.voices.length);\n\n    // Detect browser for voice availability info\n    const isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\n    const isEdge = /Edg/.test(navigator.userAgent);\n    const isElectron = /Electron/.test(navigator.userAgent);\n\n    console.log('🔊 TTS: Browser detection - Chrome:', isChrome, 'Edge:', isEdge, 'Electron:', isElectron);\n\n    // Log voice details for debugging\n    if (this.voices.length > 0) {\n      console.log('🔊 TTS: Available voices:', this.voices.map(v => ({\n        name: v.name,\n        lang: v.lang,\n        localService: v.localService,\n        default: v.default,\n        voiceURI: v.voiceURI\n      })));\n\n      // Count different voice types\n      const googleVoices = this.voices.filter(v =>\n        v.name.toLowerCase().includes('google') ||\n        v.voiceURI.toLowerCase().includes('google')\n      );\n      const remoteVoices = this.voices.filter(v => !v.localService);\n      const microsoftVoices = this.voices.filter(v => v.name.toLowerCase().includes('microsoft'));\n\n      console.log('🔊 TTS: Voice breakdown:');\n      console.log('  - Google voices:', googleVoices.length);\n      console.log('  - Remote voices:', remoteVoices.length);\n      console.log('  - Microsoft voices:', microsoftVoices.length);\n      console.log('  - Total voices:', this.voices.length);\n\n      if (googleVoices.length === 0 && isElectron) {\n        console.log('🔊 TTS: No Google voices found in Electron. Consider using Chrome browser for Google voices.');\n      }\n    }\n\n    // If no voice is set in settings, prefer Google voices, then any available voice\n    if (!this.settings.voice && this.voices.length > 0) {\n      // Try to find a Google voice first\n      const googleVoice = this.voices.find(v =>\n        v.name.toLowerCase().includes('google') && v.lang.startsWith('en')\n      );\n\n      // If no Google voice, try any remote (non-local) voice\n      const remoteVoice = this.voices.find(v => !v.localService && v.lang.startsWith('en'));\n\n      // Otherwise use the first available voice\n      const selectedVoice = googleVoice || remoteVoice || this.voices[0];\n      this.settings.voice = selectedVoice.name;\n      console.log('🔊 TTS: Auto-selected voice:', selectedVoice.name);\n    }\n  }\n\n  public getAvailableVoices(): TTSVoice[] {\n    return this.voices.map(voice => ({\n      name: voice.name,\n      lang: voice.lang,\n      localService: voice.localService,\n      default: voice.default\n    }));\n  }\n\n  public getGoogleVoices(): TTSVoice[] {\n    return this.getAvailableVoices().filter(voice =>\n      voice.name.toLowerCase().includes('google') ||\n      voice.name.toLowerCase().includes('chrome') ||\n      (!voice.localService && (\n        voice.name.toLowerCase().includes('en') ||\n        voice.lang.startsWith('en') ||\n        voice.name.toLowerCase().includes('neural') ||\n        voice.name.toLowerCase().includes('wavenet')\n      ))\n    );\n  }\n\n  public getHighQualityVoices(): TTSVoice[] {\n    const allVoices = this.getAvailableVoices();\n    console.log('🔊 TTS: Filtering high-quality voices from', allVoices.length, 'total voices');\n\n    // More inclusive filtering - include more voice types\n    const highQuality = allVoices.filter(voice => {\n      const name = voice.name.toLowerCase();\n      const isHighQuality =\n        name.includes('google') ||\n        name.includes('neural') ||\n        name.includes('wavenet') ||\n        name.includes('premium') ||\n        name.includes('enhanced') ||\n        name.includes('natural') ||\n        name.includes('studio') ||\n        name.includes('journey') ||\n        name.includes('news') ||\n        name.includes('polyglot') ||\n        (!voice.localService && voice.lang.startsWith('en')) ||\n        // Include Microsoft voices that are often high quality\n        (name.includes('microsoft') && (\n          name.includes('aria') ||\n          name.includes('guy') ||\n          name.includes('jenny') ||\n          name.includes('davis') ||\n          name.includes('jane') ||\n          name.includes('jason') ||\n          name.includes('nancy') ||\n          name.includes('tony')\n        ));\n\n      if (isHighQuality) {\n        console.log('🔊 TTS: High-quality voice found:', voice.name, '(local:', voice.localService, ')');\n      }\n\n      return isHighQuality;\n    });\n\n    console.log('🔊 TTS: Found', highQuality.length, 'high-quality voices');\n\n    return highQuality.sort((a, b) => {\n      // Sort by quality preference\n      const getQualityScore = (voice: TTSVoice) => {\n        const name = voice.name.toLowerCase();\n        if (name.includes('google')) return 100;\n        if (name.includes('neural')) return 90;\n        if (name.includes('wavenet')) return 85;\n        if (name.includes('premium')) return 80;\n        if (name.includes('enhanced')) return 75;\n        if (name.includes('natural')) return 70;\n        if (name.includes('aria') || name.includes('jenny')) return 65;\n        if (!voice.localService) return 60;\n        if (name.includes('microsoft')) return 55;\n        return 50;\n      };\n      return getQualityScore(b) - getQualityScore(a);\n    });\n  }\n\n  public getAllVoicesWithQualityInfo(): TTSVoice[] {\n    // Return all voices but sorted by quality\n    const allVoices = this.getAvailableVoices();\n    return allVoices.sort((a, b) => {\n      const getQualityScore = (voice: TTSVoice) => {\n        const name = voice.name.toLowerCase();\n        if (name.includes('google')) return 100;\n        if (name.includes('neural')) return 90;\n        if (name.includes('wavenet')) return 85;\n        if (name.includes('premium')) return 80;\n        if (name.includes('enhanced')) return 75;\n        if (name.includes('natural')) return 70;\n        if (name.includes('aria') || name.includes('jenny')) return 65;\n        if (!voice.localService) return 60;\n        if (name.includes('microsoft')) return 55;\n        return 50;\n      };\n      return getQualityScore(b) - getQualityScore(a);\n    });\n  }\n\n  public updateSettings(newSettings: TextToSpeechSettings): void {\n    this.settings = { ...newSettings };\n  }\n\n  public speak(text: string, options?: Partial<TextToSpeechSettings>): void {\n    if (!this.settings.enabled && !options) {\n      return;\n    }\n\n    // Stop any current speech\n    this.stop();\n\n    // Clean text for better speech synthesis\n    const cleanText = this.cleanTextForSpeech(text);\n    \n    if (!cleanText.trim()) {\n      return;\n    }\n\n    const utterance = new SpeechSynthesisUtterance(cleanText);\n    \n    // Apply settings\n    const effectiveSettings = { ...this.settings, ...options };\n    \n    // Find and set voice\n    const selectedVoice = this.voices.find(voice => voice.name === effectiveSettings.voice);\n    if (selectedVoice) {\n      utterance.voice = selectedVoice;\n    }\n    \n    utterance.rate = Math.max(0.1, Math.min(10, effectiveSettings.rate));\n    utterance.pitch = Math.max(0, Math.min(2, effectiveSettings.pitch));\n    utterance.volume = Math.max(0, Math.min(1, effectiveSettings.volume));\n\n    // Event handlers\n    utterance.onstart = () => {\n      console.log('🔊 TTS: Started speaking');\n    };\n\n    utterance.onend = () => {\n      console.log('🔊 TTS: Finished speaking');\n      this.currentUtterance = null;\n    };\n\n    utterance.onerror = (event) => {\n      console.error('🔊 TTS: Error occurred:', event.error);\n      this.currentUtterance = null;\n    };\n\n    this.currentUtterance = utterance;\n    this.synthesis.speak(utterance);\n  }\n\n  public stop(): void {\n    if (this.synthesis.speaking) {\n      this.synthesis.cancel();\n    }\n    this.currentUtterance = null;\n  }\n\n  public pause(): void {\n    if (this.synthesis.speaking && !this.synthesis.paused) {\n      this.synthesis.pause();\n    }\n  }\n\n  public resume(): void {\n    if (this.synthesis.paused) {\n      this.synthesis.resume();\n    }\n  }\n\n  public isSpeaking(): boolean {\n    return this.synthesis.speaking;\n  }\n\n  public isPaused(): boolean {\n    return this.synthesis.paused;\n  }\n\n  private cleanTextForSpeech(text: string): string {\n    return text\n      // Remove markdown formatting\n      .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Bold\n      .replace(/\\*(.*?)\\*/g, '$1') // Italic\n      .replace(/`(.*?)`/g, '$1') // Inline code\n      .replace(/```[\\s\\S]*?```/g, '[Code block]') // Code blocks\n      .replace(/#{1,6}\\s/g, '') // Headers\n      .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1') // Links\n      // Remove special characters that might cause issues\n      .replace(/[^\\w\\s.,!?;:'\"()-]/g, ' ')\n      // Clean up whitespace\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  public onVoicesChanged(callback: () => void): void {\n    this.onVoicesChangedCallback = callback;\n  }\n\n  public destroy(): void {\n    this.stop();\n    this.onVoicesChangedCallback = undefined;\n  }\n}\n\n// Singleton instance\nlet ttsServiceInstance: TextToSpeechService | null = null;\n\nconst getDefaultTTSSettings = (): TextToSpeechSettings => ({\n  enabled: false,\n  voice: '',\n  rate: 1.0,\n  pitch: 1.0,\n  volume: 0.8,\n  autoPlay: false,\n});\n\nexport const getTTSService = (settings?: TextToSpeechSettings): TextToSpeechService => {\n  const effectiveSettings = settings || getDefaultTTSSettings();\n\n  if (!ttsServiceInstance) {\n    ttsServiceInstance = new TextToSpeechService(effectiveSettings);\n  } else {\n    ttsServiceInstance.updateSettings(effectiveSettings);\n  }\n\n  return ttsServiceInstance;\n};\n\nexport const destroyTTSService = (): void => {\n  if (ttsServiceInstance) {\n    ttsServiceInstance.destroy();\n    ttsServiceInstance = null;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\services\\themeSyncService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[856,923],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1514,1590],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2181,2242],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2541,2622],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2684,2755],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Theme Synchronization Service\r\n * Ensures all windows stay synchronized with theme changes\r\n */\r\n\r\nexport interface ThemeData {\r\n  customColors: Record<string, string>;\r\n  useCustomColors: boolean;\r\n}\r\n\r\nclass ThemeSyncService {\r\n  private static instance: ThemeSyncService;\r\n  private listeners: Set<(themeData: ThemeData) => void> = new Set();\r\n\r\n  static getInstance(): ThemeSyncService {\r\n    if (!ThemeSyncService.instance) {\r\n      ThemeSyncService.instance = new ThemeSyncService();\r\n    }\r\n    return ThemeSyncService.instance;\r\n  }\r\n\r\n  /**\r\n   * Initialize theme sync service\r\n   */\r\n  initialize() {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      // Listen for theme changes from other windows\r\n      window.electronAPI.onThemeChange((themeData: { customColors: unknown; useCustomColors: boolean }) => {\r\n        console.log('ThemeSyncService: Received theme change:', themeData);\r\n        this.notifyListeners(themeData as ThemeData);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Broadcast theme change to all windows\r\n   */\r\n  async broadcastThemeChange(themeData: ThemeData) {\r\n    // Broadcasting theme change\r\n    \r\n    // Notify local listeners first\r\n    this.notifyListeners(themeData);\r\n    \r\n    // Broadcast to other windows via Electron IPC\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      try {\r\n        await window.electronAPI.notifyThemeChange(themeData);\r\n        // Successfully broadcasted theme change\r\n      } catch (error) {\r\n        console.error('ThemeSyncService: Failed to broadcast theme change:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a listener for theme changes\r\n   */\r\n  addListener(listener: (themeData: ThemeData) => void) {\r\n    this.listeners.add(listener);\r\n    return () => this.listeners.delete(listener);\r\n  }\r\n\r\n  /**\r\n   * Remove a listener\r\n   */\r\n  removeListener(listener: (themeData: ThemeData) => void) {\r\n    this.listeners.delete(listener);\r\n  }\r\n\r\n  /**\r\n   * Notify all local listeners\r\n   */\r\n  private notifyListeners(themeData: ThemeData) {\r\n    this.listeners.forEach(listener => {\r\n      try {\r\n        listener(themeData);\r\n      } catch (error) {\r\n        console.error('ThemeSyncService: Error in listener:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get current theme data from main window\r\n   */\r\n  async getCurrentTheme(): Promise<ThemeData | null> {\r\n    if (typeof window !== 'undefined' && window.electronAPI) {\r\n      try {\r\n        const themeData = await window.electronAPI.getCurrentTheme();\r\n        console.log('ThemeSyncService: Got current theme from main process:', themeData);\r\n        return themeData;\r\n      } catch (error) {\r\n        console.error('ThemeSyncService: Failed to get current theme:', error);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport const themeSyncService = ThemeSyncService.getInstance();\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\tests\\agentService.test.ts","messages":[{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 7 times.","line":13,"column":19,"nodeType":"Literal","endLine":13,"endColumn":32},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 10 times.","line":36,"column":13,"nodeType":"Literal","endLine":36,"endColumn":28},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 9 times.","line":67,"column":23,"nodeType":"Literal","endLine":67,"endColumn":35}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Tests for the Agent Service\nimport { agentService } from '../services/agentService';\nimport { CreateAgentRequest } from '../types/agent';\n\n// Mock the dependencies\njest.mock('../services/mcpService', () => ({\n  mcpService: {\n    getAvailableTools: jest.fn().mockResolvedValue([\n      {\n        name: 'test-tool',\n        description: 'Test tool',\n        category: 'mcp',\n        serverId: 'test-server',\n        enabled: true\n      }\n    ]),\n    getServers: jest.fn().mockResolvedValue([\n      {\n        id: 'test-server',\n        name: 'Test Server',\n        description: 'Test MCP Server'\n      }\n    ])\n  }\n}));\n\njest.mock('../services/llmService', () => ({\n  llmService: {\n    sendMessage: jest.fn().mockResolvedValue({\n      success: true,\n      content: 'Generated test prompt for the agent',\n      usage: { totalTokens: 100 }\n    }),\n    getProviders: jest.fn().mockResolvedValue([\n      {\n        id: 'test-provider',\n        name: 'Test Provider'\n      }\n    ])\n  }\n}));\n\n// Mock window.electronAPI\nObject.defineProperty(window, 'electronAPI', {\n  value: {\n    getStateFile: jest.fn().mockResolvedValue(null),\n    saveStateFile: jest.fn().mockResolvedValue(true)\n  },\n  writable: true\n});\n\ndescribe('AgentService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Agent CRUD Operations', () => {\n    test('should create a new agent', async () => {\n      const createRequest: CreateAgentRequest = {\n        name: 'Test Agent',\n        description: 'A test agent for unit testing',\n        icon: '🧪',\n        userDescription: 'This agent is for testing purposes',\n        selectedTools: ['test-tool'],\n        enabledMCPServers: ['test-server'],\n        defaultProvider: 'test-provider',\n        defaultModel: 'test-model',\n        temperature: 0.7,\n        maxTokens: 4000,\n        tags: ['test']\n      };\n\n      const agentId = await agentService.createAgent(createRequest);\n      \n      expect(agentId).toBeDefined();\n      expect(typeof agentId).toBe('string');\n    });\n\n    test('should retrieve all agents', async () => {\n      const agents = await agentService.getAgents();\n      \n      expect(Array.isArray(agents)).toBe(true);\n    });\n\n    test('should get agent by ID', async () => {\n      // First create an agent\n      const createRequest: CreateAgentRequest = {\n        name: 'Test Agent 2',\n        description: 'Another test agent',\n        icon: '🔬',\n        userDescription: 'This is another test agent',\n        selectedTools: [],\n        enabledMCPServers: [],\n        defaultProvider: 'test-provider',\n        defaultModel: 'test-model'\n      };\n\n      const agentId = await agentService.createAgent(createRequest);\n      const agent = await agentService.getAgent(agentId);\n      \n      expect(agent).toBeDefined();\n      expect(agent?.id).toBe(agentId);\n      expect(agent?.name).toBe('Test Agent 2');\n    });\n\n    test('should update an existing agent', async () => {\n      // First create an agent\n      const createRequest: CreateAgentRequest = {\n        name: 'Test Agent 3',\n        description: 'Agent to be updated',\n        icon: '⚗️',\n        userDescription: 'This agent will be updated',\n        selectedTools: [],\n        enabledMCPServers: [],\n        defaultProvider: 'test-provider',\n        defaultModel: 'test-model'\n      };\n\n      const agentId = await agentService.createAgent(createRequest);\n      \n      // Update the agent\n      const updateResult = await agentService.updateAgent({\n        id: agentId,\n        name: 'Updated Test Agent',\n        description: 'This agent has been updated'\n      });\n      \n      expect(updateResult).toBe(true);\n      \n      // Verify the update\n      const updatedAgent = await agentService.getAgent(agentId);\n      expect(updatedAgent?.name).toBe('Updated Test Agent');\n      expect(updatedAgent?.description).toBe('This agent has been updated');\n    });\n\n    test('should delete an agent', async () => {\n      // First create an agent\n      const createRequest: CreateAgentRequest = {\n        name: 'Agent to Delete',\n        description: 'This agent will be deleted',\n        icon: '🗑️',\n        userDescription: 'Temporary agent',\n        selectedTools: [],\n        enabledMCPServers: [],\n        defaultProvider: 'test-provider',\n        defaultModel: 'test-model'\n      };\n\n      const agentId = await agentService.createAgent(createRequest);\n      \n      // Delete the agent\n      const deleteResult = await agentService.deleteAgent(agentId);\n      expect(deleteResult).toBe(true);\n      \n      // Verify deletion\n      const deletedAgent = await agentService.getAgent(agentId);\n      expect(deletedAgent).toBeNull();\n    });\n\n    test('should duplicate an agent', async () => {\n      // First create an agent\n      const createRequest: CreateAgentRequest = {\n        name: 'Original Agent',\n        description: 'Agent to be duplicated',\n        icon: '📋',\n        userDescription: 'Original agent for duplication',\n        selectedTools: ['test-tool'],\n        enabledMCPServers: ['test-server'],\n        defaultProvider: 'test-provider',\n        defaultModel: 'test-model',\n        tags: ['original']\n      };\n\n      const originalId = await agentService.createAgent(createRequest);\n      \n      // Duplicate the agent\n      const duplicateId = await agentService.duplicateAgent(originalId, 'Duplicated Agent');\n      \n      expect(duplicateId).toBeDefined();\n      expect(duplicateId).not.toBe(originalId);\n      \n      // Verify the duplicate\n      const duplicate = await agentService.getAgent(duplicateId!);\n      expect(duplicate?.name).toBe('Duplicated Agent');\n      expect(duplicate?.description).toBe('Agent to be duplicated');\n      expect(duplicate?.selectedTools).toHaveLength(1);\n    });\n  });\n\n  describe('Agent Templates', () => {\n    test('should return available templates', async () => {\n      const templates = await agentService.getTemplates();\n      \n      expect(Array.isArray(templates)).toBe(true);\n      expect(templates.length).toBeGreaterThan(0);\n      \n      // Check for default templates\n      const documentAnalyst = templates.find(t => t.id === 'document-analyst');\n      expect(documentAnalyst).toBeDefined();\n      expect(documentAnalyst?.name).toBe('Document Analyst');\n    });\n  });\n\n  describe('Tool Management', () => {\n    test('should return available tools', async () => {\n      const tools = await agentService.getAvailableTools();\n      \n      expect(Array.isArray(tools)).toBe(true);\n      expect(tools.length).toBeGreaterThan(0);\n      \n      // Should include both MCP and internal tools\n      const mcpTool = tools.find(t => t.category === 'mcp');\n      const internalTool = tools.find(t => t.category === 'file');\n      \n      expect(mcpTool).toBeDefined();\n      expect(internalTool).toBeDefined();\n    });\n  });\n\n  describe('Prompt Generation', () => {\n    test('should generate a prompt for an agent', async () => {\n      const tools = await agentService.getAvailableTools();\n      \n      const response = await agentService.generatePrompt({\n        userDescription: 'Create an agent that helps with testing',\n        selectedTools: tools.slice(0, 2),\n        agentName: 'Test Helper',\n        agentDescription: 'Helps with testing tasks',\n        provider: 'test-provider',\n        model: 'test-model'\n      });\n      \n      expect(response.success).toBe(true);\n      expect(response.generatedPrompt).toBeDefined();\n      expect(typeof response.generatedPrompt).toBe('string');\n      expect(response.tokensUsed).toBe(100);\n    });\n  });\n\n  describe('Import/Export', () => {\n    test('should export an agent', async () => {\n      // First create an agent\n      const createRequest: CreateAgentRequest = {\n        name: 'Export Test Agent',\n        description: 'Agent for export testing',\n        icon: '📤',\n        userDescription: 'This agent will be exported',\n        selectedTools: ['test-tool'],\n        enabledMCPServers: ['test-server'],\n        defaultProvider: 'test-provider',\n        defaultModel: 'test-model',\n        tags: ['export', 'test']\n      };\n\n      const agentId = await agentService.createAgent(createRequest);\n      \n      // Export the agent\n      const exportData = await agentService.exportAgent(agentId);\n      \n      expect(exportData).toBeDefined();\n      expect(exportData?.agent.name).toBe('Export Test Agent');\n      expect(exportData?.requiredTools).toContain('test-tool');\n      expect(exportData?.requiredMCPServers).toContain('test-server');\n      expect(exportData?.exportVersion).toBe('1.0.0');\n    });\n\n    test('should import an agent', async () => {\n      const exportData = {\n        agent: {\n          name: 'Imported Agent',\n          description: 'Agent imported from JSON',\n          icon: '📥',\n          defaultProvider: 'test-provider',\n          defaultModel: 'test-model',\n          systemPrompt: 'You are an imported agent.',\n          userDescription: 'This agent was imported',\n          selectedTools: [],\n          toolCallingEnabled: true,\n          enabledMCPServers: [],\n          temperature: 0.7,\n          maxTokens: 4000,\n          version: '1.0.0',\n          tags: ['imported']\n        },\n        exportedAt: new Date().toISOString(),\n        exportVersion: '1.0.0',\n        requiredTools: [],\n        requiredMCPServers: []\n      };\n      \n      const result = await agentService.importAgent(exportData);\n      \n      expect(result.success).toBe(true);\n      expect(result.agentId).toBeDefined();\n      \n      // Verify the imported agent\n      const importedAgent = await agentService.getAgent(result.agentId!);\n      expect(importedAgent?.name).toBe('Imported Agent');\n      expect(importedAgent?.description).toBe('Agent imported from JSON');\n    });\n  });\n\n  describe('Agent Validation', () => {\n    test('should validate an agent configuration', async () => {\n      // First create an agent\n      const createRequest: CreateAgentRequest = {\n        name: 'Validation Test Agent',\n        description: 'Agent for validation testing',\n        icon: '✅',\n        userDescription: 'This agent will be validated',\n        selectedTools: ['test-tool'],\n        enabledMCPServers: ['test-server'],\n        defaultProvider: 'test-provider',\n        defaultModel: 'test-model'\n      };\n\n      const agentId = await agentService.createAgent(createRequest);\n      \n      // Validate the agent\n      const validation = await agentService.validateAgent(agentId);\n      \n      expect(validation).toBeDefined();\n      expect(typeof validation.isValid).toBe('boolean');\n      expect(Array.isArray(validation.errors)).toBe(true);\n      expect(Array.isArray(validation.warnings)).toBe(true);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\tests\\memorySystem.test.ts","messages":[{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":44,"column":16,"nodeType":"Literal","endLine":44,"endColumn":33},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":105,"column":46,"nodeType":"Literal","endLine":105,"endColumn":60},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":156,"column":16,"nodeType":"Literal","endLine":156,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":206,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":206,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6702,6748],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":215,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":215,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7040,7086],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":225,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":225,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7447,7491],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7633,7678],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test file for Memory System\n * This demonstrates how the memory system works and can be used for testing\n */\n\nimport { memoryService } from '../services/memoryService';\nimport { executeMemoryTool } from '../services/memoryMCPTools';\nimport { MemoryType, MemoryEntry, SearchResponse } from '../types/memory';\n\n// Mock Electron API for testing\nconst mockElectronAPI = {\n  loadMemoryIndex: jest.fn(),\n  saveMemoryIndex: jest.fn(),\n  loadMemoryEntry: jest.fn(),\n  saveMemoryEntry: jest.fn(),\n  deleteMemoryEntry: jest.fn(),\n  getMemoryStats: jest.fn()\n};\n\n// Setup mock for window.electronAPI\nObject.defineProperty(window, 'electronAPI', {\n  value: mockElectronAPI,\n  writable: true\n});\n\ndescribe('Memory System', () => {\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n    \n    // Setup default mock responses\n    mockElectronAPI.loadMemoryIndex.mockResolvedValue(null);\n    mockElectronAPI.saveMemoryIndex.mockResolvedValue(true);\n    mockElectronAPI.saveMemoryEntry.mockResolvedValue(true);\n    mockElectronAPI.loadMemoryEntry.mockResolvedValue(null);\n    mockElectronAPI.deleteMemoryEntry.mockResolvedValue(true);\n    mockElectronAPI.getMemoryStats.mockResolvedValue({ totalSize: 0, entryCount: 0 });\n  });\n\n  describe('Memory Service', () => {\n    test('should store a memory entry', async () => {\n      const request = {\n        type: 'user_preference' as MemoryType,\n        title: 'Test Preference',\n        content: 'User prefers dark theme',\n        tags: ['ui', 'theme'],\n        source: 'user_input'\n      };\n\n      const result = await memoryService.storeMemory(request);\n\n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      expect(result.data?.title).toBe('Test Preference');\n      expect(result.data?.type).toBe('user_preference');\n      expect(mockElectronAPI.saveMemoryEntry).toHaveBeenCalled();\n      expect(mockElectronAPI.saveMemoryIndex).toHaveBeenCalled();\n    });\n\n    test('should retrieve a memory entry', async () => {\n      const mockEntry = {\n        id: 'test-id',\n        type: 'user_preference',\n        title: 'Test Preference',\n        content: 'User prefers dark theme',\n        metadata: {\n          tags: ['ui', 'theme'],\n          timestamp: new Date().toISOString(),\n          accessCount: 0\n        },\n        searchableText: 'test preference user prefers dark theme ui theme',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      mockElectronAPI.loadMemoryEntry.mockResolvedValue(mockEntry);\n\n      const result = await memoryService.retrieveMemory({ id: 'test-id' });\n\n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      expect(result.data?.title).toBe('Test Preference');\n      expect(mockElectronAPI.loadMemoryEntry).toHaveBeenCalledWith('test-id');\n    });\n\n    test('should handle memory not found', async () => {\n      mockElectronAPI.loadMemoryEntry.mockResolvedValue(null);\n\n      const result = await memoryService.retrieveMemory({ id: 'non-existent' });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('not found');\n    });\n  });\n\n  describe('Memory MCP Tools', () => {\n    test('should execute memory-store tool', async () => {\n      const args = {\n        type: 'code_snippet',\n        title: 'React Component',\n        content: 'const MyComponent = () => <div>Hello</div>;',\n        tags: ['react', 'component']\n      };\n\n      const result = await executeMemoryTool('memory-store', args);\n\n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n    });\n\n    test('should execute memory-search tool', async () => {\n      // Mock index with some entries\n      const mockIndex = {\n        entries: [\n          {\n            id: 'test-1',\n            type: 'user_preference',\n            title: 'Dark Theme Preference',\n            tags: ['ui', 'theme'],\n            timestamp: new Date(),\n            fileSize: 100\n          }\n        ],\n        lastUpdated: new Date(),\n        totalEntries: 1,\n        version: '1.0.0'\n      };\n\n      mockElectronAPI.loadMemoryIndex.mockResolvedValue(mockIndex);\n\n      const args = {\n        text: 'theme',\n        limit: 10\n      };\n\n      const result = await executeMemoryTool('memory-search', args);\n\n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      expect((result.data as SearchResponse).results).toBeDefined();\n    });\n\n    test('should handle unknown memory tool', async () => {\n      const result = await executeMemoryTool('unknown-tool', {});\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Unknown memory tool');\n    });\n  });\n\n  describe('Memory Integration', () => {\n    test('should demonstrate complete workflow', async () => {\n      // 1. Store a memory\n      const storeResult = await executeMemoryTool('memory-store', {\n        type: 'project_knowledge',\n        title: 'LiteLLM Architecture',\n        content: 'LiteLLM uses Electron with Next.js frontend and TypeScript',\n        tags: ['architecture', 'electron', 'nextjs'],\n        projectId: 'littlellm'\n      });\n\n      expect(storeResult.success).toBe(true);\n      const memoryId = (storeResult.data as MemoryEntry)?.id;\n\n      // 2. Retrieve the memory\n      mockElectronAPI.loadMemoryEntry.mockResolvedValue({\n        id: memoryId,\n        type: 'project_knowledge',\n        title: 'LiteLLM Architecture',\n        content: 'LiteLLM uses Electron with Next.js frontend and TypeScript',\n        metadata: {\n          tags: ['architecture', 'electron', 'nextjs'],\n          timestamp: new Date().toISOString(),\n          projectId: 'littlellm',\n          accessCount: 0\n        },\n        searchableText: 'littlellm architecture electron nextjs typescript',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n\n      const retrieveResult = await executeMemoryTool('memory-retrieve', { id: memoryId });\n\n      expect(retrieveResult.success).toBe(true);\n      expect((retrieveResult.data as MemoryEntry)?.title).toBe('LiteLLM Architecture');\n\n      // 3. Update the memory\n      const updateResult = await executeMemoryTool('memory-update', {\n        id: memoryId,\n        content: 'LiteLLM uses Electron with Next.js frontend, TypeScript, and MCP integration'\n      });\n\n      expect(updateResult.success).toBe(true);\n\n      // 4. Delete the memory\n      const deleteResult = await executeMemoryTool('memory-delete', { id: memoryId });\n\n      expect(deleteResult.success).toBe(true);\n    });\n  });\n});\n\n// Example usage for manual testing\nexport const memorySystemExample = {\n  async demonstrateMemorySystem() {\n    console.log('🧠 Memory System Demonstration');\n\n    // Store user preference\n    const preference = await executeMemoryTool('memory-store', {\n      type: 'user_preference',\n      title: 'Preferred AI Model',\n      content: 'User prefers Claude 3.5 Sonnet for coding tasks',\n      tags: ['ai', 'model', 'preference', 'coding']\n    });\n    console.log('Stored preference:', preference);\n\n    // Store project knowledge\n    const knowledge = await executeMemoryTool('memory-store', {\n      type: 'project_knowledge',\n      title: 'Memory System Implementation',\n      content: 'Implemented JSON-based memory system with MCP tool integration',\n      tags: ['implementation', 'memory', 'mcp', 'json'],\n      projectId: 'littlellm-memory'\n    });\n    console.log('Stored knowledge:', knowledge);\n\n    // Search memories\n    const searchResult = await executeMemoryTool('memory-search', {\n      text: 'memory',\n      limit: 5\n    });\n    console.log('Search results:', searchResult);\n\n    return { preference, knowledge, searchResult };\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\tests\\settingsReloadBehavior.test.ts","messages":[{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":114,"column":19,"nodeType":"Literal","endLine":114,"endColumn":45},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":115,"column":29,"nodeType":"Literal","endLine":115,"endColumn":55}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { settingsService } from '../services/settingsService';\r\nimport { mcpService } from '../services/mcpService';\r\n\r\n// Mock window.electronAPI\r\nconst mockElectronAPI = {\r\n  getSettings: jest.fn(),\r\n  updateAppSettings: jest.fn(),\r\n  getMCPServers: jest.fn(),\r\n  updateMCPServer: jest.fn(),\r\n};\r\n\r\n// Mock window object\r\nObject.defineProperty(window, 'electronAPI', {\r\n  value: mockElectronAPI,\r\n  writable: true,\r\n});\r\n\r\ndescribe('Settings Reload Behavior', () => {\r\n  let notifyListenersSpy: jest.SpyInstance;\r\n  let reloadForMCPChangeSpy: jest.SpyInstance;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Spy on private methods\r\n    notifyListenersSpy = jest.spyOn(settingsService as unknown as { notifyListeners: () => void }, 'notifyListeners');\r\n    reloadForMCPChangeSpy = jest.spyOn(settingsService, 'reloadForMCPChange');\r\n    \r\n    // Mock default settings response\r\n    mockElectronAPI.getSettings.mockResolvedValue({\r\n      chat: {\r\n        provider: 'test',\r\n        model: 'test-model',\r\n        temperature: 0.3,\r\n        maxTokens: 8192,\r\n        systemPrompt: '',\r\n        toolCallingEnabled: true,\r\n        providers: {\r\n          openai: { apiKey: '', lastSelectedModel: '' },\r\n          anthropic: { apiKey: '', lastSelectedModel: '' },\r\n          gemini: { apiKey: '', lastSelectedModel: '' },\r\n          mistral: { apiKey: '', lastSelectedModel: '' },\r\n          deepseek: { apiKey: '', lastSelectedModel: '' },\r\n          lmstudio: { apiKey: '', baseUrl: '', lastSelectedModel: '' },\r\n          ollama: { apiKey: '', baseUrl: '', lastSelectedModel: '' },\r\n          openrouter: { apiKey: '', lastSelectedModel: '' },\r\n          requesty: { apiKey: '', lastSelectedModel: '' },\r\n          replicate: { apiKey: '', lastSelectedModel: '' },\r\n          n8n: { apiKey: '', baseUrl: '', lastSelectedModel: '' },\r\n        }\r\n      },\r\n      ui: {\r\n        theme: 'dark',\r\n        alwaysOnTop: true,\r\n        startMinimized: false,\r\n        opacity: 1.0,\r\n        fontSize: 'small',\r\n        windowBounds: {\r\n          width: 400,\r\n          height: 615\r\n        }\r\n      },\r\n      shortcuts: {\r\n        toggleWindow: 'Ctrl+L',\r\n        processClipboard: 'CommandOrControl+Shift+V',\r\n        actionMenu: 'CommandOrControl+Shift+Space'\r\n      },\r\n      general: {\r\n        autoStartWithSystem: false,\r\n        showNotifications: true,\r\n        saveConversationHistory: true,\r\n        conversationHistoryLength: 10\r\n      }\r\n    });\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  describe('Settings should ONLY reload under specific conditions', () => {\r\n    \r\n    test('1. Manual reload button should trigger reload', async () => {\r\n      // Simulate manual reload button click\r\n      await settingsService.forceUpdateSettings({\r\n        chat: {\r\n          provider: 'test',\r\n          model: 'test-model',\r\n          temperature: 0.3,\r\n          maxTokens: 8192,\r\n          systemPrompt: '',\r\n          toolCallingEnabled: true,\r\n          providers: {\r\n            openai: { lastSelectedModel: '' },\r\n            anthropic: { lastSelectedModel: '' },\r\n            gemini: { lastSelectedModel: '' },\r\n            mistral: { lastSelectedModel: '' },\r\n            deepseek: { lastSelectedModel: '' },\r\n            deepinfra: { lastSelectedModel: '' },\r\n            lmstudio: { baseUrl: '', lastSelectedModel: '' },\r\n            ollama: { baseUrl: '', lastSelectedModel: '' },\r\n            openrouter: { lastSelectedModel: '' },\r\n            requesty: { lastSelectedModel: '' },\r\n            groq: { lastSelectedModel: '' },\r\n            replicate: { lastSelectedModel: '' },\r\n            n8n: { baseUrl: '', lastSelectedModel: '' },\r\n          }\r\n        },\r\n        ui: {\r\n          theme: 'light',\r\n          alwaysOnTop: true,\r\n          startMinimized: false,\r\n          fontSize: 'small',\r\n          hotkey: 'CommandOrControl+Shift+A',\r\n          screenshotHotkey: 'CommandOrControl+Shift+S',\r\n          windowBounds: {\r\n            width: 400,\r\n            height: 615\r\n          }\r\n        },\r\n        shortcuts: {\r\n          toggleWindow: 'Ctrl+L',\r\n          processClipboard: 'CommandOrControl+Shift+V',\r\n          actionMenu: 'CommandOrControl+Shift+Space',\r\n          openShortcuts: 'CommandOrControl+Shift+K'\r\n        },\r\n        general: {\r\n          autoStartWithSystem: false,\r\n          showNotifications: true,\r\n          saveConversationHistory: true,\r\n          conversationHistoryLength: 10,\r\n          debugLogging: false\r\n        },\r\n        mcpServers: [],\r\n        internalCommands: {\r\n          enabled: false,\r\n          allowedDirectories: [],\r\n          blockedCommands: [],\r\n          fileReadLineLimit: 1000,\r\n          fileWriteLineLimit: 1000,\r\n          defaultShell: 'powershell',\r\n          enabledCommands: {\r\n            terminal: false,\r\n            filesystem: false,\r\n            textEditing: false,\r\n            system: false\r\n          },\r\n          terminalSettings: {\r\n            defaultTimeout: 30000,\r\n            maxProcesses: 5,\r\n            allowInteractiveShells: false\r\n          }\r\n        }\r\n      });\r\n\r\n      expect(notifyListenersSpy).toHaveBeenCalled();\r\n    });\r\n\r\n    test('2. MCP server enable/disable should trigger reload', async () => {\r\n      // Simulate MCP server enable/disable\r\n      await settingsService.reloadForMCPChange();\r\n\r\n      expect(mockElectronAPI.getSettings).toHaveBeenCalled();\r\n      expect(notifyListenersSpy).toHaveBeenCalled();\r\n    });\r\n\r\n    test('3. Save settings should trigger reload', async () => {\r\n      // Simulate settings save\r\n      const result = await settingsService.updateSettings({\r\n        ui: {\r\n          theme: 'light',\r\n          alwaysOnTop: true,\r\n          startMinimized: false,\r\n          fontSize: 'small',\r\n          hotkey: 'CommandOrControl+Shift+A',\r\n          screenshotHotkey: 'CommandOrControl+Shift+S',\r\n          windowBounds: {\r\n            width: 400,\r\n            height: 615\r\n          }\r\n        }\r\n      });\r\n\r\n      expect(result).toBe(true);\r\n      expect(mockElectronAPI.updateAppSettings).toHaveBeenCalled();\r\n      expect(notifyListenersSpy).toHaveBeenCalled();\r\n    });\r\n\r\n    test('4. updateSettingsInMemory should NOT trigger reload', () => {\r\n      // This should NOT notify listeners\r\n      settingsService.updateSettingsInMemory({\r\n        ui: {\r\n          theme: 'light',\r\n          alwaysOnTop: true,\r\n          startMinimized: false,\r\n          fontSize: 'small',\r\n          hotkey: 'CommandOrControl+Shift+A',\r\n          screenshotHotkey: 'CommandOrControl+Shift+S',\r\n          windowBounds: {\r\n            width: 400,\r\n            height: 615\r\n          }\r\n        }\r\n      });\r\n\r\n      expect(notifyListenersSpy).not.toHaveBeenCalled();\r\n    });\r\n\r\n    test('5. getSettings should NOT trigger reload', () => {\r\n      // Simple getter should not trigger reload\r\n      const settings = settingsService.getSettings();\r\n\r\n      expect(settings).toBeDefined();\r\n      expect(notifyListenersSpy).not.toHaveBeenCalled();\r\n    });\r\n\r\n    test('6. subscribe should NOT trigger reload', () => {\r\n      // Adding a listener should not trigger reload\r\n      const mockListener = jest.fn();\r\n      const unsubscribe = settingsService.subscribe(mockListener);\r\n\r\n      expect(notifyListenersSpy).not.toHaveBeenCalled();\r\n\r\n      // Clean up\r\n      unsubscribe();\r\n    });\r\n\r\n    test('7. unsubscribe should NOT trigger reload', () => {\r\n      // Removing a listener should not trigger reload\r\n      const mockListener = jest.fn();\r\n      const unsubscribe = settingsService.subscribe(mockListener);\r\n      unsubscribe();\r\n\r\n      expect(notifyListenersSpy).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('MCP Server Changes Integration', () => {\r\n    \r\n    test('MCP dropdown toggle should call reloadForMCPChange', async () => {\r\n      // Mock MCP service methods\r\n      jest.spyOn(mcpService, 'updateServer').mockResolvedValue(true);\r\n      \r\n      // Simulate MCP server toggle in dropdown\r\n      await mcpService.updateServer('test-server', { enabled: true });\r\n      \r\n      // This should be called by the UI component\r\n      await settingsService.reloadForMCPChange();\r\n\r\n      expect(reloadForMCPChangeSpy).toHaveBeenCalled();\r\n      expect(mockElectronAPI.getSettings).toHaveBeenCalled();\r\n    });\r\n\r\n    test('MCP settings overlay toggle should call reloadForMCPChange', async () => {\r\n      // Mock MCP service methods\r\n      jest.spyOn(mcpService, 'updateServer').mockResolvedValue(true);\r\n      \r\n      // Simulate MCP server toggle in settings overlay\r\n      await mcpService.updateServer('test-server', { enabled: false });\r\n      \r\n      // This should be called by the SettingsOverlay component\r\n      await settingsService.reloadForMCPChange();\r\n\r\n      expect(reloadForMCPChangeSpy).toHaveBeenCalled();\r\n      expect(mockElectronAPI.getSettings).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    \r\n    test('reloadForMCPChange should handle API errors gracefully', async () => {\r\n      mockElectronAPI.getSettings.mockRejectedValue(new Error('API Error'));\r\n\r\n      // Should not throw\r\n      await expect(settingsService.reloadForMCPChange()).resolves.not.toThrow();\r\n    });\r\n\r\n    test('updateSettings should handle save errors gracefully', async () => {\r\n      mockElectronAPI.updateAppSettings.mockResolvedValue(false);\r\n\r\n      const result = await settingsService.updateSettings({\r\n        ui: {\r\n          theme: 'light',\r\n          alwaysOnTop: true,\r\n          startMinimized: false,\r\n          fontSize: 'small',\r\n          hotkey: 'CommandOrControl+Shift+A',\r\n          screenshotHotkey: 'CommandOrControl+Shift+S',\r\n          windowBounds: {\r\n            width: 400,\r\n            height: 615\r\n          }\r\n        }\r\n      });\r\n\r\n      expect(result).toBe(false);\r\n      expect(notifyListenersSpy).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\types\\agent.ts","messages":[{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":194,"column":19,"nodeType":"Literal","endLine":194,"endColumn":45},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 7 times.","line":204,"column":22,"nodeType":"Literal","endLine":204,"endColumn":34},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 4 times.","line":208,"column":19,"nodeType":"Literal","endLine":208,"endColumn":40},{"ruleId":"sonarjs/no-duplicate-string","severity":2,"message":"Define a constant instead of duplicating this literal 3 times.","line":218,"column":35,"nodeType":"Literal","endLine":218,"endColumn":47}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Agent system type definitions for LittleLLM\n\nexport interface AgentTool {\n  name: string;\n  description: string;\n  category: 'internal' | 'mcp' | 'memory' | 'web' | 'file' | 'system';\n  serverId?: string; // For MCP tools\n  enabled: boolean;\n  inputSchema?: Record<string, unknown>;\n}\n\nexport interface AgentConfiguration {\n  id: string;\n  name: string;\n  description: string;\n  icon?: string; // Icon identifier or emoji\n  \n  // LLM Configuration\n  defaultProvider: string;\n  defaultModel: string;\n  \n  // System Prompt\n  systemPrompt: string;\n  generatedPrompt?: string; // The AI-generated specialized prompt\n  userDescription?: string; // Original user description used for generation\n  \n  // Tool Configuration\n  selectedTools: AgentTool[];\n  toolCallingEnabled: boolean;\n  \n  // MCP Configuration\n  enabledMCPServers: string[]; // Server IDs to enable for this agent\n  \n  // Runtime Settings\n  temperature?: number;\n  maxTokens?: number;\n  \n  // Metadata\n  createdAt: Date;\n  updatedAt: Date;\n  version: string;\n  tags?: string[];\n  isTemplate?: boolean; // For predefined templates\n}\n\nexport interface AgentTemplate {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  category: 'document' | 'web' | 'development' | 'research' | 'general';\n  \n  // Template configuration\n  suggestedTools: string[]; // Tool names to pre-select\n  suggestedMCPServers: string[]; // MCP server IDs to pre-enable\n  promptTemplate: string; // Template for generating the system prompt\n  \n  // Default settings\n  defaultProvider?: string;\n  defaultModel?: string;\n  temperature?: number;\n  maxTokens?: number;\n}\n\nexport interface AgentData {\n  agents: AgentConfiguration[];\n  templates: AgentTemplate[];\n  version: string;\n  lastUpdated: string;\n}\n\nexport interface CreateAgentRequest {\n  name: string;\n  description: string;\n  icon?: string;\n  userDescription: string; // Natural language description for prompt generation\n  selectedTools: string[]; // Tool names\n  enabledMCPServers: string[]; // Server IDs\n  defaultProvider: string;\n  defaultModel: string;\n  temperature?: number;\n  maxTokens?: number;\n  tags?: string[];\n}\n\nexport interface UpdateAgentRequest {\n  id: string;\n  name?: string;\n  description?: string;\n  icon?: string;\n  userDescription?: string;\n  selectedTools?: string[];\n  enabledMCPServers?: string[];\n  defaultProvider?: string;\n  defaultModel?: string;\n  systemPrompt?: string;\n  temperature?: number;\n  maxTokens?: number;\n  tags?: string[];\n}\n\nexport interface AgentRuntimeConfig {\n  agent: AgentConfiguration;\n  availableTools: AgentTool[];\n  connectedMCPServers: string[];\n  providerModels: Record<string, string[]>;\n}\n\n// Agent execution context for chat sessions\nexport interface AgentChatContext {\n  agentId: string;\n  agentName: string;\n  systemPrompt: string;\n  enabledTools: string[];\n  enabledMCPServers: string[];\n  provider: string;\n  model: string;\n  temperature: number;\n  maxTokens: number;\n  toolCallingEnabled: boolean;\n}\n\n// Agent import/export format\nexport interface AgentExport {\n  agent: Omit<AgentConfiguration, 'id' | 'createdAt' | 'updatedAt'>;\n  exportedAt: string;\n  exportVersion: string;\n  requiredTools: string[];\n  requiredMCPServers: string[];\n}\n\nexport interface AgentImportResult {\n  success: boolean;\n  agentId?: string;\n  warnings?: string[];\n  errors?: string[];\n  missingTools?: string[];\n  missingMCPServers?: string[];\n}\n\n// Prompt generation request/response\nexport interface PromptGenerationRequest {\n  userDescription: string;\n  selectedTools: AgentTool[];\n  agentName: string;\n  agentDescription: string;\n  provider: string;\n  model: string;\n}\n\nexport interface PromptGenerationResponse {\n  success: boolean;\n  generatedPrompt?: string;\n  error?: string;\n  tokensUsed?: number;\n}\n\n// Agent statistics and analytics\nexport interface AgentUsageStats {\n  agentId: string;\n  totalChats: number;\n  totalMessages: number;\n  totalToolCalls: number;\n  lastUsed: Date;\n  averageResponseTime?: number;\n  mostUsedTools: Array<{ toolName: string; count: number }>;\n}\n\n// Agent validation results\nexport interface AgentValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  missingDependencies: {\n    providers: string[];\n    models: string[];\n    tools: string[];\n    mcpServers: string[];\n  };\n}\n\n// Default agent templates\nexport const DEFAULT_AGENT_TEMPLATES: AgentTemplate[] = [\n  {\n    id: 'document-analyst',\n    name: 'Document Analyst',\n    description: 'Specialized for analyzing, summarizing, and extracting insights from documents',\n    icon: '📄',\n    category: 'document',\n    suggestedTools: ['file-read', 'pdf-parse', 'document-search', 'knowledge-base-search'],\n    suggestedMCPServers: [],\n    promptTemplate: 'You are a specialized document analysis agent. Your primary role is to help users analyze, summarize, and extract insights from various types of documents including PDFs, Word documents, spreadsheets, and text files.',\n    defaultProvider: 'anthropic',\n    defaultModel: 'claude-3-sonnet-20240229',\n    temperature: 0.3,\n    maxTokens: 4000\n  },\n  {\n    id: 'web-researcher',\n    name: 'Web Researcher',\n    description: 'Expert at web browsing, searching, and gathering information from online sources',\n    icon: '🌐',\n    category: 'web',\n    suggestedTools: ['web-search', 'web-browse', 'url-fetch'],\n    suggestedMCPServers: ['web-search', 'browser-automation'],\n    promptTemplate: 'You are a specialized web research agent. Your expertise lies in efficiently searching the web, browsing websites, and gathering comprehensive information from online sources.',\n    defaultProvider: 'openai',\n    defaultModel: 'gpt-4-turbo-preview',\n    temperature: 0.4,\n    maxTokens: 4000\n  },\n  {\n    id: 'code-assistant',\n    name: 'Code Assistant',\n    description: 'Specialized for software development, code review, and programming assistance',\n    icon: '💻',\n    category: 'development',\n    suggestedTools: ['file-read', 'file-write', 'code-execute', 'git-operations'],\n    suggestedMCPServers: ['github', 'filesystem'],\n    promptTemplate: 'You are a specialized software development agent. Your role is to assist with coding tasks, code review, debugging, and providing programming guidance across multiple languages and frameworks.',\n    defaultProvider: 'anthropic',\n    defaultModel: 'claude-3-sonnet-20240229',\n    temperature: 0.2,\n    maxTokens: 6000\n  },\n  {\n    id: 'data-analyst',\n    name: 'Data Analyst',\n    description: 'Expert at analyzing data, creating visualizations, and generating insights',\n    icon: '📊',\n    category: 'research',\n    suggestedTools: ['file-read', 'csv-parse', 'data-visualization', 'statistical-analysis'],\n    suggestedMCPServers: [],\n    promptTemplate: 'You are a specialized data analysis agent. Your expertise includes statistical analysis, data visualization, pattern recognition, and generating actionable insights from datasets.',\n    defaultProvider: 'openai',\n    defaultModel: 'gpt-4-turbo-preview',\n    temperature: 0.3,\n    maxTokens: 4000\n  },\n  {\n    id: 'creative-writer',\n    name: 'Creative Writer',\n    description: 'Specialized in creative writing, storytelling, and content creation',\n    icon: '✍️',\n    category: 'general',\n    suggestedTools: ['file-write', 'web-search', 'memory-store'],\n    suggestedMCPServers: [],\n    promptTemplate: 'You are a specialized creative writing agent. Your role is to assist with creative writing projects, storytelling, content creation, and helping users develop their writing skills.',\n    defaultProvider: 'anthropic',\n    defaultModel: 'claude-3-sonnet-20240229',\n    temperature: 0.8,\n    maxTokens: 6000\n  },\n  {\n    id: 'business-analyst',\n    name: 'Business Analyst',\n    description: 'Expert at business analysis, strategy, and market research',\n    icon: '📈',\n    category: 'research',\n    suggestedTools: ['web-search', 'document-search', 'data-visualization', 'memory-store'],\n    suggestedMCPServers: ['web-search'],\n    promptTemplate: 'You are a specialized business analysis agent. Your expertise includes market research, competitive analysis, business strategy, and financial analysis.',\n    defaultProvider: 'openai',\n    defaultModel: 'gpt-4-turbo-preview',\n    temperature: 0.4,\n    maxTokens: 4000\n  },\n  {\n    id: 'technical-writer',\n    name: 'Technical Writer',\n    description: 'Specialized in creating technical documentation and guides',\n    icon: '📝',\n    category: 'document',\n    suggestedTools: ['file-read', 'file-write', 'web-search', 'code-execute'],\n    suggestedMCPServers: ['github'],\n    promptTemplate: 'You are a specialized technical writing agent. Your role is to create clear, comprehensive technical documentation, user guides, API documentation, and help users communicate complex technical concepts effectively.',\n    defaultProvider: 'anthropic',\n    defaultModel: 'claude-3-sonnet-20240229',\n    temperature: 0.3,\n    maxTokens: 5000\n  },\n  {\n    id: 'customer-support',\n    name: 'Customer Support',\n    description: 'Expert at providing helpful customer service and support',\n    icon: '🎧',\n    category: 'general',\n    suggestedTools: ['knowledge-base-search', 'memory-recall', 'web-search'],\n    suggestedMCPServers: [],\n    promptTemplate: 'You are a specialized customer support agent. Your role is to provide helpful, empathetic, and efficient customer service, troubleshoot issues, and ensure customer satisfaction.',\n    defaultProvider: 'openai',\n    defaultModel: 'gpt-4-turbo-preview',\n    temperature: 0.5,\n    maxTokens: 3000\n  }\n];\n","usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\types\\electron.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\types\\internalCommands.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\types\\memory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\types\\rtf-parser.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\types\\settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\utils\\iconMapping.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"Z:\\Python\\AI Assistant\\littlellm\\src\\utils\\storage.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":21,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[732,789],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1134,1191],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1388,1454],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1485,1545],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[1850,1902],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2166,2218],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2446,2501],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2623,2678],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2837,2892],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[2955,3013],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3373,3411],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3647,3681],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3740,3791],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3802,3860],"text":""},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_value' is defined but never used.","line":89,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":36,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Storage abstraction layer that uses Electron storage when available,\r\n * falls back to localStorage, and provides a no-op implementation when neither is available\r\n */\r\n\r\ninterface StorageAPI {\r\n  getItem(key: string): Promise<string | null>;\r\n  setItem(key: string, value: string): Promise<void>;\r\n  removeItem(key: string): Promise<void>;\r\n}\r\n\r\nclass ElectronStorage implements StorageAPI {\r\n  async getItem(key: string): Promise<string | null> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI?.getStorageItem) {\r\n        const value = await window.electronAPI.getStorageItem(key);\r\n        return value ? JSON.stringify(value) : null;\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Electron storage getItem failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async setItem(key: string, value: string): Promise<void> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.electronAPI?.setStorageItem) {\r\n        const parsedValue = JSON.parse(value);\r\n        await window.electronAPI.setStorageItem(key, parsedValue);\r\n      }\r\n    } catch (error) {\r\n      console.error('Electron storage setItem failed:', error);\r\n    }\r\n  }\r\n\r\n  async removeItem(key: string): Promise<void> {\r\n    try {\r\n      // Note: Electron API doesn't have removeStorageItem method\r\n      // This is a no-op for Electron storage\r\n      console.warn('Electron storage removeItem not implemented:', key);\r\n    } catch (error) {\r\n      console.error('Electron storage removeItem failed:', error);\r\n    }\r\n  }\r\n}\r\n\r\nclass LocalStorage implements StorageAPI {\r\n  async getItem(key: string): Promise<string | null> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.localStorage) {\r\n        return window.localStorage.getItem(key);\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.warn('localStorage getItem failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async setItem(key: string, value: string): Promise<void> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.localStorage) {\r\n        window.localStorage.setItem(key, value);\r\n      }\r\n    } catch (error) {\r\n      console.warn('localStorage setItem failed:', error);\r\n    }\r\n  }\r\n\r\n  async removeItem(key: string): Promise<void> {\r\n    try {\r\n      if (typeof window !== 'undefined' && window.localStorage) {\r\n        window.localStorage.removeItem(key);\r\n      }\r\n    } catch (error) {\r\n      console.warn('localStorage removeItem failed:', error);\r\n    }\r\n  }\r\n}\r\n\r\nclass NoOpStorage implements StorageAPI {\r\n  async getItem(key: string): Promise<string | null> {\r\n    console.warn('No storage available for getItem:', key);\r\n    return null;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  async setItem(key: string, _value: string): Promise<void> {\r\n    console.warn('No storage available for setItem:', key);\r\n  }\r\n\r\n  async removeItem(key: string): Promise<void> {\r\n    console.warn('No storage available for removeItem:', key);\r\n  }\r\n}\r\n\r\n// Create storage instance based on availability\r\nfunction createStorage(): StorageAPI {\r\n  // During SSR, always use no-op storage\r\n  if (typeof window === 'undefined') {\r\n    return new NoOpStorage();\r\n  }\r\n\r\n  // Check if we're in Electron environment\r\n  if (window.electronAPI && typeof window.electronAPI.getStorageItem === 'function') {\r\n    console.log('Using Electron storage');\r\n    return new ElectronStorage();\r\n  }\r\n\r\n  // Check if localStorage is available\r\n  try {\r\n    const testKey = '__storage_test__';\r\n    window.localStorage.setItem(testKey, 'test');\r\n    window.localStorage.removeItem(testKey);\r\n    console.log('Using localStorage');\r\n    return new LocalStorage();\r\n  } catch (error) {\r\n    console.warn('localStorage not available:', error);\r\n  }\r\n\r\n  console.warn('No storage available, using no-op storage');\r\n  return new NoOpStorage();\r\n}\r\n\r\n// Export singleton storage instance\r\nexport const storage = createStorage();\r\n\r\n// Convenience functions that match localStorage API\r\nexport const getStorageItem = (key: string) => storage.getItem(key);\r\nexport const setStorageItem = (key: string, value: string) => storage.setItem(key, value);\r\nexport const removeStorageItem = (key: string) => storage.removeItem(key);\r\n","usedDeprecatedRules":[]}]