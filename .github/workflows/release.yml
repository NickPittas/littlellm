name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Validate Release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if version contains alpha, beta, rc, etc.
            if [[ "$VERSION" =~ (alpha|beta|rc|dev|pre) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è Release version: $VERSION"
          echo "üîñ Pre-release: $IS_PRERELEASE"
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          echo "‚úÖ Version format is valid"
      
      - name: Check if tag exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag -l | grep -q "^$VERSION$"; then
            echo "‚ö†Ô∏è Tag $VERSION already exists"
          else
            echo "‚úÖ Tag $VERSION is new"
          fi

  # Job 2: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [validate]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run linting
        run: npm run lint
      
      - name: Type checking
        run: npx tsc --noEmit

  # Job 3: Build Release Artifacts
  build:
    name: Build Release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [validate, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Build Electron app
        run: npm run electron:build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            dist/
            build/
          retention-days: 30

  # Job 4: Create Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, test, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          echo "üìù Generating changelog for $VERSION..."
          
          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "$VERSION" | head -1)
          
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using initial commit"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Comparing $PREV_TAG..HEAD"
          
          # Generate changelog
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          git log --pretty=format:"- %s (%h)" "$PREV_TAG..HEAD" >> CHANGELOG.md
          
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...$VERSION" >> CHANGELOG.md
          
          # Set output for release body
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: Release ${{ needs.validate.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}
      
      - name: Upload Linux artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-artifacts/build-ubuntu-latest/
          asset_name: littlellm-linux.zip
          asset_content_type: application/zip
        continue-on-error: true
      
      - name: Upload Windows artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-artifacts/build-windows-latest/
          asset_name: littlellm-windows.zip
          asset_content_type: application/zip
        continue-on-error: true
      
      - name: Upload macOS artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-artifacts/build-macos-latest/
          asset_name: littlellm-macos.zip
          asset_content_type: application/zip
        continue-on-error: true

  # Job 5: Post-Release Tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: always() && needs.release.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Update version in package.json
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          # Remove 'v' prefix for package.json
          PACKAGE_VERSION="${VERSION#v}"
          
          echo "üìù Updating package.json version to $PACKAGE_VERSION"
          npm version "$PACKAGE_VERSION" --no-git-tag-version
      
      - name: Create version bump PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ needs.validate.outputs.version }}"
          title: "chore: bump version to ${{ needs.validate.outputs.version }}"
          body: |
            Automated version bump after release ${{ needs.validate.outputs.version }}
            
            This PR updates the package.json version to match the released version.
          branch: version-bump-${{ needs.validate.outputs.version }}
          delete-branch: true
      
      - name: Notify success
        run: |
          echo "üéâ Release ${{ needs.validate.outputs.version }} completed successfully!"
          echo "üì¶ Artifacts uploaded to GitHub Release"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}"

  # Job 6: Notify Failure
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [validate, test, build, release]
    if: always() && (needs.validate.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' || needs.release.result == 'failure')
    
    steps:
      - name: Notify failure
        run: |
          echo "‚ùå Release process failed!"
          echo "Validation: ${{ needs.validate.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Release: ${{ needs.release.result }}"
          
          echo "Please check the workflow logs for details."
          exit 1
